// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_define.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PB {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* fairy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fairy_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroTrainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroTrainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRankDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRankDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_rank_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_rank_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_server_role_rank_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_server_role_rank_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormationProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEquipmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEquipmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Formation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Formation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFBChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFBChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteMapEnemyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteMapEnemyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteFBChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteFBChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwakenShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwakenShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FairyShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FairyShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreMatchShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreMatchShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSpiritInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSpiritInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRebelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRebelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleAchievemntInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleAchievemntInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGuildSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGuildSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSignInData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSignInData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YCSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YCSData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TQTData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TQTData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayTargetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayTargetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleActivityData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_5fdefine_2eproto() {
  protobuf_AddDesc_data_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data_define.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_num_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Equipment_descriptor_ = file->message_type(1);
  static const int Equipment_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, enhance_cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_cost_item_list_),
  };
  Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment));
  Treasure_descriptor_ = file->message_type(2);
  static const int Treasure_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, enhance_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, refine_level_),
  };
  Treasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_descriptor_,
      Treasure::default_instance_,
      Treasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure));
  fairy_descriptor_ = file->message_type(3);
  static const int fairy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, break_level_),
  };
  fairy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fairy_descriptor_,
      fairy::default_instance_,
      fairy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fairy));
  HeroTrainData_descriptor_ = file->message_type(4);
  static const int HeroTrainData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, tmp_pro_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, reward_flag_),
  };
  HeroTrainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroTrainData_descriptor_,
      HeroTrainData::default_instance_,
      HeroTrainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroTrainData));
  Hero_descriptor_ = file->message_type(5);
  static const int Hero_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, break_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_cost_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_gold_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
  MonsterData_descriptor_ = file->message_type(6);
  static const int MonsterData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, total_hp_),
  };
  MonsterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterData_descriptor_,
      MonsterData::default_instance_,
      MonsterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterData));
  ArenaRankData_descriptor_ = file->message_type(7);
  static const int ArenaRankData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, history_rank_),
  };
  ArenaRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRankData_descriptor_,
      ArenaRankData::default_instance_,
      ArenaRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRankData));
  ArenaRankDataList_descriptor_ = file->message_type(8);
  static const int ArenaRankDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, rank_list_),
  };
  ArenaRankDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRankDataList_descriptor_,
      ArenaRankDataList::default_instance_,
      ArenaRankDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRankDataList));
  role_rank_data_descriptor_ = file->message_type(9);
  static const int role_rank_data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, value_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, update_time_),
  };
  role_rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_rank_data_descriptor_,
      role_rank_data::default_instance_,
      role_rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_rank_data));
  role_rank_list_descriptor_ = file->message_type(10);
  static const int role_rank_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, rank_list_),
  };
  role_rank_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_rank_list_descriptor_,
      role_rank_list::default_instance_,
      role_rank_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_rank_list));
  all_server_role_rank_list_descriptor_ = file->message_type(11);
  static const int all_server_role_rank_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, all_rank_list_),
  };
  all_server_role_rank_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_server_role_rank_list_descriptor_,
      all_server_role_rank_list::default_instance_,
      all_server_role_rank_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_server_role_rank_list));
  GuildRankData_descriptor_ = file->message_type(12);
  static const int GuildRankData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, update_time_),
  };
  GuildRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRankData_descriptor_,
      GuildRankData::default_instance_,
      GuildRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRankData));
  Property_descriptor_ = file->message_type(13);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  FormationProperty_descriptor_ = file->message_type(14);
  static const int FormationProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, pro_list_),
  };
  FormationProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationProperty_descriptor_,
      FormationProperty::default_instance_,
      FormationProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationProperty));
  GuideData_descriptor_ = file->message_type(15);
  static const int GuideData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, value_),
  };
  GuideData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideData_descriptor_,
      GuideData::default_instance_,
      GuideData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideData));
  RoleBaseInfo_descriptor_ = file->message_type(16);
  static const int RoleBaseInfo_offsets_[40] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, daily_init_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, head_image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, riot_suppress_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, hero_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, god_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, fairy_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, arena_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, tower_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, wanted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, rebel_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, cur_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, world_boss_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guild_fb_reward_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, total_online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, login_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_stamina_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_energy_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_wanted_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, formation_pro_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, once_flag_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, duobao_peace_over_time_),
  };
  RoleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBaseInfo_descriptor_,
      RoleBaseInfo::default_instance_,
      RoleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBaseInfo));
  RoleEquipmentInfo_descriptor_ = file->message_type(17);
  static const int RoleEquipmentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, equipment_list_),
  };
  RoleEquipmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEquipmentInfo_descriptor_,
      RoleEquipmentInfo::default_instance_,
      RoleEquipmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEquipmentInfo));
  Formation_descriptor_ = file->message_type(18);
  static const int Formation_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, equipment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, treasure_list_),
  };
  Formation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Formation_descriptor_,
      Formation::default_instance_,
      Formation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Formation));
  RoleHeroInfo_descriptor_ = file->message_type(19);
  static const int RoleHeroInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, normal_free_summon_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, normal_free_summon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, high_free_summon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, high_summon_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, hero_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, collection_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, reinforcement_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, formation_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, train_times_),
  };
  RoleHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroInfo_descriptor_,
      RoleHeroInfo::default_instance_,
      RoleHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroInfo));
  RoleTreasureInfo_descriptor_ = file->message_type(20);
  static const int RoleTreasureInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, treasure_list_),
  };
  RoleTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTreasureInfo_descriptor_,
      RoleTreasureInfo::default_instance_,
      RoleTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTreasureInfo));
  RoleItemInfo_descriptor_ = file->message_type(21);
  static const int RoleItemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, item_list_),
  };
  RoleItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleItemInfo_descriptor_,
      RoleItemInfo::default_instance_,
      RoleItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleItemInfo));
  EmailContext_descriptor_ = file->message_type(22);
  static const int EmailContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, text_),
  };
  EmailContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailContext_descriptor_,
      EmailContext::default_instance_,
      EmailContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailContext));
  EmailInfo_descriptor_ = file->message_type(23);
  static const int EmailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, receive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, context_list_),
  };
  EmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailInfo_descriptor_,
      EmailInfo::default_instance_,
      EmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailInfo));
  RoleEmailInfo_descriptor_ = file->message_type(24);
  static const int RoleEmailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, email_list_),
  };
  RoleEmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEmailInfo_descriptor_,
      RoleEmailInfo::default_instance_,
      RoleEmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEmailInfo));
  MapData_descriptor_ = file->message_type(25);
  static const int MapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, is_get_reward_),
  };
  MapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapData_descriptor_,
      MapData::default_instance_,
      MapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapData));
  ChapterData_descriptor_ = file->message_type(26);
  static const int ChapterData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, star_reward_list_),
  };
  ChapterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterData_descriptor_,
      ChapterData::default_instance_,
      ChapterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterData));
  MainFBData_descriptor_ = file->message_type(27);
  static const int MainFBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, chapter_list_),
  };
  MainFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainFBData_descriptor_,
      MainFBData::default_instance_,
      MainFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainFBData));
  HeroMapData_descriptor_ = file->message_type(28);
  static const int HeroMapData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, is_get_reward_),
  };
  HeroMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroMapData_descriptor_,
      HeroMapData::default_instance_,
      HeroMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroMapData));
  HeroFBChapter_descriptor_ = file->message_type(29);
  static const int HeroFBChapter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, is_pass_extra_map_),
  };
  HeroFBChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroFBChapter_descriptor_,
      HeroFBChapter::default_instance_,
      HeroFBChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroFBChapter));
  HeroFBData_descriptor_ = file->message_type(30);
  static const int HeroFBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, chapter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, battle_times_),
  };
  HeroFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroFBData_descriptor_,
      HeroFBData::default_instance_,
      HeroFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroFBData));
  DailyFBData_descriptor_ = file->message_type(31);
  static const int DailyFBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, chapter_list_),
  };
  DailyFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyFBData_descriptor_,
      DailyFBData::default_instance_,
      DailyFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyFBData));
  EliteMapEnemyData_descriptor_ = file->message_type(32);
  static const int EliteMapEnemyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, monster_list_),
  };
  EliteMapEnemyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteMapEnemyData_descriptor_,
      EliteMapEnemyData::default_instance_,
      EliteMapEnemyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteMapEnemyData));
  EliteFBChapter_descriptor_ = file->message_type(33);
  static const int EliteFBChapter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, star_reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, enemy_data_),
  };
  EliteFBChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteFBChapter_descriptor_,
      EliteFBChapter::default_instance_,
      EliteFBChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteFBChapter));
  EliteFBData_descriptor_ = file->message_type(34);
  static const int EliteFBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, chapter_list_),
  };
  EliteFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteFBData_descriptor_,
      EliteFBData::default_instance_,
      EliteFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteFBData));
  TowerFBData_descriptor_ = file->message_type(35);
  static const int TowerFBData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, map_star_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, map_level_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, keep_best_star_passed_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, select_pro_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, is_buy_star_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, star_goods_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, is_need_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, today_reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, cur_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, star_max_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, elite_map_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, elite_map_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, buy_elite_map_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, rand_pro_idx_list_),
  };
  TowerFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerFBData_descriptor_,
      TowerFBData::default_instance_,
      TowerFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerFBData));
  RoleFBInfo_descriptor_ = file->message_type(36);
  static const int RoleFBInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, main_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, hero_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, daily_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, tower_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, elite_fb_data_),
  };
  RoleFBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFBInfo_descriptor_,
      RoleFBInfo::default_instance_,
      RoleFBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFBInfo));
  ShopGoods_descriptor_ = file->message_type(37);
  static const int ShopGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, goods_num_),
  };
  ShopGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopGoods_descriptor_,
      ShopGoods::default_instance_,
      ShopGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopGoods));
  HeroShopData_descriptor_ = file->message_type(38);
  static const int HeroShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, free_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, cost_refresh_times_),
  };
  HeroShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroShopData_descriptor_,
      HeroShopData::default_instance_,
      HeroShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroShopData));
  GuildShopData_descriptor_ = file->message_type(39);
  static const int GuildShopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, reward_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, item_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, limit_goods_buy_record_),
  };
  GuildShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildShopData_descriptor_,
      GuildShopData::default_instance_,
      GuildShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildShopData));
  MallShopData_descriptor_ = file->message_type(40);
  static const int MallShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, item_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, gift_buy_record_),
  };
  MallShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallShopData_descriptor_,
      MallShopData::default_instance_,
      MallShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallShopData));
  TowerShopData_descriptor_ = file->message_type(41);
  static const int TowerShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, buy_record_),
  };
  TowerShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerShopData_descriptor_,
      TowerShopData::default_instance_,
      TowerShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerShopData));
  ArenaShopData_descriptor_ = file->message_type(42);
  static const int ArenaShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, buy_record_),
  };
  ArenaShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaShopData_descriptor_,
      ArenaShopData::default_instance_,
      ArenaShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaShopData));
  AwakenShopData_descriptor_ = file->message_type(43);
  static const int AwakenShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, free_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, cost_refresh_times_),
  };
  AwakenShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AwakenShopData_descriptor_,
      AwakenShopData::default_instance_,
      AwakenShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AwakenShopData));
  FairyShopData_descriptor_ = file->message_type(44);
  static const int FairyShopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, used_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, last_auto_refresh_time_),
  };
  FairyShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FairyShopData_descriptor_,
      FairyShopData::default_instance_,
      FairyShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FairyShopData));
  ScoreMatchShopData_descriptor_ = file->message_type(45);
  static const int ScoreMatchShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, buy_record_),
  };
  ScoreMatchShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreMatchShopData_descriptor_,
      ScoreMatchShopData::default_instance_,
      ScoreMatchShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreMatchShopData));
  SevenDayShopData_descriptor_ = file->message_type(46);
  static const int SevenDayShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, buy_record_),
  };
  SevenDayShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayShopData_descriptor_,
      SevenDayShopData::default_instance_,
      SevenDayShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayShopData));
  RoleShopInfo_descriptor_ = file->message_type(47);
  static const int RoleShopInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, hero_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, guild_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, mall_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, tower_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, arena_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, awaken_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, fairy_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, score_match_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, seven_day_shop_),
  };
  RoleShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleShopInfo_descriptor_,
      RoleShopInfo::default_instance_,
      RoleShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleShopInfo));
  RoleSpiritInfo_descriptor_ = file->message_type(48);
  static const int RoleSpiritInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, level_),
  };
  RoleSpiritInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSpiritInfo_descriptor_,
      RoleSpiritInfo::default_instance_,
      RoleSpiritInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSpiritInfo));
  FriendData_descriptor_ = file->message_type(49);
  static const int FriendData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, is_give_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, get_energy_state_),
  };
  FriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendData_descriptor_,
      FriendData::default_instance_,
      FriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendData));
  RoleFriendData_descriptor_ = file->message_type(50);
  static const int RoleFriendData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, black_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, get_energy_times_),
  };
  RoleFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFriendData_descriptor_,
      RoleFriendData::default_instance_,
      RoleFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFriendData));
  RoleRebelInfo_descriptor_ = file->message_type(51);
  static const int RoleRebelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, rebel_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, today_exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, today_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, reward_get_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, is_already_share_),
  };
  RoleRebelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRebelInfo_descriptor_,
      RoleRebelInfo::default_instance_,
      RoleRebelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRebelInfo));
  AchievementData_descriptor_ = file->message_type(52);
  static const int AchievementData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, cur_reward_level_),
  };
  AchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementData_descriptor_,
      AchievementData::default_instance_,
      AchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementData));
  RoleAchievemntInfo_descriptor_ = file->message_type(53);
  static const int RoleAchievemntInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, achievement_list_),
  };
  RoleAchievemntInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleAchievemntInfo_descriptor_,
      RoleAchievemntInfo::default_instance_,
      RoleAchievemntInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleAchievemntInfo));
  DailyMission_descriptor_ = file->message_type(54);
  static const int DailyMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, is_get_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, value_),
  };
  DailyMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyMission_descriptor_,
      DailyMission::default_instance_,
      DailyMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyMission));
  RoleDailyMissionInfo_descriptor_ = file->message_type(55);
  static const int RoleDailyMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, point_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, mission_list_),
  };
  RoleDailyMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyMissionInfo_descriptor_,
      RoleDailyMissionInfo::default_instance_,
      RoleDailyMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyMissionInfo));
  SkillData_descriptor_ = file->message_type(56);
  static const int SkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, level_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  RoleGuildSkillInfo_descriptor_ = file->message_type(57);
  static const int RoleGuildSkillInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, skill_list_),
  };
  RoleGuildSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGuildSkillInfo_descriptor_,
      RoleGuildSkillInfo::default_instance_,
      RoleGuildSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGuildSkillInfo));
  RoleSignInData_descriptor_ = file->message_type(58);
  static const int RoleSignInData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, cur_sign_in_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, last_sign_in_time_),
  };
  RoleSignInData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSignInData_descriptor_,
      RoleSignInData::default_instance_,
      RoleSignInData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSignInData));
  RewardData_descriptor_ = file->message_type(59);
  static const int RewardData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, reward_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, text_),
  };
  RewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardData_descriptor_,
      RewardData::default_instance_,
      RewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardData));
  RoleRewardData_descriptor_ = file->message_type(60);
  static const int RoleRewardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, reward_list_),
  };
  RoleRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRewardData_descriptor_,
      RoleRewardData::default_instance_,
      RoleRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRewardData));
  YCSData_descriptor_ = file->message_type(61);
  static const int YCSData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, today_get_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, total_get_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, total_reward_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, last_get_time_),
  };
  YCSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YCSData_descriptor_,
      YCSData::default_instance_,
      YCSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YCSData));
  TQTData_descriptor_ = file->message_type(62);
  static const int TQTData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, last_get_time_),
  };
  TQTData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TQTData_descriptor_,
      TQTData::default_instance_,
      TQTData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TQTData));
  SevenDayTargetData_descriptor_ = file->message_type(63);
  static const int SevenDayTargetData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, is_get_reward_),
  };
  SevenDayTargetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayTargetData_descriptor_,
      SevenDayTargetData::default_instance_,
      SevenDayTargetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayTargetData));
  RoleActivityData_descriptor_ = file->message_type(64);
  static const int RoleActivityData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, tqt_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, ycs_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, seven_day_target_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, completion_reward_record_list_),
  };
  RoleActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleActivityData_descriptor_,
      RoleActivityData::default_instance_,
      RoleActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleActivityData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_descriptor_, &Treasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fairy_descriptor_, &fairy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroTrainData_descriptor_, &HeroTrainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterData_descriptor_, &MonsterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRankData_descriptor_, &ArenaRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRankDataList_descriptor_, &ArenaRankDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_rank_data_descriptor_, &role_rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_rank_list_descriptor_, &role_rank_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_server_role_rank_list_descriptor_, &all_server_role_rank_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRankData_descriptor_, &GuildRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationProperty_descriptor_, &FormationProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideData_descriptor_, &GuideData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBaseInfo_descriptor_, &RoleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEquipmentInfo_descriptor_, &RoleEquipmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Formation_descriptor_, &Formation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroInfo_descriptor_, &RoleHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTreasureInfo_descriptor_, &RoleTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleItemInfo_descriptor_, &RoleItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailContext_descriptor_, &EmailContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailInfo_descriptor_, &EmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEmailInfo_descriptor_, &RoleEmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapData_descriptor_, &MapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterData_descriptor_, &ChapterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainFBData_descriptor_, &MainFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroMapData_descriptor_, &HeroMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroFBChapter_descriptor_, &HeroFBChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroFBData_descriptor_, &HeroFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyFBData_descriptor_, &DailyFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteMapEnemyData_descriptor_, &EliteMapEnemyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteFBChapter_descriptor_, &EliteFBChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteFBData_descriptor_, &EliteFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerFBData_descriptor_, &TowerFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFBInfo_descriptor_, &RoleFBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopGoods_descriptor_, &ShopGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroShopData_descriptor_, &HeroShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildShopData_descriptor_, &GuildShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallShopData_descriptor_, &MallShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerShopData_descriptor_, &TowerShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaShopData_descriptor_, &ArenaShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AwakenShopData_descriptor_, &AwakenShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FairyShopData_descriptor_, &FairyShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreMatchShopData_descriptor_, &ScoreMatchShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayShopData_descriptor_, &SevenDayShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleShopInfo_descriptor_, &RoleShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSpiritInfo_descriptor_, &RoleSpiritInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendData_descriptor_, &FriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFriendData_descriptor_, &RoleFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRebelInfo_descriptor_, &RoleRebelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementData_descriptor_, &AchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleAchievemntInfo_descriptor_, &RoleAchievemntInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyMission_descriptor_, &DailyMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyMissionInfo_descriptor_, &RoleDailyMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGuildSkillInfo_descriptor_, &RoleGuildSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSignInData_descriptor_, &RoleSignInData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardData_descriptor_, &RewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRewardData_descriptor_, &RoleRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YCSData_descriptor_, &YCSData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TQTData_descriptor_, &TQTData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayTargetData_descriptor_, &SevenDayTargetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleActivityData_descriptor_, &RoleActivityData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_5fdefine_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Equipment::default_instance_;
  delete Equipment_reflection_;
  delete Treasure::default_instance_;
  delete Treasure_reflection_;
  delete fairy::default_instance_;
  delete fairy_reflection_;
  delete HeroTrainData::default_instance_;
  delete HeroTrainData_reflection_;
  delete Hero::default_instance_;
  delete Hero_reflection_;
  delete MonsterData::default_instance_;
  delete MonsterData_reflection_;
  delete ArenaRankData::default_instance_;
  delete ArenaRankData_reflection_;
  delete ArenaRankDataList::default_instance_;
  delete ArenaRankDataList_reflection_;
  delete role_rank_data::default_instance_;
  delete role_rank_data_reflection_;
  delete role_rank_list::default_instance_;
  delete role_rank_list_reflection_;
  delete all_server_role_rank_list::default_instance_;
  delete all_server_role_rank_list_reflection_;
  delete GuildRankData::default_instance_;
  delete GuildRankData_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete FormationProperty::default_instance_;
  delete FormationProperty_reflection_;
  delete GuideData::default_instance_;
  delete GuideData_reflection_;
  delete RoleBaseInfo::default_instance_;
  delete RoleBaseInfo_reflection_;
  delete RoleEquipmentInfo::default_instance_;
  delete RoleEquipmentInfo_reflection_;
  delete Formation::default_instance_;
  delete Formation_reflection_;
  delete RoleHeroInfo::default_instance_;
  delete RoleHeroInfo_reflection_;
  delete RoleTreasureInfo::default_instance_;
  delete RoleTreasureInfo_reflection_;
  delete RoleItemInfo::default_instance_;
  delete RoleItemInfo_reflection_;
  delete EmailContext::default_instance_;
  delete EmailContext_reflection_;
  delete EmailInfo::default_instance_;
  delete EmailInfo_reflection_;
  delete RoleEmailInfo::default_instance_;
  delete RoleEmailInfo_reflection_;
  delete MapData::default_instance_;
  delete MapData_reflection_;
  delete ChapterData::default_instance_;
  delete ChapterData_reflection_;
  delete MainFBData::default_instance_;
  delete MainFBData_reflection_;
  delete HeroMapData::default_instance_;
  delete HeroMapData_reflection_;
  delete HeroFBChapter::default_instance_;
  delete HeroFBChapter_reflection_;
  delete HeroFBData::default_instance_;
  delete HeroFBData_reflection_;
  delete DailyFBData::default_instance_;
  delete DailyFBData_reflection_;
  delete EliteMapEnemyData::default_instance_;
  delete EliteMapEnemyData_reflection_;
  delete EliteFBChapter::default_instance_;
  delete EliteFBChapter_reflection_;
  delete EliteFBData::default_instance_;
  delete EliteFBData_reflection_;
  delete TowerFBData::default_instance_;
  delete TowerFBData_reflection_;
  delete RoleFBInfo::default_instance_;
  delete RoleFBInfo_reflection_;
  delete ShopGoods::default_instance_;
  delete ShopGoods_reflection_;
  delete HeroShopData::default_instance_;
  delete HeroShopData_reflection_;
  delete GuildShopData::default_instance_;
  delete GuildShopData_reflection_;
  delete MallShopData::default_instance_;
  delete MallShopData_reflection_;
  delete TowerShopData::default_instance_;
  delete TowerShopData_reflection_;
  delete ArenaShopData::default_instance_;
  delete ArenaShopData_reflection_;
  delete AwakenShopData::default_instance_;
  delete AwakenShopData_reflection_;
  delete FairyShopData::default_instance_;
  delete FairyShopData_reflection_;
  delete ScoreMatchShopData::default_instance_;
  delete ScoreMatchShopData_reflection_;
  delete SevenDayShopData::default_instance_;
  delete SevenDayShopData_reflection_;
  delete RoleShopInfo::default_instance_;
  delete RoleShopInfo_reflection_;
  delete RoleSpiritInfo::default_instance_;
  delete RoleSpiritInfo_reflection_;
  delete FriendData::default_instance_;
  delete FriendData_reflection_;
  delete RoleFriendData::default_instance_;
  delete RoleFriendData_reflection_;
  delete RoleRebelInfo::default_instance_;
  delete RoleRebelInfo_reflection_;
  delete AchievementData::default_instance_;
  delete AchievementData_reflection_;
  delete RoleAchievemntInfo::default_instance_;
  delete RoleAchievemntInfo_reflection_;
  delete DailyMission::default_instance_;
  delete DailyMission_reflection_;
  delete RoleDailyMissionInfo::default_instance_;
  delete RoleDailyMissionInfo_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete RoleGuildSkillInfo::default_instance_;
  delete RoleGuildSkillInfo_reflection_;
  delete RoleSignInData::default_instance_;
  delete RoleSignInData_reflection_;
  delete RewardData::default_instance_;
  delete RewardData_reflection_;
  delete RoleRewardData::default_instance_;
  delete RoleRewardData_reflection_;
  delete YCSData::default_instance_;
  delete YCSData_reflection_;
  delete TQTData::default_instance_;
  delete TQTData_reflection_;
  delete SevenDayTargetData::default_instance_;
  delete SevenDayTargetData_reflection_;
  delete RoleActivityData::default_instance_;
  delete RoleActivityData_reflection_;
}

void protobuf_AddDesc_data_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021data_define.proto\022\002PB\")\n\004Item\022\017\n\007item_"
    "id\030\001 \002(\r\022\020\n\010item_num\030\002 \002(\r\"\256\001\n\tEquipment"
    "\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\025\n\renhanc"
    "e_level\030\003 \002(\r\022\024\n\014refine_level\030\004 \002(\r\022\022\n\nr"
    "efine_exp\030\005 \002(\r\022\031\n\021enhance_cost_gold\030\006 \002"
    "(\r\022\'\n\025refine_cost_item_list\030\007 \003(\0132\010.PB.I"
    "tem\"j\n\010Treasure\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030"
    "\002 \002(\r\022\025\n\renhance_level\030\003 \002(\r\022\023\n\013enhance_"
    "exp\030\004 \002(\r\022\024\n\014refine_level\030\005 \002(\r\"V\n\005fairy"
    "\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\r\n\005level\030"
    "\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\023\n\013break_level\030\005 \002(\r\""
    "s\n\rHeroTrainData\022\020\n\010pro_type\030\001 \002(\r\022\021\n\tpr"
    "o_value\030\002 \002(\r\022\021\n\tpro_level\030\003 \002(\r\022\025\n\rtmp_"
    "pro_value\030\004 \002(\r\022\023\n\013reward_flag\030\005 \002(\r\"\364\002\n"
    "\004Hero\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\r\n\005l"
    "evel\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\017\n\007quality\030\005 \002(\r"
    "\022\023\n\013break_level\030\006 \002(\r\022\025\n\rdestiny_level\030\007"
    " \002(\r\022\023\n\013destiny_exp\030\010 \002(\r\022\023\n\013awaken_star"
    "\030\t \002(\r\022\024\n\014awaken_level\030\n \002(\r\022\030\n\020awaken_i"
    "tem_list\030\013 \003(\r\022*\n\017train_data_list\030\014 \003(\0132"
    "\021.PB.HeroTrainData\022\033\n\023train_cost_item_nu"
    "m\030\r \002(\r\022\035\n\025destiny_cost_item_num\030\016 \002(\r\022\032"
    "\n\022train_cost_diamond\030\017 \002(\r\022\027\n\017train_cost"
    "_gold\030\020 \002(\r\"<\n\013MonsterData\022\013\n\003idx\030\001 \002(\r\022"
    "\016\n\006damage\030\002 \002(\r\022\020\n\010total_hp\030\003 \002(\r\"H\n\rAre"
    "naRankData\022\017\n\007role_id\030\001 \002(\r\022\020\n\010cur_rank\030"
    "\002 \002(\r\022\024\n\014history_rank\030\003 \002(\r\"9\n\021ArenaRank"
    "DataList\022$\n\trank_list\030\001 \003(\0132\021.PB.ArenaRa"
    "nkData\"t\n\016role_rank_data\022\017\n\007role_id\030\001 \002("
    "\r\022\r\n\005level\030\002 \002(\r\022\014\n\004rank\030\003 \002(\r\022\r\n\005value\030"
    "\004 \002(\r\022\020\n\010value_ex\030\005 \002(\r\022\023\n\013update_time\030\006"
    " \002(\r\"J\n\016role_rank_list\022\021\n\tserver_id\030\001 \002("
    "\r\022%\n\trank_list\030\002 \003(\0132\022.PB.role_rank_data"
    "\"Y\n\031all_server_role_rank_list\022\021\n\trank_ty"
    "pe\030\001 \002(\r\022)\n\rall_rank_list\030\002 \003(\0132\022.PB.rol"
    "e_rank_list\"S\n\rGuildRankData\022\020\n\010guild_id"
    "\030\001 \002(\r\022\014\n\004rank\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\022\023\n\013u"
    "pdate_time\030\004 \002(\r\"\'\n\010Property\022\014\n\004type\030\001 \002"
    "(\r\022\r\n\005value\030\002 \002(\r\"A\n\021FormationProperty\022\014"
    "\n\004slot\030\001 \002(\r\022\036\n\010pro_list\030\002 \003(\0132\014.PB.Prop"
    "erty\"\'\n\tGuideData\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030"
    "\002 \001(\r\"\251\007\n\014RoleBaseInfo\022\017\n\007role_id\030\001 \001(\r\022"
    "\021\n\trole_name\030\002 \002(\t\022\017\n\007account\030\003 \002(\t\022\017\n\007s"
    "tamina\030\004 \001(\r\022\016\n\006energy\030\005 \001(\r\022\013\n\003sex\030\006 \001("
    "\r\022\r\n\005level\030\007 \001(\r\022\030\n\020daily_init_level\030\010 \001"
    "(\r\022\013\n\003exp\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\017\n\007diamond"
    "\030\013 \001(\r\022\025\n\rhead_image_id\030\014 \001(\r\022\021\n\tvip_lev"
    "el\030\r \001(\r\022\017\n\007vip_exp\030\016 \001(\r\022\033\n\023riot_suppre"
    "ss_times\030\017 \001(\r\022\021\n\thero_soul\030\020 \001(\r\022\020\n\010god"
    "_soul\030\021 \001(\r\022\022\n\nfairy_soul\030\022 \001(\r\022\026\n\016arena"
    "_prestige\030\023 \001(\r\022\026\n\016tower_prestige\030\024 \001(\r\022"
    "\026\n\016fighting_power\030\025 \001(\r\022\016\n\006wanted\030\026 \001(\r\022"
    "\023\n\013rebel_value\030\027 \001(\r\022\r\n\005honor\030\030 \001(\r\022\030\n\020c"
    "ur_contribution\030\031 \001(\r\022\037\n\027world_boss_batt"
    "le_times\030\032 \001(\r\022\037\n\027guild_fb_reward_chapte"
    "r\030\033 \001(\r\022\027\n\017last_login_time\030\034 \001(\t\022\030\n\020last"
    "_logout_time\030\035 \001(\t\022\031\n\021total_online_time\030"
    "\036 \001(\r\022\023\n\013login_times\030\037 \001(\r\022!\n\031last_stami"
    "na_recover_time\030  \001(\r\022 \n\030last_energy_rec"
    "over_time\030! \001(\r\022 \n\030last_wanted_recover_t"
    "ime\030\" \001(\r\0221\n\022formation_pro_list\030# \003(\0132\025."
    "PB.FormationProperty\022\026\n\016once_flag_list\030$"
    " \001(\r\022\017\n\007guide_x\030% \001(\r\022\017\n\007guide_y\030& \001(\r\022!"
    "\n\nguide_list\030\' \003(\0132\r.PB.GuideData\022\036\n\026duo"
    "bao_peace_over_time\030( \001(\r\":\n\021RoleEquipme"
    "ntInfo\022%\n\016equipment_list\030\001 \003(\0132\r.PB.Equi"
    "pment\"K\n\tFormation\022\017\n\007hero_id\030\001 \002(\r\022\026\n\016e"
    "quipment_list\030\002 \003(\r\022\025\n\rtreasure_list\030\003 \003"
    "(\r\"\231\002\n\014RoleHeroInfo\022 \n\030normal_free_summo"
    "n_times\030\001 \002(\r\022\037\n\027normal_free_summon_time"
    "\030\002 \002(\r\022\035\n\025high_free_summon_time\030\003 \002(\r\022\031\n"
    "\021high_summon_times\030\004 \002(\r\022\033\n\thero_list\030\005 "
    "\003(\0132\010.PB.Hero\022\027\n\017collection_list\030\006 \003(\r\022\032"
    "\n\022reinforcement_list\030\007 \003(\r\022%\n\016formation_"
    "list\030\010 \003(\0132\r.PB.Formation\022\023\n\013train_times"
    "\030\t \001(\r\"7\n\020RoleTreasureInfo\022#\n\rtreasure_l"
    "ist\030\001 \003(\0132\014.PB.Treasure\"+\n\014RoleItemInfo\022"
    "\033\n\titem_list\030\001 \003(\0132\010.PB.Item\"*\n\014EmailCon"
    "text\022\014\n\004type\030\001 \002(\r\022\014\n\004text\030\002 \002(\t\"g\n\tEmai"
    "lInfo\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\024\n\014r"
    "eceive_time\030\003 \002(\r\022&\n\014context_list\030\004 \003(\0132"
    "\020.PB.EmailContext\"2\n\rRoleEmailInfo\022!\n\nem"
    "ail_list\030\001 \003(\0132\r.PB.EmailInfo\"Y\n\007MapData"
    "\022\014\n\004star\030\001 \002(\r\022\024\n\014battle_times\030\002 \002(\r\022\023\n\013"
    "reset_times\030\003 \002(\r\022\025\n\ris_get_reward\030\004 \002(\r"
    "\"F\n\013ChapterData\022\035\n\010map_list\030\001 \003(\0132\013.PB.M"
    "apData\022\030\n\020star_reward_list\030\002 \003(\r\"3\n\nMain"
    "FBData\022%\n\014chapter_list\030\001 \003(\0132\017.PB.Chapte"
    "rData\":\n\013HeroMapData\022\024\n\014battle_times\030\001 \002"
    "(\r\022\025\n\ris_get_reward\030\002 \002(\r\"M\n\rHeroFBChapt"
    "er\022!\n\010map_list\030\001 \003(\0132\017.PB.HeroMapData\022\031\n"
    "\021is_pass_extra_map\030\002 \002(\r\"K\n\nHeroFBData\022\'"
    "\n\014chapter_list\030\001 \003(\0132\021.PB.HeroFBChapter\022"
    "\024\n\014battle_times\030\002 \002(\r\"#\n\013DailyFBData\022\024\n\014"
    "chapter_list\030\001 \003(\r\"J\n\021EliteMapEnemyData\022"
    "\016\n\006map_id\030\001 \002(\r\022%\n\014monster_list\030\002 \003(\0132\017."
    "PB.MonsterData\"t\n\016EliteFBChapter\022\035\n\010map_"
    "list\030\001 \003(\0132\013.PB.MapData\022\030\n\020star_reward_l"
    "ist\030\002 \003(\r\022)\n\nenemy_data\030\003 \002(\0132\025.PB.Elite"
    "MapEnemyData\"7\n\013EliteFBData\022(\n\014chapter_l"
    "ist\030\001 \003(\0132\022.PB.EliteFBChapter\"\223\003\n\013TowerF"
    "BData\022\025\n\rmap_star_list\030\001 \003(\r\022\030\n\020map_leve"
    "l_record\030\002 \002(\r\022$\n\034keep_best_star_passed_"
    "record\030\003 \002(\r\022%\n\017select_pro_list\030\004 \003(\0132\014."
    "PB.Property\022\031\n\021is_buy_star_goods\030\005 \002(\r\022\026"
    "\n\016star_goods_idx\030\006 \002(\r\022\025\n\ris_need_reset\030"
    "\007 \002(\r\022\031\n\021today_reset_times\030\010 \002(\r\022\020\n\010cur_"
    "star\030\t \002(\r\022\027\n\017star_max_record\030\n \002(\r\022\027\n\017e"
    "lite_map_level\030\013 \002(\r\022\036\n\026elite_map_battle"
    "_times\030\014 \002(\r\022\"\n\032buy_elite_map_battle_tim"
    "es\030\r \002(\r\022\031\n\021rand_pro_idx_list\030\016 \003(\r\"\320\001\n\n"
    "RoleFBInfo\022$\n\014main_fb_data\030\001 \002(\0132\016.PB.Ma"
    "inFBData\022$\n\014hero_fb_data\030\002 \002(\0132\016.PB.Hero"
    "FBData\022&\n\rdaily_fb_data\030\003 \002(\0132\017.PB.Daily"
    "FBData\022&\n\rtower_fb_data\030\004 \002(\0132\017.PB.Tower"
    "FBData\022&\n\relite_fb_data\030\005 \002(\0132\017.PB.Elite"
    "FBData\"0\n\tShopGoods\022\020\n\010goods_id\030\001 \002(\r\022\021\n"
    "\tgoods_num\030\002 \002(\r\"\204\001\n\014HeroShopData\022!\n\ngoo"
    "ds_list\030\001 \003(\0132\r.PB.ShopGoods\022\031\n\021last_rec"
    "over_time\030\002 \002(\r\022\032\n\022free_refresh_times\030\003 "
    "\002(\r\022\032\n\022cost_refresh_times\030\004 \002(\r\"\234\001\n\rGuil"
    "dShopData\022.\n\027reward_goods_buy_record\030\001 \003"
    "(\0132\r.PB.ShopGoods\022,\n\025item_goods_buy_reco"
    "rd\030\002 \003(\0132\r.PB.ShopGoods\022-\n\026limit_goods_b"
    "uy_record\030\003 \003(\0132\r.PB.ShopGoods\"^\n\014MallSh"
    "opData\022&\n\017item_buy_record\030\001 \003(\0132\r.PB.Sho"
    "pGoods\022&\n\017gift_buy_record\030\002 \003(\0132\r.PB.Sho"
    "pGoods\"2\n\rTowerShopData\022!\n\nbuy_record\030\001 "
    "\003(\0132\r.PB.ShopGoods\"2\n\rArenaShopData\022!\n\nb"
    "uy_record\030\001 \003(\0132\r.PB.ShopGoods\"\206\001\n\016Awake"
    "nShopData\022!\n\ngoods_list\030\001 \003(\0132\r.PB.ShopG"
    "oods\022\031\n\021last_recover_time\030\002 \002(\r\022\032\n\022free_"
    "refresh_times\030\003 \002(\r\022\032\n\022cost_refresh_time"
    "s\030\004 \002(\r\"n\n\rFairyShopData\022!\n\ngoods_list\030\001"
    " \003(\0132\r.PB.ShopGoods\022\032\n\022used_refresh_time"
    "s\030\002 \002(\r\022\036\n\026last_auto_refresh_time\030\003 \002(\r\""
    "7\n\022ScoreMatchShopData\022!\n\nbuy_record\030\001 \003("
    "\0132\r.PB.ShopGoods\"5\n\020SevenDayShopData\022!\n\n"
    "buy_record\030\001 \003(\0132\r.PB.ShopGoods\"\375\002\n\014Role"
    "ShopInfo\022#\n\thero_shop\030\001 \002(\0132\020.PB.HeroSho"
    "pData\022%\n\nguild_shop\030\002 \002(\0132\021.PB.GuildShop"
    "Data\022#\n\tmall_shop\030\003 \002(\0132\020.PB.MallShopDat"
    "a\022%\n\ntower_shop\030\004 \002(\0132\021.PB.TowerShopData"
    "\022%\n\narena_shop\030\005 \002(\0132\021.PB.ArenaShopData\022"
    "\'\n\013awaken_shop\030\006 \002(\0132\022.PB.AwakenShopData"
    "\022%\n\nfairy_shop\030\007 \002(\0132\021.PB.FairyShopData\022"
    "0\n\020score_match_shop\030\010 \002(\0132\026.PB.ScoreMatc"
    "hShopData\022,\n\016seven_day_shop\030\t \001(\0132\024.PB.S"
    "evenDayShopData\".\n\016RoleSpiritInfo\022\r\n\005sta"
    "ge\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"O\n\nFriendData\022\017\n"
    "\007role_id\030\001 \002(\r\022\026\n\016is_give_energy\030\002 \002(\r\022\030"
    "\n\020get_energy_state\030\003 \002(\r\"w\n\016RoleFriendDa"
    "ta\022#\n\013friend_list\030\001 \003(\0132\016.PB.FriendData\022"
    "\022\n\nblack_list\030\002 \003(\r\022\022\n\napply_list\030\003 \003(\r\022"
    "\030\n\020get_energy_times\030\004 \002(\r\"\213\001\n\rRoleRebelI"
    "nfo\022\023\n\013rebel_level\030\001 \002(\r\022\025\n\rtoday_exploi"
    "t\030\002 \002(\r\022\024\n\014today_damage\030\003 \002(\r\022\036\n\026reward_"
    "get_record_list\030\004 \003(\r\022\030\n\020is_already_shar"
    "e\030\005 \002(\r\"U\n\017AchievementData\022\n\n\002id\030\001 \002(\r\022\r"
    "\n\005level\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\022\030\n\020cur_rewa"
    "rd_level\030\004 \002(\r\"C\n\022RoleAchievemntInfo\022-\n\020"
    "achievement_list\030\001 \003(\0132\023.PB.AchievementD"
    "ata\"@\n\014DailyMission\022\n\n\002id\030\001 \002(\r\022\025\n\ris_ge"
    "t_reward\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\"j\n\024RoleDai"
    "lyMissionInfo\022\r\n\005point\030\001 \002(\r\022\033\n\023point_re"
    "ward_record\030\002 \003(\r\022&\n\014mission_list\030\003 \003(\0132"
    "\020.PB.DailyMission\",\n\tSkillData\022\020\n\010skill_"
    "id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"7\n\022RoleGuildSkil"
    "lInfo\022!\n\nskill_list\030\001 \003(\0132\r.PB.SkillData"
    "\"D\n\016RoleSignInData\022\027\n\017cur_sign_in_day\030\001 "
    "\002(\r\022\031\n\021last_sign_in_time\030\002 \002(\r\"o\n\nReward"
    "Data\022\021\n\treward_id\030\001 \001(\r\022\023\n\013reward_type\030\002"
    " \001(\r\022\r\n\005value\030\003 \001(\r\022\016\n\006value1\030\004 \001(\r\022\014\n\004t"
    "ime\030\005 \001(\r\022\014\n\004text\030\006 \002(\t\"5\n\016RoleRewardDat"
    "a\022#\n\013reward_list\030\001 \003(\0132\016.PB.RewardData\"n"
    "\n\007YCSData\022\027\n\017today_get_times\030\001 \001(\r\022\027\n\017to"
    "tal_get_times\030\002 \001(\r\022\032\n\022total_reward_valu"
    "e\030\003 \001(\r\022\025\n\rlast_get_time\030\004 \001(\r\" \n\007TQTDat"
    "a\022\025\n\rlast_get_time\030\001 \001(\r\"M\n\022SevenDayTarg"
    "etData\022\021\n\ttarget_id\030\001 \001(\r\022\r\n\005value\030\002 \001(\r"
    "\022\025\n\ris_get_reward\030\003 \001(\r\"\256\001\n\020RoleActivity"
    "Data\022\035\n\010tqt_data\030\001 \001(\0132\013.PB.TQTData\022\035\n\010y"
    "cs_data\030\002 \001(\0132\013.PB.YCSData\0225\n\025seven_day_"
    "target_list\030\003 \003(\0132\026.PB.SevenDayTargetDat"
    "a\022%\n\035completion_reward_record_list\030\004 \003(\r", 7400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data_define.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Equipment::default_instance_ = new Equipment();
  Treasure::default_instance_ = new Treasure();
  fairy::default_instance_ = new fairy();
  HeroTrainData::default_instance_ = new HeroTrainData();
  Hero::default_instance_ = new Hero();
  MonsterData::default_instance_ = new MonsterData();
  ArenaRankData::default_instance_ = new ArenaRankData();
  ArenaRankDataList::default_instance_ = new ArenaRankDataList();
  role_rank_data::default_instance_ = new role_rank_data();
  role_rank_list::default_instance_ = new role_rank_list();
  all_server_role_rank_list::default_instance_ = new all_server_role_rank_list();
  GuildRankData::default_instance_ = new GuildRankData();
  Property::default_instance_ = new Property();
  FormationProperty::default_instance_ = new FormationProperty();
  GuideData::default_instance_ = new GuideData();
  RoleBaseInfo::default_instance_ = new RoleBaseInfo();
  RoleEquipmentInfo::default_instance_ = new RoleEquipmentInfo();
  Formation::default_instance_ = new Formation();
  RoleHeroInfo::default_instance_ = new RoleHeroInfo();
  RoleTreasureInfo::default_instance_ = new RoleTreasureInfo();
  RoleItemInfo::default_instance_ = new RoleItemInfo();
  EmailContext::default_instance_ = new EmailContext();
  EmailInfo::default_instance_ = new EmailInfo();
  RoleEmailInfo::default_instance_ = new RoleEmailInfo();
  MapData::default_instance_ = new MapData();
  ChapterData::default_instance_ = new ChapterData();
  MainFBData::default_instance_ = new MainFBData();
  HeroMapData::default_instance_ = new HeroMapData();
  HeroFBChapter::default_instance_ = new HeroFBChapter();
  HeroFBData::default_instance_ = new HeroFBData();
  DailyFBData::default_instance_ = new DailyFBData();
  EliteMapEnemyData::default_instance_ = new EliteMapEnemyData();
  EliteFBChapter::default_instance_ = new EliteFBChapter();
  EliteFBData::default_instance_ = new EliteFBData();
  TowerFBData::default_instance_ = new TowerFBData();
  RoleFBInfo::default_instance_ = new RoleFBInfo();
  ShopGoods::default_instance_ = new ShopGoods();
  HeroShopData::default_instance_ = new HeroShopData();
  GuildShopData::default_instance_ = new GuildShopData();
  MallShopData::default_instance_ = new MallShopData();
  TowerShopData::default_instance_ = new TowerShopData();
  ArenaShopData::default_instance_ = new ArenaShopData();
  AwakenShopData::default_instance_ = new AwakenShopData();
  FairyShopData::default_instance_ = new FairyShopData();
  ScoreMatchShopData::default_instance_ = new ScoreMatchShopData();
  SevenDayShopData::default_instance_ = new SevenDayShopData();
  RoleShopInfo::default_instance_ = new RoleShopInfo();
  RoleSpiritInfo::default_instance_ = new RoleSpiritInfo();
  FriendData::default_instance_ = new FriendData();
  RoleFriendData::default_instance_ = new RoleFriendData();
  RoleRebelInfo::default_instance_ = new RoleRebelInfo();
  AchievementData::default_instance_ = new AchievementData();
  RoleAchievemntInfo::default_instance_ = new RoleAchievemntInfo();
  DailyMission::default_instance_ = new DailyMission();
  RoleDailyMissionInfo::default_instance_ = new RoleDailyMissionInfo();
  SkillData::default_instance_ = new SkillData();
  RoleGuildSkillInfo::default_instance_ = new RoleGuildSkillInfo();
  RoleSignInData::default_instance_ = new RoleSignInData();
  RewardData::default_instance_ = new RewardData();
  RoleRewardData::default_instance_ = new RoleRewardData();
  YCSData::default_instance_ = new YCSData();
  TQTData::default_instance_ = new TQTData();
  SevenDayTargetData::default_instance_ = new SevenDayTargetData();
  RoleActivityData::default_instance_ = new RoleActivityData();
  Item::default_instance_->InitAsDefaultInstance();
  Equipment::default_instance_->InitAsDefaultInstance();
  Treasure::default_instance_->InitAsDefaultInstance();
  fairy::default_instance_->InitAsDefaultInstance();
  HeroTrainData::default_instance_->InitAsDefaultInstance();
  Hero::default_instance_->InitAsDefaultInstance();
  MonsterData::default_instance_->InitAsDefaultInstance();
  ArenaRankData::default_instance_->InitAsDefaultInstance();
  ArenaRankDataList::default_instance_->InitAsDefaultInstance();
  role_rank_data::default_instance_->InitAsDefaultInstance();
  role_rank_list::default_instance_->InitAsDefaultInstance();
  all_server_role_rank_list::default_instance_->InitAsDefaultInstance();
  GuildRankData::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  FormationProperty::default_instance_->InitAsDefaultInstance();
  GuideData::default_instance_->InitAsDefaultInstance();
  RoleBaseInfo::default_instance_->InitAsDefaultInstance();
  RoleEquipmentInfo::default_instance_->InitAsDefaultInstance();
  Formation::default_instance_->InitAsDefaultInstance();
  RoleHeroInfo::default_instance_->InitAsDefaultInstance();
  RoleTreasureInfo::default_instance_->InitAsDefaultInstance();
  RoleItemInfo::default_instance_->InitAsDefaultInstance();
  EmailContext::default_instance_->InitAsDefaultInstance();
  EmailInfo::default_instance_->InitAsDefaultInstance();
  RoleEmailInfo::default_instance_->InitAsDefaultInstance();
  MapData::default_instance_->InitAsDefaultInstance();
  ChapterData::default_instance_->InitAsDefaultInstance();
  MainFBData::default_instance_->InitAsDefaultInstance();
  HeroMapData::default_instance_->InitAsDefaultInstance();
  HeroFBChapter::default_instance_->InitAsDefaultInstance();
  HeroFBData::default_instance_->InitAsDefaultInstance();
  DailyFBData::default_instance_->InitAsDefaultInstance();
  EliteMapEnemyData::default_instance_->InitAsDefaultInstance();
  EliteFBChapter::default_instance_->InitAsDefaultInstance();
  EliteFBData::default_instance_->InitAsDefaultInstance();
  TowerFBData::default_instance_->InitAsDefaultInstance();
  RoleFBInfo::default_instance_->InitAsDefaultInstance();
  ShopGoods::default_instance_->InitAsDefaultInstance();
  HeroShopData::default_instance_->InitAsDefaultInstance();
  GuildShopData::default_instance_->InitAsDefaultInstance();
  MallShopData::default_instance_->InitAsDefaultInstance();
  TowerShopData::default_instance_->InitAsDefaultInstance();
  ArenaShopData::default_instance_->InitAsDefaultInstance();
  AwakenShopData::default_instance_->InitAsDefaultInstance();
  FairyShopData::default_instance_->InitAsDefaultInstance();
  ScoreMatchShopData::default_instance_->InitAsDefaultInstance();
  SevenDayShopData::default_instance_->InitAsDefaultInstance();
  RoleShopInfo::default_instance_->InitAsDefaultInstance();
  RoleSpiritInfo::default_instance_->InitAsDefaultInstance();
  FriendData::default_instance_->InitAsDefaultInstance();
  RoleFriendData::default_instance_->InitAsDefaultInstance();
  RoleRebelInfo::default_instance_->InitAsDefaultInstance();
  AchievementData::default_instance_->InitAsDefaultInstance();
  RoleAchievemntInfo::default_instance_->InitAsDefaultInstance();
  DailyMission::default_instance_->InitAsDefaultInstance();
  RoleDailyMissionInfo::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  RoleGuildSkillInfo::default_instance_->InitAsDefaultInstance();
  RoleSignInData::default_instance_->InitAsDefaultInstance();
  RewardData::default_instance_->InitAsDefaultInstance();
  RoleRewardData::default_instance_->InitAsDefaultInstance();
  YCSData::default_instance_->InitAsDefaultInstance();
  TQTData::default_instance_->InitAsDefaultInstance();
  SevenDayTargetData::default_instance_->InitAsDefaultInstance();
  RoleActivityData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_5fdefine_2eproto {
  StaticDescriptorInitializer_data_5fdefine_2eproto() {
    protobuf_AddDesc_data_5fdefine_2eproto();
  }
} static_descriptor_initializer_data_5fdefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kItemIdFieldNumber;
const int Item::kItemNumFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equipment::kUidFieldNumber;
const int Equipment::kInfoIdFieldNumber;
const int Equipment::kEnhanceLevelFieldNumber;
const int Equipment::kRefineLevelFieldNumber;
const int Equipment::kRefineExpFieldNumber;
const int Equipment::kEnhanceCostGoldFieldNumber;
const int Equipment::kRefineCostItemListFieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Equipment::InitAsDefaultInstance() {
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Equipment::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  enhance_level_ = 0u;
  refine_level_ = 0u;
  refine_exp_ = 0u;
  enhance_cost_gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment::~Equipment() {
  SharedDtor();
}

void Equipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New() const {
  return new Equipment;
}

void Equipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    enhance_level_ = 0u;
    refine_level_ = 0u;
    refine_exp_ = 0u;
    enhance_cost_gold_ = 0u;
  }
  refine_cost_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enhance_level;
        break;
      }

      // required uint32 enhance_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refine_level;
        break;
      }

      // required uint32 refine_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refine_exp;
        break;
      }

      // required uint32 refine_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_exp_)));
          set_has_refine_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enhance_cost_gold;
        break;
      }

      // required uint32 enhance_cost_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_cost_gold_)));
          set_has_enhance_cost_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine_cost_item_list;
        break;
      }

      // repeated .PB.Item refine_cost_item_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine_cost_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine_cost_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine_cost_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enhance_level(), output);
  }

  // required uint32 refine_level = 4;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refine_level(), output);
  }

  // required uint32 refine_exp = 5;
  if (has_refine_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refine_exp(), output);
  }

  // required uint32 enhance_cost_gold = 6;
  if (has_enhance_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->enhance_cost_gold(), output);
  }

  // repeated .PB.Item refine_cost_item_list = 7;
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refine_cost_item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enhance_level(), target);
  }

  // required uint32 refine_level = 4;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refine_level(), target);
  }

  // required uint32 refine_exp = 5;
  if (has_refine_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refine_exp(), target);
  }

  // required uint32 enhance_cost_gold = 6;
  if (has_enhance_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->enhance_cost_gold(), target);
  }

  // repeated .PB.Item refine_cost_item_list = 7;
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refine_cost_item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 enhance_level = 3;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_level());
    }

    // required uint32 refine_level = 4;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_level());
    }

    // required uint32 refine_exp = 5;
    if (has_refine_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_exp());
    }

    // required uint32 enhance_cost_gold = 6;
    if (has_enhance_cost_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_cost_gold());
    }

  }
  // repeated .PB.Item refine_cost_item_list = 7;
  total_size += 1 * this->refine_cost_item_list_size();
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine_cost_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  refine_cost_item_list_.MergeFrom(from.refine_cost_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_refine_exp()) {
      set_refine_exp(from.refine_exp());
    }
    if (from.has_enhance_cost_gold()) {
      set_enhance_cost_gold(from.enhance_cost_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < refine_cost_item_list_size(); i++) {
    if (!this->refine_cost_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(refine_exp_, other->refine_exp_);
    std::swap(enhance_cost_gold_, other->enhance_cost_gold_);
    refine_cost_item_list_.Swap(&other->refine_cost_item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure::kUidFieldNumber;
const int Treasure::kInfoIdFieldNumber;
const int Treasure::kEnhanceLevelFieldNumber;
const int Treasure::kEnhanceExpFieldNumber;
const int Treasure::kRefineLevelFieldNumber;
#endif  // !_MSC_VER

Treasure::Treasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure::InitAsDefaultInstance() {
}

Treasure::Treasure(const Treasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  enhance_level_ = 0u;
  enhance_exp_ = 0u;
  refine_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure::~Treasure() {
  SharedDtor();
}

void Treasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_descriptor_;
}

const Treasure& Treasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Treasure* Treasure::default_instance_ = NULL;

Treasure* Treasure::New() const {
  return new Treasure;
}

void Treasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    enhance_level_ = 0u;
    enhance_exp_ = 0u;
    refine_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enhance_level;
        break;
      }

      // required uint32 enhance_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enhance_exp;
        break;
      }

      // required uint32 enhance_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_exp_)));
          set_has_enhance_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refine_level;
        break;
      }

      // required uint32 refine_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enhance_level(), output);
  }

  // required uint32 enhance_exp = 4;
  if (has_enhance_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enhance_exp(), output);
  }

  // required uint32 refine_level = 5;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refine_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enhance_level(), target);
  }

  // required uint32 enhance_exp = 4;
  if (has_enhance_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enhance_exp(), target);
  }

  // required uint32 refine_level = 5;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refine_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 enhance_level = 3;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_level());
    }

    // required uint32 enhance_exp = 4;
    if (has_enhance_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_exp());
    }

    // required uint32 refine_level = 5;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure::MergeFrom(const Treasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_enhance_exp()) {
      set_enhance_exp(from.enhance_exp());
    }
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure::CopyFrom(const Treasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Treasure::Swap(Treasure* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(enhance_exp_, other->enhance_exp_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_descriptor_;
  metadata.reflection = Treasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fairy::kUidFieldNumber;
const int fairy::kInfoIdFieldNumber;
const int fairy::kLevelFieldNumber;
const int fairy::kExpFieldNumber;
const int fairy::kBreakLevelFieldNumber;
#endif  // !_MSC_VER

fairy::fairy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fairy::InitAsDefaultInstance() {
}

fairy::fairy(const fairy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fairy::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  break_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fairy::~fairy() {
  SharedDtor();
}

void fairy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fairy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fairy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fairy_descriptor_;
}

const fairy& fairy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

fairy* fairy::default_instance_ = NULL;

fairy* fairy::New() const {
  return new fairy;
}

void fairy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    break_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fairy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_break_level;
        break;
      }

      // required uint32 break_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &break_level_)));
          set_has_break_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fairy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->break_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fairy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->break_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fairy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 break_level = 5;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fairy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fairy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fairy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fairy::MergeFrom(const fairy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fairy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fairy::CopyFrom(const fairy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fairy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void fairy::Swap(fairy* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(break_level_, other->break_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fairy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fairy_descriptor_;
  metadata.reflection = fairy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroTrainData::kProTypeFieldNumber;
const int HeroTrainData::kProValueFieldNumber;
const int HeroTrainData::kProLevelFieldNumber;
const int HeroTrainData::kTmpProValueFieldNumber;
const int HeroTrainData::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

HeroTrainData::HeroTrainData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroTrainData::InitAsDefaultInstance() {
}

HeroTrainData::HeroTrainData(const HeroTrainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroTrainData::SharedCtor() {
  _cached_size_ = 0;
  pro_type_ = 0u;
  pro_value_ = 0u;
  pro_level_ = 0u;
  tmp_pro_value_ = 0u;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroTrainData::~HeroTrainData() {
  SharedDtor();
}

void HeroTrainData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroTrainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroTrainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroTrainData_descriptor_;
}

const HeroTrainData& HeroTrainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroTrainData* HeroTrainData::default_instance_ = NULL;

HeroTrainData* HeroTrainData::New() const {
  return new HeroTrainData;
}

void HeroTrainData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_type_ = 0u;
    pro_value_ = 0u;
    pro_level_ = 0u;
    tmp_pro_value_ = 0u;
    reward_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroTrainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pro_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_type_)));
          set_has_pro_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_value;
        break;
      }

      // required uint32 pro_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_value_)));
          set_has_pro_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pro_level;
        break;
      }

      // required uint32 pro_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_level_)));
          set_has_pro_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tmp_pro_value;
        break;
      }

      // required uint32 tmp_pro_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_pro_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmp_pro_value_)));
          set_has_tmp_pro_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_flag;
        break;
      }

      // required uint32 reward_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroTrainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pro_type = 1;
  if (has_pro_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pro_type(), output);
  }

  // required uint32 pro_value = 2;
  if (has_pro_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pro_value(), output);
  }

  // required uint32 pro_level = 3;
  if (has_pro_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pro_level(), output);
  }

  // required uint32 tmp_pro_value = 4;
  if (has_tmp_pro_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tmp_pro_value(), output);
  }

  // required uint32 reward_flag = 5;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroTrainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pro_type = 1;
  if (has_pro_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pro_type(), target);
  }

  // required uint32 pro_value = 2;
  if (has_pro_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pro_value(), target);
  }

  // required uint32 pro_level = 3;
  if (has_pro_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pro_level(), target);
  }

  // required uint32 tmp_pro_value = 4;
  if (has_tmp_pro_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tmp_pro_value(), target);
  }

  // required uint32 reward_flag = 5;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroTrainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pro_type = 1;
    if (has_pro_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_type());
    }

    // required uint32 pro_value = 2;
    if (has_pro_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_value());
    }

    // required uint32 pro_level = 3;
    if (has_pro_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_level());
    }

    // required uint32 tmp_pro_value = 4;
    if (has_tmp_pro_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmp_pro_value());
    }

    // required uint32 reward_flag = 5;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroTrainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroTrainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroTrainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroTrainData::MergeFrom(const HeroTrainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_type()) {
      set_pro_type(from.pro_type());
    }
    if (from.has_pro_value()) {
      set_pro_value(from.pro_value());
    }
    if (from.has_pro_level()) {
      set_pro_level(from.pro_level());
    }
    if (from.has_tmp_pro_value()) {
      set_tmp_pro_value(from.tmp_pro_value());
    }
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroTrainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroTrainData::CopyFrom(const HeroTrainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroTrainData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HeroTrainData::Swap(HeroTrainData* other) {
  if (other != this) {
    std::swap(pro_type_, other->pro_type_);
    std::swap(pro_value_, other->pro_value_);
    std::swap(pro_level_, other->pro_level_);
    std::swap(tmp_pro_value_, other->tmp_pro_value_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroTrainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroTrainData_descriptor_;
  metadata.reflection = HeroTrainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hero::kUidFieldNumber;
const int Hero::kInfoIdFieldNumber;
const int Hero::kLevelFieldNumber;
const int Hero::kExpFieldNumber;
const int Hero::kQualityFieldNumber;
const int Hero::kBreakLevelFieldNumber;
const int Hero::kDestinyLevelFieldNumber;
const int Hero::kDestinyExpFieldNumber;
const int Hero::kAwakenStarFieldNumber;
const int Hero::kAwakenLevelFieldNumber;
const int Hero::kAwakenItemListFieldNumber;
const int Hero::kTrainDataListFieldNumber;
const int Hero::kTrainCostItemNumFieldNumber;
const int Hero::kDestinyCostItemNumFieldNumber;
const int Hero::kTrainCostDiamondFieldNumber;
const int Hero::kTrainCostGoldFieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hero::InitAsDefaultInstance() {
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hero::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  quality_ = 0u;
  break_level_ = 0u;
  destiny_level_ = 0u;
  destiny_exp_ = 0u;
  awaken_star_ = 0u;
  awaken_level_ = 0u;
  train_cost_item_num_ = 0u;
  destiny_cost_item_num_ = 0u;
  train_cost_diamond_ = 0u;
  train_cost_gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  SharedDtor();
}

void Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    quality_ = 0u;
    break_level_ = 0u;
    destiny_level_ = 0u;
    destiny_exp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awaken_star_ = 0u;
    awaken_level_ = 0u;
    train_cost_item_num_ = 0u;
    destiny_cost_item_num_ = 0u;
    train_cost_diamond_ = 0u;
    train_cost_gold_ = 0u;
  }
  awaken_item_list_.Clear();
  train_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required uint32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_break_level;
        break;
      }

      // required uint32 break_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &break_level_)));
          set_has_break_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_destiny_level;
        break;
      }

      // required uint32 destiny_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_level_)));
          set_has_destiny_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_destiny_exp;
        break;
      }

      // required uint32 destiny_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_exp_)));
          set_has_destiny_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_awaken_star;
        break;
      }

      // required uint32 awaken_star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awaken_star_)));
          set_has_awaken_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_awaken_level;
        break;
      }

      // required uint32 awaken_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awaken_level_)));
          set_has_awaken_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_awaken_item_list;
        break;
      }

      // repeated uint32 awaken_item_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_awaken_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awaken_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_awaken_item_list;
        if (input->ExpectTag(98)) goto parse_train_data_list;
        break;
      }

      // repeated .PB.HeroTrainData train_data_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_train_data_list;
        if (input->ExpectTag(104)) goto parse_train_cost_item_num;
        break;
      }

      // required uint32 train_cost_item_num = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_item_num_)));
          set_has_train_cost_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_destiny_cost_item_num;
        break;
      }

      // required uint32 destiny_cost_item_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_cost_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_cost_item_num_)));
          set_has_destiny_cost_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_train_cost_diamond;
        break;
      }

      // required uint32 train_cost_diamond = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_diamond_)));
          set_has_train_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_train_cost_gold;
        break;
      }

      // required uint32 train_cost_gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_gold_)));
          set_has_train_cost_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quality(), output);
  }

  // required uint32 break_level = 6;
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->break_level(), output);
  }

  // required uint32 destiny_level = 7;
  if (has_destiny_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->destiny_level(), output);
  }

  // required uint32 destiny_exp = 8;
  if (has_destiny_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->destiny_exp(), output);
  }

  // required uint32 awaken_star = 9;
  if (has_awaken_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->awaken_star(), output);
  }

  // required uint32 awaken_level = 10;
  if (has_awaken_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->awaken_level(), output);
  }

  // repeated uint32 awaken_item_list = 11;
  for (int i = 0; i < this->awaken_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->awaken_item_list(i), output);
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  for (int i = 0; i < this->train_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->train_data_list(i), output);
  }

  // required uint32 train_cost_item_num = 13;
  if (has_train_cost_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->train_cost_item_num(), output);
  }

  // required uint32 destiny_cost_item_num = 14;
  if (has_destiny_cost_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->destiny_cost_item_num(), output);
  }

  // required uint32 train_cost_diamond = 15;
  if (has_train_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->train_cost_diamond(), output);
  }

  // required uint32 train_cost_gold = 16;
  if (has_train_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->train_cost_gold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quality(), target);
  }

  // required uint32 break_level = 6;
  if (has_break_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->break_level(), target);
  }

  // required uint32 destiny_level = 7;
  if (has_destiny_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->destiny_level(), target);
  }

  // required uint32 destiny_exp = 8;
  if (has_destiny_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->destiny_exp(), target);
  }

  // required uint32 awaken_star = 9;
  if (has_awaken_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->awaken_star(), target);
  }

  // required uint32 awaken_level = 10;
  if (has_awaken_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->awaken_level(), target);
  }

  // repeated uint32 awaken_item_list = 11;
  for (int i = 0; i < this->awaken_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->awaken_item_list(i), target);
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  for (int i = 0; i < this->train_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->train_data_list(i), target);
  }

  // required uint32 train_cost_item_num = 13;
  if (has_train_cost_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->train_cost_item_num(), target);
  }

  // required uint32 destiny_cost_item_num = 14;
  if (has_destiny_cost_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->destiny_cost_item_num(), target);
  }

  // required uint32 train_cost_diamond = 15;
  if (has_train_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->train_cost_diamond(), target);
  }

  // required uint32 train_cost_gold = 16;
  if (has_train_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->train_cost_gold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 break_level = 6;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }

    // required uint32 destiny_level = 7;
    if (has_destiny_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_level());
    }

    // required uint32 destiny_exp = 8;
    if (has_destiny_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 awaken_star = 9;
    if (has_awaken_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awaken_star());
    }

    // required uint32 awaken_level = 10;
    if (has_awaken_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awaken_level());
    }

    // required uint32 train_cost_item_num = 13;
    if (has_train_cost_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_item_num());
    }

    // required uint32 destiny_cost_item_num = 14;
    if (has_destiny_cost_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_cost_item_num());
    }

    // required uint32 train_cost_diamond = 15;
    if (has_train_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_diamond());
    }

    // required uint32 train_cost_gold = 16;
    if (has_train_cost_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_gold());
    }

  }
  // repeated uint32 awaken_item_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->awaken_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awaken_item_list(i));
    }
    total_size += 1 * this->awaken_item_list_size() + data_size;
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  total_size += 1 * this->train_data_list_size();
  for (int i = 0; i < this->train_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  awaken_item_list_.MergeFrom(from.awaken_item_list_);
  train_data_list_.MergeFrom(from.train_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
    if (from.has_destiny_level()) {
      set_destiny_level(from.destiny_level());
    }
    if (from.has_destiny_exp()) {
      set_destiny_exp(from.destiny_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_awaken_star()) {
      set_awaken_star(from.awaken_star());
    }
    if (from.has_awaken_level()) {
      set_awaken_level(from.awaken_level());
    }
    if (from.has_train_cost_item_num()) {
      set_train_cost_item_num(from.train_cost_item_num());
    }
    if (from.has_destiny_cost_item_num()) {
      set_destiny_cost_item_num(from.destiny_cost_item_num());
    }
    if (from.has_train_cost_diamond()) {
      set_train_cost_diamond(from.train_cost_diamond());
    }
    if (from.has_train_cost_gold()) {
      set_train_cost_gold(from.train_cost_gold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000f3ff) != 0x0000f3ff) return false;

  for (int i = 0; i < train_data_list_size(); i++) {
    if (!this->train_data_list(i).IsInitialized()) return false;
  }
  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(quality_, other->quality_);
    std::swap(break_level_, other->break_level_);
    std::swap(destiny_level_, other->destiny_level_);
    std::swap(destiny_exp_, other->destiny_exp_);
    std::swap(awaken_star_, other->awaken_star_);
    std::swap(awaken_level_, other->awaken_level_);
    awaken_item_list_.Swap(&other->awaken_item_list_);
    train_data_list_.Swap(&other->train_data_list_);
    std::swap(train_cost_item_num_, other->train_cost_item_num_);
    std::swap(destiny_cost_item_num_, other->destiny_cost_item_num_);
    std::swap(train_cost_diamond_, other->train_cost_diamond_);
    std::swap(train_cost_gold_, other->train_cost_gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterData::kIdxFieldNumber;
const int MonsterData::kDamageFieldNumber;
const int MonsterData::kTotalHpFieldNumber;
#endif  // !_MSC_VER

MonsterData::MonsterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterData::InitAsDefaultInstance() {
}

MonsterData::MonsterData(const MonsterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterData::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  damage_ = 0u;
  total_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterData::~MonsterData() {
  SharedDtor();
}

void MonsterData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterData_descriptor_;
}

const MonsterData& MonsterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MonsterData* MonsterData::default_instance_ = NULL;

MonsterData* MonsterData::New() const {
  return new MonsterData;
}

void MonsterData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    damage_ = 0u;
    total_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // required uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_hp;
        break;
      }

      // required uint32 total_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hp_)));
          set_has_total_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // required uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // required uint32 total_hp = 3;
    if (has_total_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterData::MergeFrom(const MonsterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_total_hp()) {
      set_total_hp(from.total_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterData::CopyFrom(const MonsterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MonsterData::Swap(MonsterData* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(damage_, other->damage_);
    std::swap(total_hp_, other->total_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterData_descriptor_;
  metadata.reflection = MonsterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRankData::kRoleIdFieldNumber;
const int ArenaRankData::kCurRankFieldNumber;
const int ArenaRankData::kHistoryRankFieldNumber;
#endif  // !_MSC_VER

ArenaRankData::ArenaRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRankData::InitAsDefaultInstance() {
}

ArenaRankData::ArenaRankData(const ArenaRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRankData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  cur_rank_ = 0u;
  history_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRankData::~ArenaRankData() {
  SharedDtor();
}

void ArenaRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRankData_descriptor_;
}

const ArenaRankData& ArenaRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaRankData* ArenaRankData::default_instance_ = NULL;

ArenaRankData* ArenaRankData::New() const {
  return new ArenaRankData;
}

void ArenaRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    cur_rank_ = 0u;
    history_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_rank;
        break;
      }

      // required uint32 cur_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_history_rank;
        break;
      }

      // required uint32 history_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_rank_)));
          set_has_history_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 cur_rank = 2;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_rank(), output);
  }

  // required uint32 history_rank = 3;
  if (has_history_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->history_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 cur_rank = 2;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_rank(), target);
  }

  // required uint32 history_rank = 3;
  if (has_history_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->history_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 cur_rank = 2;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_rank());
    }

    // required uint32 history_rank = 3;
    if (has_history_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRankData::MergeFrom(const ArenaRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_history_rank()) {
      set_history_rank(from.history_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRankData::CopyFrom(const ArenaRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArenaRankData::Swap(ArenaRankData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(history_rank_, other->history_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRankData_descriptor_;
  metadata.reflection = ArenaRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRankDataList::kRankListFieldNumber;
#endif  // !_MSC_VER

ArenaRankDataList::ArenaRankDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRankDataList::InitAsDefaultInstance() {
}

ArenaRankDataList::ArenaRankDataList(const ArenaRankDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRankDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRankDataList::~ArenaRankDataList() {
  SharedDtor();
}

void ArenaRankDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRankDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRankDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRankDataList_descriptor_;
}

const ArenaRankDataList& ArenaRankDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaRankDataList* ArenaRankDataList::default_instance_ = NULL;

ArenaRankDataList* ArenaRankDataList::New() const {
  return new ArenaRankDataList;
}

void ArenaRankDataList::Clear() {
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRankDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ArenaRankData rank_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRankDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ArenaRankData rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRankDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ArenaRankData rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRankDataList::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ArenaRankData rank_list = 1;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRankDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRankDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRankDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRankDataList::MergeFrom(const ArenaRankDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRankDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRankDataList::CopyFrom(const ArenaRankDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRankDataList::IsInitialized() const {

  for (int i = 0; i < rank_list_size(); i++) {
    if (!this->rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRankDataList::Swap(ArenaRankDataList* other) {
  if (other != this) {
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRankDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRankDataList_descriptor_;
  metadata.reflection = ArenaRankDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_rank_data::kRoleIdFieldNumber;
const int role_rank_data::kLevelFieldNumber;
const int role_rank_data::kRankFieldNumber;
const int role_rank_data::kValueFieldNumber;
const int role_rank_data::kValueExFieldNumber;
const int role_rank_data::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

role_rank_data::role_rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_rank_data::InitAsDefaultInstance() {
}

role_rank_data::role_rank_data(const role_rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_rank_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  rank_ = 0u;
  value_ = 0u;
  value_ex_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_rank_data::~role_rank_data() {
  SharedDtor();
}

void role_rank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_rank_data_descriptor_;
}

const role_rank_data& role_rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

role_rank_data* role_rank_data::default_instance_ = NULL;

role_rank_data* role_rank_data::New() const {
  return new role_rank_data;
}

void role_rank_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    rank_ = 0u;
    value_ = 0u;
    value_ex_ = 0u;
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value_ex;
        break;
      }

      // required uint32 value_ex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_ex_)));
          set_has_value_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // required uint32 value_ex = 5;
  if (has_value_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value_ex(), output);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // required uint32 value_ex = 5;
  if (has_value_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value_ex(), target);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_rank_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 value_ex = 5;
    if (has_value_ex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value_ex());
    }

    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_rank_data::MergeFrom(const role_rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value_ex()) {
      set_value_ex(from.value_ex());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_rank_data::CopyFrom(const role_rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_rank_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void role_rank_data::Swap(role_rank_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(value_, other->value_);
    std::swap(value_ex_, other->value_ex_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_rank_data_descriptor_;
  metadata.reflection = role_rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_rank_list::kServerIdFieldNumber;
const int role_rank_list::kRankListFieldNumber;
#endif  // !_MSC_VER

role_rank_list::role_rank_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_rank_list::InitAsDefaultInstance() {
}

role_rank_list::role_rank_list(const role_rank_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_rank_list::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_rank_list::~role_rank_list() {
  SharedDtor();
}

void role_rank_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_rank_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_rank_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_rank_list_descriptor_;
}

const role_rank_list& role_rank_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

role_rank_list* role_rank_list::default_instance_ = NULL;

role_rank_list* role_rank_list::New() const {
  return new role_rank_list;
}

void role_rank_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_rank_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        break;
      }

      // repeated .PB.role_rank_data rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_rank_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // repeated .PB.role_rank_data rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_rank_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // repeated .PB.role_rank_data rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_rank_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .PB.role_rank_data rank_list = 2;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_rank_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_rank_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_rank_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_rank_list::MergeFrom(const role_rank_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_rank_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_rank_list::CopyFrom(const role_rank_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_rank_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rank_list_size(); i++) {
    if (!this->rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void role_rank_list::Swap(role_rank_list* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_rank_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_rank_list_descriptor_;
  metadata.reflection = role_rank_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_server_role_rank_list::kRankTypeFieldNumber;
const int all_server_role_rank_list::kAllRankListFieldNumber;
#endif  // !_MSC_VER

all_server_role_rank_list::all_server_role_rank_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_server_role_rank_list::InitAsDefaultInstance() {
}

all_server_role_rank_list::all_server_role_rank_list(const all_server_role_rank_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_server_role_rank_list::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_server_role_rank_list::~all_server_role_rank_list() {
  SharedDtor();
}

void all_server_role_rank_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_server_role_rank_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_server_role_rank_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_server_role_rank_list_descriptor_;
}

const all_server_role_rank_list& all_server_role_rank_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

all_server_role_rank_list* all_server_role_rank_list::default_instance_ = NULL;

all_server_role_rank_list* all_server_role_rank_list::New() const {
  return new all_server_role_rank_list;
}

void all_server_role_rank_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0u;
  }
  all_rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_server_role_rank_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_rank_list;
        break;
      }

      // repeated .PB.role_rank_list all_rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_server_role_rank_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_type(), output);
  }

  // repeated .PB.role_rank_list all_rank_list = 2;
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_server_role_rank_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_type(), target);
  }

  // repeated .PB.role_rank_list all_rank_list = 2;
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_server_role_rank_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

  }
  // repeated .PB.role_rank_list all_rank_list = 2;
  total_size += 1 * this->all_rank_list_size();
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_server_role_rank_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_server_role_rank_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_server_role_rank_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_server_role_rank_list::MergeFrom(const all_server_role_rank_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_rank_list_.MergeFrom(from.all_rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_server_role_rank_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_server_role_rank_list::CopyFrom(const all_server_role_rank_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_server_role_rank_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < all_rank_list_size(); i++) {
    if (!this->all_rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void all_server_role_rank_list::Swap(all_server_role_rank_list* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    all_rank_list_.Swap(&other->all_rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_server_role_rank_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_server_role_rank_list_descriptor_;
  metadata.reflection = all_server_role_rank_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRankData::kGuildIdFieldNumber;
const int GuildRankData::kRankFieldNumber;
const int GuildRankData::kValueFieldNumber;
const int GuildRankData::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GuildRankData::GuildRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRankData::InitAsDefaultInstance() {
}

GuildRankData::GuildRankData(const GuildRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRankData::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  rank_ = 0u;
  value_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRankData::~GuildRankData() {
  SharedDtor();
}

void GuildRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRankData_descriptor_;
}

const GuildRankData& GuildRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildRankData* GuildRankData::default_instance_ = NULL;

GuildRankData* GuildRankData::New() const {
  return new GuildRankData;
}

void GuildRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    rank_ = 0u;
    value_ = 0u;
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRankData::MergeFrom(const GuildRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRankData::CopyFrom(const GuildRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildRankData::Swap(GuildRankData* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(rank_, other->rank_);
    std::swap(value_, other->value_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRankData_descriptor_;
  metadata.reflection = GuildRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kTypeFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationProperty::kSlotFieldNumber;
const int FormationProperty::kProListFieldNumber;
#endif  // !_MSC_VER

FormationProperty::FormationProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormationProperty::InitAsDefaultInstance() {
}

FormationProperty::FormationProperty(const FormationProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormationProperty::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationProperty::~FormationProperty() {
  SharedDtor();
}

void FormationProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormationProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormationProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationProperty_descriptor_;
}

const FormationProperty& FormationProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FormationProperty* FormationProperty::default_instance_ = NULL;

FormationProperty* FormationProperty::New() const {
  return new FormationProperty;
}

void FormationProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
  }
  pro_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro_list;
        break;
      }

      // repeated .PB.Property pro_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // repeated .PB.Property pro_list = 2;
  for (int i = 0; i < this->pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pro_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // repeated .PB.Property pro_list = 2;
  for (int i = 0; i < this->pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pro_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  // repeated .PB.Property pro_list = 2;
  total_size += 1 * this->pro_list_size();
  for (int i = 0; i < this->pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormationProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationProperty::MergeFrom(const FormationProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_list_.MergeFrom(from.pro_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationProperty::CopyFrom(const FormationProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pro_list_size(); i++) {
    if (!this->pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void FormationProperty::Swap(FormationProperty* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    pro_list_.Swap(&other->pro_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationProperty_descriptor_;
  metadata.reflection = FormationProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideData::kKeyFieldNumber;
const int GuideData::kValueFieldNumber;
#endif  // !_MSC_VER

GuideData::GuideData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideData::InitAsDefaultInstance() {
}

GuideData::GuideData(const GuideData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideData::~GuideData() {
  SharedDtor();
}

void GuideData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideData_descriptor_;
}

const GuideData& GuideData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuideData* GuideData::default_instance_ = NULL;

GuideData* GuideData::New() const {
  return new GuideData;
}

void GuideData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideData::MergeFrom(const GuideData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideData::CopyFrom(const GuideData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideData::IsInitialized() const {

  return true;
}

void GuideData::Swap(GuideData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideData_descriptor_;
  metadata.reflection = GuideData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleBaseInfo::kRoleIdFieldNumber;
const int RoleBaseInfo::kRoleNameFieldNumber;
const int RoleBaseInfo::kAccountFieldNumber;
const int RoleBaseInfo::kStaminaFieldNumber;
const int RoleBaseInfo::kEnergyFieldNumber;
const int RoleBaseInfo::kSexFieldNumber;
const int RoleBaseInfo::kLevelFieldNumber;
const int RoleBaseInfo::kDailyInitLevelFieldNumber;
const int RoleBaseInfo::kExpFieldNumber;
const int RoleBaseInfo::kGoldFieldNumber;
const int RoleBaseInfo::kDiamondFieldNumber;
const int RoleBaseInfo::kHeadImageIdFieldNumber;
const int RoleBaseInfo::kVipLevelFieldNumber;
const int RoleBaseInfo::kVipExpFieldNumber;
const int RoleBaseInfo::kRiotSuppressTimesFieldNumber;
const int RoleBaseInfo::kHeroSoulFieldNumber;
const int RoleBaseInfo::kGodSoulFieldNumber;
const int RoleBaseInfo::kFairySoulFieldNumber;
const int RoleBaseInfo::kArenaPrestigeFieldNumber;
const int RoleBaseInfo::kTowerPrestigeFieldNumber;
const int RoleBaseInfo::kFightingPowerFieldNumber;
const int RoleBaseInfo::kWantedFieldNumber;
const int RoleBaseInfo::kRebelValueFieldNumber;
const int RoleBaseInfo::kHonorFieldNumber;
const int RoleBaseInfo::kCurContributionFieldNumber;
const int RoleBaseInfo::kWorldBossBattleTimesFieldNumber;
const int RoleBaseInfo::kGuildFbRewardChapterFieldNumber;
const int RoleBaseInfo::kLastLoginTimeFieldNumber;
const int RoleBaseInfo::kLastLogoutTimeFieldNumber;
const int RoleBaseInfo::kTotalOnlineTimeFieldNumber;
const int RoleBaseInfo::kLoginTimesFieldNumber;
const int RoleBaseInfo::kLastStaminaRecoverTimeFieldNumber;
const int RoleBaseInfo::kLastEnergyRecoverTimeFieldNumber;
const int RoleBaseInfo::kLastWantedRecoverTimeFieldNumber;
const int RoleBaseInfo::kFormationProListFieldNumber;
const int RoleBaseInfo::kOnceFlagListFieldNumber;
const int RoleBaseInfo::kGuideXFieldNumber;
const int RoleBaseInfo::kGuideYFieldNumber;
const int RoleBaseInfo::kGuideListFieldNumber;
const int RoleBaseInfo::kDuobaoPeaceOverTimeFieldNumber;
#endif  // !_MSC_VER

RoleBaseInfo::RoleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleBaseInfo::InitAsDefaultInstance() {
}

RoleBaseInfo::RoleBaseInfo(const RoleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stamina_ = 0u;
  energy_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  daily_init_level_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  diamond_ = 0u;
  head_image_id_ = 0u;
  vip_level_ = 0u;
  vip_exp_ = 0u;
  riot_suppress_times_ = 0u;
  hero_soul_ = 0u;
  god_soul_ = 0u;
  fairy_soul_ = 0u;
  arena_prestige_ = 0u;
  tower_prestige_ = 0u;
  fighting_power_ = 0u;
  wanted_ = 0u;
  rebel_value_ = 0u;
  honor_ = 0u;
  cur_contribution_ = 0u;
  world_boss_battle_times_ = 0u;
  guild_fb_reward_chapter_ = 0u;
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_logout_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_online_time_ = 0u;
  login_times_ = 0u;
  last_stamina_recover_time_ = 0u;
  last_energy_recover_time_ = 0u;
  last_wanted_recover_time_ = 0u;
  once_flag_list_ = 0u;
  guide_x_ = 0u;
  guide_y_ = 0u;
  duobao_peace_over_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBaseInfo::~RoleBaseInfo() {
  SharedDtor();
}

void RoleBaseInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_login_time_;
  }
  if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_logout_time_;
  }
  if (this != default_instance_) {
  }
}

void RoleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBaseInfo_descriptor_;
}

const RoleBaseInfo& RoleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleBaseInfo* RoleBaseInfo::default_instance_ = NULL;

RoleBaseInfo* RoleBaseInfo::New() const {
  return new RoleBaseInfo;
}

void RoleBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    stamina_ = 0u;
    energy_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    daily_init_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
    gold_ = 0u;
    diamond_ = 0u;
    head_image_id_ = 0u;
    vip_level_ = 0u;
    vip_exp_ = 0u;
    riot_suppress_times_ = 0u;
    hero_soul_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    god_soul_ = 0u;
    fairy_soul_ = 0u;
    arena_prestige_ = 0u;
    tower_prestige_ = 0u;
    fighting_power_ = 0u;
    wanted_ = 0u;
    rebel_value_ = 0u;
    honor_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    cur_contribution_ = 0u;
    world_boss_battle_times_ = 0u;
    guild_fb_reward_chapter_ = 0u;
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
        last_login_time_->clear();
      }
    }
    if (has_last_logout_time()) {
      if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
        last_logout_time_->clear();
      }
    }
    total_online_time_ = 0u;
    login_times_ = 0u;
    last_stamina_recover_time_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    last_energy_recover_time_ = 0u;
    last_wanted_recover_time_ = 0u;
    once_flag_list_ = 0u;
    guide_x_ = 0u;
    guide_y_ = 0u;
    duobao_peace_over_time_ = 0u;
  }
  formation_pro_list_.Clear();
  guide_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stamina;
        break;
      }

      // optional uint32 stamina = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_daily_init_level;
        break;
      }

      // optional uint32 daily_init_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_init_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_init_level_)));
          set_has_daily_init_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_head_image_id;
        break;
      }

      // optional uint32 head_image_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_id_)));
          set_has_head_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_riot_suppress_times;
        break;
      }

      // optional uint32 riot_suppress_times = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riot_suppress_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &riot_suppress_times_)));
          set_has_riot_suppress_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hero_soul;
        break;
      }

      // optional uint32 hero_soul = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_soul_)));
          set_has_hero_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_god_soul;
        break;
      }

      // optional uint32 god_soul = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &god_soul_)));
          set_has_god_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fairy_soul;
        break;
      }

      // optional uint32 fairy_soul = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_soul_)));
          set_has_fairy_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_arena_prestige;
        break;
      }

      // optional uint32 arena_prestige = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_prestige_)));
          set_has_arena_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tower_prestige;
        break;
      }

      // optional uint32 tower_prestige = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_prestige_)));
          set_has_tower_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fighting_power;
        break;
      }

      // optional uint32 fighting_power = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_wanted;
        break;
      }

      // optional uint32 wanted = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wanted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wanted_)));
          set_has_wanted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_rebel_value;
        break;
      }

      // optional uint32 rebel_value = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebel_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebel_value_)));
          set_has_rebel_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cur_contribution;
        break;
      }

      // optional uint32 cur_contribution = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_contribution_)));
          set_has_cur_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_world_boss_battle_times;
        break;
      }

      // optional uint32 world_boss_battle_times = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_boss_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_boss_battle_times_)));
          set_has_world_boss_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_guild_fb_reward_chapter;
        break;
      }

      // optional uint32 guild_fb_reward_chapter = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_fb_reward_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_fb_reward_chapter_)));
          set_has_guild_fb_reward_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_last_login_time;
        break;
      }

      // optional string last_login_time = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_login_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_login_time().data(), this->last_login_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_last_logout_time;
        break;
      }

      // optional string last_logout_time = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_logout_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_logout_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_logout_time().data(), this->last_logout_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_total_online_time;
        break;
      }

      // optional uint32 total_online_time = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_online_time_)));
          set_has_total_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_login_times;
        break;
      }

      // optional uint32 login_times = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_times_)));
          set_has_login_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_last_stamina_recover_time;
        break;
      }

      // optional uint32 last_stamina_recover_time = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_stamina_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_stamina_recover_time_)));
          set_has_last_stamina_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_last_energy_recover_time;
        break;
      }

      // optional uint32 last_energy_recover_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_energy_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_energy_recover_time_)));
          set_has_last_energy_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_last_wanted_recover_time;
        break;
      }

      // optional uint32 last_wanted_recover_time = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_wanted_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_wanted_recover_time_)));
          set_has_last_wanted_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_formation_pro_list;
        break;
      }

      // repeated .PB.FormationProperty formation_pro_list = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formation_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_formation_pro_list;
        if (input->ExpectTag(288)) goto parse_once_flag_list;
        break;
      }

      // optional uint32 once_flag_list = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_once_flag_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &once_flag_list_)));
          set_has_once_flag_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_guide_x;
        break;
      }

      // optional uint32 guide_x = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_x_)));
          set_has_guide_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_guide_y;
        break;
      }

      // optional uint32 guide_y = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_y_)));
          set_has_guide_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_guide_list;
        break;
      }

      // repeated .PB.GuideData guide_list = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guide_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_guide_list;
        if (input->ExpectTag(320)) goto parse_duobao_peace_over_time;
        break;
      }

      // optional uint32 duobao_peace_over_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duobao_peace_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duobao_peace_over_time_)));
          set_has_duobao_peace_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 stamina = 4;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stamina(), output);
  }

  // optional uint32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->energy(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 daily_init_level = 8;
  if (has_daily_init_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->daily_init_level(), output);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 diamond = 11;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->diamond(), output);
  }

  // optional uint32 head_image_id = 12;
  if (has_head_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->head_image_id(), output);
  }

  // optional uint32 vip_level = 13;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vip_level(), output);
  }

  // optional uint32 vip_exp = 14;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->vip_exp(), output);
  }

  // optional uint32 riot_suppress_times = 15;
  if (has_riot_suppress_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->riot_suppress_times(), output);
  }

  // optional uint32 hero_soul = 16;
  if (has_hero_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hero_soul(), output);
  }

  // optional uint32 god_soul = 17;
  if (has_god_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->god_soul(), output);
  }

  // optional uint32 fairy_soul = 18;
  if (has_fairy_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fairy_soul(), output);
  }

  // optional uint32 arena_prestige = 19;
  if (has_arena_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->arena_prestige(), output);
  }

  // optional uint32 tower_prestige = 20;
  if (has_tower_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tower_prestige(), output);
  }

  // optional uint32 fighting_power = 21;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fighting_power(), output);
  }

  // optional uint32 wanted = 22;
  if (has_wanted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->wanted(), output);
  }

  // optional uint32 rebel_value = 23;
  if (has_rebel_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->rebel_value(), output);
  }

  // optional uint32 honor = 24;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->honor(), output);
  }

  // optional uint32 cur_contribution = 25;
  if (has_cur_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->cur_contribution(), output);
  }

  // optional uint32 world_boss_battle_times = 26;
  if (has_world_boss_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->world_boss_battle_times(), output);
  }

  // optional uint32 guild_fb_reward_chapter = 27;
  if (has_guild_fb_reward_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->guild_fb_reward_chapter(), output);
  }

  // optional string last_login_time = 28;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_time().data(), this->last_login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->last_login_time(), output);
  }

  // optional string last_logout_time = 29;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_logout_time().data(), this->last_logout_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->last_logout_time(), output);
  }

  // optional uint32 total_online_time = 30;
  if (has_total_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->total_online_time(), output);
  }

  // optional uint32 login_times = 31;
  if (has_login_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->login_times(), output);
  }

  // optional uint32 last_stamina_recover_time = 32;
  if (has_last_stamina_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->last_stamina_recover_time(), output);
  }

  // optional uint32 last_energy_recover_time = 33;
  if (has_last_energy_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->last_energy_recover_time(), output);
  }

  // optional uint32 last_wanted_recover_time = 34;
  if (has_last_wanted_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->last_wanted_recover_time(), output);
  }

  // repeated .PB.FormationProperty formation_pro_list = 35;
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->formation_pro_list(i), output);
  }

  // optional uint32 once_flag_list = 36;
  if (has_once_flag_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->once_flag_list(), output);
  }

  // optional uint32 guide_x = 37;
  if (has_guide_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->guide_x(), output);
  }

  // optional uint32 guide_y = 38;
  if (has_guide_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->guide_y(), output);
  }

  // repeated .PB.GuideData guide_list = 39;
  for (int i = 0; i < this->guide_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->guide_list(i), output);
  }

  // optional uint32 duobao_peace_over_time = 40;
  if (has_duobao_peace_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->duobao_peace_over_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 stamina = 4;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stamina(), target);
  }

  // optional uint32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->energy(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 daily_init_level = 8;
  if (has_daily_init_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->daily_init_level(), target);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }

  // optional uint32 diamond = 11;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->diamond(), target);
  }

  // optional uint32 head_image_id = 12;
  if (has_head_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->head_image_id(), target);
  }

  // optional uint32 vip_level = 13;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vip_level(), target);
  }

  // optional uint32 vip_exp = 14;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->vip_exp(), target);
  }

  // optional uint32 riot_suppress_times = 15;
  if (has_riot_suppress_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->riot_suppress_times(), target);
  }

  // optional uint32 hero_soul = 16;
  if (has_hero_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hero_soul(), target);
  }

  // optional uint32 god_soul = 17;
  if (has_god_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->god_soul(), target);
  }

  // optional uint32 fairy_soul = 18;
  if (has_fairy_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fairy_soul(), target);
  }

  // optional uint32 arena_prestige = 19;
  if (has_arena_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->arena_prestige(), target);
  }

  // optional uint32 tower_prestige = 20;
  if (has_tower_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tower_prestige(), target);
  }

  // optional uint32 fighting_power = 21;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fighting_power(), target);
  }

  // optional uint32 wanted = 22;
  if (has_wanted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->wanted(), target);
  }

  // optional uint32 rebel_value = 23;
  if (has_rebel_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->rebel_value(), target);
  }

  // optional uint32 honor = 24;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->honor(), target);
  }

  // optional uint32 cur_contribution = 25;
  if (has_cur_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->cur_contribution(), target);
  }

  // optional uint32 world_boss_battle_times = 26;
  if (has_world_boss_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->world_boss_battle_times(), target);
  }

  // optional uint32 guild_fb_reward_chapter = 27;
  if (has_guild_fb_reward_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->guild_fb_reward_chapter(), target);
  }

  // optional string last_login_time = 28;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_time().data(), this->last_login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->last_login_time(), target);
  }

  // optional string last_logout_time = 29;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_logout_time().data(), this->last_logout_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->last_logout_time(), target);
  }

  // optional uint32 total_online_time = 30;
  if (has_total_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->total_online_time(), target);
  }

  // optional uint32 login_times = 31;
  if (has_login_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->login_times(), target);
  }

  // optional uint32 last_stamina_recover_time = 32;
  if (has_last_stamina_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->last_stamina_recover_time(), target);
  }

  // optional uint32 last_energy_recover_time = 33;
  if (has_last_energy_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->last_energy_recover_time(), target);
  }

  // optional uint32 last_wanted_recover_time = 34;
  if (has_last_wanted_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->last_wanted_recover_time(), target);
  }

  // repeated .PB.FormationProperty formation_pro_list = 35;
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->formation_pro_list(i), target);
  }

  // optional uint32 once_flag_list = 36;
  if (has_once_flag_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->once_flag_list(), target);
  }

  // optional uint32 guide_x = 37;
  if (has_guide_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->guide_x(), target);
  }

  // optional uint32 guide_y = 38;
  if (has_guide_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->guide_y(), target);
  }

  // repeated .PB.GuideData guide_list = 39;
  for (int i = 0; i < this->guide_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->guide_list(i), target);
  }

  // optional uint32 duobao_peace_over_time = 40;
  if (has_duobao_peace_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->duobao_peace_over_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 stamina = 4;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamina());
    }

    // optional uint32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 daily_init_level = 8;
    if (has_daily_init_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_init_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 diamond = 11;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 head_image_id = 12;
    if (has_head_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_image_id());
    }

    // optional uint32 vip_level = 13;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 vip_exp = 14;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint32 riot_suppress_times = 15;
    if (has_riot_suppress_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->riot_suppress_times());
    }

    // optional uint32 hero_soul = 16;
    if (has_hero_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_soul());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 god_soul = 17;
    if (has_god_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->god_soul());
    }

    // optional uint32 fairy_soul = 18;
    if (has_fairy_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_soul());
    }

    // optional uint32 arena_prestige = 19;
    if (has_arena_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_prestige());
    }

    // optional uint32 tower_prestige = 20;
    if (has_tower_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_prestige());
    }

    // optional uint32 fighting_power = 21;
    if (has_fighting_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // optional uint32 wanted = 22;
    if (has_wanted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wanted());
    }

    // optional uint32 rebel_value = 23;
    if (has_rebel_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebel_value());
    }

    // optional uint32 honor = 24;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 cur_contribution = 25;
    if (has_cur_contribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_contribution());
    }

    // optional uint32 world_boss_battle_times = 26;
    if (has_world_boss_battle_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_boss_battle_times());
    }

    // optional uint32 guild_fb_reward_chapter = 27;
    if (has_guild_fb_reward_chapter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_fb_reward_chapter());
    }

    // optional string last_login_time = 28;
    if (has_last_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_login_time());
    }

    // optional string last_logout_time = 29;
    if (has_last_logout_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_logout_time());
    }

    // optional uint32 total_online_time = 30;
    if (has_total_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_online_time());
    }

    // optional uint32 login_times = 31;
    if (has_login_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_times());
    }

    // optional uint32 last_stamina_recover_time = 32;
    if (has_last_stamina_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_stamina_recover_time());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 last_energy_recover_time = 33;
    if (has_last_energy_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_energy_recover_time());
    }

    // optional uint32 last_wanted_recover_time = 34;
    if (has_last_wanted_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_wanted_recover_time());
    }

    // optional uint32 once_flag_list = 36;
    if (has_once_flag_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->once_flag_list());
    }

    // optional uint32 guide_x = 37;
    if (has_guide_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_x());
    }

    // optional uint32 guide_y = 38;
    if (has_guide_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_y());
    }

    // optional uint32 duobao_peace_over_time = 40;
    if (has_duobao_peace_over_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duobao_peace_over_time());
    }

  }
  // repeated .PB.FormationProperty formation_pro_list = 35;
  total_size += 2 * this->formation_pro_list_size();
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formation_pro_list(i));
  }

  // repeated .PB.GuideData guide_list = 39;
  total_size += 2 * this->guide_list_size();
  for (int i = 0; i < this->guide_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBaseInfo::MergeFrom(const RoleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_pro_list_.MergeFrom(from.formation_pro_list_);
  guide_list_.MergeFrom(from.guide_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_daily_init_level()) {
      set_daily_init_level(from.daily_init_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_head_image_id()) {
      set_head_image_id(from.head_image_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_riot_suppress_times()) {
      set_riot_suppress_times(from.riot_suppress_times());
    }
    if (from.has_hero_soul()) {
      set_hero_soul(from.hero_soul());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_god_soul()) {
      set_god_soul(from.god_soul());
    }
    if (from.has_fairy_soul()) {
      set_fairy_soul(from.fairy_soul());
    }
    if (from.has_arena_prestige()) {
      set_arena_prestige(from.arena_prestige());
    }
    if (from.has_tower_prestige()) {
      set_tower_prestige(from.tower_prestige());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_wanted()) {
      set_wanted(from.wanted());
    }
    if (from.has_rebel_value()) {
      set_rebel_value(from.rebel_value());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cur_contribution()) {
      set_cur_contribution(from.cur_contribution());
    }
    if (from.has_world_boss_battle_times()) {
      set_world_boss_battle_times(from.world_boss_battle_times());
    }
    if (from.has_guild_fb_reward_chapter()) {
      set_guild_fb_reward_chapter(from.guild_fb_reward_chapter());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_total_online_time()) {
      set_total_online_time(from.total_online_time());
    }
    if (from.has_login_times()) {
      set_login_times(from.login_times());
    }
    if (from.has_last_stamina_recover_time()) {
      set_last_stamina_recover_time(from.last_stamina_recover_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_last_energy_recover_time()) {
      set_last_energy_recover_time(from.last_energy_recover_time());
    }
    if (from.has_last_wanted_recover_time()) {
      set_last_wanted_recover_time(from.last_wanted_recover_time());
    }
    if (from.has_once_flag_list()) {
      set_once_flag_list(from.once_flag_list());
    }
    if (from.has_guide_x()) {
      set_guide_x(from.guide_x());
    }
    if (from.has_guide_y()) {
      set_guide_y(from.guide_y());
    }
    if (from.has_duobao_peace_over_time()) {
      set_duobao_peace_over_time(from.duobao_peace_over_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBaseInfo::CopyFrom(const RoleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < formation_pro_list_size(); i++) {
    if (!this->formation_pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleBaseInfo::Swap(RoleBaseInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(account_, other->account_);
    std::swap(stamina_, other->stamina_);
    std::swap(energy_, other->energy_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(daily_init_level_, other->daily_init_level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(head_image_id_, other->head_image_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(riot_suppress_times_, other->riot_suppress_times_);
    std::swap(hero_soul_, other->hero_soul_);
    std::swap(god_soul_, other->god_soul_);
    std::swap(fairy_soul_, other->fairy_soul_);
    std::swap(arena_prestige_, other->arena_prestige_);
    std::swap(tower_prestige_, other->tower_prestige_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(wanted_, other->wanted_);
    std::swap(rebel_value_, other->rebel_value_);
    std::swap(honor_, other->honor_);
    std::swap(cur_contribution_, other->cur_contribution_);
    std::swap(world_boss_battle_times_, other->world_boss_battle_times_);
    std::swap(guild_fb_reward_chapter_, other->guild_fb_reward_chapter_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(total_online_time_, other->total_online_time_);
    std::swap(login_times_, other->login_times_);
    std::swap(last_stamina_recover_time_, other->last_stamina_recover_time_);
    std::swap(last_energy_recover_time_, other->last_energy_recover_time_);
    std::swap(last_wanted_recover_time_, other->last_wanted_recover_time_);
    formation_pro_list_.Swap(&other->formation_pro_list_);
    std::swap(once_flag_list_, other->once_flag_list_);
    std::swap(guide_x_, other->guide_x_);
    std::swap(guide_y_, other->guide_y_);
    guide_list_.Swap(&other->guide_list_);
    std::swap(duobao_peace_over_time_, other->duobao_peace_over_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBaseInfo_descriptor_;
  metadata.reflection = RoleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEquipmentInfo::kEquipmentListFieldNumber;
#endif  // !_MSC_VER

RoleEquipmentInfo::RoleEquipmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEquipmentInfo::InitAsDefaultInstance() {
}

RoleEquipmentInfo::RoleEquipmentInfo(const RoleEquipmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEquipmentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEquipmentInfo::~RoleEquipmentInfo() {
  SharedDtor();
}

void RoleEquipmentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEquipmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEquipmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEquipmentInfo_descriptor_;
}

const RoleEquipmentInfo& RoleEquipmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleEquipmentInfo* RoleEquipmentInfo::default_instance_ = NULL;

RoleEquipmentInfo* RoleEquipmentInfo::New() const {
  return new RoleEquipmentInfo;
}

void RoleEquipmentInfo::Clear() {
  equipment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEquipmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Equipment equipment_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipment_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEquipmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Equipment equipment_list = 1;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEquipmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Equipment equipment_list = 1;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEquipmentInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Equipment equipment_list = 1;
  total_size += 1 * this->equipment_list_size();
  for (int i = 0; i < this->equipment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEquipmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEquipmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEquipmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEquipmentInfo::MergeFrom(const RoleEquipmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_list_.MergeFrom(from.equipment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEquipmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEquipmentInfo::CopyFrom(const RoleEquipmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEquipmentInfo::IsInitialized() const {

  for (int i = 0; i < equipment_list_size(); i++) {
    if (!this->equipment_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleEquipmentInfo::Swap(RoleEquipmentInfo* other) {
  if (other != this) {
    equipment_list_.Swap(&other->equipment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEquipmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEquipmentInfo_descriptor_;
  metadata.reflection = RoleEquipmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Formation::kHeroIdFieldNumber;
const int Formation::kEquipmentListFieldNumber;
const int Formation::kTreasureListFieldNumber;
#endif  // !_MSC_VER

Formation::Formation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Formation::InitAsDefaultInstance() {
}

Formation::Formation(const Formation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Formation::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Formation::~Formation() {
  SharedDtor();
}

void Formation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Formation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Formation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Formation_descriptor_;
}

const Formation& Formation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Formation* Formation::default_instance_ = NULL;

Formation* Formation::New() const {
  return new Formation;
}

void Formation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
  }
  equipment_list_.Clear();
  treasure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Formation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment_list;
        break;
      }

      // repeated uint32 equipment_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equipment_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipment_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment_list;
        if (input->ExpectTag(24)) goto parse_treasure_list;
        break;
      }

      // repeated uint32 treasure_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_treasure_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_treasure_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasure_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Formation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // repeated uint32 equipment_list = 2;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equipment_list(i), output);
  }

  // repeated uint32 treasure_list = 3;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->treasure_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Formation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // repeated uint32 equipment_list = 2;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equipment_list(i), target);
  }

  // repeated uint32 treasure_list = 3;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->treasure_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Formation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  // repeated uint32 equipment_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipment_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipment_list(i));
    }
    total_size += 1 * this->equipment_list_size() + data_size;
  }

  // repeated uint32 treasure_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->treasure_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->treasure_list(i));
    }
    total_size += 1 * this->treasure_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Formation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Formation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Formation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Formation::MergeFrom(const Formation& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_list_.MergeFrom(from.equipment_list_);
  treasure_list_.MergeFrom(from.treasure_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Formation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Formation::CopyFrom(const Formation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Formation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Formation::Swap(Formation* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    equipment_list_.Swap(&other->equipment_list_);
    treasure_list_.Swap(&other->treasure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Formation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Formation_descriptor_;
  metadata.reflection = Formation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroInfo::kNormalFreeSummonTimesFieldNumber;
const int RoleHeroInfo::kNormalFreeSummonTimeFieldNumber;
const int RoleHeroInfo::kHighFreeSummonTimeFieldNumber;
const int RoleHeroInfo::kHighSummonTimesFieldNumber;
const int RoleHeroInfo::kHeroListFieldNumber;
const int RoleHeroInfo::kCollectionListFieldNumber;
const int RoleHeroInfo::kReinforcementListFieldNumber;
const int RoleHeroInfo::kFormationListFieldNumber;
const int RoleHeroInfo::kTrainTimesFieldNumber;
#endif  // !_MSC_VER

RoleHeroInfo::RoleHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleHeroInfo::InitAsDefaultInstance() {
}

RoleHeroInfo::RoleHeroInfo(const RoleHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  normal_free_summon_times_ = 0u;
  normal_free_summon_time_ = 0u;
  high_free_summon_time_ = 0u;
  high_summon_times_ = 0u;
  train_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroInfo::~RoleHeroInfo() {
  SharedDtor();
}

void RoleHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroInfo_descriptor_;
}

const RoleHeroInfo& RoleHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleHeroInfo* RoleHeroInfo::default_instance_ = NULL;

RoleHeroInfo* RoleHeroInfo::New() const {
  return new RoleHeroInfo;
}

void RoleHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normal_free_summon_times_ = 0u;
    normal_free_summon_time_ = 0u;
    high_free_summon_time_ = 0u;
    high_summon_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    train_times_ = 0u;
  }
  hero_list_.Clear();
  collection_list_.Clear();
  reinforcement_list_.Clear();
  formation_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 normal_free_summon_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_free_summon_times_)));
          set_has_normal_free_summon_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_normal_free_summon_time;
        break;
      }

      // required uint32 normal_free_summon_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_free_summon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_free_summon_time_)));
          set_has_normal_free_summon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_high_free_summon_time;
        break;
      }

      // required uint32 high_free_summon_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_free_summon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_free_summon_time_)));
          set_has_high_free_summon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_high_summon_times;
        break;
      }

      // required uint32 high_summon_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_summon_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_summon_times_)));
          set_has_high_summon_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hero_list;
        break;
      }

      // repeated .PB.Hero hero_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hero_list;
        if (input->ExpectTag(48)) goto parse_collection_list;
        break;
      }

      // repeated uint32 collection_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collection_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_collection_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collection_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_collection_list;
        if (input->ExpectTag(56)) goto parse_reinforcement_list;
        break;
      }

      // repeated uint32 reinforcement_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reinforcement_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_reinforcement_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reinforcement_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reinforcement_list;
        if (input->ExpectTag(66)) goto parse_formation_list;
        break;
      }

      // repeated .PB.Formation formation_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_formation_list;
        if (input->ExpectTag(72)) goto parse_train_times;
        break;
      }

      // optional uint32 train_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_times_)));
          set_has_train_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 normal_free_summon_times = 1;
  if (has_normal_free_summon_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->normal_free_summon_times(), output);
  }

  // required uint32 normal_free_summon_time = 2;
  if (has_normal_free_summon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_free_summon_time(), output);
  }

  // required uint32 high_free_summon_time = 3;
  if (has_high_free_summon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->high_free_summon_time(), output);
  }

  // required uint32 high_summon_times = 4;
  if (has_high_summon_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_summon_times(), output);
  }

  // repeated .PB.Hero hero_list = 5;
  for (int i = 0; i < this->hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hero_list(i), output);
  }

  // repeated uint32 collection_list = 6;
  for (int i = 0; i < this->collection_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->collection_list(i), output);
  }

  // repeated uint32 reinforcement_list = 7;
  for (int i = 0; i < this->reinforcement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->reinforcement_list(i), output);
  }

  // repeated .PB.Formation formation_list = 8;
  for (int i = 0; i < this->formation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->formation_list(i), output);
  }

  // optional uint32 train_times = 9;
  if (has_train_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->train_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 normal_free_summon_times = 1;
  if (has_normal_free_summon_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->normal_free_summon_times(), target);
  }

  // required uint32 normal_free_summon_time = 2;
  if (has_normal_free_summon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_free_summon_time(), target);
  }

  // required uint32 high_free_summon_time = 3;
  if (has_high_free_summon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->high_free_summon_time(), target);
  }

  // required uint32 high_summon_times = 4;
  if (has_high_summon_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_summon_times(), target);
  }

  // repeated .PB.Hero hero_list = 5;
  for (int i = 0; i < this->hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hero_list(i), target);
  }

  // repeated uint32 collection_list = 6;
  for (int i = 0; i < this->collection_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->collection_list(i), target);
  }

  // repeated uint32 reinforcement_list = 7;
  for (int i = 0; i < this->reinforcement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->reinforcement_list(i), target);
  }

  // repeated .PB.Formation formation_list = 8;
  for (int i = 0; i < this->formation_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->formation_list(i), target);
  }

  // optional uint32 train_times = 9;
  if (has_train_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->train_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 normal_free_summon_times = 1;
    if (has_normal_free_summon_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_free_summon_times());
    }

    // required uint32 normal_free_summon_time = 2;
    if (has_normal_free_summon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_free_summon_time());
    }

    // required uint32 high_free_summon_time = 3;
    if (has_high_free_summon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_free_summon_time());
    }

    // required uint32 high_summon_times = 4;
    if (has_high_summon_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_summon_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 train_times = 9;
    if (has_train_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_times());
    }

  }
  // repeated .PB.Hero hero_list = 5;
  total_size += 1 * this->hero_list_size();
  for (int i = 0; i < this->hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_list(i));
  }

  // repeated uint32 collection_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->collection_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collection_list(i));
    }
    total_size += 1 * this->collection_list_size() + data_size;
  }

  // repeated uint32 reinforcement_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->reinforcement_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reinforcement_list(i));
    }
    total_size += 1 * this->reinforcement_list_size() + data_size;
  }

  // repeated .PB.Formation formation_list = 8;
  total_size += 1 * this->formation_list_size();
  for (int i = 0; i < this->formation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formation_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroInfo::MergeFrom(const RoleHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_list_.MergeFrom(from.hero_list_);
  collection_list_.MergeFrom(from.collection_list_);
  reinforcement_list_.MergeFrom(from.reinforcement_list_);
  formation_list_.MergeFrom(from.formation_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normal_free_summon_times()) {
      set_normal_free_summon_times(from.normal_free_summon_times());
    }
    if (from.has_normal_free_summon_time()) {
      set_normal_free_summon_time(from.normal_free_summon_time());
    }
    if (from.has_high_free_summon_time()) {
      set_high_free_summon_time(from.high_free_summon_time());
    }
    if (from.has_high_summon_times()) {
      set_high_summon_times(from.high_summon_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_train_times()) {
      set_train_times(from.train_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroInfo::CopyFrom(const RoleHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < hero_list_size(); i++) {
    if (!this->hero_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < formation_list_size(); i++) {
    if (!this->formation_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleHeroInfo::Swap(RoleHeroInfo* other) {
  if (other != this) {
    std::swap(normal_free_summon_times_, other->normal_free_summon_times_);
    std::swap(normal_free_summon_time_, other->normal_free_summon_time_);
    std::swap(high_free_summon_time_, other->high_free_summon_time_);
    std::swap(high_summon_times_, other->high_summon_times_);
    hero_list_.Swap(&other->hero_list_);
    collection_list_.Swap(&other->collection_list_);
    reinforcement_list_.Swap(&other->reinforcement_list_);
    formation_list_.Swap(&other->formation_list_);
    std::swap(train_times_, other->train_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroInfo_descriptor_;
  metadata.reflection = RoleHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTreasureInfo::kTreasureListFieldNumber;
#endif  // !_MSC_VER

RoleTreasureInfo::RoleTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleTreasureInfo::InitAsDefaultInstance() {
}

RoleTreasureInfo::RoleTreasureInfo(const RoleTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleTreasureInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTreasureInfo::~RoleTreasureInfo() {
  SharedDtor();
}

void RoleTreasureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTreasureInfo_descriptor_;
}

const RoleTreasureInfo& RoleTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleTreasureInfo* RoleTreasureInfo::default_instance_ = NULL;

RoleTreasureInfo* RoleTreasureInfo::New() const {
  return new RoleTreasureInfo;
}

void RoleTreasureInfo::Clear() {
  treasure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Treasure treasure_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasure_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasure_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasure_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Treasure treasure_list = 1;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasure_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Treasure treasure_list = 1;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasure_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleTreasureInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Treasure treasure_list = 1;
  total_size += 1 * this->treasure_list_size();
  for (int i = 0; i < this->treasure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasure_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTreasureInfo::MergeFrom(const RoleTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasure_list_.MergeFrom(from.treasure_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTreasureInfo::CopyFrom(const RoleTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasureInfo::IsInitialized() const {

  for (int i = 0; i < treasure_list_size(); i++) {
    if (!this->treasure_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleTreasureInfo::Swap(RoleTreasureInfo* other) {
  if (other != this) {
    treasure_list_.Swap(&other->treasure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTreasureInfo_descriptor_;
  metadata.reflection = RoleTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleItemInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

RoleItemInfo::RoleItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleItemInfo::InitAsDefaultInstance() {
}

RoleItemInfo::RoleItemInfo(const RoleItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleItemInfo::~RoleItemInfo() {
  SharedDtor();
}

void RoleItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleItemInfo_descriptor_;
}

const RoleItemInfo& RoleItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleItemInfo* RoleItemInfo::default_instance_ = NULL;

RoleItemInfo* RoleItemInfo::New() const {
  return new RoleItemInfo;
}

void RoleItemInfo::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Item item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Item item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Item item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleItemInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Item item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleItemInfo::MergeFrom(const RoleItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleItemInfo::CopyFrom(const RoleItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItemInfo::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleItemInfo::Swap(RoleItemInfo* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleItemInfo_descriptor_;
  metadata.reflection = RoleItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailContext::kTypeFieldNumber;
const int EmailContext::kTextFieldNumber;
#endif  // !_MSC_VER

EmailContext::EmailContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailContext::InitAsDefaultInstance() {
}

EmailContext::EmailContext(const EmailContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailContext::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailContext::~EmailContext() {
  SharedDtor();
}

void EmailContext::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void EmailContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailContext_descriptor_;
}

const EmailContext& EmailContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EmailContext* EmailContext::default_instance_ = NULL;

EmailContext* EmailContext::New() const {
  return new EmailContext;
}

void EmailContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailContext::MergeFrom(const EmailContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailContext::CopyFrom(const EmailContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EmailContext::Swap(EmailContext* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailContext_descriptor_;
  metadata.reflection = EmailContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailInfo::kUidFieldNumber;
const int EmailInfo::kInfoIdFieldNumber;
const int EmailInfo::kReceiveTimeFieldNumber;
const int EmailInfo::kContextListFieldNumber;
#endif  // !_MSC_VER

EmailInfo::EmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailInfo::InitAsDefaultInstance() {
}

EmailInfo::EmailInfo(const EmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  receive_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailInfo::~EmailInfo() {
  SharedDtor();
}

void EmailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailInfo_descriptor_;
}

const EmailInfo& EmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EmailInfo* EmailInfo::default_instance_ = NULL;

EmailInfo* EmailInfo::New() const {
  return new EmailInfo;
}

void EmailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    receive_time_ = 0u;
  }
  context_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receive_time;
        break;
      }

      // required uint32 receive_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receive_time_)));
          set_has_receive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context_list;
        break;
      }

      // repeated .PB.EmailContext context_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_context_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 receive_time = 3;
  if (has_receive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receive_time(), output);
  }

  // repeated .PB.EmailContext context_list = 4;
  for (int i = 0; i < this->context_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->context_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 receive_time = 3;
  if (has_receive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receive_time(), target);
  }

  // repeated .PB.EmailContext context_list = 4;
  for (int i = 0; i < this->context_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->context_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 receive_time = 3;
    if (has_receive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receive_time());
    }

  }
  // repeated .PB.EmailContext context_list = 4;
  total_size += 1 * this->context_list_size();
  for (int i = 0; i < this->context_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->context_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailInfo::MergeFrom(const EmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  context_list_.MergeFrom(from.context_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_receive_time()) {
      set_receive_time(from.receive_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailInfo::CopyFrom(const EmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < context_list_size(); i++) {
    if (!this->context_list(i).IsInitialized()) return false;
  }
  return true;
}

void EmailInfo::Swap(EmailInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(receive_time_, other->receive_time_);
    context_list_.Swap(&other->context_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailInfo_descriptor_;
  metadata.reflection = EmailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEmailInfo::kEmailListFieldNumber;
#endif  // !_MSC_VER

RoleEmailInfo::RoleEmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEmailInfo::InitAsDefaultInstance() {
}

RoleEmailInfo::RoleEmailInfo(const RoleEmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEmailInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEmailInfo::~RoleEmailInfo() {
  SharedDtor();
}

void RoleEmailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEmailInfo_descriptor_;
}

const RoleEmailInfo& RoleEmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleEmailInfo* RoleEmailInfo::default_instance_ = NULL;

RoleEmailInfo* RoleEmailInfo::New() const {
  return new RoleEmailInfo;
}

void RoleEmailInfo::Clear() {
  email_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.EmailInfo email_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_email_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_email_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.EmailInfo email_list = 1;
  for (int i = 0; i < this->email_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->email_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.EmailInfo email_list = 1;
  for (int i = 0; i < this->email_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->email_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEmailInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.EmailInfo email_list = 1;
  total_size += 1 * this->email_list_size();
  for (int i = 0; i < this->email_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->email_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEmailInfo::MergeFrom(const RoleEmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  email_list_.MergeFrom(from.email_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEmailInfo::CopyFrom(const RoleEmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEmailInfo::IsInitialized() const {

  for (int i = 0; i < email_list_size(); i++) {
    if (!this->email_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleEmailInfo::Swap(RoleEmailInfo* other) {
  if (other != this) {
    email_list_.Swap(&other->email_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEmailInfo_descriptor_;
  metadata.reflection = RoleEmailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapData::kStarFieldNumber;
const int MapData::kBattleTimesFieldNumber;
const int MapData::kResetTimesFieldNumber;
const int MapData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

MapData::MapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapData::InitAsDefaultInstance() {
}

MapData::MapData(const MapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapData::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  battle_times_ = 0u;
  reset_times_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData::~MapData() {
  SharedDtor();
}

void MapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapData_descriptor_;
}

const MapData& MapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MapData* MapData::default_instance_ = NULL;

MapData* MapData::New() const {
  return new MapData;
}

void MapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0u;
    battle_times_ = 0u;
    reset_times_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_times;
        break;
      }

      // required uint32 battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_times;
        break;
      }

      // required uint32 reset_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_times(), output);
  }

  // required uint32 reset_times = 3;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reset_times(), output);
  }

  // required uint32 is_get_reward = 4;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_times(), target);
  }

  // required uint32 reset_times = 3;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reset_times(), target);
  }

  // required uint32 is_get_reward = 4;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 battle_times = 2;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // required uint32 reset_times = 3;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

    // required uint32 is_get_reward = 4;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MapData::Swap(MapData* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapData_descriptor_;
  metadata.reflection = MapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterData::kMapListFieldNumber;
const int ChapterData::kStarRewardListFieldNumber;
#endif  // !_MSC_VER

ChapterData::ChapterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterData::InitAsDefaultInstance() {
}

ChapterData::ChapterData(const ChapterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterData::~ChapterData() {
  SharedDtor();
}

void ChapterData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterData_descriptor_;
}

const ChapterData& ChapterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ChapterData* ChapterData::default_instance_ = NULL;

ChapterData* ChapterData::New() const {
  return new ChapterData;
}

void ChapterData::Clear() {
  map_list_.Clear();
  star_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.MapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        break;
      }

      // repeated uint32 star_reward_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_star_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_star_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->star_reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->star_reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.MapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  // repeated uint32 star_reward_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->star_reward_list(i));
    }
    total_size += 1 * this->star_reward_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterData::MergeFrom(const ChapterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  star_reward_list_.MergeFrom(from.star_reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterData::CopyFrom(const ChapterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterData::IsInitialized() const {

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChapterData::Swap(ChapterData* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    star_reward_list_.Swap(&other->star_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterData_descriptor_;
  metadata.reflection = ChapterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainFBData::kChapterListFieldNumber;
#endif  // !_MSC_VER

MainFBData::MainFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainFBData::InitAsDefaultInstance() {
}

MainFBData::MainFBData(const MainFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainFBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainFBData::~MainFBData() {
  SharedDtor();
}

void MainFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainFBData_descriptor_;
}

const MainFBData& MainFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MainFBData* MainFBData::default_instance_ = NULL;

MainFBData* MainFBData::New() const {
  return new MainFBData;
}

void MainFBData::Clear() {
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ChapterData chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainFBData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ChapterData chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainFBData::MergeFrom(const MainFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainFBData::CopyFrom(const MainFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainFBData::IsInitialized() const {

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void MainFBData::Swap(MainFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainFBData_descriptor_;
  metadata.reflection = MainFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroMapData::kBattleTimesFieldNumber;
const int HeroMapData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

HeroMapData::HeroMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroMapData::InitAsDefaultInstance() {
}

HeroMapData::HeroMapData(const HeroMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroMapData::SharedCtor() {
  _cached_size_ = 0;
  battle_times_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroMapData::~HeroMapData() {
  SharedDtor();
}

void HeroMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroMapData_descriptor_;
}

const HeroMapData& HeroMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroMapData* HeroMapData::default_instance_ = NULL;

HeroMapData* HeroMapData::New() const {
  return new HeroMapData;
}

void HeroMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_times_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_times = 1;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_times(), output);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_times = 1;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_times(), target);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_times = 1;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // required uint32 is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroMapData::MergeFrom(const HeroMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroMapData::CopyFrom(const HeroMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroMapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeroMapData::Swap(HeroMapData* other) {
  if (other != this) {
    std::swap(battle_times_, other->battle_times_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroMapData_descriptor_;
  metadata.reflection = HeroMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroFBChapter::kMapListFieldNumber;
const int HeroFBChapter::kIsPassExtraMapFieldNumber;
#endif  // !_MSC_VER

HeroFBChapter::HeroFBChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroFBChapter::InitAsDefaultInstance() {
}

HeroFBChapter::HeroFBChapter(const HeroFBChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroFBChapter::SharedCtor() {
  _cached_size_ = 0;
  is_pass_extra_map_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroFBChapter::~HeroFBChapter() {
  SharedDtor();
}

void HeroFBChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroFBChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFBChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFBChapter_descriptor_;
}

const HeroFBChapter& HeroFBChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroFBChapter* HeroFBChapter::default_instance_ = NULL;

HeroFBChapter* HeroFBChapter::New() const {
  return new HeroFBChapter;
}

void HeroFBChapter::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_pass_extra_map_ = 0u;
  }
  map_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroFBChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.HeroMapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_is_pass_extra_map;
        break;
      }

      // required uint32 is_pass_extra_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pass_extra_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_pass_extra_map_)));
          set_has_is_pass_extra_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroFBChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.HeroMapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // required uint32 is_pass_extra_map = 2;
  if (has_is_pass_extra_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_pass_extra_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroFBChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.HeroMapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // required uint32 is_pass_extra_map = 2;
  if (has_is_pass_extra_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_pass_extra_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroFBChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 is_pass_extra_map = 2;
    if (has_is_pass_extra_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_pass_extra_map());
    }

  }
  // repeated .PB.HeroMapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFBChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroFBChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroFBChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroFBChapter::MergeFrom(const HeroFBChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_pass_extra_map()) {
      set_is_pass_extra_map(from.is_pass_extra_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroFBChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFBChapter::CopyFrom(const HeroFBChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroFBChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroFBChapter::Swap(HeroFBChapter* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    std::swap(is_pass_extra_map_, other->is_pass_extra_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroFBChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFBChapter_descriptor_;
  metadata.reflection = HeroFBChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroFBData::kChapterListFieldNumber;
const int HeroFBData::kBattleTimesFieldNumber;
#endif  // !_MSC_VER

HeroFBData::HeroFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroFBData::InitAsDefaultInstance() {
}

HeroFBData::HeroFBData(const HeroFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroFBData::SharedCtor() {
  _cached_size_ = 0;
  battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroFBData::~HeroFBData() {
  SharedDtor();
}

void HeroFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFBData_descriptor_;
}

const HeroFBData& HeroFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroFBData* HeroFBData::default_instance_ = NULL;

HeroFBData* HeroFBData::New() const {
  return new HeroFBData;
}

void HeroFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battle_times_ = 0u;
  }
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.HeroFBChapter chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectTag(16)) goto parse_battle_times;
        break;
      }

      // required uint32 battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.HeroFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.HeroFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 battle_times = 2;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

  }
  // repeated .PB.HeroFBChapter chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroFBData::MergeFrom(const HeroFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFBData::CopyFrom(const HeroFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroFBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroFBData::Swap(HeroFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFBData_descriptor_;
  metadata.reflection = HeroFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyFBData::kChapterListFieldNumber;
#endif  // !_MSC_VER

DailyFBData::DailyFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyFBData::InitAsDefaultInstance() {
}

DailyFBData::DailyFBData(const DailyFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyFBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyFBData::~DailyFBData() {
  SharedDtor();
}

void DailyFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyFBData_descriptor_;
}

const DailyFBData& DailyFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DailyFBData* DailyFBData::default_instance_ = NULL;

DailyFBData* DailyFBData::New() const {
  return new DailyFBData;
}

void DailyFBData::Clear() {
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_chapter_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chapter_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_chapter_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->chapter_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->chapter_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyFBData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 chapter_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->chapter_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chapter_list(i));
    }
    total_size += 1 * this->chapter_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyFBData::MergeFrom(const DailyFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyFBData::CopyFrom(const DailyFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyFBData::IsInitialized() const {

  return true;
}

void DailyFBData::Swap(DailyFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyFBData_descriptor_;
  metadata.reflection = DailyFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteMapEnemyData::kMapIdFieldNumber;
const int EliteMapEnemyData::kMonsterListFieldNumber;
#endif  // !_MSC_VER

EliteMapEnemyData::EliteMapEnemyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteMapEnemyData::InitAsDefaultInstance() {
}

EliteMapEnemyData::EliteMapEnemyData(const EliteMapEnemyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteMapEnemyData::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteMapEnemyData::~EliteMapEnemyData() {
  SharedDtor();
}

void EliteMapEnemyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteMapEnemyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteMapEnemyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteMapEnemyData_descriptor_;
}

const EliteMapEnemyData& EliteMapEnemyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteMapEnemyData* EliteMapEnemyData::default_instance_ = NULL;

EliteMapEnemyData* EliteMapEnemyData::New() const {
  return new EliteMapEnemyData;
}

void EliteMapEnemyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  monster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteMapEnemyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_list;
        break;
      }

      // repeated .PB.MonsterData monster_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteMapEnemyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // repeated .PB.MonsterData monster_list = 2;
  for (int i = 0; i < this->monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteMapEnemyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // repeated .PB.MonsterData monster_list = 2;
  for (int i = 0; i < this->monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteMapEnemyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  // repeated .PB.MonsterData monster_list = 2;
  total_size += 1 * this->monster_list_size();
  for (int i = 0; i < this->monster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteMapEnemyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteMapEnemyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteMapEnemyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteMapEnemyData::MergeFrom(const EliteMapEnemyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_list_.MergeFrom(from.monster_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteMapEnemyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteMapEnemyData::CopyFrom(const EliteMapEnemyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteMapEnemyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < monster_list_size(); i++) {
    if (!this->monster_list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteMapEnemyData::Swap(EliteMapEnemyData* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    monster_list_.Swap(&other->monster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteMapEnemyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteMapEnemyData_descriptor_;
  metadata.reflection = EliteMapEnemyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteFBChapter::kMapListFieldNumber;
const int EliteFBChapter::kStarRewardListFieldNumber;
const int EliteFBChapter::kEnemyDataFieldNumber;
#endif  // !_MSC_VER

EliteFBChapter::EliteFBChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteFBChapter::InitAsDefaultInstance() {
  enemy_data_ = const_cast< ::PB::EliteMapEnemyData*>(&::PB::EliteMapEnemyData::default_instance());
}

EliteFBChapter::EliteFBChapter(const EliteFBChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteFBChapter::SharedCtor() {
  _cached_size_ = 0;
  enemy_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteFBChapter::~EliteFBChapter() {
  SharedDtor();
}

void EliteFBChapter::SharedDtor() {
  if (this != default_instance_) {
    delete enemy_data_;
  }
}

void EliteFBChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteFBChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteFBChapter_descriptor_;
}

const EliteFBChapter& EliteFBChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteFBChapter* EliteFBChapter::default_instance_ = NULL;

EliteFBChapter* EliteFBChapter::New() const {
  return new EliteFBChapter;
}

void EliteFBChapter::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_enemy_data()) {
      if (enemy_data_ != NULL) enemy_data_->::PB::EliteMapEnemyData::Clear();
    }
  }
  map_list_.Clear();
  star_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteFBChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.MapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        break;
      }

      // repeated uint32 star_reward_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_star_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_star_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        if (input->ExpectTag(26)) goto parse_enemy_data;
        break;
      }

      // required .PB.EliteMapEnemyData enemy_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteFBChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->star_reward_list(i), output);
  }

  // required .PB.EliteMapEnemyData enemy_data = 3;
  if (has_enemy_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteFBChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->star_reward_list(i), target);
  }

  // required .PB.EliteMapEnemyData enemy_data = 3;
  if (has_enemy_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteFBChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .PB.EliteMapEnemyData enemy_data = 3;
    if (has_enemy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemy_data());
    }

  }
  // repeated .PB.MapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  // repeated uint32 star_reward_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->star_reward_list(i));
    }
    total_size += 1 * this->star_reward_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteFBChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteFBChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteFBChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteFBChapter::MergeFrom(const EliteFBChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  star_reward_list_.MergeFrom(from.star_reward_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_enemy_data()) {
      mutable_enemy_data()->::PB::EliteMapEnemyData::MergeFrom(from.enemy_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteFBChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteFBChapter::CopyFrom(const EliteFBChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteFBChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  if (has_enemy_data()) {
    if (!this->enemy_data().IsInitialized()) return false;
  }
  return true;
}

void EliteFBChapter::Swap(EliteFBChapter* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    star_reward_list_.Swap(&other->star_reward_list_);
    std::swap(enemy_data_, other->enemy_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteFBChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteFBChapter_descriptor_;
  metadata.reflection = EliteFBChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteFBData::kChapterListFieldNumber;
#endif  // !_MSC_VER

EliteFBData::EliteFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteFBData::InitAsDefaultInstance() {
}

EliteFBData::EliteFBData(const EliteFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteFBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteFBData::~EliteFBData() {
  SharedDtor();
}

void EliteFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteFBData_descriptor_;
}

const EliteFBData& EliteFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteFBData* EliteFBData::default_instance_ = NULL;

EliteFBData* EliteFBData::New() const {
  return new EliteFBData;
}

void EliteFBData::Clear() {
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.EliteFBChapter chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.EliteFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.EliteFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteFBData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.EliteFBChapter chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteFBData::MergeFrom(const EliteFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteFBData::CopyFrom(const EliteFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteFBData::IsInitialized() const {

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteFBData::Swap(EliteFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteFBData_descriptor_;
  metadata.reflection = EliteFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerFBData::kMapStarListFieldNumber;
const int TowerFBData::kMapLevelRecordFieldNumber;
const int TowerFBData::kKeepBestStarPassedRecordFieldNumber;
const int TowerFBData::kSelectProListFieldNumber;
const int TowerFBData::kIsBuyStarGoodsFieldNumber;
const int TowerFBData::kStarGoodsIdxFieldNumber;
const int TowerFBData::kIsNeedResetFieldNumber;
const int TowerFBData::kTodayResetTimesFieldNumber;
const int TowerFBData::kCurStarFieldNumber;
const int TowerFBData::kStarMaxRecordFieldNumber;
const int TowerFBData::kEliteMapLevelFieldNumber;
const int TowerFBData::kEliteMapBattleTimesFieldNumber;
const int TowerFBData::kBuyEliteMapBattleTimesFieldNumber;
const int TowerFBData::kRandProIdxListFieldNumber;
#endif  // !_MSC_VER

TowerFBData::TowerFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerFBData::InitAsDefaultInstance() {
}

TowerFBData::TowerFBData(const TowerFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerFBData::SharedCtor() {
  _cached_size_ = 0;
  map_level_record_ = 0u;
  keep_best_star_passed_record_ = 0u;
  is_buy_star_goods_ = 0u;
  star_goods_idx_ = 0u;
  is_need_reset_ = 0u;
  today_reset_times_ = 0u;
  cur_star_ = 0u;
  star_max_record_ = 0u;
  elite_map_level_ = 0u;
  elite_map_battle_times_ = 0u;
  buy_elite_map_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerFBData::~TowerFBData() {
  SharedDtor();
}

void TowerFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerFBData_descriptor_;
}

const TowerFBData& TowerFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TowerFBData* TowerFBData::default_instance_ = NULL;

TowerFBData* TowerFBData::New() const {
  return new TowerFBData;
}

void TowerFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    map_level_record_ = 0u;
    keep_best_star_passed_record_ = 0u;
    is_buy_star_goods_ = 0u;
    star_goods_idx_ = 0u;
    is_need_reset_ = 0u;
    today_reset_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_star_ = 0u;
    star_max_record_ = 0u;
    elite_map_level_ = 0u;
    elite_map_battle_times_ = 0u;
    buy_elite_map_battle_times_ = 0u;
  }
  map_star_list_.Clear();
  select_pro_list_.Clear();
  rand_pro_idx_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 map_star_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_star_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_map_star_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_map_star_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_map_star_list;
        if (input->ExpectTag(16)) goto parse_map_level_record;
        break;
      }

      // required uint32 map_level_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_level_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_level_record_)));
          set_has_map_level_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keep_best_star_passed_record;
        break;
      }

      // required uint32 keep_best_star_passed_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_best_star_passed_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keep_best_star_passed_record_)));
          set_has_keep_best_star_passed_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_select_pro_list;
        break;
      }

      // repeated .PB.Property select_pro_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_select_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_select_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_select_pro_list;
        if (input->ExpectTag(40)) goto parse_is_buy_star_goods;
        break;
      }

      // required uint32 is_buy_star_goods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy_star_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_buy_star_goods_)));
          set_has_is_buy_star_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_goods_idx;
        break;
      }

      // required uint32 star_goods_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_goods_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_goods_idx_)));
          set_has_star_goods_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_need_reset;
        break;
      }

      // required uint32 is_need_reset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_need_reset_)));
          set_has_is_need_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_today_reset_times;
        break;
      }

      // required uint32 today_reset_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_reset_times_)));
          set_has_today_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_star;
        break;
      }

      // required uint32 cur_star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_star_)));
          set_has_cur_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_star_max_record;
        break;
      }

      // required uint32 star_max_record = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_max_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_max_record_)));
          set_has_star_max_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite_map_level;
        break;
      }

      // required uint32 elite_map_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_map_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_map_level_)));
          set_has_elite_map_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_elite_map_battle_times;
        break;
      }

      // required uint32 elite_map_battle_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_map_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_map_battle_times_)));
          set_has_elite_map_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buy_elite_map_battle_times;
        break;
      }

      // required uint32 buy_elite_map_battle_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_elite_map_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_elite_map_battle_times_)));
          set_has_buy_elite_map_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rand_pro_idx_list;
        break;
      }

      // repeated uint32 rand_pro_idx_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_pro_idx_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_rand_pro_idx_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rand_pro_idx_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rand_pro_idx_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 map_star_list = 1;
  for (int i = 0; i < this->map_star_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->map_star_list(i), output);
  }

  // required uint32 map_level_record = 2;
  if (has_map_level_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_level_record(), output);
  }

  // required uint32 keep_best_star_passed_record = 3;
  if (has_keep_best_star_passed_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->keep_best_star_passed_record(), output);
  }

  // repeated .PB.Property select_pro_list = 4;
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->select_pro_list(i), output);
  }

  // required uint32 is_buy_star_goods = 5;
  if (has_is_buy_star_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_buy_star_goods(), output);
  }

  // required uint32 star_goods_idx = 6;
  if (has_star_goods_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->star_goods_idx(), output);
  }

  // required uint32 is_need_reset = 7;
  if (has_is_need_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_need_reset(), output);
  }

  // required uint32 today_reset_times = 8;
  if (has_today_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->today_reset_times(), output);
  }

  // required uint32 cur_star = 9;
  if (has_cur_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_star(), output);
  }

  // required uint32 star_max_record = 10;
  if (has_star_max_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->star_max_record(), output);
  }

  // required uint32 elite_map_level = 11;
  if (has_elite_map_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elite_map_level(), output);
  }

  // required uint32 elite_map_battle_times = 12;
  if (has_elite_map_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->elite_map_battle_times(), output);
  }

  // required uint32 buy_elite_map_battle_times = 13;
  if (has_buy_elite_map_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->buy_elite_map_battle_times(), output);
  }

  // repeated uint32 rand_pro_idx_list = 14;
  for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->rand_pro_idx_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 map_star_list = 1;
  for (int i = 0; i < this->map_star_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->map_star_list(i), target);
  }

  // required uint32 map_level_record = 2;
  if (has_map_level_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_level_record(), target);
  }

  // required uint32 keep_best_star_passed_record = 3;
  if (has_keep_best_star_passed_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->keep_best_star_passed_record(), target);
  }

  // repeated .PB.Property select_pro_list = 4;
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->select_pro_list(i), target);
  }

  // required uint32 is_buy_star_goods = 5;
  if (has_is_buy_star_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_buy_star_goods(), target);
  }

  // required uint32 star_goods_idx = 6;
  if (has_star_goods_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->star_goods_idx(), target);
  }

  // required uint32 is_need_reset = 7;
  if (has_is_need_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_need_reset(), target);
  }

  // required uint32 today_reset_times = 8;
  if (has_today_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->today_reset_times(), target);
  }

  // required uint32 cur_star = 9;
  if (has_cur_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_star(), target);
  }

  // required uint32 star_max_record = 10;
  if (has_star_max_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->star_max_record(), target);
  }

  // required uint32 elite_map_level = 11;
  if (has_elite_map_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elite_map_level(), target);
  }

  // required uint32 elite_map_battle_times = 12;
  if (has_elite_map_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->elite_map_battle_times(), target);
  }

  // required uint32 buy_elite_map_battle_times = 13;
  if (has_buy_elite_map_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->buy_elite_map_battle_times(), target);
  }

  // repeated uint32 rand_pro_idx_list = 14;
  for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->rand_pro_idx_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 map_level_record = 2;
    if (has_map_level_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_level_record());
    }

    // required uint32 keep_best_star_passed_record = 3;
    if (has_keep_best_star_passed_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keep_best_star_passed_record());
    }

    // required uint32 is_buy_star_goods = 5;
    if (has_is_buy_star_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_buy_star_goods());
    }

    // required uint32 star_goods_idx = 6;
    if (has_star_goods_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_goods_idx());
    }

    // required uint32 is_need_reset = 7;
    if (has_is_need_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_need_reset());
    }

    // required uint32 today_reset_times = 8;
    if (has_today_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_reset_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 cur_star = 9;
    if (has_cur_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_star());
    }

    // required uint32 star_max_record = 10;
    if (has_star_max_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_max_record());
    }

    // required uint32 elite_map_level = 11;
    if (has_elite_map_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_map_level());
    }

    // required uint32 elite_map_battle_times = 12;
    if (has_elite_map_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_map_battle_times());
    }

    // required uint32 buy_elite_map_battle_times = 13;
    if (has_buy_elite_map_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_elite_map_battle_times());
    }

  }
  // repeated uint32 map_star_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_star_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->map_star_list(i));
    }
    total_size += 1 * this->map_star_list_size() + data_size;
  }

  // repeated .PB.Property select_pro_list = 4;
  total_size += 1 * this->select_pro_list_size();
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->select_pro_list(i));
  }

  // repeated uint32 rand_pro_idx_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rand_pro_idx_list(i));
    }
    total_size += 1 * this->rand_pro_idx_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerFBData::MergeFrom(const TowerFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_star_list_.MergeFrom(from.map_star_list_);
  select_pro_list_.MergeFrom(from.select_pro_list_);
  rand_pro_idx_list_.MergeFrom(from.rand_pro_idx_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_map_level_record()) {
      set_map_level_record(from.map_level_record());
    }
    if (from.has_keep_best_star_passed_record()) {
      set_keep_best_star_passed_record(from.keep_best_star_passed_record());
    }
    if (from.has_is_buy_star_goods()) {
      set_is_buy_star_goods(from.is_buy_star_goods());
    }
    if (from.has_star_goods_idx()) {
      set_star_goods_idx(from.star_goods_idx());
    }
    if (from.has_is_need_reset()) {
      set_is_need_reset(from.is_need_reset());
    }
    if (from.has_today_reset_times()) {
      set_today_reset_times(from.today_reset_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_star()) {
      set_cur_star(from.cur_star());
    }
    if (from.has_star_max_record()) {
      set_star_max_record(from.star_max_record());
    }
    if (from.has_elite_map_level()) {
      set_elite_map_level(from.elite_map_level());
    }
    if (from.has_elite_map_battle_times()) {
      set_elite_map_battle_times(from.elite_map_battle_times());
    }
    if (from.has_buy_elite_map_battle_times()) {
      set_buy_elite_map_battle_times(from.buy_elite_map_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerFBData::CopyFrom(const TowerFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerFBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ff6) != 0x00001ff6) return false;

  for (int i = 0; i < select_pro_list_size(); i++) {
    if (!this->select_pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void TowerFBData::Swap(TowerFBData* other) {
  if (other != this) {
    map_star_list_.Swap(&other->map_star_list_);
    std::swap(map_level_record_, other->map_level_record_);
    std::swap(keep_best_star_passed_record_, other->keep_best_star_passed_record_);
    select_pro_list_.Swap(&other->select_pro_list_);
    std::swap(is_buy_star_goods_, other->is_buy_star_goods_);
    std::swap(star_goods_idx_, other->star_goods_idx_);
    std::swap(is_need_reset_, other->is_need_reset_);
    std::swap(today_reset_times_, other->today_reset_times_);
    std::swap(cur_star_, other->cur_star_);
    std::swap(star_max_record_, other->star_max_record_);
    std::swap(elite_map_level_, other->elite_map_level_);
    std::swap(elite_map_battle_times_, other->elite_map_battle_times_);
    std::swap(buy_elite_map_battle_times_, other->buy_elite_map_battle_times_);
    rand_pro_idx_list_.Swap(&other->rand_pro_idx_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerFBData_descriptor_;
  metadata.reflection = TowerFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFBInfo::kMainFbDataFieldNumber;
const int RoleFBInfo::kHeroFbDataFieldNumber;
const int RoleFBInfo::kDailyFbDataFieldNumber;
const int RoleFBInfo::kTowerFbDataFieldNumber;
const int RoleFBInfo::kEliteFbDataFieldNumber;
#endif  // !_MSC_VER

RoleFBInfo::RoleFBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFBInfo::InitAsDefaultInstance() {
  main_fb_data_ = const_cast< ::PB::MainFBData*>(&::PB::MainFBData::default_instance());
  hero_fb_data_ = const_cast< ::PB::HeroFBData*>(&::PB::HeroFBData::default_instance());
  daily_fb_data_ = const_cast< ::PB::DailyFBData*>(&::PB::DailyFBData::default_instance());
  tower_fb_data_ = const_cast< ::PB::TowerFBData*>(&::PB::TowerFBData::default_instance());
  elite_fb_data_ = const_cast< ::PB::EliteFBData*>(&::PB::EliteFBData::default_instance());
}

RoleFBInfo::RoleFBInfo(const RoleFBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFBInfo::SharedCtor() {
  _cached_size_ = 0;
  main_fb_data_ = NULL;
  hero_fb_data_ = NULL;
  daily_fb_data_ = NULL;
  tower_fb_data_ = NULL;
  elite_fb_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFBInfo::~RoleFBInfo() {
  SharedDtor();
}

void RoleFBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete main_fb_data_;
    delete hero_fb_data_;
    delete daily_fb_data_;
    delete tower_fb_data_;
    delete elite_fb_data_;
  }
}

void RoleFBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFBInfo_descriptor_;
}

const RoleFBInfo& RoleFBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleFBInfo* RoleFBInfo::default_instance_ = NULL;

RoleFBInfo* RoleFBInfo::New() const {
  return new RoleFBInfo;
}

void RoleFBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_main_fb_data()) {
      if (main_fb_data_ != NULL) main_fb_data_->::PB::MainFBData::Clear();
    }
    if (has_hero_fb_data()) {
      if (hero_fb_data_ != NULL) hero_fb_data_->::PB::HeroFBData::Clear();
    }
    if (has_daily_fb_data()) {
      if (daily_fb_data_ != NULL) daily_fb_data_->::PB::DailyFBData::Clear();
    }
    if (has_tower_fb_data()) {
      if (tower_fb_data_ != NULL) tower_fb_data_->::PB::TowerFBData::Clear();
    }
    if (has_elite_fb_data()) {
      if (elite_fb_data_ != NULL) elite_fb_data_->::PB::EliteFBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.MainFBData main_fb_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_fb_data;
        break;
      }

      // required .PB.HeroFBData hero_fb_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_daily_fb_data;
        break;
      }

      // required .PB.DailyFBData daily_fb_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tower_fb_data;
        break;
      }

      // required .PB.TowerFBData tower_fb_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elite_fb_data;
        break;
      }

      // required .PB.EliteFBData elite_fb_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elite_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elite_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PB.MainFBData main_fb_data = 1;
  if (has_main_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->main_fb_data(), output);
  }

  // required .PB.HeroFBData hero_fb_data = 2;
  if (has_hero_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_fb_data(), output);
  }

  // required .PB.DailyFBData daily_fb_data = 3;
  if (has_daily_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->daily_fb_data(), output);
  }

  // required .PB.TowerFBData tower_fb_data = 4;
  if (has_tower_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tower_fb_data(), output);
  }

  // required .PB.EliteFBData elite_fb_data = 5;
  if (has_elite_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elite_fb_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PB.MainFBData main_fb_data = 1;
  if (has_main_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->main_fb_data(), target);
  }

  // required .PB.HeroFBData hero_fb_data = 2;
  if (has_hero_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_fb_data(), target);
  }

  // required .PB.DailyFBData daily_fb_data = 3;
  if (has_daily_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->daily_fb_data(), target);
  }

  // required .PB.TowerFBData tower_fb_data = 4;
  if (has_tower_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tower_fb_data(), target);
  }

  // required .PB.EliteFBData elite_fb_data = 5;
  if (has_elite_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elite_fb_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PB.MainFBData main_fb_data = 1;
    if (has_main_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->main_fb_data());
    }

    // required .PB.HeroFBData hero_fb_data = 2;
    if (has_hero_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_fb_data());
    }

    // required .PB.DailyFBData daily_fb_data = 3;
    if (has_daily_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_fb_data());
    }

    // required .PB.TowerFBData tower_fb_data = 4;
    if (has_tower_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_fb_data());
    }

    // required .PB.EliteFBData elite_fb_data = 5;
    if (has_elite_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elite_fb_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFBInfo::MergeFrom(const RoleFBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_fb_data()) {
      mutable_main_fb_data()->::PB::MainFBData::MergeFrom(from.main_fb_data());
    }
    if (from.has_hero_fb_data()) {
      mutable_hero_fb_data()->::PB::HeroFBData::MergeFrom(from.hero_fb_data());
    }
    if (from.has_daily_fb_data()) {
      mutable_daily_fb_data()->::PB::DailyFBData::MergeFrom(from.daily_fb_data());
    }
    if (from.has_tower_fb_data()) {
      mutable_tower_fb_data()->::PB::TowerFBData::MergeFrom(from.tower_fb_data());
    }
    if (from.has_elite_fb_data()) {
      mutable_elite_fb_data()->::PB::EliteFBData::MergeFrom(from.elite_fb_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFBInfo::CopyFrom(const RoleFBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_main_fb_data()) {
    if (!this->main_fb_data().IsInitialized()) return false;
  }
  if (has_hero_fb_data()) {
    if (!this->hero_fb_data().IsInitialized()) return false;
  }
  if (has_tower_fb_data()) {
    if (!this->tower_fb_data().IsInitialized()) return false;
  }
  if (has_elite_fb_data()) {
    if (!this->elite_fb_data().IsInitialized()) return false;
  }
  return true;
}

void RoleFBInfo::Swap(RoleFBInfo* other) {
  if (other != this) {
    std::swap(main_fb_data_, other->main_fb_data_);
    std::swap(hero_fb_data_, other->hero_fb_data_);
    std::swap(daily_fb_data_, other->daily_fb_data_);
    std::swap(tower_fb_data_, other->tower_fb_data_);
    std::swap(elite_fb_data_, other->elite_fb_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFBInfo_descriptor_;
  metadata.reflection = RoleFBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopGoods::kGoodsIdFieldNumber;
const int ShopGoods::kGoodsNumFieldNumber;
#endif  // !_MSC_VER

ShopGoods::ShopGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopGoods::InitAsDefaultInstance() {
}

ShopGoods::ShopGoods(const ShopGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopGoods::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  goods_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGoods::~ShopGoods() {
  SharedDtor();
}

void ShopGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopGoods_descriptor_;
}

const ShopGoods& ShopGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ShopGoods* ShopGoods::default_instance_ = NULL;

ShopGoods* ShopGoods::New() const {
  return new ShopGoods;
}

void ShopGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    goods_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_num;
        break;
      }

      // required uint32 goods_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 goods_num = 2;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopGoods::MergeFrom(const ShopGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopGoods::CopyFrom(const ShopGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopGoods::Swap(ShopGoods* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopGoods_descriptor_;
  metadata.reflection = ShopGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroShopData::kGoodsListFieldNumber;
const int HeroShopData::kLastRecoverTimeFieldNumber;
const int HeroShopData::kFreeRefreshTimesFieldNumber;
const int HeroShopData::kCostRefreshTimesFieldNumber;
#endif  // !_MSC_VER

HeroShopData::HeroShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroShopData::InitAsDefaultInstance() {
}

HeroShopData::HeroShopData(const HeroShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroShopData::SharedCtor() {
  _cached_size_ = 0;
  last_recover_time_ = 0u;
  free_refresh_times_ = 0u;
  cost_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroShopData::~HeroShopData() {
  SharedDtor();
}

void HeroShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroShopData_descriptor_;
}

const HeroShopData& HeroShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroShopData* HeroShopData::default_instance_ = NULL;

HeroShopData* HeroShopData::New() const {
  return new HeroShopData;
}

void HeroShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_recover_time_ = 0u;
    free_refresh_times_ = 0u;
    cost_refresh_times_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_last_recover_time;
        break;
      }

      // required uint32 last_recover_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_recover_time_)));
          set_has_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_refresh_times;
        break;
      }

      // required uint32 free_refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_times_)));
          set_has_free_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_refresh_times;
        break;
      }

      // required uint32 cost_refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_refresh_times_)));
          set_has_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_recover_time(), output);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_refresh_times(), output);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_recover_time(), target);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_refresh_times(), target);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 last_recover_time = 2;
    if (has_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_recover_time());
    }

    // required uint32 free_refresh_times = 3;
    if (has_free_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_refresh_times());
    }

    // required uint32 cost_refresh_times = 4;
    if (has_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_refresh_times());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroShopData::MergeFrom(const HeroShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_recover_time()) {
      set_last_recover_time(from.last_recover_time());
    }
    if (from.has_free_refresh_times()) {
      set_free_refresh_times(from.free_refresh_times());
    }
    if (from.has_cost_refresh_times()) {
      set_cost_refresh_times(from.cost_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroShopData::CopyFrom(const HeroShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroShopData::Swap(HeroShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(last_recover_time_, other->last_recover_time_);
    std::swap(free_refresh_times_, other->free_refresh_times_);
    std::swap(cost_refresh_times_, other->cost_refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroShopData_descriptor_;
  metadata.reflection = HeroShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildShopData::kRewardGoodsBuyRecordFieldNumber;
const int GuildShopData::kItemGoodsBuyRecordFieldNumber;
const int GuildShopData::kLimitGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

GuildShopData::GuildShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildShopData::InitAsDefaultInstance() {
}

GuildShopData::GuildShopData(const GuildShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildShopData::~GuildShopData() {
  SharedDtor();
}

void GuildShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildShopData_descriptor_;
}

const GuildShopData& GuildShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildShopData* GuildShopData::default_instance_ = NULL;

GuildShopData* GuildShopData::New() const {
  return new GuildShopData;
}

void GuildShopData::Clear() {
  reward_goods_buy_record_.Clear();
  item_goods_buy_record_.Clear();
  limit_goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods reward_goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward_goods_buy_record;
        if (input->ExpectTag(18)) goto parse_item_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods item_goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_goods_buy_record;
        if (input->ExpectTag(26)) goto parse_limit_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods limit_goods_buy_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_limit_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limit_goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limit_goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  total_size += 1 * this->reward_goods_buy_record_size();
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  total_size += 1 * this->item_goods_buy_record_size();
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  total_size += 1 * this->limit_goods_buy_record_size();
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildShopData::MergeFrom(const GuildShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_goods_buy_record_.MergeFrom(from.reward_goods_buy_record_);
  item_goods_buy_record_.MergeFrom(from.item_goods_buy_record_);
  limit_goods_buy_record_.MergeFrom(from.limit_goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildShopData::CopyFrom(const GuildShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildShopData::IsInitialized() const {

  for (int i = 0; i < reward_goods_buy_record_size(); i++) {
    if (!this->reward_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_goods_buy_record_size(); i++) {
    if (!this->item_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < limit_goods_buy_record_size(); i++) {
    if (!this->limit_goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void GuildShopData::Swap(GuildShopData* other) {
  if (other != this) {
    reward_goods_buy_record_.Swap(&other->reward_goods_buy_record_);
    item_goods_buy_record_.Swap(&other->item_goods_buy_record_);
    limit_goods_buy_record_.Swap(&other->limit_goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildShopData_descriptor_;
  metadata.reflection = GuildShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallShopData::kItemBuyRecordFieldNumber;
const int MallShopData::kGiftBuyRecordFieldNumber;
#endif  // !_MSC_VER

MallShopData::MallShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallShopData::InitAsDefaultInstance() {
}

MallShopData::MallShopData(const MallShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallShopData::~MallShopData() {
  SharedDtor();
}

void MallShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallShopData_descriptor_;
}

const MallShopData& MallShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MallShopData* MallShopData::default_instance_ = NULL;

MallShopData* MallShopData::New() const {
  return new MallShopData;
}

void MallShopData::Clear() {
  item_buy_record_.Clear();
  gift_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods item_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_buy_record;
        if (input->ExpectTag(18)) goto parse_gift_buy_record;
        break;
      }

      // repeated .PB.ShopGoods gift_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods item_buy_record = 1;
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_buy_record(i), output);
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gift_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods item_buy_record = 1;
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_buy_record(i), target);
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gift_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods item_buy_record = 1;
  total_size += 1 * this->item_buy_record_size();
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_buy_record(i));
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  total_size += 1 * this->gift_buy_record_size();
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallShopData::MergeFrom(const MallShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_buy_record_.MergeFrom(from.item_buy_record_);
  gift_buy_record_.MergeFrom(from.gift_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallShopData::CopyFrom(const MallShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallShopData::IsInitialized() const {

  for (int i = 0; i < item_buy_record_size(); i++) {
    if (!this->item_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gift_buy_record_size(); i++) {
    if (!this->gift_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void MallShopData::Swap(MallShopData* other) {
  if (other != this) {
    item_buy_record_.Swap(&other->item_buy_record_);
    gift_buy_record_.Swap(&other->gift_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallShopData_descriptor_;
  metadata.reflection = MallShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

TowerShopData::TowerShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerShopData::InitAsDefaultInstance() {
}

TowerShopData::TowerShopData(const TowerShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerShopData::~TowerShopData() {
  SharedDtor();
}

void TowerShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerShopData_descriptor_;
}

const TowerShopData& TowerShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TowerShopData* TowerShopData::default_instance_ = NULL;

TowerShopData* TowerShopData::New() const {
  return new TowerShopData;
}

void TowerShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerShopData::MergeFrom(const TowerShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerShopData::CopyFrom(const TowerShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void TowerShopData::Swap(TowerShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerShopData_descriptor_;
  metadata.reflection = TowerShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

ArenaShopData::ArenaShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaShopData::InitAsDefaultInstance() {
}

ArenaShopData::ArenaShopData(const ArenaShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaShopData::~ArenaShopData() {
  SharedDtor();
}

void ArenaShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaShopData_descriptor_;
}

const ArenaShopData& ArenaShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaShopData* ArenaShopData::default_instance_ = NULL;

ArenaShopData* ArenaShopData::New() const {
  return new ArenaShopData;
}

void ArenaShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaShopData::MergeFrom(const ArenaShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaShopData::CopyFrom(const ArenaShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaShopData::Swap(ArenaShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaShopData_descriptor_;
  metadata.reflection = ArenaShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AwakenShopData::kGoodsListFieldNumber;
const int AwakenShopData::kLastRecoverTimeFieldNumber;
const int AwakenShopData::kFreeRefreshTimesFieldNumber;
const int AwakenShopData::kCostRefreshTimesFieldNumber;
#endif  // !_MSC_VER

AwakenShopData::AwakenShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AwakenShopData::InitAsDefaultInstance() {
}

AwakenShopData::AwakenShopData(const AwakenShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AwakenShopData::SharedCtor() {
  _cached_size_ = 0;
  last_recover_time_ = 0u;
  free_refresh_times_ = 0u;
  cost_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwakenShopData::~AwakenShopData() {
  SharedDtor();
}

void AwakenShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AwakenShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwakenShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwakenShopData_descriptor_;
}

const AwakenShopData& AwakenShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AwakenShopData* AwakenShopData::default_instance_ = NULL;

AwakenShopData* AwakenShopData::New() const {
  return new AwakenShopData;
}

void AwakenShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_recover_time_ = 0u;
    free_refresh_times_ = 0u;
    cost_refresh_times_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AwakenShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_last_recover_time;
        break;
      }

      // required uint32 last_recover_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_recover_time_)));
          set_has_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_refresh_times;
        break;
      }

      // required uint32 free_refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_times_)));
          set_has_free_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_refresh_times;
        break;
      }

      // required uint32 cost_refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_refresh_times_)));
          set_has_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwakenShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_recover_time(), output);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_refresh_times(), output);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AwakenShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_recover_time(), target);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_refresh_times(), target);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AwakenShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 last_recover_time = 2;
    if (has_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_recover_time());
    }

    // required uint32 free_refresh_times = 3;
    if (has_free_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_refresh_times());
    }

    // required uint32 cost_refresh_times = 4;
    if (has_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_refresh_times());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwakenShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AwakenShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AwakenShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AwakenShopData::MergeFrom(const AwakenShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_recover_time()) {
      set_last_recover_time(from.last_recover_time());
    }
    if (from.has_free_refresh_times()) {
      set_free_refresh_times(from.free_refresh_times());
    }
    if (from.has_cost_refresh_times()) {
      set_cost_refresh_times(from.cost_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AwakenShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwakenShopData::CopyFrom(const AwakenShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwakenShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void AwakenShopData::Swap(AwakenShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(last_recover_time_, other->last_recover_time_);
    std::swap(free_refresh_times_, other->free_refresh_times_);
    std::swap(cost_refresh_times_, other->cost_refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AwakenShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwakenShopData_descriptor_;
  metadata.reflection = AwakenShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FairyShopData::kGoodsListFieldNumber;
const int FairyShopData::kUsedRefreshTimesFieldNumber;
const int FairyShopData::kLastAutoRefreshTimeFieldNumber;
#endif  // !_MSC_VER

FairyShopData::FairyShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FairyShopData::InitAsDefaultInstance() {
}

FairyShopData::FairyShopData(const FairyShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FairyShopData::SharedCtor() {
  _cached_size_ = 0;
  used_refresh_times_ = 0u;
  last_auto_refresh_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FairyShopData::~FairyShopData() {
  SharedDtor();
}

void FairyShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FairyShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FairyShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FairyShopData_descriptor_;
}

const FairyShopData& FairyShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FairyShopData* FairyShopData::default_instance_ = NULL;

FairyShopData* FairyShopData::New() const {
  return new FairyShopData;
}

void FairyShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    used_refresh_times_ = 0u;
    last_auto_refresh_time_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FairyShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_used_refresh_times;
        break;
      }

      // required uint32 used_refresh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_refresh_times_)));
          set_has_used_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_auto_refresh_time;
        break;
      }

      // required uint32 last_auto_refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_auto_refresh_time_)));
          set_has_last_auto_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FairyShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 used_refresh_times = 2;
  if (has_used_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->used_refresh_times(), output);
  }

  // required uint32 last_auto_refresh_time = 3;
  if (has_last_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_auto_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FairyShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 used_refresh_times = 2;
  if (has_used_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->used_refresh_times(), target);
  }

  // required uint32 last_auto_refresh_time = 3;
  if (has_last_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_auto_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FairyShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 used_refresh_times = 2;
    if (has_used_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_refresh_times());
    }

    // required uint32 last_auto_refresh_time = 3;
    if (has_last_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_auto_refresh_time());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FairyShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FairyShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FairyShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FairyShopData::MergeFrom(const FairyShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_used_refresh_times()) {
      set_used_refresh_times(from.used_refresh_times());
    }
    if (from.has_last_auto_refresh_time()) {
      set_last_auto_refresh_time(from.last_auto_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FairyShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FairyShopData::CopyFrom(const FairyShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FairyShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void FairyShopData::Swap(FairyShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(used_refresh_times_, other->used_refresh_times_);
    std::swap(last_auto_refresh_time_, other->last_auto_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FairyShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FairyShopData_descriptor_;
  metadata.reflection = FairyShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreMatchShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

ScoreMatchShopData::ScoreMatchShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreMatchShopData::InitAsDefaultInstance() {
}

ScoreMatchShopData::ScoreMatchShopData(const ScoreMatchShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreMatchShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreMatchShopData::~ScoreMatchShopData() {
  SharedDtor();
}

void ScoreMatchShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreMatchShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMatchShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreMatchShopData_descriptor_;
}

const ScoreMatchShopData& ScoreMatchShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ScoreMatchShopData* ScoreMatchShopData::default_instance_ = NULL;

ScoreMatchShopData* ScoreMatchShopData::New() const {
  return new ScoreMatchShopData;
}

void ScoreMatchShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreMatchShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreMatchShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreMatchShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreMatchShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMatchShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreMatchShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreMatchShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreMatchShopData::MergeFrom(const ScoreMatchShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreMatchShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMatchShopData::CopyFrom(const ScoreMatchShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMatchShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ScoreMatchShopData::Swap(ScoreMatchShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreMatchShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreMatchShopData_descriptor_;
  metadata.reflection = ScoreMatchShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

SevenDayShopData::SevenDayShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayShopData::InitAsDefaultInstance() {
}

SevenDayShopData::SevenDayShopData(const SevenDayShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayShopData::~SevenDayShopData() {
  SharedDtor();
}

void SevenDayShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayShopData_descriptor_;
}

const SevenDayShopData& SevenDayShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SevenDayShopData* SevenDayShopData::default_instance_ = NULL;

SevenDayShopData* SevenDayShopData::New() const {
  return new SevenDayShopData;
}

void SevenDayShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayShopData::MergeFrom(const SevenDayShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayShopData::CopyFrom(const SevenDayShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void SevenDayShopData::Swap(SevenDayShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayShopData_descriptor_;
  metadata.reflection = SevenDayShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleShopInfo::kHeroShopFieldNumber;
const int RoleShopInfo::kGuildShopFieldNumber;
const int RoleShopInfo::kMallShopFieldNumber;
const int RoleShopInfo::kTowerShopFieldNumber;
const int RoleShopInfo::kArenaShopFieldNumber;
const int RoleShopInfo::kAwakenShopFieldNumber;
const int RoleShopInfo::kFairyShopFieldNumber;
const int RoleShopInfo::kScoreMatchShopFieldNumber;
const int RoleShopInfo::kSevenDayShopFieldNumber;
#endif  // !_MSC_VER

RoleShopInfo::RoleShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleShopInfo::InitAsDefaultInstance() {
  hero_shop_ = const_cast< ::PB::HeroShopData*>(&::PB::HeroShopData::default_instance());
  guild_shop_ = const_cast< ::PB::GuildShopData*>(&::PB::GuildShopData::default_instance());
  mall_shop_ = const_cast< ::PB::MallShopData*>(&::PB::MallShopData::default_instance());
  tower_shop_ = const_cast< ::PB::TowerShopData*>(&::PB::TowerShopData::default_instance());
  arena_shop_ = const_cast< ::PB::ArenaShopData*>(&::PB::ArenaShopData::default_instance());
  awaken_shop_ = const_cast< ::PB::AwakenShopData*>(&::PB::AwakenShopData::default_instance());
  fairy_shop_ = const_cast< ::PB::FairyShopData*>(&::PB::FairyShopData::default_instance());
  score_match_shop_ = const_cast< ::PB::ScoreMatchShopData*>(&::PB::ScoreMatchShopData::default_instance());
  seven_day_shop_ = const_cast< ::PB::SevenDayShopData*>(&::PB::SevenDayShopData::default_instance());
}

RoleShopInfo::RoleShopInfo(const RoleShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleShopInfo::SharedCtor() {
  _cached_size_ = 0;
  hero_shop_ = NULL;
  guild_shop_ = NULL;
  mall_shop_ = NULL;
  tower_shop_ = NULL;
  arena_shop_ = NULL;
  awaken_shop_ = NULL;
  fairy_shop_ = NULL;
  score_match_shop_ = NULL;
  seven_day_shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleShopInfo::~RoleShopInfo() {
  SharedDtor();
}

void RoleShopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete hero_shop_;
    delete guild_shop_;
    delete mall_shop_;
    delete tower_shop_;
    delete arena_shop_;
    delete awaken_shop_;
    delete fairy_shop_;
    delete score_match_shop_;
    delete seven_day_shop_;
  }
}

void RoleShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleShopInfo_descriptor_;
}

const RoleShopInfo& RoleShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleShopInfo* RoleShopInfo::default_instance_ = NULL;

RoleShopInfo* RoleShopInfo::New() const {
  return new RoleShopInfo;
}

void RoleShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero_shop()) {
      if (hero_shop_ != NULL) hero_shop_->::PB::HeroShopData::Clear();
    }
    if (has_guild_shop()) {
      if (guild_shop_ != NULL) guild_shop_->::PB::GuildShopData::Clear();
    }
    if (has_mall_shop()) {
      if (mall_shop_ != NULL) mall_shop_->::PB::MallShopData::Clear();
    }
    if (has_tower_shop()) {
      if (tower_shop_ != NULL) tower_shop_->::PB::TowerShopData::Clear();
    }
    if (has_arena_shop()) {
      if (arena_shop_ != NULL) arena_shop_->::PB::ArenaShopData::Clear();
    }
    if (has_awaken_shop()) {
      if (awaken_shop_ != NULL) awaken_shop_->::PB::AwakenShopData::Clear();
    }
    if (has_fairy_shop()) {
      if (fairy_shop_ != NULL) fairy_shop_->::PB::FairyShopData::Clear();
    }
    if (has_score_match_shop()) {
      if (score_match_shop_ != NULL) score_match_shop_->::PB::ScoreMatchShopData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_seven_day_shop()) {
      if (seven_day_shop_ != NULL) seven_day_shop_->::PB::SevenDayShopData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.HeroShopData hero_shop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_shop;
        break;
      }

      // required .PB.GuildShopData guild_shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mall_shop;
        break;
      }

      // required .PB.MallShopData mall_shop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mall_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tower_shop;
        break;
      }

      // required .PB.TowerShopData tower_shop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arena_shop;
        break;
      }

      // required .PB.ArenaShopData arena_shop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_awaken_shop;
        break;
      }

      // required .PB.AwakenShopData awaken_shop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awaken_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fairy_shop;
        break;
      }

      // required .PB.FairyShopData fairy_shop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fairy_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_score_match_shop;
        break;
      }

      // required .PB.ScoreMatchShopData score_match_shop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_match_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_match_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_seven_day_shop;
        break;
      }

      // optional .PB.SevenDayShopData seven_day_shop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_day_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_day_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PB.HeroShopData hero_shop = 1;
  if (has_hero_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_shop(), output);
  }

  // required .PB.GuildShopData guild_shop = 2;
  if (has_guild_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_shop(), output);
  }

  // required .PB.MallShopData mall_shop = 3;
  if (has_mall_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mall_shop(), output);
  }

  // required .PB.TowerShopData tower_shop = 4;
  if (has_tower_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tower_shop(), output);
  }

  // required .PB.ArenaShopData arena_shop = 5;
  if (has_arena_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arena_shop(), output);
  }

  // required .PB.AwakenShopData awaken_shop = 6;
  if (has_awaken_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->awaken_shop(), output);
  }

  // required .PB.FairyShopData fairy_shop = 7;
  if (has_fairy_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fairy_shop(), output);
  }

  // required .PB.ScoreMatchShopData score_match_shop = 8;
  if (has_score_match_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->score_match_shop(), output);
  }

  // optional .PB.SevenDayShopData seven_day_shop = 9;
  if (has_seven_day_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->seven_day_shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PB.HeroShopData hero_shop = 1;
  if (has_hero_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_shop(), target);
  }

  // required .PB.GuildShopData guild_shop = 2;
  if (has_guild_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_shop(), target);
  }

  // required .PB.MallShopData mall_shop = 3;
  if (has_mall_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mall_shop(), target);
  }

  // required .PB.TowerShopData tower_shop = 4;
  if (has_tower_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tower_shop(), target);
  }

  // required .PB.ArenaShopData arena_shop = 5;
  if (has_arena_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arena_shop(), target);
  }

  // required .PB.AwakenShopData awaken_shop = 6;
  if (has_awaken_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->awaken_shop(), target);
  }

  // required .PB.FairyShopData fairy_shop = 7;
  if (has_fairy_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fairy_shop(), target);
  }

  // required .PB.ScoreMatchShopData score_match_shop = 8;
  if (has_score_match_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->score_match_shop(), target);
  }

  // optional .PB.SevenDayShopData seven_day_shop = 9;
  if (has_seven_day_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->seven_day_shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PB.HeroShopData hero_shop = 1;
    if (has_hero_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_shop());
    }

    // required .PB.GuildShopData guild_shop = 2;
    if (has_guild_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_shop());
    }

    // required .PB.MallShopData mall_shop = 3;
    if (has_mall_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mall_shop());
    }

    // required .PB.TowerShopData tower_shop = 4;
    if (has_tower_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_shop());
    }

    // required .PB.ArenaShopData arena_shop = 5;
    if (has_arena_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_shop());
    }

    // required .PB.AwakenShopData awaken_shop = 6;
    if (has_awaken_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awaken_shop());
    }

    // required .PB.FairyShopData fairy_shop = 7;
    if (has_fairy_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fairy_shop());
    }

    // required .PB.ScoreMatchShopData score_match_shop = 8;
    if (has_score_match_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_match_shop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.SevenDayShopData seven_day_shop = 9;
    if (has_seven_day_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_day_shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleShopInfo::MergeFrom(const RoleShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_shop()) {
      mutable_hero_shop()->::PB::HeroShopData::MergeFrom(from.hero_shop());
    }
    if (from.has_guild_shop()) {
      mutable_guild_shop()->::PB::GuildShopData::MergeFrom(from.guild_shop());
    }
    if (from.has_mall_shop()) {
      mutable_mall_shop()->::PB::MallShopData::MergeFrom(from.mall_shop());
    }
    if (from.has_tower_shop()) {
      mutable_tower_shop()->::PB::TowerShopData::MergeFrom(from.tower_shop());
    }
    if (from.has_arena_shop()) {
      mutable_arena_shop()->::PB::ArenaShopData::MergeFrom(from.arena_shop());
    }
    if (from.has_awaken_shop()) {
      mutable_awaken_shop()->::PB::AwakenShopData::MergeFrom(from.awaken_shop());
    }
    if (from.has_fairy_shop()) {
      mutable_fairy_shop()->::PB::FairyShopData::MergeFrom(from.fairy_shop());
    }
    if (from.has_score_match_shop()) {
      mutable_score_match_shop()->::PB::ScoreMatchShopData::MergeFrom(from.score_match_shop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seven_day_shop()) {
      mutable_seven_day_shop()->::PB::SevenDayShopData::MergeFrom(from.seven_day_shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleShopInfo::CopyFrom(const RoleShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_hero_shop()) {
    if (!this->hero_shop().IsInitialized()) return false;
  }
  if (has_guild_shop()) {
    if (!this->guild_shop().IsInitialized()) return false;
  }
  if (has_mall_shop()) {
    if (!this->mall_shop().IsInitialized()) return false;
  }
  if (has_tower_shop()) {
    if (!this->tower_shop().IsInitialized()) return false;
  }
  if (has_arena_shop()) {
    if (!this->arena_shop().IsInitialized()) return false;
  }
  if (has_awaken_shop()) {
    if (!this->awaken_shop().IsInitialized()) return false;
  }
  if (has_fairy_shop()) {
    if (!this->fairy_shop().IsInitialized()) return false;
  }
  if (has_score_match_shop()) {
    if (!this->score_match_shop().IsInitialized()) return false;
  }
  if (has_seven_day_shop()) {
    if (!this->seven_day_shop().IsInitialized()) return false;
  }
  return true;
}

void RoleShopInfo::Swap(RoleShopInfo* other) {
  if (other != this) {
    std::swap(hero_shop_, other->hero_shop_);
    std::swap(guild_shop_, other->guild_shop_);
    std::swap(mall_shop_, other->mall_shop_);
    std::swap(tower_shop_, other->tower_shop_);
    std::swap(arena_shop_, other->arena_shop_);
    std::swap(awaken_shop_, other->awaken_shop_);
    std::swap(fairy_shop_, other->fairy_shop_);
    std::swap(score_match_shop_, other->score_match_shop_);
    std::swap(seven_day_shop_, other->seven_day_shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleShopInfo_descriptor_;
  metadata.reflection = RoleShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSpiritInfo::kStageFieldNumber;
const int RoleSpiritInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

RoleSpiritInfo::RoleSpiritInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSpiritInfo::InitAsDefaultInstance() {
}

RoleSpiritInfo::RoleSpiritInfo(const RoleSpiritInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSpiritInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSpiritInfo::~RoleSpiritInfo() {
  SharedDtor();
}

void RoleSpiritInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSpiritInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSpiritInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSpiritInfo_descriptor_;
}

const RoleSpiritInfo& RoleSpiritInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSpiritInfo* RoleSpiritInfo::default_instance_ = NULL;

RoleSpiritInfo* RoleSpiritInfo::New() const {
  return new RoleSpiritInfo;
}

void RoleSpiritInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSpiritInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSpiritInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSpiritInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSpiritInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSpiritInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSpiritInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSpiritInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSpiritInfo::MergeFrom(const RoleSpiritInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSpiritInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSpiritInfo::CopyFrom(const RoleSpiritInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSpiritInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleSpiritInfo::Swap(RoleSpiritInfo* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSpiritInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSpiritInfo_descriptor_;
  metadata.reflection = RoleSpiritInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendData::kRoleIdFieldNumber;
const int FriendData::kIsGiveEnergyFieldNumber;
const int FriendData::kGetEnergyStateFieldNumber;
#endif  // !_MSC_VER

FriendData::FriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendData::InitAsDefaultInstance() {
}

FriendData::FriendData(const FriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  is_give_energy_ = 0u;
  get_energy_state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendData::~FriendData() {
  SharedDtor();
}

void FriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendData_descriptor_;
}

const FriendData& FriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FriendData* FriendData::default_instance_ = NULL;

FriendData* FriendData::New() const {
  return new FriendData;
}

void FriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    is_give_energy_ = 0u;
    get_energy_state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_give_energy;
        break;
      }

      // required uint32 is_give_energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_give_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_give_energy_)));
          set_has_is_give_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_energy_state;
        break;
      }

      // required uint32 get_energy_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_energy_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_energy_state_)));
          set_has_get_energy_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 is_give_energy = 2;
  if (has_is_give_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_give_energy(), output);
  }

  // required uint32 get_energy_state = 3;
  if (has_get_energy_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get_energy_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 is_give_energy = 2;
  if (has_is_give_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_give_energy(), target);
  }

  // required uint32 get_energy_state = 3;
  if (has_get_energy_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get_energy_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 is_give_energy = 2;
    if (has_is_give_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_give_energy());
    }

    // required uint32 get_energy_state = 3;
    if (has_get_energy_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_energy_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendData::MergeFrom(const FriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_give_energy()) {
      set_is_give_energy(from.is_give_energy());
    }
    if (from.has_get_energy_state()) {
      set_get_energy_state(from.get_energy_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendData::CopyFrom(const FriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendData::Swap(FriendData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(is_give_energy_, other->is_give_energy_);
    std::swap(get_energy_state_, other->get_energy_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendData_descriptor_;
  metadata.reflection = FriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFriendData::kFriendListFieldNumber;
const int RoleFriendData::kBlackListFieldNumber;
const int RoleFriendData::kApplyListFieldNumber;
const int RoleFriendData::kGetEnergyTimesFieldNumber;
#endif  // !_MSC_VER

RoleFriendData::RoleFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFriendData::InitAsDefaultInstance() {
}

RoleFriendData::RoleFriendData(const RoleFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFriendData::SharedCtor() {
  _cached_size_ = 0;
  get_energy_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFriendData::~RoleFriendData() {
  SharedDtor();
}

void RoleFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFriendData_descriptor_;
}

const RoleFriendData& RoleFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleFriendData* RoleFriendData::default_instance_ = NULL;

RoleFriendData* RoleFriendData::New() const {
  return new RoleFriendData;
}

void RoleFriendData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    get_energy_times_ = 0u;
  }
  friend_list_.Clear();
  black_list_.Clear();
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.FriendData friend_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend_list;
        if (input->ExpectTag(16)) goto parse_black_list;
        break;
      }

      // repeated uint32 black_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_black_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_black_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_black_list;
        if (input->ExpectTag(24)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_list;
        if (input->ExpectTag(32)) goto parse_get_energy_times;
        break;
      }

      // required uint32 get_energy_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_energy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_energy_times_)));
          set_has_get_energy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.FriendData friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_list(i), output);
  }

  // repeated uint32 black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->black_list(i), output);
  }

  // repeated uint32 apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->apply_list(i), output);
  }

  // required uint32 get_energy_times = 4;
  if (has_get_energy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->get_energy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.FriendData friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_list(i), target);
  }

  // repeated uint32 black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->black_list(i), target);
  }

  // repeated uint32 apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->apply_list(i), target);
  }

  // required uint32 get_energy_times = 4;
  if (has_get_energy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->get_energy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 get_energy_times = 4;
    if (has_get_energy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_energy_times());
    }

  }
  // repeated .PB.FriendData friend_list = 1;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  // repeated uint32 black_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->black_list(i));
    }
    total_size += 1 * this->black_list_size() + data_size;
  }

  // repeated uint32 apply_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFriendData::MergeFrom(const RoleFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  black_list_.MergeFrom(from.black_list_);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_get_energy_times()) {
      set_get_energy_times(from.get_energy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFriendData::CopyFrom(const RoleFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFriendData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < friend_list_size(); i++) {
    if (!this->friend_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleFriendData::Swap(RoleFriendData* other) {
  if (other != this) {
    friend_list_.Swap(&other->friend_list_);
    black_list_.Swap(&other->black_list_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(get_energy_times_, other->get_energy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFriendData_descriptor_;
  metadata.reflection = RoleFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRebelInfo::kRebelLevelFieldNumber;
const int RoleRebelInfo::kTodayExploitFieldNumber;
const int RoleRebelInfo::kTodayDamageFieldNumber;
const int RoleRebelInfo::kRewardGetRecordListFieldNumber;
const int RoleRebelInfo::kIsAlreadyShareFieldNumber;
#endif  // !_MSC_VER

RoleRebelInfo::RoleRebelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRebelInfo::InitAsDefaultInstance() {
}

RoleRebelInfo::RoleRebelInfo(const RoleRebelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRebelInfo::SharedCtor() {
  _cached_size_ = 0;
  rebel_level_ = 0u;
  today_exploit_ = 0u;
  today_damage_ = 0u;
  is_already_share_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRebelInfo::~RoleRebelInfo() {
  SharedDtor();
}

void RoleRebelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRebelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRebelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRebelInfo_descriptor_;
}

const RoleRebelInfo& RoleRebelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleRebelInfo* RoleRebelInfo::default_instance_ = NULL;

RoleRebelInfo* RoleRebelInfo::New() const {
  return new RoleRebelInfo;
}

void RoleRebelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rebel_level_ = 0u;
    today_exploit_ = 0u;
    today_damage_ = 0u;
    is_already_share_ = 0u;
  }
  reward_get_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRebelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rebel_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebel_level_)));
          set_has_rebel_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_exploit;
        break;
      }

      // required uint32 today_exploit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_exploit_)));
          set_has_today_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_damage;
        break;
      }

      // required uint32 today_damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_damage_)));
          set_has_today_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_get_record_list;
        break;
      }

      // repeated uint32 reward_get_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_get_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_reward_get_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_get_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_get_record_list;
        if (input->ExpectTag(40)) goto parse_is_already_share;
        break;
      }

      // required uint32 is_already_share = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_share_)));
          set_has_is_already_share();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRebelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rebel_level = 1;
  if (has_rebel_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rebel_level(), output);
  }

  // required uint32 today_exploit = 2;
  if (has_today_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_exploit(), output);
  }

  // required uint32 today_damage = 3;
  if (has_today_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_damage(), output);
  }

  // repeated uint32 reward_get_record_list = 4;
  for (int i = 0; i < this->reward_get_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->reward_get_record_list(i), output);
  }

  // required uint32 is_already_share = 5;
  if (has_is_already_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_already_share(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRebelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rebel_level = 1;
  if (has_rebel_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rebel_level(), target);
  }

  // required uint32 today_exploit = 2;
  if (has_today_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_exploit(), target);
  }

  // required uint32 today_damage = 3;
  if (has_today_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_damage(), target);
  }

  // repeated uint32 reward_get_record_list = 4;
  for (int i = 0; i < this->reward_get_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->reward_get_record_list(i), target);
  }

  // required uint32 is_already_share = 5;
  if (has_is_already_share()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_already_share(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRebelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rebel_level = 1;
    if (has_rebel_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebel_level());
    }

    // required uint32 today_exploit = 2;
    if (has_today_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_exploit());
    }

    // required uint32 today_damage = 3;
    if (has_today_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_damage());
    }

    // required uint32 is_already_share = 5;
    if (has_is_already_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_share());
    }

  }
  // repeated uint32 reward_get_record_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_get_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_get_record_list(i));
    }
    total_size += 1 * this->reward_get_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRebelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRebelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRebelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRebelInfo::MergeFrom(const RoleRebelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_get_record_list_.MergeFrom(from.reward_get_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rebel_level()) {
      set_rebel_level(from.rebel_level());
    }
    if (from.has_today_exploit()) {
      set_today_exploit(from.today_exploit());
    }
    if (from.has_today_damage()) {
      set_today_damage(from.today_damage());
    }
    if (from.has_is_already_share()) {
      set_is_already_share(from.is_already_share());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRebelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRebelInfo::CopyFrom(const RoleRebelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRebelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void RoleRebelInfo::Swap(RoleRebelInfo* other) {
  if (other != this) {
    std::swap(rebel_level_, other->rebel_level_);
    std::swap(today_exploit_, other->today_exploit_);
    std::swap(today_damage_, other->today_damage_);
    reward_get_record_list_.Swap(&other->reward_get_record_list_);
    std::swap(is_already_share_, other->is_already_share_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRebelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRebelInfo_descriptor_;
  metadata.reflection = RoleRebelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementData::kIdFieldNumber;
const int AchievementData::kLevelFieldNumber;
const int AchievementData::kValueFieldNumber;
const int AchievementData::kCurRewardLevelFieldNumber;
#endif  // !_MSC_VER

AchievementData::AchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementData::InitAsDefaultInstance() {
}

AchievementData::AchievementData(const AchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  value_ = 0u;
  cur_reward_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementData::~AchievementData() {
  SharedDtor();
}

void AchievementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementData_descriptor_;
}

const AchievementData& AchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AchievementData* AchievementData::default_instance_ = NULL;

AchievementData* AchievementData::New() const {
  return new AchievementData;
}

void AchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    value_ = 0u;
    cur_reward_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_reward_level;
        break;
      }

      // required uint32 cur_reward_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_reward_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_reward_level_)));
          set_has_cur_reward_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // required uint32 cur_reward_level = 4;
  if (has_cur_reward_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_reward_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // required uint32 cur_reward_level = 4;
  if (has_cur_reward_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_reward_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 cur_reward_level = 4;
    if (has_cur_reward_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_reward_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementData::MergeFrom(const AchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_cur_reward_level()) {
      set_cur_reward_level(from.cur_reward_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementData::CopyFrom(const AchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AchievementData::Swap(AchievementData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(value_, other->value_);
    std::swap(cur_reward_level_, other->cur_reward_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementData_descriptor_;
  metadata.reflection = AchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleAchievemntInfo::kAchievementListFieldNumber;
#endif  // !_MSC_VER

RoleAchievemntInfo::RoleAchievemntInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleAchievemntInfo::InitAsDefaultInstance() {
}

RoleAchievemntInfo::RoleAchievemntInfo(const RoleAchievemntInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleAchievemntInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleAchievemntInfo::~RoleAchievemntInfo() {
  SharedDtor();
}

void RoleAchievemntInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleAchievemntInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAchievemntInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleAchievemntInfo_descriptor_;
}

const RoleAchievemntInfo& RoleAchievemntInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleAchievemntInfo* RoleAchievemntInfo::default_instance_ = NULL;

RoleAchievemntInfo* RoleAchievemntInfo::New() const {
  return new RoleAchievemntInfo;
}

void RoleAchievemntInfo::Clear() {
  achievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleAchievemntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.AchievementData achievement_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleAchievemntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.AchievementData achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleAchievemntInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.AchievementData achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleAchievemntInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.AchievementData achievement_list = 1;
  total_size += 1 * this->achievement_list_size();
  for (int i = 0; i < this->achievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAchievemntInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleAchievemntInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleAchievemntInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleAchievemntInfo::MergeFrom(const RoleAchievemntInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_list_.MergeFrom(from.achievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleAchievemntInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAchievemntInfo::CopyFrom(const RoleAchievemntInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAchievemntInfo::IsInitialized() const {

  for (int i = 0; i < achievement_list_size(); i++) {
    if (!this->achievement_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleAchievemntInfo::Swap(RoleAchievemntInfo* other) {
  if (other != this) {
    achievement_list_.Swap(&other->achievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleAchievemntInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleAchievemntInfo_descriptor_;
  metadata.reflection = RoleAchievemntInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyMission::kIdFieldNumber;
const int DailyMission::kIsGetRewardFieldNumber;
const int DailyMission::kValueFieldNumber;
#endif  // !_MSC_VER

DailyMission::DailyMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyMission::InitAsDefaultInstance() {
}

DailyMission::DailyMission(const DailyMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_get_reward_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyMission::~DailyMission() {
  SharedDtor();
}

void DailyMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyMission_descriptor_;
}

const DailyMission& DailyMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DailyMission* DailyMission::default_instance_ = NULL;

DailyMission* DailyMission::New() const {
  return new DailyMission;
}

void DailyMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    is_get_reward_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_get_reward(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_get_reward(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyMission::MergeFrom(const DailyMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyMission::CopyFrom(const DailyMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DailyMission::Swap(DailyMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyMission_descriptor_;
  metadata.reflection = DailyMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDailyMissionInfo::kPointFieldNumber;
const int RoleDailyMissionInfo::kPointRewardRecordFieldNumber;
const int RoleDailyMissionInfo::kMissionListFieldNumber;
#endif  // !_MSC_VER

RoleDailyMissionInfo::RoleDailyMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyMissionInfo::InitAsDefaultInstance() {
}

RoleDailyMissionInfo::RoleDailyMissionInfo(const RoleDailyMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyMissionInfo::~RoleDailyMissionInfo() {
  SharedDtor();
}

void RoleDailyMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDailyMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyMissionInfo_descriptor_;
}

const RoleDailyMissionInfo& RoleDailyMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleDailyMissionInfo* RoleDailyMissionInfo::default_instance_ = NULL;

RoleDailyMissionInfo* RoleDailyMissionInfo::New() const {
  return new RoleDailyMissionInfo;
}

void RoleDailyMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    point_ = 0u;
  }
  point_reward_record_.Clear();
  mission_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_reward_record;
        break;
      }

      // repeated uint32 point_reward_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_point_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_point_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_reward_record;
        if (input->ExpectTag(26)) goto parse_mission_list;
        break;
      }

      // repeated .PB.DailyMission mission_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mission_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDailyMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // repeated uint32 point_reward_record = 2;
  for (int i = 0; i < this->point_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->point_reward_record(i), output);
  }

  // repeated .PB.DailyMission mission_list = 3;
  for (int i = 0; i < this->mission_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // repeated uint32 point_reward_record = 2;
  for (int i = 0; i < this->point_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->point_reward_record(i), target);
  }

  // repeated .PB.DailyMission mission_list = 3;
  for (int i = 0; i < this->mission_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  // repeated uint32 point_reward_record = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->point_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->point_reward_record(i));
    }
    total_size += 1 * this->point_reward_record_size() + data_size;
  }

  // repeated .PB.DailyMission mission_list = 3;
  total_size += 1 * this->mission_list_size();
  for (int i = 0; i < this->mission_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyMissionInfo::MergeFrom(const RoleDailyMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_reward_record_.MergeFrom(from.point_reward_record_);
  mission_list_.MergeFrom(from.mission_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyMissionInfo::CopyFrom(const RoleDailyMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyMissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mission_list_size(); i++) {
    if (!this->mission_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDailyMissionInfo::Swap(RoleDailyMissionInfo* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    point_reward_record_.Swap(&other->point_reward_record_);
    mission_list_.Swap(&other->mission_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyMissionInfo_descriptor_;
  metadata.reflection = RoleDailyMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kSkillIdFieldNumber;
const int SkillData::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGuildSkillInfo::kSkillListFieldNumber;
#endif  // !_MSC_VER

RoleGuildSkillInfo::RoleGuildSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleGuildSkillInfo::InitAsDefaultInstance() {
}

RoleGuildSkillInfo::RoleGuildSkillInfo(const RoleGuildSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleGuildSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGuildSkillInfo::~RoleGuildSkillInfo() {
  SharedDtor();
}

void RoleGuildSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleGuildSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGuildSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGuildSkillInfo_descriptor_;
}

const RoleGuildSkillInfo& RoleGuildSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleGuildSkillInfo* RoleGuildSkillInfo::default_instance_ = NULL;

RoleGuildSkillInfo* RoleGuildSkillInfo::New() const {
  return new RoleGuildSkillInfo;
}

void RoleGuildSkillInfo::Clear() {
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGuildSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.SkillData skill_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleGuildSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.SkillData skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleGuildSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.SkillData skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleGuildSkillInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.SkillData skill_list = 1;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGuildSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGuildSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGuildSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGuildSkillInfo::MergeFrom(const RoleGuildSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGuildSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGuildSkillInfo::CopyFrom(const RoleGuildSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGuildSkillInfo::IsInitialized() const {

  for (int i = 0; i < skill_list_size(); i++) {
    if (!this->skill_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleGuildSkillInfo::Swap(RoleGuildSkillInfo* other) {
  if (other != this) {
    skill_list_.Swap(&other->skill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGuildSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGuildSkillInfo_descriptor_;
  metadata.reflection = RoleGuildSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSignInData::kCurSignInDayFieldNumber;
const int RoleSignInData::kLastSignInTimeFieldNumber;
#endif  // !_MSC_VER

RoleSignInData::RoleSignInData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSignInData::InitAsDefaultInstance() {
}

RoleSignInData::RoleSignInData(const RoleSignInData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSignInData::SharedCtor() {
  _cached_size_ = 0;
  cur_sign_in_day_ = 0u;
  last_sign_in_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSignInData::~RoleSignInData() {
  SharedDtor();
}

void RoleSignInData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSignInData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSignInData_descriptor_;
}

const RoleSignInData& RoleSignInData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSignInData* RoleSignInData::default_instance_ = NULL;

RoleSignInData* RoleSignInData::New() const {
  return new RoleSignInData;
}

void RoleSignInData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_sign_in_day_ = 0u;
    last_sign_in_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cur_sign_in_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_sign_in_day_)));
          set_has_cur_sign_in_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_sign_in_time;
        break;
      }

      // required uint32 last_sign_in_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_sign_in_time_)));
          set_has_last_sign_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cur_sign_in_day = 1;
  if (has_cur_sign_in_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_sign_in_day(), output);
  }

  // required uint32 last_sign_in_time = 2;
  if (has_last_sign_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_sign_in_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSignInData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cur_sign_in_day = 1;
  if (has_cur_sign_in_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_sign_in_day(), target);
  }

  // required uint32 last_sign_in_time = 2;
  if (has_last_sign_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_sign_in_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSignInData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cur_sign_in_day = 1;
    if (has_cur_sign_in_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_sign_in_day());
    }

    // required uint32 last_sign_in_time = 2;
    if (has_last_sign_in_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_sign_in_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSignInData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSignInData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSignInData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSignInData::MergeFrom(const RoleSignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_sign_in_day()) {
      set_cur_sign_in_day(from.cur_sign_in_day());
    }
    if (from.has_last_sign_in_time()) {
      set_last_sign_in_time(from.last_sign_in_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSignInData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSignInData::CopyFrom(const RoleSignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSignInData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleSignInData::Swap(RoleSignInData* other) {
  if (other != this) {
    std::swap(cur_sign_in_day_, other->cur_sign_in_day_);
    std::swap(last_sign_in_time_, other->last_sign_in_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSignInData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSignInData_descriptor_;
  metadata.reflection = RoleSignInData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardData::kRewardIdFieldNumber;
const int RewardData::kRewardTypeFieldNumber;
const int RewardData::kValueFieldNumber;
const int RewardData::kValue1FieldNumber;
const int RewardData::kTimeFieldNumber;
const int RewardData::kTextFieldNumber;
#endif  // !_MSC_VER

RewardData::RewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardData::InitAsDefaultInstance() {
}

RewardData::RewardData(const RewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardData::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = 0u;
  reward_type_ = 0u;
  value_ = 0u;
  value1_ = 0u;
  time_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardData::~RewardData() {
  SharedDtor();
}

void RewardData::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void RewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardData_descriptor_;
}

const RewardData& RewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RewardData* RewardData::default_instance_ = NULL;

RewardData* RewardData::New() const {
  return new RewardData;
}

void RewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = 0u;
    reward_type_ = 0u;
    value_ = 0u;
    value1_ = 0u;
    time_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_type;
        break;
      }

      // optional uint32 reward_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_type_)));
          set_has_reward_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value1;
        break;
      }

      // optional uint32 value1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // required string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reward_id(), output);
  }

  // optional uint32 reward_type = 2;
  if (has_reward_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reward_type(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint32 value1 = 4;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value1(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // required string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reward_id(), target);
  }

  // optional uint32 reward_type = 2;
  if (has_reward_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reward_type(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint32 value1 = 4;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value1(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // required string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_id());
    }

    // optional uint32 reward_type = 2;
    if (has_reward_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 value1 = 4;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value1());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardData::MergeFrom(const RewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_reward_type()) {
      set_reward_type(from.reward_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardData::CopyFrom(const RewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void RewardData::Swap(RewardData* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(reward_type_, other->reward_type_);
    std::swap(value_, other->value_);
    std::swap(value1_, other->value1_);
    std::swap(time_, other->time_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardData_descriptor_;
  metadata.reflection = RewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRewardData::kRewardListFieldNumber;
#endif  // !_MSC_VER

RoleRewardData::RoleRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRewardData::InitAsDefaultInstance() {
}

RoleRewardData::RoleRewardData(const RoleRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRewardData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRewardData::~RoleRewardData() {
  SharedDtor();
}

void RoleRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRewardData_descriptor_;
}

const RoleRewardData& RoleRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleRewardData* RoleRewardData::default_instance_ = NULL;

RoleRewardData* RoleRewardData::New() const {
  return new RoleRewardData;
}

void RoleRewardData::Clear() {
  reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.RewardData reward_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.RewardData reward_list = 1;
  for (int i = 0; i < this->reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.RewardData reward_list = 1;
  for (int i = 0; i < this->reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRewardData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.RewardData reward_list = 1;
  total_size += 1 * this->reward_list_size();
  for (int i = 0; i < this->reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRewardData::MergeFrom(const RoleRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_list_.MergeFrom(from.reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRewardData::CopyFrom(const RoleRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRewardData::IsInitialized() const {

  for (int i = 0; i < reward_list_size(); i++) {
    if (!this->reward_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleRewardData::Swap(RoleRewardData* other) {
  if (other != this) {
    reward_list_.Swap(&other->reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRewardData_descriptor_;
  metadata.reflection = RoleRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YCSData::kTodayGetTimesFieldNumber;
const int YCSData::kTotalGetTimesFieldNumber;
const int YCSData::kTotalRewardValueFieldNumber;
const int YCSData::kLastGetTimeFieldNumber;
#endif  // !_MSC_VER

YCSData::YCSData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YCSData::InitAsDefaultInstance() {
}

YCSData::YCSData(const YCSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YCSData::SharedCtor() {
  _cached_size_ = 0;
  today_get_times_ = 0u;
  total_get_times_ = 0u;
  total_reward_value_ = 0u;
  last_get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YCSData::~YCSData() {
  SharedDtor();
}

void YCSData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YCSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YCSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YCSData_descriptor_;
}

const YCSData& YCSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

YCSData* YCSData::default_instance_ = NULL;

YCSData* YCSData::New() const {
  return new YCSData;
}

void YCSData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_get_times_ = 0u;
    total_get_times_ = 0u;
    total_reward_value_ = 0u;
    last_get_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YCSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_get_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_get_times_)));
          set_has_today_get_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_get_times;
        break;
      }

      // optional uint32 total_get_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_get_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_get_times_)));
          set_has_total_get_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_reward_value;
        break;
      }

      // optional uint32 total_reward_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_reward_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_reward_value_)));
          set_has_total_reward_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_get_time;
        break;
      }

      // optional uint32 last_get_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_time_)));
          set_has_last_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YCSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_get_times = 1;
  if (has_today_get_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_get_times(), output);
  }

  // optional uint32 total_get_times = 2;
  if (has_total_get_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_get_times(), output);
  }

  // optional uint32 total_reward_value = 3;
  if (has_total_reward_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_reward_value(), output);
  }

  // optional uint32 last_get_time = 4;
  if (has_last_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_get_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YCSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_get_times = 1;
  if (has_today_get_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_get_times(), target);
  }

  // optional uint32 total_get_times = 2;
  if (has_total_get_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_get_times(), target);
  }

  // optional uint32 total_reward_value = 3;
  if (has_total_reward_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_reward_value(), target);
  }

  // optional uint32 last_get_time = 4;
  if (has_last_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_get_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YCSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_get_times = 1;
    if (has_today_get_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_get_times());
    }

    // optional uint32 total_get_times = 2;
    if (has_total_get_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_get_times());
    }

    // optional uint32 total_reward_value = 3;
    if (has_total_reward_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_reward_value());
    }

    // optional uint32 last_get_time = 4;
    if (has_last_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YCSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YCSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YCSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YCSData::MergeFrom(const YCSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_get_times()) {
      set_today_get_times(from.today_get_times());
    }
    if (from.has_total_get_times()) {
      set_total_get_times(from.total_get_times());
    }
    if (from.has_total_reward_value()) {
      set_total_reward_value(from.total_reward_value());
    }
    if (from.has_last_get_time()) {
      set_last_get_time(from.last_get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YCSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YCSData::CopyFrom(const YCSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YCSData::IsInitialized() const {

  return true;
}

void YCSData::Swap(YCSData* other) {
  if (other != this) {
    std::swap(today_get_times_, other->today_get_times_);
    std::swap(total_get_times_, other->total_get_times_);
    std::swap(total_reward_value_, other->total_reward_value_);
    std::swap(last_get_time_, other->last_get_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YCSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YCSData_descriptor_;
  metadata.reflection = YCSData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TQTData::kLastGetTimeFieldNumber;
#endif  // !_MSC_VER

TQTData::TQTData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TQTData::InitAsDefaultInstance() {
}

TQTData::TQTData(const TQTData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TQTData::SharedCtor() {
  _cached_size_ = 0;
  last_get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TQTData::~TQTData() {
  SharedDtor();
}

void TQTData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TQTData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TQTData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TQTData_descriptor_;
}

const TQTData& TQTData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TQTData* TQTData::default_instance_ = NULL;

TQTData* TQTData::New() const {
  return new TQTData;
}

void TQTData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_get_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TQTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_get_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_time_)));
          set_has_last_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TQTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_get_time = 1;
  if (has_last_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_get_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TQTData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_get_time = 1;
  if (has_last_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_get_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TQTData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_get_time = 1;
    if (has_last_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TQTData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TQTData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TQTData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TQTData::MergeFrom(const TQTData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_get_time()) {
      set_last_get_time(from.last_get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TQTData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TQTData::CopyFrom(const TQTData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TQTData::IsInitialized() const {

  return true;
}

void TQTData::Swap(TQTData* other) {
  if (other != this) {
    std::swap(last_get_time_, other->last_get_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TQTData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TQTData_descriptor_;
  metadata.reflection = TQTData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayTargetData::kTargetIdFieldNumber;
const int SevenDayTargetData::kValueFieldNumber;
const int SevenDayTargetData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

SevenDayTargetData::SevenDayTargetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayTargetData::InitAsDefaultInstance() {
}

SevenDayTargetData::SevenDayTargetData(const SevenDayTargetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayTargetData::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  value_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayTargetData::~SevenDayTargetData() {
  SharedDtor();
}

void SevenDayTargetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayTargetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayTargetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayTargetData_descriptor_;
}

const SevenDayTargetData& SevenDayTargetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SevenDayTargetData* SevenDayTargetData::default_instance_ = NULL;

SevenDayTargetData* SevenDayTargetData::New() const {
  return new SevenDayTargetData;
}

void SevenDayTargetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    value_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayTargetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_get_reward;
        break;
      }

      // optional uint32 is_get_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayTargetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 is_get_reward = 3;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayTargetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 is_get_reward = 3;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayTargetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 is_get_reward = 3;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayTargetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayTargetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayTargetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayTargetData::MergeFrom(const SevenDayTargetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayTargetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayTargetData::CopyFrom(const SevenDayTargetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayTargetData::IsInitialized() const {

  return true;
}

void SevenDayTargetData::Swap(SevenDayTargetData* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(value_, other->value_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayTargetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayTargetData_descriptor_;
  metadata.reflection = SevenDayTargetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleActivityData::kTqtDataFieldNumber;
const int RoleActivityData::kYcsDataFieldNumber;
const int RoleActivityData::kSevenDayTargetListFieldNumber;
const int RoleActivityData::kCompletionRewardRecordListFieldNumber;
#endif  // !_MSC_VER

RoleActivityData::RoleActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleActivityData::InitAsDefaultInstance() {
  tqt_data_ = const_cast< ::PB::TQTData*>(&::PB::TQTData::default_instance());
  ycs_data_ = const_cast< ::PB::YCSData*>(&::PB::YCSData::default_instance());
}

RoleActivityData::RoleActivityData(const RoleActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleActivityData::SharedCtor() {
  _cached_size_ = 0;
  tqt_data_ = NULL;
  ycs_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleActivityData::~RoleActivityData() {
  SharedDtor();
}

void RoleActivityData::SharedDtor() {
  if (this != default_instance_) {
    delete tqt_data_;
    delete ycs_data_;
  }
}

void RoleActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleActivityData_descriptor_;
}

const RoleActivityData& RoleActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleActivityData* RoleActivityData::default_instance_ = NULL;

RoleActivityData* RoleActivityData::New() const {
  return new RoleActivityData;
}

void RoleActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tqt_data()) {
      if (tqt_data_ != NULL) tqt_data_->::PB::TQTData::Clear();
    }
    if (has_ycs_data()) {
      if (ycs_data_ != NULL) ycs_data_->::PB::YCSData::Clear();
    }
  }
  seven_day_target_list_.Clear();
  completion_reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.TQTData tqt_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tqt_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ycs_data;
        break;
      }

      // optional .PB.YCSData ycs_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ycs_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ycs_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seven_day_target_list;
        break;
      }

      // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_day_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seven_day_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seven_day_target_list;
        if (input->ExpectTag(32)) goto parse_completion_reward_record_list;
        break;
      }

      // repeated uint32 completion_reward_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completion_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_completion_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_completion_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_completion_reward_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.TQTData tqt_data = 1;
  if (has_tqt_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tqt_data(), output);
  }

  // optional .PB.YCSData ycs_data = 2;
  if (has_ycs_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ycs_data(), output);
  }

  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seven_day_target_list(i), output);
  }

  // repeated uint32 completion_reward_record_list = 4;
  for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->completion_reward_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.TQTData tqt_data = 1;
  if (has_tqt_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tqt_data(), target);
  }

  // optional .PB.YCSData ycs_data = 2;
  if (has_ycs_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ycs_data(), target);
  }

  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seven_day_target_list(i), target);
  }

  // repeated uint32 completion_reward_record_list = 4;
  for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->completion_reward_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.TQTData tqt_data = 1;
    if (has_tqt_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tqt_data());
    }

    // optional .PB.YCSData ycs_data = 2;
    if (has_ycs_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ycs_data());
    }

  }
  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  total_size += 1 * this->seven_day_target_list_size();
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seven_day_target_list(i));
  }

  // repeated uint32 completion_reward_record_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->completion_reward_record_list(i));
    }
    total_size += 1 * this->completion_reward_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleActivityData::MergeFrom(const RoleActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  seven_day_target_list_.MergeFrom(from.seven_day_target_list_);
  completion_reward_record_list_.MergeFrom(from.completion_reward_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tqt_data()) {
      mutable_tqt_data()->::PB::TQTData::MergeFrom(from.tqt_data());
    }
    if (from.has_ycs_data()) {
      mutable_ycs_data()->::PB::YCSData::MergeFrom(from.ycs_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleActivityData::CopyFrom(const RoleActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleActivityData::IsInitialized() const {

  return true;
}

void RoleActivityData::Swap(RoleActivityData* other) {
  if (other != this) {
    std::swap(tqt_data_, other->tqt_data_);
    std::swap(ycs_data_, other->ycs_data_);
    seven_day_target_list_.Swap(&other->seven_day_target_list_);
    completion_reward_record_list_.Swap(&other->completion_reward_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleActivityData_descriptor_;
  metadata.reflection = RoleActivityData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)
