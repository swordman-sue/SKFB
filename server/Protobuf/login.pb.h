// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dgame_define.pb.h"
// @@protoc_insertion_point(includes)

namespace CS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class P;
class PRsp;
class ReconnectReq;
class ReconnectRsp;
class Msg_UserLogin_Req;
class Msg_UserLogin_Rsp;
class Msg_UserInfo_Notify;
class Msg_GameError_Notify;

enum PLAT_NUM {
  IOS = 0,
  ANDROID = 1
};
bool PLAT_NUM_IsValid(int value);
const PLAT_NUM PLAT_NUM_MIN = IOS;
const PLAT_NUM PLAT_NUM_MAX = ANDROID;
const int PLAT_NUM_ARRAYSIZE = PLAT_NUM_MAX + 1;

const ::google::protobuf::EnumDescriptor* PLAT_NUM_descriptor();
inline const ::std::string& PLAT_NUM_Name(PLAT_NUM value) {
  return ::google::protobuf::internal::NameOfEnum(
    PLAT_NUM_descriptor(), value);
}
inline bool PLAT_NUM_Parse(
    const ::std::string& name, PLAT_NUM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PLAT_NUM>(
    PLAT_NUM_descriptor(), name, value);
}
// ===================================================================

class P : public ::google::protobuf::Message {
 public:
  P();
  virtual ~P();

  P(const P& from);

  inline P& operator=(const P& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const P& default_instance();

  void Swap(P* other);

  // implements Message ----------------------------------------------

  P* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const P& from);
  void MergeFrom(const P& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.P)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static P* default_instance_;
};
// -------------------------------------------------------------------

class PRsp : public ::google::protobuf::Message {
 public:
  PRsp();
  virtual ~PRsp();

  PRsp(const PRsp& from);

  inline PRsp& operator=(const PRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PRsp& default_instance();

  void Swap(PRsp* other);

  // implements Message ----------------------------------------------

  PRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PRsp& from);
  void MergeFrom(const PRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional uint32 interval = 2;
  inline bool has_interval() const;
  inline void clear_interval();
  static const int kIntervalFieldNumber = 2;
  inline ::google::protobuf::uint32 interval() const;
  inline void set_interval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.PRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_interval();
  inline void clear_has_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::uint32 interval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static PRsp* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectReq : public ::google::protobuf::Message {
 public:
  ReconnectReq();
  virtual ~ReconnectReq();

  ReconnectReq(const ReconnectReq& from);

  inline ReconnectReq& operator=(const ReconnectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectReq& default_instance();

  void Swap(ReconnectReq* other);

  // implements Message ----------------------------------------------

  ReconnectReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectReq& from);
  void MergeFrom(const ReconnectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string gcode = 2;
  inline bool has_gcode() const;
  inline void clear_gcode();
  static const int kGcodeFieldNumber = 2;
  inline const ::std::string& gcode() const;
  inline void set_gcode(const ::std::string& value);
  inline void set_gcode(const char* value);
  inline void set_gcode(const char* value, size_t size);
  inline ::std::string* mutable_gcode();
  inline ::std::string* release_gcode();
  inline void set_allocated_gcode(::std::string* gcode);

  // @@protoc_insertion_point(class_scope:CS.ReconnectReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gcode();
  inline void clear_has_gcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 uid_;
  ::std::string* gcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReconnectReq* default_instance_;
};
// -------------------------------------------------------------------

class ReconnectRsp : public ::google::protobuf::Message {
 public:
  ReconnectRsp();
  virtual ~ReconnectRsp();

  ReconnectRsp(const ReconnectRsp& from);

  inline ReconnectRsp& operator=(const ReconnectRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReconnectRsp& default_instance();

  void Swap(ReconnectRsp* other);

  // implements Message ----------------------------------------------

  ReconnectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReconnectRsp& from);
  void MergeFrom(const ReconnectRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.ReconnectRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static ReconnectRsp* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserLogin_Req : public ::google::protobuf::Message {
 public:
  Msg_UserLogin_Req();
  virtual ~Msg_UserLogin_Req();

  Msg_UserLogin_Req(const Msg_UserLogin_Req& from);

  inline Msg_UserLogin_Req& operator=(const Msg_UserLogin_Req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserLogin_Req& default_instance();

  void Swap(Msg_UserLogin_Req* other);

  // implements Message ----------------------------------------------

  Msg_UserLogin_Req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserLogin_Req& from);
  void MergeFrom(const Msg_UserLogin_Req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_name = 1;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserLogin_Req)
 private:
  inline void set_has_account_name();
  inline void clear_has_account_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;
  ::std::string* password_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserLogin_Req* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserLogin_Rsp : public ::google::protobuf::Message {
 public:
  Msg_UserLogin_Rsp();
  virtual ~Msg_UserLogin_Rsp();

  Msg_UserLogin_Rsp(const Msg_UserLogin_Rsp& from);

  inline Msg_UserLogin_Rsp& operator=(const Msg_UserLogin_Rsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserLogin_Rsp& default_instance();

  void Swap(Msg_UserLogin_Rsp* other);

  // implements Message ----------------------------------------------

  Msg_UserLogin_Rsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserLogin_Rsp& from);
  void MergeFrom(const Msg_UserLogin_Rsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserLogin_Rsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserLogin_Rsp* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserInfo_Notify : public ::google::protobuf::Message {
 public:
  Msg_UserInfo_Notify();
  virtual ~Msg_UserInfo_Notify();

  Msg_UserInfo_Notify(const Msg_UserInfo_Notify& from);

  inline Msg_UserInfo_Notify& operator=(const Msg_UserInfo_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserInfo_Notify& default_instance();

  void Swap(Msg_UserInfo_Notify* other);

  // implements Message ----------------------------------------------

  Msg_UserInfo_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserInfo_Notify& from);
  void MergeFrom(const Msg_UserInfo_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // optional string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // optional string email = 3;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 3;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 hobby = 6;
  inline bool has_hobby() const;
  inline void clear_hobby();
  static const int kHobbyFieldNumber = 6;
  inline ::google::protobuf::uint32 hobby() const;
  inline void set_hobby(::google::protobuf::uint32 value);

  // optional uint32 skin = 7;
  inline bool has_skin() const;
  inline void clear_skin();
  static const int kSkinFieldNumber = 7;
  inline ::google::protobuf::uint32 skin() const;
  inline void set_skin(::google::protobuf::uint32 value);

  // repeated .dgame.SouvenirDate date_list = 8;
  inline int date_list_size() const;
  inline void clear_date_list();
  static const int kDateListFieldNumber = 8;
  inline const ::dgame::SouvenirDate& date_list(int index) const;
  inline ::dgame::SouvenirDate* mutable_date_list(int index);
  inline ::dgame::SouvenirDate* add_date_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >&
      date_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >*
      mutable_date_list();

  // repeated uint32 brand_list = 9;
  inline int brand_list_size() const;
  inline void clear_brand_list();
  static const int kBrandListFieldNumber = 9;
  inline ::google::protobuf::uint32 brand_list(int index) const;
  inline void set_brand_list(int index, ::google::protobuf::uint32 value);
  inline void add_brand_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      brand_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_brand_list();

  // optional uint32 color = 10;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 10;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // repeated uint32 dressed_list = 11;
  inline int dressed_list_size() const;
  inline void clear_dressed_list();
  static const int kDressedListFieldNumber = 11;
  inline ::google::protobuf::uint32 dressed_list(int index) const;
  inline void set_dressed_list(int index, ::google::protobuf::uint32 value);
  inline void add_dressed_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dressed_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dressed_list();

  // optional uint32 birthday = 12;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 12;
  inline ::google::protobuf::uint32 birthday() const;
  inline void set_birthday(::google::protobuf::uint32 value);

  // optional uint32 head_id = 13;
  inline bool has_head_id() const;
  inline void clear_head_id();
  static const int kHeadIdFieldNumber = 13;
  inline ::google::protobuf::uint32 head_id() const;
  inline void set_head_id(::google::protobuf::uint32 value);

  // optional uint32 age = 14;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 14;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint32 zodiac = 15;
  inline bool has_zodiac() const;
  inline void clear_zodiac();
  static const int kZodiacFieldNumber = 15;
  inline ::google::protobuf::uint32 zodiac() const;
  inline void set_zodiac(::google::protobuf::uint32 value);

  // optional string nick_name = 16;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 16;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string sign = 17;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 17;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // repeated .dgame.EquipmentData equipment_list = 18;
  inline int equipment_list_size() const;
  inline void clear_equipment_list();
  static const int kEquipmentListFieldNumber = 18;
  inline const ::dgame::EquipmentData& equipment_list(int index) const;
  inline ::dgame::EquipmentData* mutable_equipment_list(int index);
  inline ::dgame::EquipmentData* add_equipment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
      equipment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
      mutable_equipment_list();

  // optional uint32 designer_type = 19;
  inline bool has_designer_type() const;
  inline void clear_designer_type();
  static const int kDesignerTypeFieldNumber = 19;
  inline ::google::protobuf::uint32 designer_type() const;
  inline void set_designer_type(::google::protobuf::uint32 value);

  // optional uint32 designer_status = 20;
  inline bool has_designer_status() const;
  inline void clear_designer_status();
  static const int kDesignerStatusFieldNumber = 20;
  inline ::google::protobuf::uint32 designer_status() const;
  inline void set_designer_status(::google::protobuf::uint32 value);

  // optional uint32 points = 21;
  inline bool has_points() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 21;
  inline ::google::protobuf::uint32 points() const;
  inline void set_points(::google::protobuf::uint32 value);

  // optional float balance = 22;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 22;
  inline float balance() const;
  inline void set_balance(float value);

  // optional uint32 gold = 23;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 23;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional .dgame.ProductData dress_clothes = 24;
  inline bool has_dress_clothes() const;
  inline void clear_dress_clothes();
  static const int kDressClothesFieldNumber = 24;
  inline const ::dgame::ProductData& dress_clothes() const;
  inline ::dgame::ProductData* mutable_dress_clothes();
  inline ::dgame::ProductData* release_dress_clothes();
  inline void set_allocated_dress_clothes(::dgame::ProductData* dress_clothes);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserInfo_Notify)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_hobby();
  inline void clear_has_hobby();
  inline void set_has_skin();
  inline void clear_has_skin();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_head_id();
  inline void clear_has_head_id();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_zodiac();
  inline void clear_has_zodiac();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_designer_type();
  inline void clear_has_designer_type();
  inline void set_has_designer_status();
  inline void clear_has_designer_status();
  inline void set_has_points();
  inline void clear_has_points();
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_dress_clothes();
  inline void clear_has_dress_clothes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 sex_;
  ::std::string* email_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 hobby_;
  ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate > date_list_;
  ::google::protobuf::uint32 skin_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > brand_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dressed_list_;
  ::google::protobuf::uint32 birthday_;
  ::google::protobuf::uint32 head_id_;
  ::google::protobuf::uint32 age_;
  ::google::protobuf::uint32 zodiac_;
  ::std::string* nick_name_;
  ::std::string* sign_;
  ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData > equipment_list_;
  ::google::protobuf::uint32 designer_type_;
  ::google::protobuf::uint32 designer_status_;
  ::google::protobuf::uint32 points_;
  float balance_;
  ::dgame::ProductData* dress_clothes_;
  ::google::protobuf::uint32 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserInfo_Notify* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GameError_Notify : public ::google::protobuf::Message {
 public:
  Msg_GameError_Notify();
  virtual ~Msg_GameError_Notify();

  Msg_GameError_Notify(const Msg_GameError_Notify& from);

  inline Msg_GameError_Notify& operator=(const Msg_GameError_Notify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GameError_Notify& default_instance();

  void Swap(Msg_GameError_Notify* other);

  // implements Message ----------------------------------------------

  Msg_GameError_Notify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GameError_Notify& from);
  void MergeFrom(const Msg_GameError_Notify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_GameError_Notify)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static Msg_GameError_Notify* default_instance_;
};
// ===================================================================


// ===================================================================

// P

// -------------------------------------------------------------------

// PRsp

// optional int32 result = 1;
inline bool PRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 PRsp::result() const {
  return result_;
}
inline void PRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional uint32 interval = 2;
inline bool PRsp::has_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PRsp::set_has_interval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PRsp::clear_has_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PRsp::clear_interval() {
  interval_ = 0u;
  clear_has_interval();
}
inline ::google::protobuf::uint32 PRsp::interval() const {
  return interval_;
}
inline void PRsp::set_interval(::google::protobuf::uint32 value) {
  set_has_interval();
  interval_ = value;
}

// -------------------------------------------------------------------

// ReconnectReq

// optional uint64 uid = 1;
inline bool ReconnectReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 ReconnectReq::uid() const {
  return uid_;
}
inline void ReconnectReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
}

// optional string gcode = 2;
inline bool ReconnectReq::has_gcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReconnectReq::set_has_gcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReconnectReq::clear_has_gcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReconnectReq::clear_gcode() {
  if (gcode_ != &::google::protobuf::internal::kEmptyString) {
    gcode_->clear();
  }
  clear_has_gcode();
}
inline const ::std::string& ReconnectReq::gcode() const {
  return *gcode_;
}
inline void ReconnectReq::set_gcode(const ::std::string& value) {
  set_has_gcode();
  if (gcode_ == &::google::protobuf::internal::kEmptyString) {
    gcode_ = new ::std::string;
  }
  gcode_->assign(value);
}
inline void ReconnectReq::set_gcode(const char* value) {
  set_has_gcode();
  if (gcode_ == &::google::protobuf::internal::kEmptyString) {
    gcode_ = new ::std::string;
  }
  gcode_->assign(value);
}
inline void ReconnectReq::set_gcode(const char* value, size_t size) {
  set_has_gcode();
  if (gcode_ == &::google::protobuf::internal::kEmptyString) {
    gcode_ = new ::std::string;
  }
  gcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReconnectReq::mutable_gcode() {
  set_has_gcode();
  if (gcode_ == &::google::protobuf::internal::kEmptyString) {
    gcode_ = new ::std::string;
  }
  return gcode_;
}
inline ::std::string* ReconnectReq::release_gcode() {
  clear_has_gcode();
  if (gcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gcode_;
    gcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReconnectReq::set_allocated_gcode(::std::string* gcode) {
  if (gcode_ != &::google::protobuf::internal::kEmptyString) {
    delete gcode_;
  }
  if (gcode) {
    set_has_gcode();
    gcode_ = gcode;
  } else {
    clear_has_gcode();
    gcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ReconnectRsp

// optional int32 result = 1;
inline bool ReconnectRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReconnectRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReconnectRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReconnectRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ReconnectRsp::result() const {
  return result_;
}
inline void ReconnectRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Msg_UserLogin_Req

// required string account_name = 1;
inline bool Msg_UserLogin_Req::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserLogin_Req::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserLogin_Req::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserLogin_Req::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& Msg_UserLogin_Req::account_name() const {
  return *account_name_;
}
inline void Msg_UserLogin_Req::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void Msg_UserLogin_Req::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void Msg_UserLogin_Req::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserLogin_Req::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* Msg_UserLogin_Req::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserLogin_Req::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool Msg_UserLogin_Req::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_UserLogin_Req::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_UserLogin_Req::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_UserLogin_Req::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Msg_UserLogin_Req::password() const {
  return *password_;
}
inline void Msg_UserLogin_Req::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Msg_UserLogin_Req::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void Msg_UserLogin_Req::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserLogin_Req::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* Msg_UserLogin_Req::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserLogin_Req::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 type = 3;
inline bool Msg_UserLogin_Req::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_UserLogin_Req::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_UserLogin_Req::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_UserLogin_Req::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Msg_UserLogin_Req::type() const {
  return type_;
}
inline void Msg_UserLogin_Req::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 code = 4;
inline bool Msg_UserLogin_Req::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_UserLogin_Req::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_UserLogin_Req::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_UserLogin_Req::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 Msg_UserLogin_Req::code() const {
  return code_;
}
inline void Msg_UserLogin_Req::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// Msg_UserLogin_Rsp

// required int32 type = 1;
inline bool Msg_UserLogin_Rsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserLogin_Rsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserLogin_Rsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserLogin_Rsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Msg_UserLogin_Rsp::type() const {
  return type_;
}
inline void Msg_UserLogin_Rsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 error_code = 2;
inline bool Msg_UserLogin_Rsp::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_UserLogin_Rsp::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_UserLogin_Rsp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_UserLogin_Rsp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 Msg_UserLogin_Rsp::error_code() const {
  return error_code_;
}
inline void Msg_UserLogin_Rsp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_UserInfo_Notify

// optional uint32 user_id = 1;
inline bool Msg_UserInfo_Notify::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserInfo_Notify::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserInfo_Notify::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::user_id() const {
  return user_id_;
}
inline void Msg_UserInfo_Notify::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// optional string user_name = 2;
inline bool Msg_UserInfo_Notify::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_UserInfo_Notify::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_UserInfo_Notify::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& Msg_UserInfo_Notify::user_name() const {
  return *user_name_;
}
inline void Msg_UserInfo_Notify::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void Msg_UserInfo_Notify::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void Msg_UserInfo_Notify::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfo_Notify::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* Msg_UserInfo_Notify::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfo_Notify::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string email = 3;
inline bool Msg_UserInfo_Notify::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_UserInfo_Notify::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_UserInfo_Notify::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Msg_UserInfo_Notify::email() const {
  return *email_;
}
inline void Msg_UserInfo_Notify::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Msg_UserInfo_Notify::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Msg_UserInfo_Notify::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfo_Notify::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Msg_UserInfo_Notify::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfo_Notify::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 4;
inline bool Msg_UserInfo_Notify::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_UserInfo_Notify::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_UserInfo_Notify::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::sex() const {
  return sex_;
}
inline void Msg_UserInfo_Notify::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 job = 5;
inline bool Msg_UserInfo_Notify::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_UserInfo_Notify::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_UserInfo_Notify::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::job() const {
  return job_;
}
inline void Msg_UserInfo_Notify::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 hobby = 6;
inline bool Msg_UserInfo_Notify::has_hobby() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_hobby() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_UserInfo_Notify::clear_has_hobby() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_UserInfo_Notify::clear_hobby() {
  hobby_ = 0u;
  clear_has_hobby();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::hobby() const {
  return hobby_;
}
inline void Msg_UserInfo_Notify::set_hobby(::google::protobuf::uint32 value) {
  set_has_hobby();
  hobby_ = value;
}

// optional uint32 skin = 7;
inline bool Msg_UserInfo_Notify::has_skin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_skin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg_UserInfo_Notify::clear_has_skin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg_UserInfo_Notify::clear_skin() {
  skin_ = 0u;
  clear_has_skin();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::skin() const {
  return skin_;
}
inline void Msg_UserInfo_Notify::set_skin(::google::protobuf::uint32 value) {
  set_has_skin();
  skin_ = value;
}

// repeated .dgame.SouvenirDate date_list = 8;
inline int Msg_UserInfo_Notify::date_list_size() const {
  return date_list_.size();
}
inline void Msg_UserInfo_Notify::clear_date_list() {
  date_list_.Clear();
}
inline const ::dgame::SouvenirDate& Msg_UserInfo_Notify::date_list(int index) const {
  return date_list_.Get(index);
}
inline ::dgame::SouvenirDate* Msg_UserInfo_Notify::mutable_date_list(int index) {
  return date_list_.Mutable(index);
}
inline ::dgame::SouvenirDate* Msg_UserInfo_Notify::add_date_list() {
  return date_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >&
Msg_UserInfo_Notify::date_list() const {
  return date_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >*
Msg_UserInfo_Notify::mutable_date_list() {
  return &date_list_;
}

// repeated uint32 brand_list = 9;
inline int Msg_UserInfo_Notify::brand_list_size() const {
  return brand_list_.size();
}
inline void Msg_UserInfo_Notify::clear_brand_list() {
  brand_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::brand_list(int index) const {
  return brand_list_.Get(index);
}
inline void Msg_UserInfo_Notify::set_brand_list(int index, ::google::protobuf::uint32 value) {
  brand_list_.Set(index, value);
}
inline void Msg_UserInfo_Notify::add_brand_list(::google::protobuf::uint32 value) {
  brand_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_UserInfo_Notify::brand_list() const {
  return brand_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_UserInfo_Notify::mutable_brand_list() {
  return &brand_list_;
}

// optional uint32 color = 10;
inline bool Msg_UserInfo_Notify::has_color() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_color() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Msg_UserInfo_Notify::clear_has_color() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Msg_UserInfo_Notify::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::color() const {
  return color_;
}
inline void Msg_UserInfo_Notify::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// repeated uint32 dressed_list = 11;
inline int Msg_UserInfo_Notify::dressed_list_size() const {
  return dressed_list_.size();
}
inline void Msg_UserInfo_Notify::clear_dressed_list() {
  dressed_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::dressed_list(int index) const {
  return dressed_list_.Get(index);
}
inline void Msg_UserInfo_Notify::set_dressed_list(int index, ::google::protobuf::uint32 value) {
  dressed_list_.Set(index, value);
}
inline void Msg_UserInfo_Notify::add_dressed_list(::google::protobuf::uint32 value) {
  dressed_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_UserInfo_Notify::dressed_list() const {
  return dressed_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_UserInfo_Notify::mutable_dressed_list() {
  return &dressed_list_;
}

// optional uint32 birthday = 12;
inline bool Msg_UserInfo_Notify::has_birthday() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_birthday() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Msg_UserInfo_Notify::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Msg_UserInfo_Notify::clear_birthday() {
  birthday_ = 0u;
  clear_has_birthday();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::birthday() const {
  return birthday_;
}
inline void Msg_UserInfo_Notify::set_birthday(::google::protobuf::uint32 value) {
  set_has_birthday();
  birthday_ = value;
}

// optional uint32 head_id = 13;
inline bool Msg_UserInfo_Notify::has_head_id() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_head_id() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Msg_UserInfo_Notify::clear_has_head_id() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Msg_UserInfo_Notify::clear_head_id() {
  head_id_ = 0u;
  clear_has_head_id();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::head_id() const {
  return head_id_;
}
inline void Msg_UserInfo_Notify::set_head_id(::google::protobuf::uint32 value) {
  set_has_head_id();
  head_id_ = value;
}

// optional uint32 age = 14;
inline bool Msg_UserInfo_Notify::has_age() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_age() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Msg_UserInfo_Notify::clear_has_age() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Msg_UserInfo_Notify::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::age() const {
  return age_;
}
inline void Msg_UserInfo_Notify::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint32 zodiac = 15;
inline bool Msg_UserInfo_Notify::has_zodiac() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_zodiac() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Msg_UserInfo_Notify::clear_has_zodiac() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Msg_UserInfo_Notify::clear_zodiac() {
  zodiac_ = 0u;
  clear_has_zodiac();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::zodiac() const {
  return zodiac_;
}
inline void Msg_UserInfo_Notify::set_zodiac(::google::protobuf::uint32 value) {
  set_has_zodiac();
  zodiac_ = value;
}

// optional string nick_name = 16;
inline bool Msg_UserInfo_Notify::has_nick_name() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_nick_name() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Msg_UserInfo_Notify::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Msg_UserInfo_Notify::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& Msg_UserInfo_Notify::nick_name() const {
  return *nick_name_;
}
inline void Msg_UserInfo_Notify::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserInfo_Notify::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserInfo_Notify::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfo_Notify::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* Msg_UserInfo_Notify::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfo_Notify::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 17;
inline bool Msg_UserInfo_Notify::has_sign() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_sign() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Msg_UserInfo_Notify::clear_has_sign() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Msg_UserInfo_Notify::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& Msg_UserInfo_Notify::sign() const {
  return *sign_;
}
inline void Msg_UserInfo_Notify::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserInfo_Notify::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserInfo_Notify::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfo_Notify::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* Msg_UserInfo_Notify::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfo_Notify::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dgame.EquipmentData equipment_list = 18;
inline int Msg_UserInfo_Notify::equipment_list_size() const {
  return equipment_list_.size();
}
inline void Msg_UserInfo_Notify::clear_equipment_list() {
  equipment_list_.Clear();
}
inline const ::dgame::EquipmentData& Msg_UserInfo_Notify::equipment_list(int index) const {
  return equipment_list_.Get(index);
}
inline ::dgame::EquipmentData* Msg_UserInfo_Notify::mutable_equipment_list(int index) {
  return equipment_list_.Mutable(index);
}
inline ::dgame::EquipmentData* Msg_UserInfo_Notify::add_equipment_list() {
  return equipment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
Msg_UserInfo_Notify::equipment_list() const {
  return equipment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
Msg_UserInfo_Notify::mutable_equipment_list() {
  return &equipment_list_;
}

// optional uint32 designer_type = 19;
inline bool Msg_UserInfo_Notify::has_designer_type() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_designer_type() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Msg_UserInfo_Notify::clear_has_designer_type() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Msg_UserInfo_Notify::clear_designer_type() {
  designer_type_ = 0u;
  clear_has_designer_type();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::designer_type() const {
  return designer_type_;
}
inline void Msg_UserInfo_Notify::set_designer_type(::google::protobuf::uint32 value) {
  set_has_designer_type();
  designer_type_ = value;
}

// optional uint32 designer_status = 20;
inline bool Msg_UserInfo_Notify::has_designer_status() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_designer_status() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Msg_UserInfo_Notify::clear_has_designer_status() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Msg_UserInfo_Notify::clear_designer_status() {
  designer_status_ = 0u;
  clear_has_designer_status();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::designer_status() const {
  return designer_status_;
}
inline void Msg_UserInfo_Notify::set_designer_status(::google::protobuf::uint32 value) {
  set_has_designer_status();
  designer_status_ = value;
}

// optional uint32 points = 21;
inline bool Msg_UserInfo_Notify::has_points() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_points() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Msg_UserInfo_Notify::clear_has_points() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Msg_UserInfo_Notify::clear_points() {
  points_ = 0u;
  clear_has_points();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::points() const {
  return points_;
}
inline void Msg_UserInfo_Notify::set_points(::google::protobuf::uint32 value) {
  set_has_points();
  points_ = value;
}

// optional float balance = 22;
inline bool Msg_UserInfo_Notify::has_balance() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_balance() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Msg_UserInfo_Notify::clear_has_balance() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Msg_UserInfo_Notify::clear_balance() {
  balance_ = 0;
  clear_has_balance();
}
inline float Msg_UserInfo_Notify::balance() const {
  return balance_;
}
inline void Msg_UserInfo_Notify::set_balance(float value) {
  set_has_balance();
  balance_ = value;
}

// optional uint32 gold = 23;
inline bool Msg_UserInfo_Notify::has_gold() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_gold() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Msg_UserInfo_Notify::clear_has_gold() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Msg_UserInfo_Notify::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 Msg_UserInfo_Notify::gold() const {
  return gold_;
}
inline void Msg_UserInfo_Notify::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional .dgame.ProductData dress_clothes = 24;
inline bool Msg_UserInfo_Notify::has_dress_clothes() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Msg_UserInfo_Notify::set_has_dress_clothes() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Msg_UserInfo_Notify::clear_has_dress_clothes() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Msg_UserInfo_Notify::clear_dress_clothes() {
  if (dress_clothes_ != NULL) dress_clothes_->::dgame::ProductData::Clear();
  clear_has_dress_clothes();
}
inline const ::dgame::ProductData& Msg_UserInfo_Notify::dress_clothes() const {
  return dress_clothes_ != NULL ? *dress_clothes_ : *default_instance_->dress_clothes_;
}
inline ::dgame::ProductData* Msg_UserInfo_Notify::mutable_dress_clothes() {
  set_has_dress_clothes();
  if (dress_clothes_ == NULL) dress_clothes_ = new ::dgame::ProductData;
  return dress_clothes_;
}
inline ::dgame::ProductData* Msg_UserInfo_Notify::release_dress_clothes() {
  clear_has_dress_clothes();
  ::dgame::ProductData* temp = dress_clothes_;
  dress_clothes_ = NULL;
  return temp;
}
inline void Msg_UserInfo_Notify::set_allocated_dress_clothes(::dgame::ProductData* dress_clothes) {
  delete dress_clothes_;
  dress_clothes_ = dress_clothes;
  if (dress_clothes) {
    set_has_dress_clothes();
  } else {
    clear_has_dress_clothes();
  }
}

// -------------------------------------------------------------------

// Msg_GameError_Notify

// optional int32 error_code = 1;
inline bool Msg_GameError_Notify::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_GameError_Notify::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_GameError_Notify::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_GameError_Notify::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 Msg_GameError_Notify::error_code() const {
  return error_code_;
}
inline void Msg_GameError_Notify::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::PLAT_NUM>() {
  return ::CS::PLAT_NUM_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
