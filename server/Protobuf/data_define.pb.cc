// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_define.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PB {

namespace {

const ::google::protobuf::Descriptor* Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* Equipment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Equipment_reflection_ = NULL;
const ::google::protobuf::Descriptor* Treasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Treasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* fairy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fairy_reflection_ = NULL;
const ::google::protobuf::Descriptor* Card_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Card_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroTrainData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroTrainData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecordData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecordData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Hero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Hero_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaRankDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaRankDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_rank_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_rank_data_reflection_ = NULL;
const ::google::protobuf::Descriptor* role_rank_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  role_rank_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* all_server_role_rank_list_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  all_server_role_rank_list_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Property_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Property_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormationProperty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationProperty_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuideData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuideData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPVPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPVPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePVPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePVPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleTitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEndlessLandInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEndlessLandInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGuildData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGuildData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LuxurySignInData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LuxurySignInData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLuxurySignInData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLuxurySignInData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEquipmentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEquipmentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Formation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Formation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailContext_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailContext_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEmailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEmailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChapterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChapterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MainFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroMapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroMapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFBChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFBChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyChapterData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyChapterData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteMapEnemyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteMapEnemyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteFBChapter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteFBChapter_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerFBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerFBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AwakenShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AwakenShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FairyShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FairyShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreMatchShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreMatchShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelGiftShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelGiftShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndlessLandShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndlessLandShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DirectBuyShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DirectBuyShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChristmasShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChristmasShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CrystalShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CrystalShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceWarShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceWarShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMShopData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMShopData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpiritPokedex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpiritPokedex_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSpiritInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSpiritInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRebelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRebelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDuobaoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDuobaoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AchievementData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AchievementData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleAchievemntInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleAchievemntInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDailyMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDailyMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGuildSkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGuildSkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSignInData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSignInData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleKingMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleKingMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTeamDungeonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTeamDungeonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* CollectionBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CollectionBook_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleZhanBuData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleZhanBuData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldLevelTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldLevelTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleWorldLevelTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleWorldLevelTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHangUpDropData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHangUpDropData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSecondInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSecondInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YCSData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YCSData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TQTData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TQTData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayTargetData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayTargetData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelShopActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelShopActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gift_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipGiftData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipGiftData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonthCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonthCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRechargeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRechargeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenServerFundData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenServerFundData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllPeopleWelfareData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllPeopleWelfareData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SuperDiscountData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SuperDiscountData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFestivalActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFestivalActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AccurateRecommendGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccurateRecommendGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleAccurateRecommendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleAccurateRecommendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleChristmasData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleChristmasData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewardRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewardRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SevenDayLoginData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SevenDayLoginData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecallFriendData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecallFriendData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacebookActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacebookActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalRechargeRewardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalRechargeRewardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* HotSaleGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HotSaleGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleHotSaleGoodsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleHotSaleGoodsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleCampRecruitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleCampRecruitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlockActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlockActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeAndCostRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeAndCostRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandPatrolEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandPatrolEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* LandCityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LandCityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildLeaveMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildLeaveMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCampMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCampMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildFBBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildFBBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCampBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCampBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMapRewardRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMapRewardRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMonsterDamageRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMonsterDamageRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapComment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapComment_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapComments_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapComments_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleTempData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTempData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleTempDatas_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleTempDatas_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingMatchBattleTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingMatchBattleTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingMatchStage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingMatchStage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSeasonRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSeasonRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeasonRankData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeasonRankData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonRoleRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonRoleRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonLotteryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonLotteryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamDungeonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamDungeonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableLotteryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableLotteryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TurntableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TurntableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllServerTurntableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllServerTurntableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreMatchTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreMatchTarget_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleScoreMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleScoreMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreMatchData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreMatchData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleResourceWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleResourceWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceWarEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceWarEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceWarBattleRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceWarBattleRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceWarResourceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceWarResourceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarDefenderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarDefenderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* StarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleGuildWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleGuildWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildWarData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_5fdefine_2eproto() {
  protobuf_AddDesc_data_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data_define.proto");
  GOOGLE_CHECK(file != NULL);
  Item_descriptor_ = file->message_type(0);
  static const int Item_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, item_num_),
  };
  Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Item_descriptor_,
      Item::default_instance_,
      Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Item));
  Equipment_descriptor_ = file->message_type(1);
  static const int Equipment_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, enhance_cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, refine_cost_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, star_level_),
  };
  Equipment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Equipment_descriptor_,
      Equipment::default_instance_,
      Equipment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Equipment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Equipment));
  Treasure_descriptor_ = file->message_type(2);
  static const int Treasure_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, enhance_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, refine_level_),
  };
  Treasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Treasure_descriptor_,
      Treasure::default_instance_,
      Treasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Treasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Treasure));
  fairy_descriptor_ = file->message_type(3);
  static const int fairy_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, break_level_),
  };
  fairy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fairy_descriptor_,
      fairy::default_instance_,
      fairy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fairy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fairy));
  Card_descriptor_ = file->message_type(4);
  static const int Card_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, break_level_),
  };
  Card_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Card_descriptor_,
      Card::default_instance_,
      Card_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Card, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Card));
  HeroTrainData_descriptor_ = file->message_type(5);
  static const int HeroTrainData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, pro_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, tmp_pro_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, reward_flag_),
  };
  HeroTrainData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroTrainData_descriptor_,
      HeroTrainData::default_instance_,
      HeroTrainData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroTrainData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroTrainData));
  RecordData_descriptor_ = file->message_type(6);
  static const int RecordData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, num_),
  };
  RecordData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecordData_descriptor_,
      RecordData::default_instance_,
      RecordData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecordData));
  Hero_descriptor_ = file->message_type(7);
  static const int Hero_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, break_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, awaken_item_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, destiny_cost_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, train_cost_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, quality_stage_),
  };
  Hero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Hero_descriptor_,
      Hero::default_instance_,
      Hero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Hero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Hero));
  MonsterData_descriptor_ = file->message_type(8);
  static const int MonsterData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, total_hp_),
  };
  MonsterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterData_descriptor_,
      MonsterData::default_instance_,
      MonsterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterData));
  ArenaRankData_descriptor_ = file->message_type(9);
  static const int ArenaRankData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, cur_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, history_rank_),
  };
  ArenaRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRankData_descriptor_,
      ArenaRankData::default_instance_,
      ArenaRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRankData));
  ArenaRankDataList_descriptor_ = file->message_type(10);
  static const int ArenaRankDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, rank_list_),
  };
  ArenaRankDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaRankDataList_descriptor_,
      ArenaRankDataList::default_instance_,
      ArenaRankDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaRankDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaRankDataList));
  role_rank_data_descriptor_ = file->message_type(11);
  static const int role_rank_data_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, param2_),
  };
  role_rank_data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_rank_data_descriptor_,
      role_rank_data::default_instance_,
      role_rank_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_rank_data));
  role_rank_list_descriptor_ = file->message_type(12);
  static const int role_rank_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, rank_list_),
  };
  role_rank_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      role_rank_list_descriptor_,
      role_rank_list::default_instance_,
      role_rank_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(role_rank_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(role_rank_list));
  all_server_role_rank_list_descriptor_ = file->message_type(13);
  static const int all_server_role_rank_list_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, rank_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, all_rank_list_),
  };
  all_server_role_rank_list_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      all_server_role_rank_list_descriptor_,
      all_server_role_rank_list::default_instance_,
      all_server_role_rank_list_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(all_server_role_rank_list, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(all_server_role_rank_list));
  GuildRankData_descriptor_ = file->message_type(14);
  static const int GuildRankData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, update_time_),
  };
  GuildRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildRankData_descriptor_,
      GuildRankData::default_instance_,
      GuildRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildRankData));
  Property_descriptor_ = file->message_type(15);
  static const int Property_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, value_),
  };
  Property_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Property_descriptor_,
      Property::default_instance_,
      Property_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Property, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Property));
  FormationProperty_descriptor_ = file->message_type(16);
  static const int FormationProperty_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, pro_list_),
  };
  FormationProperty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationProperty_descriptor_,
      FormationProperty::default_instance_,
      FormationProperty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationProperty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationProperty));
  GuideData_descriptor_ = file->message_type(17);
  static const int GuideData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, value_),
  };
  GuideData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuideData_descriptor_,
      GuideData::default_instance_,
      GuideData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuideData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuideData));
  PlayerPVPData_descriptor_ = file->message_type(18);
  static const int PlayerPVPData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, today_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, week_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, daily_reward_take_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, week_reward_take_record_),
  };
  PlayerPVPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPVPData_descriptor_,
      PlayerPVPData::default_instance_,
      PlayerPVPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPVPData));
  RoleBaseInfo_descriptor_ = file->message_type(19);
  static const int RoleBaseInfo_offsets_[65] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, stamina_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, daily_init_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, head_image_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, vip_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, riot_suppress_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, hero_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, god_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, fairy_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, arena_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, tower_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, fighting_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, wanted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, rebel_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, cur_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, world_boss_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guild_fb_reward_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_login_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, total_online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, login_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_stamina_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_energy_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_wanted_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, formation_pro_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, once_flag_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, guide_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, duobao_peace_over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, leave_guild_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_activity_notice_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, activation_code_take_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, friendship_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, today_friendship_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, endless_stone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, nobility_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, update_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, total_recharge_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, gem_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, destiny_coin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, star_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, turntable_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, turntable_activity_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, today_used_help_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, role_login_days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, crystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_login_time_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, last_logout_time_ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, create_role_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, is_already_take_closed_test_rebate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, score_match_honor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, resource_war_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, ycoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, today_chat_times_),
  };
  RoleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBaseInfo_descriptor_,
      RoleBaseInfo::default_instance_,
      RoleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBaseInfo));
  RolePVPData_descriptor_ = file->message_type(20);
  static const int RolePVPData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, today_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, week_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, total_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, daily_reward_take_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, weekly_reward_take_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, last_week_rank_),
  };
  RolePVPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePVPData_descriptor_,
      RolePVPData::default_instance_,
      RolePVPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePVPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePVPData));
  TitleData_descriptor_ = file->message_type(21);
  static const int TitleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, over_time_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  RoleTitleInfo_descriptor_ = file->message_type(22);
  static const int RoleTitleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTitleInfo, cur_use_title_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTitleInfo, title_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTitleInfo, cur_use_nickname_id_),
  };
  RoleTitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTitleInfo_descriptor_,
      RoleTitleInfo::default_instance_,
      RoleTitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTitleInfo));
  RoleEndlessLandInfo_descriptor_ = file->message_type(23);
  static const int RoleEndlessLandInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, is_today_first_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, cur_wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, today_wave_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, cur_wave_kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, history_wave_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, cur_keep_kill_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, keep_kill_num_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, today_collision_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, keep_kill_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, last_take_continue_kill_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, is_first_battle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, today_battle_times_),
  };
  RoleEndlessLandInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEndlessLandInfo_descriptor_,
      RoleEndlessLandInfo::default_instance_,
      RoleEndlessLandInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEndlessLandInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEndlessLandInfo));
  RoleGuildData_descriptor_ = file->message_type(24);
  static const int RoleGuildData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildData, take_chapter_reward_record_),
  };
  RoleGuildData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGuildData_descriptor_,
      RoleGuildData::default_instance_,
      RoleGuildData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGuildData));
  LuxurySignInData_descriptor_ = file->message_type(25);
  static const int LuxurySignInData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuxurySignInData, sign_in_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuxurySignInData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuxurySignInData, rewar_id_),
  };
  LuxurySignInData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LuxurySignInData_descriptor_,
      LuxurySignInData::default_instance_,
      LuxurySignInData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuxurySignInData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LuxurySignInData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LuxurySignInData));
  PlayerLuxurySignInData_descriptor_ = file->message_type(26);
  static const int PlayerLuxurySignInData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLuxurySignInData, sign_in_data_list_),
  };
  PlayerLuxurySignInData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLuxurySignInData_descriptor_,
      PlayerLuxurySignInData::default_instance_,
      PlayerLuxurySignInData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLuxurySignInData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLuxurySignInData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLuxurySignInData));
  Gem_descriptor_ = file->message_type(27);
  static const int Gem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gem, num_),
  };
  Gem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gem_descriptor_,
      Gem::default_instance_,
      Gem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gem));
  PlayerGemInfo_descriptor_ = file->message_type(28);
  static const int PlayerGemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGemInfo, gem_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGemInfo, hole_open_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGemInfo, hole_init_time_),
  };
  PlayerGemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGemInfo_descriptor_,
      PlayerGemInfo::default_instance_,
      PlayerGemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGemInfo));
  RoleEquipmentInfo_descriptor_ = file->message_type(29);
  static const int RoleEquipmentInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, equipment_list_),
  };
  RoleEquipmentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEquipmentInfo_descriptor_,
      RoleEquipmentInfo::default_instance_,
      RoleEquipmentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEquipmentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEquipmentInfo));
  Formation_descriptor_ = file->message_type(30);
  static const int Formation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, hero_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, equipment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, treasure_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, gem_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, bless_sprite_id_),
  };
  Formation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Formation_descriptor_,
      Formation::default_instance_,
      Formation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Formation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Formation));
  RoleHeroInfo_descriptor_ = file->message_type(31);
  static const int RoleHeroInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, normal_free_summon_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, normal_free_summon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, high_free_summon_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, high_summon_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, hero_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, collection_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, reinforcement_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, formation_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, train_times_),
  };
  RoleHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHeroInfo_descriptor_,
      RoleHeroInfo::default_instance_,
      RoleHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHeroInfo));
  RoleTreasureInfo_descriptor_ = file->message_type(32);
  static const int RoleTreasureInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, treasure_list_),
  };
  RoleTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTreasureInfo_descriptor_,
      RoleTreasureInfo::default_instance_,
      RoleTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTreasureInfo));
  RoleItemInfo_descriptor_ = file->message_type(33);
  static const int RoleItemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, item_list_),
  };
  RoleItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleItemInfo_descriptor_,
      RoleItemInfo::default_instance_,
      RoleItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleItemInfo));
  EmailContext_descriptor_ = file->message_type(34);
  static const int EmailContext_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, text_),
  };
  EmailContext_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailContext_descriptor_,
      EmailContext::default_instance_,
      EmailContext_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailContext, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailContext));
  EmailInfo_descriptor_ = file->message_type(35);
  static const int EmailInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, receive_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, context_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, text_),
  };
  EmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmailInfo_descriptor_,
      EmailInfo::default_instance_,
      EmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmailInfo));
  RoleEmailInfo_descriptor_ = file->message_type(36);
  static const int RoleEmailInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, email_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, is_have_new_email_),
  };
  RoleEmailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEmailInfo_descriptor_,
      RoleEmailInfo::default_instance_,
      RoleEmailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEmailInfo));
  MapData_descriptor_ = file->message_type(37);
  static const int MapData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, is_get_reward_),
  };
  MapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapData_descriptor_,
      MapData::default_instance_,
      MapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapData));
  ChapterData_descriptor_ = file->message_type(38);
  static const int ChapterData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, star_reward_list_),
  };
  ChapterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChapterData_descriptor_,
      ChapterData::default_instance_,
      ChapterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChapterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChapterData));
  MainFBData_descriptor_ = file->message_type(39);
  static const int MainFBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, chapter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, take_chapter_reward_record_),
  };
  MainFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainFBData_descriptor_,
      MainFBData::default_instance_,
      MainFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainFBData));
  HeroMapData_descriptor_ = file->message_type(40);
  static const int HeroMapData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, is_get_reward_),
  };
  HeroMapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroMapData_descriptor_,
      HeroMapData::default_instance_,
      HeroMapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroMapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroMapData));
  HeroFBChapter_descriptor_ = file->message_type(41);
  static const int HeroFBChapter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, is_pass_extra_map_),
  };
  HeroFBChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroFBChapter_descriptor_,
      HeroFBChapter::default_instance_,
      HeroFBChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroFBChapter));
  HeroFBData_descriptor_ = file->message_type(42);
  static const int HeroFBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, chapter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, battle_times_),
  };
  HeroFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroFBData_descriptor_,
      HeroFBData::default_instance_,
      HeroFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroFBData));
  DailyChapterData_descriptor_ = file->message_type(43);
  static const int DailyChapterData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyChapterData, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyChapterData, max_idx_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyChapterData, battle_times_),
  };
  DailyChapterData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyChapterData_descriptor_,
      DailyChapterData::default_instance_,
      DailyChapterData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyChapterData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyChapterData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyChapterData));
  DailyFBData_descriptor_ = file->message_type(44);
  static const int DailyFBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, chapter_list_),
  };
  DailyFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyFBData_descriptor_,
      DailyFBData::default_instance_,
      DailyFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyFBData));
  EliteMapEnemyData_descriptor_ = file->message_type(45);
  static const int EliteMapEnemyData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, monster_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, is_dead_),
  };
  EliteMapEnemyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteMapEnemyData_descriptor_,
      EliteMapEnemyData::default_instance_,
      EliteMapEnemyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteMapEnemyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteMapEnemyData));
  EliteFBChapter_descriptor_ = file->message_type(46);
  static const int EliteFBChapter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, map_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, star_reward_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, enemy_data_),
  };
  EliteFBChapter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteFBChapter_descriptor_,
      EliteFBChapter::default_instance_,
      EliteFBChapter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBChapter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteFBChapter));
  EliteFBData_descriptor_ = file->message_type(47);
  static const int EliteFBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, chapter_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, last_refresh_enemy_time_),
  };
  EliteFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteFBData_descriptor_,
      EliteFBData::default_instance_,
      EliteFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteFBData));
  TowerFBData_descriptor_ = file->message_type(48);
  static const int TowerFBData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, map_star_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, map_level_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, keep_best_star_passed_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, select_pro_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, is_buy_star_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, star_goods_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, is_need_reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, today_reset_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, cur_star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, star_max_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, elite_map_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, elite_map_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, buy_elite_map_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, rand_pro_idx_list_),
  };
  TowerFBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerFBData_descriptor_,
      TowerFBData::default_instance_,
      TowerFBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerFBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerFBData));
  RoleFBInfo_descriptor_ = file->message_type(49);
  static const int RoleFBInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, main_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, hero_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, daily_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, tower_fb_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, elite_fb_data_),
  };
  RoleFBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFBInfo_descriptor_,
      RoleFBInfo::default_instance_,
      RoleFBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFBInfo));
  ShopGoods_descriptor_ = file->message_type(50);
  static const int ShopGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, goods_num_),
  };
  ShopGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopGoods_descriptor_,
      ShopGoods::default_instance_,
      ShopGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopGoods));
  HeroShopData_descriptor_ = file->message_type(51);
  static const int HeroShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, free_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, cost_refresh_times_),
  };
  HeroShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroShopData_descriptor_,
      HeroShopData::default_instance_,
      HeroShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroShopData));
  GuildShopData_descriptor_ = file->message_type(52);
  static const int GuildShopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, reward_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, item_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, limit_goods_buy_record_),
  };
  GuildShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildShopData_descriptor_,
      GuildShopData::default_instance_,
      GuildShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildShopData));
  MallShopData_descriptor_ = file->message_type(53);
  static const int MallShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, item_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, gift_buy_record_),
  };
  MallShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallShopData_descriptor_,
      MallShopData::default_instance_,
      MallShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallShopData));
  TowerShopData_descriptor_ = file->message_type(54);
  static const int TowerShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, buy_record_),
  };
  TowerShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerShopData_descriptor_,
      TowerShopData::default_instance_,
      TowerShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerShopData));
  ArenaShopData_descriptor_ = file->message_type(55);
  static const int ArenaShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, buy_record_),
  };
  ArenaShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaShopData_descriptor_,
      ArenaShopData::default_instance_,
      ArenaShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaShopData));
  AwakenShopData_descriptor_ = file->message_type(56);
  static const int AwakenShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, free_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, cost_refresh_times_),
  };
  AwakenShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AwakenShopData_descriptor_,
      AwakenShopData::default_instance_,
      AwakenShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AwakenShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AwakenShopData));
  FairyShopData_descriptor_ = file->message_type(57);
  static const int FairyShopData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, used_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, last_auto_refresh_time_),
  };
  FairyShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FairyShopData_descriptor_,
      FairyShopData::default_instance_,
      FairyShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FairyShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FairyShopData));
  ScoreMatchShopData_descriptor_ = file->message_type(58);
  static const int ScoreMatchShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, buy_record_),
  };
  ScoreMatchShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreMatchShopData_descriptor_,
      ScoreMatchShopData::default_instance_,
      ScoreMatchShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreMatchShopData));
  SevenDayShopData_descriptor_ = file->message_type(59);
  static const int SevenDayShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, buy_record_),
  };
  SevenDayShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayShopData_descriptor_,
      SevenDayShopData::default_instance_,
      SevenDayShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayShopData));
  LevelGiftShopData_descriptor_ = file->message_type(60);
  static const int LevelGiftShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelGiftShopData, buy_record_),
  };
  LevelGiftShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelGiftShopData_descriptor_,
      LevelGiftShopData::default_instance_,
      LevelGiftShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelGiftShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelGiftShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelGiftShopData));
  EndlessLandShopData_descriptor_ = file->message_type(61);
  static const int EndlessLandShopData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndlessLandShopData, item_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndlessLandShopData, reward_goods_buy_record_),
  };
  EndlessLandShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndlessLandShopData_descriptor_,
      EndlessLandShopData::default_instance_,
      EndlessLandShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndlessLandShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndlessLandShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndlessLandShopData));
  DirectBuyShopData_descriptor_ = file->message_type(62);
  static const int DirectBuyShopData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, last_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, can_take_goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, last_refresh_year_day_),
  };
  DirectBuyShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DirectBuyShopData_descriptor_,
      DirectBuyShopData::default_instance_,
      DirectBuyShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DirectBuyShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DirectBuyShopData));
  ExchangeShopData_descriptor_ = file->message_type(63);
  static const int ExchangeShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeShopData, goods_buy_record_),
  };
  ExchangeShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeShopData_descriptor_,
      ExchangeShopData::default_instance_,
      ExchangeShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeShopData));
  RecommendShopData_descriptor_ = file->message_type(64);
  static const int RecommendShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendShopData, goods_buy_record_),
  };
  RecommendShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendShopData_descriptor_,
      RecommendShopData::default_instance_,
      RecommendShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendShopData));
  TeamDungeonShop_descriptor_ = file->message_type(65);
  static const int TeamDungeonShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonShop, normal_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonShop, reward_goods_buy_record_),
  };
  TeamDungeonShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonShop_descriptor_,
      TeamDungeonShop::default_instance_,
      TeamDungeonShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonShop));
  ChristmasShop_descriptor_ = file->message_type(66);
  static const int ChristmasShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasShop, score_exchange_goods_buy_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasShop, item_exchange_goods_buy_record_),
  };
  ChristmasShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChristmasShop_descriptor_,
      ChristmasShop::default_instance_,
      ChristmasShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChristmasShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChristmasShop));
  CrystalShop_descriptor_ = file->message_type(67);
  static const int CrystalShop_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalShop, today_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalShop, goods_buy_record_),
  };
  CrystalShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CrystalShop_descriptor_,
      CrystalShop::default_instance_,
      CrystalShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CrystalShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CrystalShop));
  ResourceWarShop_descriptor_ = file->message_type(68);
  static const int ResourceWarShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarShop, goods_buy_record_),
  };
  ResourceWarShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceWarShop_descriptor_,
      ResourceWarShop::default_instance_,
      ResourceWarShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceWarShop));
  GMShopData_descriptor_ = file->message_type(69);
  static const int GMShopData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShopData, goods_buy_record_),
  };
  GMShopData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMShopData_descriptor_,
      GMShopData::default_instance_,
      GMShopData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShopData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMShopData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMShopData));
  RoleShopInfo_descriptor_ = file->message_type(70);
  static const int RoleShopInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, hero_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, guild_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, mall_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, tower_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, arena_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, awaken_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, fairy_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, score_match_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, seven_day_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, level_gift_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, endless_land_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, direct_buy_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, exchange_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, recommend_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, teamdungeon_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, christmas_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, crystal_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, resource_war_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, gm_shop_),
  };
  RoleShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleShopInfo_descriptor_,
      RoleShopInfo::default_instance_,
      RoleShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleShopInfo));
  SpiritData_descriptor_ = file->message_type(71);
  static const int SpiritData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, enhance_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, train_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, train_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, star_),
  };
  SpiritData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritData_descriptor_,
      SpiritData::default_instance_,
      SpiritData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritData));
  SpiritPokedex_descriptor_ = file->message_type(72);
  static const int SpiritPokedex_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritPokedex, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritPokedex, level_),
  };
  SpiritPokedex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpiritPokedex_descriptor_,
      SpiritPokedex::default_instance_,
      SpiritPokedex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritPokedex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpiritPokedex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpiritPokedex));
  RoleSpiritInfo_descriptor_ = file->message_type(73);
  static const int RoleSpiritInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, cur_use_spirit_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, spirit_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, pokedex_list_),
  };
  RoleSpiritInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSpiritInfo_descriptor_,
      RoleSpiritInfo::default_instance_,
      RoleSpiritInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSpiritInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSpiritInfo));
  FriendData_descriptor_ = file->message_type(74);
  static const int FriendData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, is_give_energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, get_energy_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, help_battle_times_),
  };
  FriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendData_descriptor_,
      FriendData::default_instance_,
      FriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendData));
  RoleFriendData_descriptor_ = file->message_type(75);
  static const int RoleFriendData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, friend_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, black_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, get_energy_times_),
  };
  RoleFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFriendData_descriptor_,
      RoleFriendData::default_instance_,
      RoleFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFriendData));
  RoleRebelInfo_descriptor_ = file->message_type(76);
  static const int RoleRebelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, rebel_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, today_exploit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, today_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, reward_get_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, is_already_share_),
  };
  RoleRebelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRebelInfo_descriptor_,
      RoleRebelInfo::default_instance_,
      RoleRebelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRebelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRebelInfo));
  RoleDuobaoInfo_descriptor_ = file->message_type(77);
  static const int RoleDuobaoInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, peace_over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, doubao_times_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, daily_duobao_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, pregross_reward_record_),
  };
  RoleDuobaoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDuobaoInfo_descriptor_,
      RoleDuobaoInfo::default_instance_,
      RoleDuobaoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDuobaoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDuobaoInfo));
  AchievementData_descriptor_ = file->message_type(78);
  static const int AchievementData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, cur_reward_level_),
  };
  AchievementData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AchievementData_descriptor_,
      AchievementData::default_instance_,
      AchievementData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AchievementData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AchievementData));
  RoleAchievemntInfo_descriptor_ = file->message_type(79);
  static const int RoleAchievemntInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, achievement_list_),
  };
  RoleAchievemntInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleAchievemntInfo_descriptor_,
      RoleAchievemntInfo::default_instance_,
      RoleAchievemntInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAchievemntInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleAchievemntInfo));
  DailyMission_descriptor_ = file->message_type(80);
  static const int DailyMission_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, is_get_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, value_),
  };
  DailyMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyMission_descriptor_,
      DailyMission::default_instance_,
      DailyMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyMission));
  RoleDailyMissionInfo_descriptor_ = file->message_type(81);
  static const int RoleDailyMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, point_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, mission_list_),
  };
  RoleDailyMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDailyMissionInfo_descriptor_,
      RoleDailyMissionInfo::default_instance_,
      RoleDailyMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDailyMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDailyMissionInfo));
  SkillData_descriptor_ = file->message_type(82);
  static const int SkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, level_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
  RoleGuildSkillInfo_descriptor_ = file->message_type(83);
  static const int RoleGuildSkillInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, skill_list_),
  };
  RoleGuildSkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGuildSkillInfo_descriptor_,
      RoleGuildSkillInfo::default_instance_,
      RoleGuildSkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildSkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGuildSkillInfo));
  RoleSignInData_descriptor_ = file->message_type(84);
  static const int RoleSignInData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, cur_sign_in_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, last_sign_in_time_),
  };
  RoleSignInData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSignInData_descriptor_,
      RoleSignInData::default_instance_,
      RoleSignInData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSignInData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSignInData));
  LoginRewardData_descriptor_ = file->message_type(85);
  static const int LoginRewardData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardData, reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardData, login_days_),
  };
  LoginRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRewardData_descriptor_,
      LoginRewardData::default_instance_,
      LoginRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRewardData));
  RoleKingMatchData_descriptor_ = file->message_type(86);
  static const int RoleKingMatchData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, last_season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, total_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, total_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, today_win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, stage_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, history_stage_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, season_task_reward_record_),
  };
  RoleKingMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleKingMatchData_descriptor_,
      RoleKingMatchData::default_instance_,
      RoleKingMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleKingMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleKingMatchData));
  PlayerTeamDungeonData_descriptor_ = file->message_type(87);
  static const int PlayerTeamDungeonData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, today_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, pass_dungeon_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, today_kill_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, today_mvp_reward_times_),
  };
  PlayerTeamDungeonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTeamDungeonData_descriptor_,
      PlayerTeamDungeonData::default_instance_,
      PlayerTeamDungeonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTeamDungeonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTeamDungeonData));
  CardGroupData_descriptor_ = file->message_type(88);
  static const int CardGroupData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGroupData, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGroupData, is_already_open_),
  };
  CardGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardGroupData_descriptor_,
      CardGroupData::default_instance_,
      CardGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardGroupData));
  CollectionGroup_descriptor_ = file->message_type(89);
  static const int CollectionGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionGroup, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionGroup, star_),
  };
  CollectionGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionGroup_descriptor_,
      CollectionGroup::default_instance_,
      CollectionGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionGroup));
  CollectionBook_descriptor_ = file->message_type(90);
  static const int CollectionBook_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionBook, book_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionBook, collection_group_list_),
  };
  CollectionBook_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CollectionBook_descriptor_,
      CollectionBook::default_instance_,
      CollectionBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionBook, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CollectionBook, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CollectionBook));
  RoleZhanBuData_descriptor_ = file->message_type(91);
  static const int RoleZhanBuData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, history_collection_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, low_card_group_map_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, cur_low_card_group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, low_card_group_last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, cur_low_card_group_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, today_low_card_group_open_card_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, high_card_group_last_refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, low_card_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, high_card_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, collection_book_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, achievement_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, today_low_card_group_cost_refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, today_high_card_group_cost_refresh_times_),
  };
  RoleZhanBuData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleZhanBuData_descriptor_,
      RoleZhanBuData::default_instance_,
      RoleZhanBuData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleZhanBuData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleZhanBuData));
  WorldLevelTaskData_descriptor_ = file->message_type(92);
  static const int WorldLevelTaskData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, is_already_take_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, task_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, task_level_),
  };
  WorldLevelTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldLevelTaskData_descriptor_,
      WorldLevelTaskData::default_instance_,
      WorldLevelTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldLevelTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldLevelTaskData));
  RoleWorldLevelTaskInfo_descriptor_ = file->message_type(93);
  static const int RoleWorldLevelTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWorldLevelTaskInfo, is_already_take_final_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWorldLevelTaskInfo, task_event_list_),
  };
  RoleWorldLevelTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleWorldLevelTaskInfo_descriptor_,
      RoleWorldLevelTaskInfo::default_instance_,
      RoleWorldLevelTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWorldLevelTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleWorldLevelTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleWorldLevelTaskInfo));
  RoleHangUpDropData_descriptor_ = file->message_type(94);
  static const int RoleHangUpDropData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHangUpDropData, last_obtain_reward_time_),
  };
  RoleHangUpDropData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHangUpDropData_descriptor_,
      RoleHangUpDropData::default_instance_,
      RoleHangUpDropData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHangUpDropData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHangUpDropData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHangUpDropData));
  RoleSecondInfo_descriptor_ = file->message_type(95);
  static const int RoleSecondInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, pvp_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, title_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, endless_land_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, guild_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, luxury_sign_in_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, gem_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_item_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_equipment_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_treasure_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_shop_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_sprite_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_rebel_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_duobao_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_fb_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_achievement_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_daily_mission_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_guild_skill_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_sign_in_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, login_reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, king_match_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, team_dungeon_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_zhanbu_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_world_level_task_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, role_hang_up_drop_data_),
  };
  RoleSecondInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSecondInfo_descriptor_,
      RoleSecondInfo::default_instance_,
      RoleSecondInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSecondInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSecondInfo));
  RewardData_descriptor_ = file->message_type(96);
  static const int RewardData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, text_),
  };
  RewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardData_descriptor_,
      RewardData::default_instance_,
      RewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardData));
  RoleRewardData_descriptor_ = file->message_type(97);
  static const int RoleRewardData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, reward_list_),
  };
  RoleRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRewardData_descriptor_,
      RoleRewardData::default_instance_,
      RoleRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRewardData));
  YCSData_descriptor_ = file->message_type(98);
  static const int YCSData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, today_get_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, total_get_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, total_reward_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, last_get_time_),
  };
  YCSData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YCSData_descriptor_,
      YCSData::default_instance_,
      YCSData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YCSData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YCSData));
  TQTData_descriptor_ = file->message_type(99);
  static const int TQTData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, last_get_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, take_record_list_),
  };
  TQTData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TQTData_descriptor_,
      TQTData::default_instance_,
      TQTData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TQTData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TQTData));
  SevenDayTargetData_descriptor_ = file->message_type(100);
  static const int SevenDayTargetData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, is_get_reward_),
  };
  SevenDayTargetData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayTargetData_descriptor_,
      SevenDayTargetData::default_instance_,
      SevenDayTargetData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayTargetData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayTargetData));
  LevelShopActivityData_descriptor_ = file->message_type(101);
  static const int LevelShopActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelShopActivityData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelShopActivityData, activate_time_),
  };
  LevelShopActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelShopActivityData_descriptor_,
      LevelShopActivityData::default_instance_,
      LevelShopActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelShopActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelShopActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelShopActivityData));
  Gift_descriptor_ = file->message_type(102);
  static const int Gift_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, num_),
  };
  Gift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Gift_descriptor_,
      Gift::default_instance_,
      Gift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Gift));
  VipGiftData_descriptor_ = file->message_type(103);
  static const int VipGiftData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, init_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, vip_level_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, week_gift_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, today_recommend_recharge_reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, today_recommend_recharge_reward_status_),
  };
  VipGiftData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipGiftData_descriptor_,
      VipGiftData::default_instance_,
      VipGiftData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipGiftData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipGiftData));
  CommonRecharge_descriptor_ = file->message_type(104);
  static const int CommonRecharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRecharge, times_),
  };
  CommonRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonRecharge_descriptor_,
      CommonRecharge::default_instance_,
      CommonRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonRecharge));
  MonthCardData_descriptor_ = file->message_type(105);
  static const int MonthCardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, buy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, last_take_reward_time_),
  };
  MonthCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonthCardData_descriptor_,
      MonthCardData::default_instance_,
      MonthCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonthCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonthCardData));
  RoleRechargeData_descriptor_ = file->message_type(106);
  static const int RoleRechargeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, recharge_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, month_card_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, order_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, today_recharge_times_),
  };
  RoleRechargeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRechargeData_descriptor_,
      RoleRechargeData::default_instance_,
      RoleRechargeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRechargeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRechargeData));
  OpenServerFundData_descriptor_ = file->message_type(107);
  static const int OpenServerFundData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServerFundData, is_already_buy_fund_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServerFundData, fund_reward_take_record_),
  };
  OpenServerFundData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenServerFundData_descriptor_,
      OpenServerFundData::default_instance_,
      OpenServerFundData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServerFundData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenServerFundData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenServerFundData));
  AllPeopleWelfareData_descriptor_ = file->message_type(108);
  static const int AllPeopleWelfareData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPeopleWelfareData, welfare_take_record_),
  };
  AllPeopleWelfareData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllPeopleWelfareData_descriptor_,
      AllPeopleWelfareData::default_instance_,
      AllPeopleWelfareData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPeopleWelfareData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllPeopleWelfareData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllPeopleWelfareData));
  LimitActivityData_descriptor_ = file->message_type(109);
  static const int LimitActivityData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, recruit_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, accumulate_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, recruit_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, accumulate_recharge_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, single_recharge_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, first_recharge_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, last_single_recharge_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, last_accumulate_recharge_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, recharge_list_),
  };
  LimitActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitActivityData_descriptor_,
      LimitActivityData::default_instance_,
      LimitActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitActivityData));
  SuperDiscountData_descriptor_ = file->message_type(110);
  static const int SuperDiscountData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, take_accumulate_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, cur_buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, last_activity_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, took_accumulate_reward_list_),
  };
  SuperDiscountData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SuperDiscountData_descriptor_,
      SuperDiscountData::default_instance_,
      SuperDiscountData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SuperDiscountData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SuperDiscountData));
  ActivityTarget_descriptor_ = file->message_type(111);
  static const int ActivityTarget_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTarget, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTarget, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTarget, take_reward_times_),
  };
  ActivityTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityTarget_descriptor_,
      ActivityTarget::default_instance_,
      ActivityTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityTarget));
  FestivalActivity_descriptor_ = file->message_type(112);
  static const int FestivalActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActivity, data_reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActivity, target_list_),
  };
  FestivalActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalActivity_descriptor_,
      FestivalActivity::default_instance_,
      FestivalActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalActivity));
  RoleFestivalActivityInfo_descriptor_ = file->message_type(113);
  static const int RoleFestivalActivityInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, loop_once_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, loop_accumulate_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, limit_recruit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, activity_once_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, activity_accumulate_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, diamond_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, active_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, item_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, festival_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, open_server_login_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, open_svr_accumulate_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, festival_item_exchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, festival_discount_sell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, festival_active_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, open_server_active_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, festival_active_target_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, activity_once_recharge_2_),
  };
  RoleFestivalActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFestivalActivityInfo_descriptor_,
      RoleFestivalActivityInfo::default_instance_,
      RoleFestivalActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFestivalActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFestivalActivityInfo));
  AccurateRecommendGoods_descriptor_ = file->message_type(114);
  static const int AccurateRecommendGoods_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccurateRecommendGoods, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccurateRecommendGoods, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccurateRecommendGoods, can_take_times_),
  };
  AccurateRecommendGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccurateRecommendGoods_descriptor_,
      AccurateRecommendGoods::default_instance_,
      AccurateRecommendGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccurateRecommendGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccurateRecommendGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccurateRecommendGoods));
  RoleAccurateRecommendData_descriptor_ = file->message_type(115);
  static const int RoleAccurateRecommendData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAccurateRecommendData, goods_list_),
  };
  RoleAccurateRecommendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleAccurateRecommendData_descriptor_,
      RoleAccurateRecommendData::default_instance_,
      RoleAccurateRecommendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAccurateRecommendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleAccurateRecommendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleAccurateRecommendData));
  RoleChristmasData_descriptor_ = file->message_type(116);
  static const int RoleChristmasData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, total_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, cur_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, already_take_lower_boss_reward_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, already_take_high_boss_reward_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, last_reset_data_time_),
  };
  RoleChristmasData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleChristmasData_descriptor_,
      RoleChristmasData::default_instance_,
      RoleChristmasData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChristmasData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleChristmasData));
  OnlineRewardRecord_descriptor_ = file->message_type(117);
  static const int OnlineRewardRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRecord, days_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRecord, flag_list_),
  };
  OnlineRewardRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewardRecord_descriptor_,
      OnlineRewardRecord::default_instance_,
      OnlineRewardRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewardRecord));
  OnlineRewardData_descriptor_ = file->message_type(118);
  static const int OnlineRewardData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardData, online_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardData, reward_record_list_),
  };
  OnlineRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineRewardData_descriptor_,
      OnlineRewardData::default_instance_,
      OnlineRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineRewardData));
  SevenDayLoginData_descriptor_ = file->message_type(119);
  static const int SevenDayLoginData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayLoginData, daily_data_list_),
  };
  SevenDayLoginData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SevenDayLoginData_descriptor_,
      SevenDayLoginData::default_instance_,
      SevenDayLoginData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayLoginData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SevenDayLoginData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SevenDayLoginData));
  RecallFriendData_descriptor_ = file->message_type(120);
  static const int RecallFriendData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendData, friend_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendData, send_time_),
  };
  RecallFriendData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecallFriendData_descriptor_,
      RecallFriendData::default_instance_,
      RecallFriendData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecallFriendData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecallFriendData));
  FacebookActivityData_descriptor_ = file->message_type(121);
  static const int FacebookActivityData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, is_already_take_account_bingding_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, ready_to_share_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, recall_success_friend_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, invite_success_friend_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, recall_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, invite_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, send_recall_friend_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, send_invite_friend_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, ready_to_commend_time_),
  };
  FacebookActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacebookActivityData_descriptor_,
      FacebookActivityData::default_instance_,
      FacebookActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacebookActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacebookActivityData));
  RechargeRewardData_descriptor_ = file->message_type(122);
  static const int RechargeRewardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, is_took_extra_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, daily_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, last_activity_data_id_),
  };
  RechargeRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeRewardData_descriptor_,
      RechargeRewardData::default_instance_,
      RechargeRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeRewardData));
  TotalRechargeRewardData_descriptor_ = file->message_type(123);
  static const int TotalRechargeRewardData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeRewardData, total_amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeRewardData, reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeRewardData, last_activity_data_id_),
  };
  TotalRechargeRewardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalRechargeRewardData_descriptor_,
      TotalRechargeRewardData::default_instance_,
      TotalRechargeRewardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeRewardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeRewardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalRechargeRewardData));
  HotSaleGoods_descriptor_ = file->message_type(124);
  static const int HotSaleGoods_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, goods_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, cur_data_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, buy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, take_times_),
  };
  HotSaleGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HotSaleGoods_descriptor_,
      HotSaleGoods::default_instance_,
      HotSaleGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HotSaleGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HotSaleGoods));
  RoleHotSaleGoodsData_descriptor_ = file->message_type(125);
  static const int RoleHotSaleGoodsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHotSaleGoodsData, last_activity_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHotSaleGoodsData, goods_list_),
  };
  RoleHotSaleGoodsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleHotSaleGoodsData_descriptor_,
      RoleHotSaleGoodsData::default_instance_,
      RoleHotSaleGoodsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHotSaleGoodsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleHotSaleGoodsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleHotSaleGoodsData));
  RoleCampRecruitData_descriptor_ = file->message_type(126);
  static const int RoleCampRecruitData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, cur_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, today_already_recruit_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, camp_score_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, score_task_reward_record_list_),
  };
  RoleCampRecruitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleCampRecruitData_descriptor_,
      RoleCampRecruitData::default_instance_,
      RoleCampRecruitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleCampRecruitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleCampRecruitData));
  UnlockActivityData_descriptor_ = file->message_type(127);
  static const int UnlockActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockActivityData, is_score_for_shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockActivityData, watching_video_times_),
  };
  UnlockActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlockActivityData_descriptor_,
      UnlockActivityData::default_instance_,
      UnlockActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlockActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlockActivityData));
  RechargeAndCostRankData_descriptor_ = file->message_type(128);
  static const int RechargeAndCostRankData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeAndCostRankData, last_activity_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeAndCostRankData, cost_diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeAndCostRankData, recharge_amount_),
  };
  RechargeAndCostRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeAndCostRankData_descriptor_,
      RechargeAndCostRankData::default_instance_,
      RechargeAndCostRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeAndCostRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeAndCostRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeAndCostRankData));
  RoleActivityData_descriptor_ = file->message_type(129);
  static const int RoleActivityData_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, tqt_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, ycs_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, seven_day_target_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, completion_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, level_shop_activity_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, level_gift_take_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, vip_gift_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, recharge_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, open_server_fund_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, all_people_welfare_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, limit_activity_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, is_take_next_day_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, super_discount_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_festival_activity_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_accurate_recommend_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_christmas_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, online_reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, seven_day_login_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, facebook_activity_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, recharge_reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, total_recharge_reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, new_super_discount_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_hot_sale_goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_camp_recruit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_unlock_activity_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, role_recharge_and_cost_rank_data_),
  };
  RoleActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleActivityData_descriptor_,
      RoleActivityData::default_instance_,
      RoleActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleActivityData));
  LandPatrolEvent_descriptor_ = file->message_type(130);
  static const int LandPatrolEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPatrolEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPatrolEvent, happen_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPatrolEvent, is_double_reward_),
  };
  LandPatrolEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandPatrolEvent_descriptor_,
      LandPatrolEvent::default_instance_,
      LandPatrolEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPatrolEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandPatrolEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandPatrolEvent));
  LandCityData_descriptor_ = file->message_type(131);
  static const int LandCityData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, city_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, skill_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, patrol_hero_info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, start_patrol_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, patrol_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, time_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, is_riot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, is_take_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, reward_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, last_happen_event_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, interval_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, patrol_event_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, riot_event_list_),
  };
  LandCityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LandCityData_descriptor_,
      LandCityData::default_instance_,
      LandCityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LandCityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LandCityData));
  GuildBaseData_descriptor_ = file->message_type(132);
  static const int GuildBaseData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, icon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, qs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, qy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, cur_pass_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, today_start_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, history_chapter_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, is_from_history_chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, active_),
  };
  GuildBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBaseData_descriptor_,
      GuildBaseData::default_instance_,
      GuildBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBaseData));
  GuildMember_descriptor_ = file->message_type(133);
  static const int GuildMember_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, total_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, cur_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, today_contribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, last_logout_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, qy_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, battle_fb_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, buy_battle_fb_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, qs_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, battle_times_last_recover_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, take_chapter_reward_record_),
  };
  GuildMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMember_descriptor_,
      GuildMember::default_instance_,
      GuildMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMember));
  GuildEvent_descriptor_ = file->message_type(134);
  static const int GuildEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, event_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, time_),
  };
  GuildEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildEvent_descriptor_,
      GuildEvent::default_instance_,
      GuildEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildEvent));
  GuildLeaveMessage_descriptor_ = file->message_type(135);
  static const int GuildLeaveMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, text_),
  };
  GuildLeaveMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildLeaveMessage_descriptor_,
      GuildLeaveMessage::default_instance_,
      GuildLeaveMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLeaveMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildLeaveMessage));
  ChatRecord_descriptor_ = file->message_type(136);
  static const int ChatRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, head_img_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, role_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, chat_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, role_use_title_id_),
  };
  ChatRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRecord_descriptor_,
      ChatRecord::default_instance_,
      ChatRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRecord));
  GuildCampMonster_descriptor_ = file->message_type(137);
  static const int GuildCampMonster_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampMonster, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampMonster, killer_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampMonster, monster_list_),
  };
  GuildCampMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCampMonster_descriptor_,
      GuildCampMonster::default_instance_,
      GuildCampMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCampMonster));
  GuildFBBox_descriptor_ = file->message_type(138);
  static const int GuildFBBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFBBox, box_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFBBox, box_reward_idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFBBox, role_name_),
  };
  GuildFBBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildFBBox_descriptor_,
      GuildFBBox::default_instance_,
      GuildFBBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFBBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildFBBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildFBBox));
  GuildCampBox_descriptor_ = file->message_type(139);
  static const int GuildCampBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampBox, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampBox, take_box_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampBox, take_reward_player_list_),
  };
  GuildCampBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCampBox_descriptor_,
      GuildCampBox::default_instance_,
      GuildCampBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCampBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCampBox));
  GuildMapRewardRecord_descriptor_ = file->message_type(140);
  static const int GuildMapRewardRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapRewardRecord, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapRewardRecord, camp_box_list_),
  };
  GuildMapRewardRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMapRewardRecord_descriptor_,
      GuildMapRewardRecord::default_instance_,
      GuildMapRewardRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapRewardRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMapRewardRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMapRewardRecord));
  GuildMonsterDamageRecord_descriptor_ = file->message_type(141);
  static const int GuildMonsterDamageRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMonsterDamageRecord, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMonsterDamageRecord, damage_),
  };
  GuildMonsterDamageRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMonsterDamageRecord_descriptor_,
      GuildMonsterDamageRecord::default_instance_,
      GuildMonsterDamageRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMonsterDamageRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMonsterDamageRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMonsterDamageRecord));
  GuildInfo_descriptor_ = file->message_type(142);
  static const int GuildInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, member_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, leave_message_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, event_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, skill_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, apply_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, goods_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, chat_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, damage_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, camp_monster_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, map_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, create_monster_time_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  MapComment_descriptor_ = file->message_type(143);
  static const int MapComment_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, comment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, like_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, like_player_list_),
  };
  MapComment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapComment_descriptor_,
      MapComment::default_instance_,
      MapComment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapComment));
  MapComments_descriptor_ = file->message_type(144);
  static const int MapComments_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComments, map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComments, comment_list_),
  };
  MapComments_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapComments_descriptor_,
      MapComments::default_instance_,
      MapComments_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComments, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapComments, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapComments));
  RoleTempData_descriptor_ = file->message_type(145);
  static const int RoleTempData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempData, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempData, param_list_),
  };
  RoleTempData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTempData_descriptor_,
      RoleTempData::default_instance_,
      RoleTempData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTempData));
  RoleTempDatas_descriptor_ = file->message_type(146);
  static const int RoleTempDatas_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempDatas, temp_data_list_),
  };
  RoleTempDatas_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleTempDatas_descriptor_,
      RoleTempDatas::default_instance_,
      RoleTempDatas_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempDatas, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleTempDatas, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleTempDatas));
  KingMatchBattleTarget_descriptor_ = file->message_type(147);
  static const int KingMatchBattleTarget_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, stage_level_),
  };
  KingMatchBattleTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingMatchBattleTarget_descriptor_,
      KingMatchBattleTarget::default_instance_,
      KingMatchBattleTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchBattleTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingMatchBattleTarget));
  KingMatchStage_descriptor_ = file->message_type(148);
  static const int KingMatchStage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchStage, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchStage, battle_target_list_),
  };
  KingMatchStage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingMatchStage_descriptor_,
      KingMatchStage::default_instance_,
      KingMatchStage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchStage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchStage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingMatchStage));
  RoleSeasonRank_descriptor_ = file->message_type(149);
  static const int RoleSeasonRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSeasonRank, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSeasonRank, server_id_),
  };
  RoleSeasonRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSeasonRank_descriptor_,
      RoleSeasonRank::default_instance_,
      RoleSeasonRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSeasonRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSeasonRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSeasonRank));
  SeasonRankData_descriptor_ = file->message_type(150);
  static const int SeasonRankData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonRankData, season_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonRankData, rank_list_),
  };
  SeasonRankData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeasonRankData_descriptor_,
      SeasonRankData::default_instance_,
      SeasonRankData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonRankData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeasonRankData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeasonRankData));
  KingMatchData_descriptor_ = file->message_type(151);
  static const int KingMatchData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchData, stage_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchData, last_season_rank_list_),
  };
  KingMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingMatchData_descriptor_,
      KingMatchData::default_instance_,
      KingMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingMatchData));
  TeamDungeonMember_descriptor_ = file->message_type(152);
  static const int TeamDungeonMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonMember, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonMember, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonMember, role_id_),
  };
  TeamDungeonMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonMember_descriptor_,
      TeamDungeonMember::default_instance_,
      TeamDungeonMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonMember));
  TeamDungeonRoleRank_descriptor_ = file->message_type(153);
  static const int TeamDungeonRoleRank_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, use_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, finish_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, captain_head_img_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, member_list_),
  };
  TeamDungeonRoleRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonRoleRank_descriptor_,
      TeamDungeonRoleRank::default_instance_,
      TeamDungeonRoleRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRoleRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonRoleRank));
  TeamDungeonRank_descriptor_ = file->message_type(154);
  static const int TeamDungeonRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRank, dungeon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRank, role_rank_list_),
  };
  TeamDungeonRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonRank_descriptor_,
      TeamDungeonRank::default_instance_,
      TeamDungeonRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonRank));
  TeamDungeonLotteryRecord_descriptor_ = file->message_type(155);
  static const int TeamDungeonLotteryRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, role_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, record_time_),
  };
  TeamDungeonLotteryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonLotteryRecord_descriptor_,
      TeamDungeonLotteryRecord::default_instance_,
      TeamDungeonLotteryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonLotteryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonLotteryRecord));
  TeamDungeonData_descriptor_ = file->message_type(156);
  static const int TeamDungeonData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonData, dungeon_rank_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonData, lottery_record_),
  };
  TeamDungeonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamDungeonData_descriptor_,
      TeamDungeonData::default_instance_,
      TeamDungeonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamDungeonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamDungeonData));
  TurntableLotteryRecord_descriptor_ = file->message_type(157);
  static const int TurntableLotteryRecord_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, context_),
  };
  TurntableLotteryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableLotteryRecord_descriptor_,
      TurntableLotteryRecord::default_instance_,
      TurntableLotteryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableLotteryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableLotteryRecord));
  TurntableData_descriptor_ = file->message_type(158);
  static const int TurntableData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, server_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, cur_activity_data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, lottery_record_list_),
  };
  TurntableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TurntableData_descriptor_,
      TurntableData::default_instance_,
      TurntableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TurntableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TurntableData));
  AllServerTurntableData_descriptor_ = file->message_type(159);
  static const int AllServerTurntableData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerTurntableData, turntable_data_list_),
  };
  AllServerTurntableData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllServerTurntableData_descriptor_,
      AllServerTurntableData::default_instance_,
      AllServerTurntableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerTurntableData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllServerTurntableData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllServerTurntableData));
  ScoreMatchTarget_descriptor_ = file->message_type(160);
  static const int ScoreMatchTarget_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchTarget, target_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchTarget, status_),
  };
  ScoreMatchTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreMatchTarget_descriptor_,
      ScoreMatchTarget::default_instance_,
      ScoreMatchTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreMatchTarget));
  RoleScoreMatchData_descriptor_ = file->message_type(161);
  static const int RoleScoreMatchData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, refresh_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, buy_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, camp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, win_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, task_reward_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, battle_target_list_),
  };
  RoleScoreMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleScoreMatchData_descriptor_,
      RoleScoreMatchData::default_instance_,
      RoleScoreMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleScoreMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleScoreMatchData));
  ScoreMatchData_descriptor_ = file->message_type(162);
  static const int ScoreMatchData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, cur_activity_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, activity_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, activity_over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, role_score_match_data_list_),
  };
  ScoreMatchData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreMatchData_descriptor_,
      ScoreMatchData::default_instance_,
      ScoreMatchData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreMatchData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreMatchData));
  RoleResourceWarData_descriptor_ = file->message_type(163);
  static const int RoleResourceWarData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, technology_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, total_accupy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, reward_resource_war_score_),
  };
  RoleResourceWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleResourceWarData_descriptor_,
      RoleResourceWarData::default_instance_,
      RoleResourceWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleResourceWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleResourceWarData));
  ResourceWarEnemy_descriptor_ = file->message_type(164);
  static const int ResourceWarEnemy_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarEnemy, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarEnemy, be_attack_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarEnemy, enemy_id_),
  };
  ResourceWarEnemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceWarEnemy_descriptor_,
      ResourceWarEnemy::default_instance_,
      ResourceWarEnemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarEnemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarEnemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceWarEnemy));
  ResourceWarBattleRecord_descriptor_ = file->message_type(165);
  static const int ResourceWarBattleRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, attacker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, defender_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, battle_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, resource_id_),
  };
  ResourceWarBattleRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceWarBattleRecord_descriptor_,
      ResourceWarBattleRecord::default_instance_,
      ResourceWarBattleRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarBattleRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceWarBattleRecord));
  ResourceWarResourceData_descriptor_ = file->message_type(166);
  static const int ResourceWarResourceData_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, chapter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, resource_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, resource_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, occupy_start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, occupy_over_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, keep_occupy_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, last_base_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, last_extra_reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, base_reward_interval_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, cur_extra_reward_need_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, already_send_base_reward_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, already_send_extra_reward_times_),
  };
  ResourceWarResourceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceWarResourceData_descriptor_,
      ResourceWarResourceData::default_instance_,
      ResourceWarResourceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarResourceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceWarResourceData));
  ResourceWarData_descriptor_ = file->message_type(167);
  static const int ResourceWarData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, resource_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, role_resource_war_data_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, enemy_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, battle_record_list_),
  };
  ResourceWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceWarData_descriptor_,
      ResourceWarData::default_instance_,
      ResourceWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceWarData));
  StarDefenderInfo_descriptor_ = file->message_type(168);
  static const int StarDefenderInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarDefenderInfo, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarDefenderInfo, be_attack_times_),
  };
  StarDefenderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarDefenderInfo_descriptor_,
      StarDefenderInfo::default_instance_,
      StarDefenderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarDefenderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarDefenderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarDefenderInfo));
  StarTowerInfo_descriptor_ = file->message_type(169);
  static const int StarTowerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, tower_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, monster_be_attack_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, defender_list_),
  };
  StarTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarTowerInfo_descriptor_,
      StarTowerInfo::default_instance_,
      StarTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarTowerInfo));
  GuildWarScore_descriptor_ = file->message_type(170);
  static const int GuildWarScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarScore, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarScore, score_),
  };
  GuildWarScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarScore_descriptor_,
      GuildWarScore::default_instance_,
      GuildWarScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarScore));
  StarInfo_descriptor_ = file->message_type(171);
  static const int StarInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, region_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, info_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, belong_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, attack_guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, took_reward_record_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, declare_war_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, score_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, tower_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, last_belong_guild_id_),
  };
  StarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StarInfo_descriptor_,
      StarInfo::default_instance_,
      StarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StarInfo));
  RoleGuildWarData_descriptor_ = file->message_type(172);
  static const int RoleGuildWarData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, buy_high_star_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, used_low_star_battle_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, used_high_star_battle_times_),
  };
  RoleGuildWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleGuildWarData_descriptor_,
      RoleGuildWarData::default_instance_,
      RoleGuildWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleGuildWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleGuildWarData));
  GuildWarData_descriptor_ = file->message_type(173);
  static const int GuildWarData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarData, star_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarData, role_guild_war_data_list_),
  };
  GuildWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildWarData_descriptor_,
      GuildWarData::default_instance_,
      GuildWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildWarData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Item_descriptor_, &Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Equipment_descriptor_, &Equipment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Treasure_descriptor_, &Treasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fairy_descriptor_, &fairy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Card_descriptor_, &Card::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroTrainData_descriptor_, &HeroTrainData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecordData_descriptor_, &RecordData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Hero_descriptor_, &Hero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterData_descriptor_, &MonsterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRankData_descriptor_, &ArenaRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaRankDataList_descriptor_, &ArenaRankDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_rank_data_descriptor_, &role_rank_data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    role_rank_list_descriptor_, &role_rank_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    all_server_role_rank_list_descriptor_, &all_server_role_rank_list::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildRankData_descriptor_, &GuildRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Property_descriptor_, &Property::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationProperty_descriptor_, &FormationProperty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuideData_descriptor_, &GuideData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPVPData_descriptor_, &PlayerPVPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBaseInfo_descriptor_, &RoleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePVPData_descriptor_, &RolePVPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTitleInfo_descriptor_, &RoleTitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEndlessLandInfo_descriptor_, &RoleEndlessLandInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGuildData_descriptor_, &RoleGuildData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LuxurySignInData_descriptor_, &LuxurySignInData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLuxurySignInData_descriptor_, &PlayerLuxurySignInData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gem_descriptor_, &Gem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGemInfo_descriptor_, &PlayerGemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEquipmentInfo_descriptor_, &RoleEquipmentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Formation_descriptor_, &Formation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHeroInfo_descriptor_, &RoleHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTreasureInfo_descriptor_, &RoleTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleItemInfo_descriptor_, &RoleItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailContext_descriptor_, &EmailContext::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmailInfo_descriptor_, &EmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEmailInfo_descriptor_, &RoleEmailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapData_descriptor_, &MapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChapterData_descriptor_, &ChapterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainFBData_descriptor_, &MainFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroMapData_descriptor_, &HeroMapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroFBChapter_descriptor_, &HeroFBChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroFBData_descriptor_, &HeroFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyChapterData_descriptor_, &DailyChapterData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyFBData_descriptor_, &DailyFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteMapEnemyData_descriptor_, &EliteMapEnemyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteFBChapter_descriptor_, &EliteFBChapter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteFBData_descriptor_, &EliteFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerFBData_descriptor_, &TowerFBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFBInfo_descriptor_, &RoleFBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopGoods_descriptor_, &ShopGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroShopData_descriptor_, &HeroShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildShopData_descriptor_, &GuildShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallShopData_descriptor_, &MallShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerShopData_descriptor_, &TowerShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaShopData_descriptor_, &ArenaShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AwakenShopData_descriptor_, &AwakenShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FairyShopData_descriptor_, &FairyShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreMatchShopData_descriptor_, &ScoreMatchShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayShopData_descriptor_, &SevenDayShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelGiftShopData_descriptor_, &LevelGiftShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndlessLandShopData_descriptor_, &EndlessLandShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DirectBuyShopData_descriptor_, &DirectBuyShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeShopData_descriptor_, &ExchangeShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendShopData_descriptor_, &RecommendShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonShop_descriptor_, &TeamDungeonShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChristmasShop_descriptor_, &ChristmasShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CrystalShop_descriptor_, &CrystalShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceWarShop_descriptor_, &ResourceWarShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMShopData_descriptor_, &GMShopData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleShopInfo_descriptor_, &RoleShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritData_descriptor_, &SpiritData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpiritPokedex_descriptor_, &SpiritPokedex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSpiritInfo_descriptor_, &RoleSpiritInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendData_descriptor_, &FriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFriendData_descriptor_, &RoleFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRebelInfo_descriptor_, &RoleRebelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDuobaoInfo_descriptor_, &RoleDuobaoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AchievementData_descriptor_, &AchievementData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleAchievemntInfo_descriptor_, &RoleAchievemntInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyMission_descriptor_, &DailyMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDailyMissionInfo_descriptor_, &RoleDailyMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGuildSkillInfo_descriptor_, &RoleGuildSkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSignInData_descriptor_, &RoleSignInData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRewardData_descriptor_, &LoginRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleKingMatchData_descriptor_, &RoleKingMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTeamDungeonData_descriptor_, &PlayerTeamDungeonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardGroupData_descriptor_, &CardGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionGroup_descriptor_, &CollectionGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CollectionBook_descriptor_, &CollectionBook::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleZhanBuData_descriptor_, &RoleZhanBuData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldLevelTaskData_descriptor_, &WorldLevelTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleWorldLevelTaskInfo_descriptor_, &RoleWorldLevelTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHangUpDropData_descriptor_, &RoleHangUpDropData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSecondInfo_descriptor_, &RoleSecondInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardData_descriptor_, &RewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRewardData_descriptor_, &RoleRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YCSData_descriptor_, &YCSData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TQTData_descriptor_, &TQTData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayTargetData_descriptor_, &SevenDayTargetData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelShopActivityData_descriptor_, &LevelShopActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Gift_descriptor_, &Gift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipGiftData_descriptor_, &VipGiftData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonRecharge_descriptor_, &CommonRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonthCardData_descriptor_, &MonthCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRechargeData_descriptor_, &RoleRechargeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenServerFundData_descriptor_, &OpenServerFundData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllPeopleWelfareData_descriptor_, &AllPeopleWelfareData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitActivityData_descriptor_, &LimitActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SuperDiscountData_descriptor_, &SuperDiscountData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityTarget_descriptor_, &ActivityTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalActivity_descriptor_, &FestivalActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFestivalActivityInfo_descriptor_, &RoleFestivalActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccurateRecommendGoods_descriptor_, &AccurateRecommendGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleAccurateRecommendData_descriptor_, &RoleAccurateRecommendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleChristmasData_descriptor_, &RoleChristmasData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewardRecord_descriptor_, &OnlineRewardRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineRewardData_descriptor_, &OnlineRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SevenDayLoginData_descriptor_, &SevenDayLoginData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecallFriendData_descriptor_, &RecallFriendData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacebookActivityData_descriptor_, &FacebookActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeRewardData_descriptor_, &RechargeRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalRechargeRewardData_descriptor_, &TotalRechargeRewardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HotSaleGoods_descriptor_, &HotSaleGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleHotSaleGoodsData_descriptor_, &RoleHotSaleGoodsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleCampRecruitData_descriptor_, &RoleCampRecruitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlockActivityData_descriptor_, &UnlockActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeAndCostRankData_descriptor_, &RechargeAndCostRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleActivityData_descriptor_, &RoleActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandPatrolEvent_descriptor_, &LandPatrolEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LandCityData_descriptor_, &LandCityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBaseData_descriptor_, &GuildBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMember_descriptor_, &GuildMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildEvent_descriptor_, &GuildEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildLeaveMessage_descriptor_, &GuildLeaveMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRecord_descriptor_, &ChatRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCampMonster_descriptor_, &GuildCampMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildFBBox_descriptor_, &GuildFBBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCampBox_descriptor_, &GuildCampBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMapRewardRecord_descriptor_, &GuildMapRewardRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMonsterDamageRecord_descriptor_, &GuildMonsterDamageRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapComment_descriptor_, &MapComment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapComments_descriptor_, &MapComments::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTempData_descriptor_, &RoleTempData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleTempDatas_descriptor_, &RoleTempDatas::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingMatchBattleTarget_descriptor_, &KingMatchBattleTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingMatchStage_descriptor_, &KingMatchStage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSeasonRank_descriptor_, &RoleSeasonRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeasonRankData_descriptor_, &SeasonRankData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingMatchData_descriptor_, &KingMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonMember_descriptor_, &TeamDungeonMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonRoleRank_descriptor_, &TeamDungeonRoleRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonRank_descriptor_, &TeamDungeonRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonLotteryRecord_descriptor_, &TeamDungeonLotteryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamDungeonData_descriptor_, &TeamDungeonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableLotteryRecord_descriptor_, &TurntableLotteryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TurntableData_descriptor_, &TurntableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllServerTurntableData_descriptor_, &AllServerTurntableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreMatchTarget_descriptor_, &ScoreMatchTarget::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleScoreMatchData_descriptor_, &RoleScoreMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreMatchData_descriptor_, &ScoreMatchData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleResourceWarData_descriptor_, &RoleResourceWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceWarEnemy_descriptor_, &ResourceWarEnemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceWarBattleRecord_descriptor_, &ResourceWarBattleRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceWarResourceData_descriptor_, &ResourceWarResourceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceWarData_descriptor_, &ResourceWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarDefenderInfo_descriptor_, &StarDefenderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarTowerInfo_descriptor_, &StarTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarScore_descriptor_, &GuildWarScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StarInfo_descriptor_, &StarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleGuildWarData_descriptor_, &RoleGuildWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildWarData_descriptor_, &GuildWarData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_5fdefine_2eproto() {
  delete Item::default_instance_;
  delete Item_reflection_;
  delete Equipment::default_instance_;
  delete Equipment_reflection_;
  delete Treasure::default_instance_;
  delete Treasure_reflection_;
  delete fairy::default_instance_;
  delete fairy_reflection_;
  delete Card::default_instance_;
  delete Card_reflection_;
  delete HeroTrainData::default_instance_;
  delete HeroTrainData_reflection_;
  delete RecordData::default_instance_;
  delete RecordData_reflection_;
  delete Hero::default_instance_;
  delete Hero_reflection_;
  delete MonsterData::default_instance_;
  delete MonsterData_reflection_;
  delete ArenaRankData::default_instance_;
  delete ArenaRankData_reflection_;
  delete ArenaRankDataList::default_instance_;
  delete ArenaRankDataList_reflection_;
  delete role_rank_data::default_instance_;
  delete role_rank_data_reflection_;
  delete role_rank_list::default_instance_;
  delete role_rank_list_reflection_;
  delete all_server_role_rank_list::default_instance_;
  delete all_server_role_rank_list_reflection_;
  delete GuildRankData::default_instance_;
  delete GuildRankData_reflection_;
  delete Property::default_instance_;
  delete Property_reflection_;
  delete FormationProperty::default_instance_;
  delete FormationProperty_reflection_;
  delete GuideData::default_instance_;
  delete GuideData_reflection_;
  delete PlayerPVPData::default_instance_;
  delete PlayerPVPData_reflection_;
  delete RoleBaseInfo::default_instance_;
  delete RoleBaseInfo_reflection_;
  delete RolePVPData::default_instance_;
  delete RolePVPData_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete RoleTitleInfo::default_instance_;
  delete RoleTitleInfo_reflection_;
  delete RoleEndlessLandInfo::default_instance_;
  delete RoleEndlessLandInfo_reflection_;
  delete RoleGuildData::default_instance_;
  delete RoleGuildData_reflection_;
  delete LuxurySignInData::default_instance_;
  delete LuxurySignInData_reflection_;
  delete PlayerLuxurySignInData::default_instance_;
  delete PlayerLuxurySignInData_reflection_;
  delete Gem::default_instance_;
  delete Gem_reflection_;
  delete PlayerGemInfo::default_instance_;
  delete PlayerGemInfo_reflection_;
  delete RoleEquipmentInfo::default_instance_;
  delete RoleEquipmentInfo_reflection_;
  delete Formation::default_instance_;
  delete Formation_reflection_;
  delete RoleHeroInfo::default_instance_;
  delete RoleHeroInfo_reflection_;
  delete RoleTreasureInfo::default_instance_;
  delete RoleTreasureInfo_reflection_;
  delete RoleItemInfo::default_instance_;
  delete RoleItemInfo_reflection_;
  delete EmailContext::default_instance_;
  delete EmailContext_reflection_;
  delete EmailInfo::default_instance_;
  delete EmailInfo_reflection_;
  delete RoleEmailInfo::default_instance_;
  delete RoleEmailInfo_reflection_;
  delete MapData::default_instance_;
  delete MapData_reflection_;
  delete ChapterData::default_instance_;
  delete ChapterData_reflection_;
  delete MainFBData::default_instance_;
  delete MainFBData_reflection_;
  delete HeroMapData::default_instance_;
  delete HeroMapData_reflection_;
  delete HeroFBChapter::default_instance_;
  delete HeroFBChapter_reflection_;
  delete HeroFBData::default_instance_;
  delete HeroFBData_reflection_;
  delete DailyChapterData::default_instance_;
  delete DailyChapterData_reflection_;
  delete DailyFBData::default_instance_;
  delete DailyFBData_reflection_;
  delete EliteMapEnemyData::default_instance_;
  delete EliteMapEnemyData_reflection_;
  delete EliteFBChapter::default_instance_;
  delete EliteFBChapter_reflection_;
  delete EliteFBData::default_instance_;
  delete EliteFBData_reflection_;
  delete TowerFBData::default_instance_;
  delete TowerFBData_reflection_;
  delete RoleFBInfo::default_instance_;
  delete RoleFBInfo_reflection_;
  delete ShopGoods::default_instance_;
  delete ShopGoods_reflection_;
  delete HeroShopData::default_instance_;
  delete HeroShopData_reflection_;
  delete GuildShopData::default_instance_;
  delete GuildShopData_reflection_;
  delete MallShopData::default_instance_;
  delete MallShopData_reflection_;
  delete TowerShopData::default_instance_;
  delete TowerShopData_reflection_;
  delete ArenaShopData::default_instance_;
  delete ArenaShopData_reflection_;
  delete AwakenShopData::default_instance_;
  delete AwakenShopData_reflection_;
  delete FairyShopData::default_instance_;
  delete FairyShopData_reflection_;
  delete ScoreMatchShopData::default_instance_;
  delete ScoreMatchShopData_reflection_;
  delete SevenDayShopData::default_instance_;
  delete SevenDayShopData_reflection_;
  delete LevelGiftShopData::default_instance_;
  delete LevelGiftShopData_reflection_;
  delete EndlessLandShopData::default_instance_;
  delete EndlessLandShopData_reflection_;
  delete DirectBuyShopData::default_instance_;
  delete DirectBuyShopData_reflection_;
  delete ExchangeShopData::default_instance_;
  delete ExchangeShopData_reflection_;
  delete RecommendShopData::default_instance_;
  delete RecommendShopData_reflection_;
  delete TeamDungeonShop::default_instance_;
  delete TeamDungeonShop_reflection_;
  delete ChristmasShop::default_instance_;
  delete ChristmasShop_reflection_;
  delete CrystalShop::default_instance_;
  delete CrystalShop_reflection_;
  delete ResourceWarShop::default_instance_;
  delete ResourceWarShop_reflection_;
  delete GMShopData::default_instance_;
  delete GMShopData_reflection_;
  delete RoleShopInfo::default_instance_;
  delete RoleShopInfo_reflection_;
  delete SpiritData::default_instance_;
  delete SpiritData_reflection_;
  delete SpiritPokedex::default_instance_;
  delete SpiritPokedex_reflection_;
  delete RoleSpiritInfo::default_instance_;
  delete RoleSpiritInfo_reflection_;
  delete FriendData::default_instance_;
  delete FriendData_reflection_;
  delete RoleFriendData::default_instance_;
  delete RoleFriendData_reflection_;
  delete RoleRebelInfo::default_instance_;
  delete RoleRebelInfo_reflection_;
  delete RoleDuobaoInfo::default_instance_;
  delete RoleDuobaoInfo_reflection_;
  delete AchievementData::default_instance_;
  delete AchievementData_reflection_;
  delete RoleAchievemntInfo::default_instance_;
  delete RoleAchievemntInfo_reflection_;
  delete DailyMission::default_instance_;
  delete DailyMission_reflection_;
  delete RoleDailyMissionInfo::default_instance_;
  delete RoleDailyMissionInfo_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
  delete RoleGuildSkillInfo::default_instance_;
  delete RoleGuildSkillInfo_reflection_;
  delete RoleSignInData::default_instance_;
  delete RoleSignInData_reflection_;
  delete LoginRewardData::default_instance_;
  delete LoginRewardData_reflection_;
  delete RoleKingMatchData::default_instance_;
  delete RoleKingMatchData_reflection_;
  delete PlayerTeamDungeonData::default_instance_;
  delete PlayerTeamDungeonData_reflection_;
  delete CardGroupData::default_instance_;
  delete CardGroupData_reflection_;
  delete CollectionGroup::default_instance_;
  delete CollectionGroup_reflection_;
  delete CollectionBook::default_instance_;
  delete CollectionBook_reflection_;
  delete RoleZhanBuData::default_instance_;
  delete RoleZhanBuData_reflection_;
  delete WorldLevelTaskData::default_instance_;
  delete WorldLevelTaskData_reflection_;
  delete RoleWorldLevelTaskInfo::default_instance_;
  delete RoleWorldLevelTaskInfo_reflection_;
  delete RoleHangUpDropData::default_instance_;
  delete RoleHangUpDropData_reflection_;
  delete RoleSecondInfo::default_instance_;
  delete RoleSecondInfo_reflection_;
  delete RewardData::default_instance_;
  delete RewardData_reflection_;
  delete RoleRewardData::default_instance_;
  delete RoleRewardData_reflection_;
  delete YCSData::default_instance_;
  delete YCSData_reflection_;
  delete TQTData::default_instance_;
  delete TQTData_reflection_;
  delete SevenDayTargetData::default_instance_;
  delete SevenDayTargetData_reflection_;
  delete LevelShopActivityData::default_instance_;
  delete LevelShopActivityData_reflection_;
  delete Gift::default_instance_;
  delete Gift_reflection_;
  delete VipGiftData::default_instance_;
  delete VipGiftData_reflection_;
  delete CommonRecharge::default_instance_;
  delete CommonRecharge_reflection_;
  delete MonthCardData::default_instance_;
  delete MonthCardData_reflection_;
  delete RoleRechargeData::default_instance_;
  delete RoleRechargeData_reflection_;
  delete OpenServerFundData::default_instance_;
  delete OpenServerFundData_reflection_;
  delete AllPeopleWelfareData::default_instance_;
  delete AllPeopleWelfareData_reflection_;
  delete LimitActivityData::default_instance_;
  delete LimitActivityData_reflection_;
  delete SuperDiscountData::default_instance_;
  delete SuperDiscountData_reflection_;
  delete ActivityTarget::default_instance_;
  delete ActivityTarget_reflection_;
  delete FestivalActivity::default_instance_;
  delete FestivalActivity_reflection_;
  delete RoleFestivalActivityInfo::default_instance_;
  delete RoleFestivalActivityInfo_reflection_;
  delete AccurateRecommendGoods::default_instance_;
  delete AccurateRecommendGoods_reflection_;
  delete RoleAccurateRecommendData::default_instance_;
  delete RoleAccurateRecommendData_reflection_;
  delete RoleChristmasData::default_instance_;
  delete RoleChristmasData_reflection_;
  delete OnlineRewardRecord::default_instance_;
  delete OnlineRewardRecord_reflection_;
  delete OnlineRewardData::default_instance_;
  delete OnlineRewardData_reflection_;
  delete SevenDayLoginData::default_instance_;
  delete SevenDayLoginData_reflection_;
  delete RecallFriendData::default_instance_;
  delete RecallFriendData_reflection_;
  delete FacebookActivityData::default_instance_;
  delete FacebookActivityData_reflection_;
  delete RechargeRewardData::default_instance_;
  delete RechargeRewardData_reflection_;
  delete TotalRechargeRewardData::default_instance_;
  delete TotalRechargeRewardData_reflection_;
  delete HotSaleGoods::default_instance_;
  delete HotSaleGoods_reflection_;
  delete RoleHotSaleGoodsData::default_instance_;
  delete RoleHotSaleGoodsData_reflection_;
  delete RoleCampRecruitData::default_instance_;
  delete RoleCampRecruitData_reflection_;
  delete UnlockActivityData::default_instance_;
  delete UnlockActivityData_reflection_;
  delete RechargeAndCostRankData::default_instance_;
  delete RechargeAndCostRankData_reflection_;
  delete RoleActivityData::default_instance_;
  delete RoleActivityData_reflection_;
  delete LandPatrolEvent::default_instance_;
  delete LandPatrolEvent_reflection_;
  delete LandCityData::default_instance_;
  delete LandCityData_reflection_;
  delete GuildBaseData::default_instance_;
  delete GuildBaseData_reflection_;
  delete GuildMember::default_instance_;
  delete GuildMember_reflection_;
  delete GuildEvent::default_instance_;
  delete GuildEvent_reflection_;
  delete GuildLeaveMessage::default_instance_;
  delete GuildLeaveMessage_reflection_;
  delete ChatRecord::default_instance_;
  delete ChatRecord_reflection_;
  delete GuildCampMonster::default_instance_;
  delete GuildCampMonster_reflection_;
  delete GuildFBBox::default_instance_;
  delete GuildFBBox_reflection_;
  delete GuildCampBox::default_instance_;
  delete GuildCampBox_reflection_;
  delete GuildMapRewardRecord::default_instance_;
  delete GuildMapRewardRecord_reflection_;
  delete GuildMonsterDamageRecord::default_instance_;
  delete GuildMonsterDamageRecord_reflection_;
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete MapComment::default_instance_;
  delete MapComment_reflection_;
  delete MapComments::default_instance_;
  delete MapComments_reflection_;
  delete RoleTempData::default_instance_;
  delete RoleTempData_reflection_;
  delete RoleTempDatas::default_instance_;
  delete RoleTempDatas_reflection_;
  delete KingMatchBattleTarget::default_instance_;
  delete KingMatchBattleTarget_reflection_;
  delete KingMatchStage::default_instance_;
  delete KingMatchStage_reflection_;
  delete RoleSeasonRank::default_instance_;
  delete RoleSeasonRank_reflection_;
  delete SeasonRankData::default_instance_;
  delete SeasonRankData_reflection_;
  delete KingMatchData::default_instance_;
  delete KingMatchData_reflection_;
  delete TeamDungeonMember::default_instance_;
  delete TeamDungeonMember_reflection_;
  delete TeamDungeonRoleRank::default_instance_;
  delete TeamDungeonRoleRank_reflection_;
  delete TeamDungeonRank::default_instance_;
  delete TeamDungeonRank_reflection_;
  delete TeamDungeonLotteryRecord::default_instance_;
  delete TeamDungeonLotteryRecord_reflection_;
  delete TeamDungeonData::default_instance_;
  delete TeamDungeonData_reflection_;
  delete TurntableLotteryRecord::default_instance_;
  delete TurntableLotteryRecord_reflection_;
  delete TurntableData::default_instance_;
  delete TurntableData_reflection_;
  delete AllServerTurntableData::default_instance_;
  delete AllServerTurntableData_reflection_;
  delete ScoreMatchTarget::default_instance_;
  delete ScoreMatchTarget_reflection_;
  delete RoleScoreMatchData::default_instance_;
  delete RoleScoreMatchData_reflection_;
  delete ScoreMatchData::default_instance_;
  delete ScoreMatchData_reflection_;
  delete RoleResourceWarData::default_instance_;
  delete RoleResourceWarData_reflection_;
  delete ResourceWarEnemy::default_instance_;
  delete ResourceWarEnemy_reflection_;
  delete ResourceWarBattleRecord::default_instance_;
  delete ResourceWarBattleRecord_reflection_;
  delete ResourceWarResourceData::default_instance_;
  delete ResourceWarResourceData_reflection_;
  delete ResourceWarData::default_instance_;
  delete ResourceWarData_reflection_;
  delete StarDefenderInfo::default_instance_;
  delete StarDefenderInfo_reflection_;
  delete StarTowerInfo::default_instance_;
  delete StarTowerInfo_reflection_;
  delete GuildWarScore::default_instance_;
  delete GuildWarScore_reflection_;
  delete StarInfo::default_instance_;
  delete StarInfo_reflection_;
  delete RoleGuildWarData::default_instance_;
  delete RoleGuildWarData_reflection_;
  delete GuildWarData::default_instance_;
  delete GuildWarData_reflection_;
}

void protobuf_AddDesc_data_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021data_define.proto\022\002PB\")\n\004Item\022\017\n\007item_"
    "id\030\001 \002(\r\022\020\n\010item_num\030\002 \002(\r\"\320\001\n\tEquipment"
    "\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\025\n\renhanc"
    "e_level\030\003 \002(\r\022\024\n\014refine_level\030\004 \002(\r\022\022\n\nr"
    "efine_exp\030\005 \002(\r\022\031\n\021enhance_cost_gold\030\006 \002"
    "(\r\022\'\n\025refine_cost_item_list\030\007 \003(\0132\010.PB.I"
    "tem\022\014\n\004star\030\010 \001(\r\022\022\n\nstar_level\030\t \001(\r\"j\n"
    "\010Treasure\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022"
    "\025\n\renhance_level\030\003 \002(\r\022\023\n\013enhance_exp\030\004 "
    "\002(\r\022\024\n\014refine_level\030\005 \002(\r\"V\n\005fairy\022\013\n\003ui"
    "d\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\r\n\005level\030\003 \002(\r\022"
    "\013\n\003exp\030\004 \002(\r\022\023\n\013break_level\030\005 \002(\r\"U\n\004Car"
    "d\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\r\n\005level"
    "\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\023\n\013break_level\030\005 \002(\r"
    "\"s\n\rHeroTrainData\022\020\n\010pro_type\030\001 \002(\r\022\021\n\tp"
    "ro_value\030\002 \002(\r\022\021\n\tpro_level\030\003 \002(\r\022\025\n\rtmp"
    "_pro_value\030\004 \002(\r\022\023\n\013reward_flag\030\005 \002(\r\"%\n"
    "\nRecordData\022\n\n\002id\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\213\003\n"
    "\004Hero\022\013\n\003uid\030\001 \002(\r\022\017\n\007info_id\030\002 \002(\r\022\r\n\005l"
    "evel\030\003 \002(\r\022\013\n\003exp\030\004 \002(\r\022\017\n\007quality\030\005 \002(\r"
    "\022\023\n\013break_level\030\006 \002(\r\022\025\n\rdestiny_level\030\007"
    " \002(\r\022\023\n\013destiny_exp\030\010 \002(\r\022\023\n\013awaken_star"
    "\030\t \002(\r\022\024\n\014awaken_level\030\n \002(\r\022\030\n\020awaken_i"
    "tem_list\030\013 \003(\r\022*\n\017train_data_list\030\014 \003(\0132"
    "\021.PB.HeroTrainData\022\033\n\023train_cost_item_nu"
    "m\030\r \002(\r\022\035\n\025destiny_cost_item_num\030\016 \002(\r\022\032"
    "\n\022train_cost_diamond\030\017 \002(\r\022\027\n\017train_cost"
    "_gold\030\020 \002(\r\022\025\n\rquality_stage\030\021 \001(\r\"<\n\013Mo"
    "nsterData\022\013\n\003idx\030\001 \002(\r\022\016\n\006damage\030\002 \002(\r\022\020"
    "\n\010total_hp\030\003 \002(\r\"H\n\rArenaRankData\022\017\n\007rol"
    "e_id\030\001 \002(\r\022\020\n\010cur_rank\030\002 \002(\r\022\024\n\014history_"
    "rank\030\003 \002(\r\"9\n\021ArenaRankDataList\022$\n\trank_"
    "list\030\001 \003(\0132\021.PB.ArenaRankData\"\225\001\n\016role_r"
    "ank_data\022\017\n\007role_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r"
    "\022\014\n\004rank\030\003 \002(\r\022\r\n\005value\030\004 \002(\r\022\016\n\006param1\030"
    "\005 \002(\r\022\023\n\013update_time\030\006 \002(\r\022\021\n\tserver_id\030"
    "\007 \001(\r\022\016\n\006param2\030\010 \001(\r\"J\n\016role_rank_list\022"
    "\021\n\tserver_id\030\001 \002(\r\022%\n\trank_list\030\002 \003(\0132\022."
    "PB.role_rank_data\"Y\n\031all_server_role_ran"
    "k_list\022\021\n\trank_type\030\001 \002(\r\022)\n\rall_rank_li"
    "st\030\002 \003(\0132\022.PB.role_rank_list\"S\n\rGuildRan"
    "kData\022\020\n\010guild_id\030\001 \002(\r\022\014\n\004rank\030\002 \002(\r\022\r\n"
    "\005value\030\003 \002(\r\022\023\n\013update_time\030\004 \002(\r\"\'\n\010Pro"
    "perty\022\014\n\004type\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"A\n\021Fo"
    "rmationProperty\022\014\n\004slot\030\001 \002(\r\022\036\n\010pro_lis"
    "t\030\002 \003(\0132\014.PB.Property\"\'\n\tGuideData\022\013\n\003ke"
    "y\030\001 \001(\r\022\r\n\005value\030\002 \001(\r\"\211\001\n\rPlayerPVPData"
    "\022\032\n\022today_battle_times\030\001 \001(\r\022\031\n\021week_bat"
    "tle_times\030\002 \001(\r\022 \n\030daily_reward_take_rec"
    "ord\030\003 \003(\r\022\037\n\027week_reward_take_record\030\004 \003"
    "(\r\"\316\014\n\014RoleBaseInfo\022\017\n\007role_id\030\001 \001(\r\022\021\n\t"
    "role_name\030\002 \002(\t\022\017\n\007account\030\003 \002(\t\022\017\n\007stam"
    "ina\030\004 \001(\r\022\016\n\006energy\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\r"
    "\n\005level\030\007 \001(\r\022\030\n\020daily_init_level\030\010 \001(\r\022"
    "\013\n\003exp\030\t \001(\r\022\014\n\004gold\030\n \001(\r\022\017\n\007diamond\030\013 "
    "\001(\r\022\025\n\rhead_image_id\030\014 \001(\r\022\021\n\tvip_level\030"
    "\r \001(\r\022\017\n\007vip_exp\030\016 \001(\r\022\033\n\023riot_suppress_"
    "times\030\017 \001(\r\022\021\n\thero_soul\030\020 \001(\r\022\020\n\010god_so"
    "ul\030\021 \001(\r\022\022\n\nfairy_soul\030\022 \001(\r\022\026\n\016arena_pr"
    "estige\030\023 \001(\r\022\026\n\016tower_prestige\030\024 \001(\r\022\026\n\016"
    "fighting_power\030\025 \001(\r\022\016\n\006wanted\030\026 \001(\r\022\023\n\013"
    "rebel_value\030\027 \001(\r\022\r\n\005honor\030\030 \001(\r\022\030\n\020cur_"
    "contribution\030\031 \001(\r\022\037\n\027world_boss_battle_"
    "times\030\032 \001(\r\022\037\n\027guild_fb_reward_chapter\030\033"
    " \001(\r\022\027\n\017last_login_time\030\034 \001(\t\022\030\n\020last_lo"
    "gout_time\030\035 \001(\t\022\031\n\021total_online_time\030\036 \001"
    "(\r\022\023\n\013login_times\030\037 \001(\r\022!\n\031last_stamina_"
    "recover_time\030  \001(\r\022 \n\030last_energy_recove"
    "r_time\030! \001(\r\022 \n\030last_wanted_recover_time"
    "\030\" \001(\r\0221\n\022formation_pro_list\030# \003(\0132\025.PB."
    "FormationProperty\022\026\n\016once_flag_list\030$ \001("
    "\r\022\017\n\007guide_x\030% \001(\r\022\017\n\007guide_y\030& \001(\r\022!\n\ng"
    "uide_list\030\' \003(\0132\r.PB.GuideData\022\036\n\026duobao"
    "_peace_over_time\030( \001(\r\022\030\n\020leave_guild_ti"
    "me\030) \001(\r\022\037\n\027last_activity_notice_id\030* \001("
    "\r\022#\n\033activation_code_take_record\030+ \003(\r\022\030"
    "\n\020friendship_point\030, \001(\r\022\036\n\026today_friend"
    "ship_point\030- \001(\r\022\025\n\rendless_stone\030. \001(\r\022"
    "\026\n\016nobility_level\030/ \001(\r\022\024\n\014update_times\030"
    "0 \001(\r\022\035\n\025total_recharge_amount\0301 \001(\r\022\020\n\010"
    "gem_coin\0302 \001(\r\022\024\n\014destiny_coin\0303 \001(\r\022\021\n\t"
    "star_soul\0304 \001(\r\022\027\n\017turntable_score\0305 \001(\r"
    "\022\"\n\032turntable_activity_data_id\0306 \001(\r\022$\n\034"
    "today_used_help_battle_times\0307 \001(\r\022\027\n\017ro"
    "le_login_days\0308 \001(\r\022\017\n\007crystal\0309 \001(\r\022\032\n\022"
    "last_login_time_ex\030: \001(\r\022\033\n\023last_logout_"
    "time_ex\030; \001(\r\022\030\n\020create_role_time\030< \001(\r\022"
    "*\n\"is_already_take_closed_test_rebate\030= "
    "\001(\r\022\031\n\021score_match_honor\030> \001(\r\022\032\n\022resour"
    "ce_war_score\030\? \001(\r\022\r\n\005ycoin\030@ \001(\r\022\030\n\020tod"
    "ay_chat_times\030A \001(\r\"\337\001\n\013RolePVPData\022\032\n\022t"
    "oday_battle_times\030\001 \001(\r\022\031\n\021week_battle_t"
    "imes\030\002 \001(\r\022\r\n\005score\030\003 \001(\r\022\021\n\twin_times\030\004"
    " \001(\r\022\032\n\022total_battle_times\030\005 \001(\r\022 \n\030dail"
    "y_reward_take_record\030\006 \003(\r\022!\n\031weekly_rew"
    "ard_take_record\030\007 \003(\r\022\026\n\016last_week_rank\030"
    "\010 \001(\r\"*\n\tTitleData\022\n\n\002id\030\001 \001(\r\022\021\n\tover_t"
    "ime\030\002 \001(\r\"i\n\rRoleTitleInfo\022\030\n\020cur_use_ti"
    "tle_id\030\001 \001(\r\022!\n\ntitle_list\030\002 \003(\0132\r.PB.Ti"
    "tleData\022\033\n\023cur_use_nickname_id\030\003 \001(\r\"\366\002\n"
    "\023RoleEndlessLandInfo\022\035\n\025is_today_first_b"
    "attle\030\001 \001(\r\022\020\n\010cur_wave\030\002 \001(\r\022\031\n\021today_w"
    "ave_record\030\003 \001(\r\022\031\n\021cur_wave_kill_num\030\004 "
    "\001(\r\022\033\n\023history_wave_record\030\005 \001(\r\022\031\n\021cur_"
    "keep_kill_num\030\006 \001(\r\022\034\n\024keep_kill_num_rec"
    "ord\030\007 \001(\r\022$\n\034today_collision_reward_time"
    "s\030\010 \001(\r\022\037\n\027keep_kill_reward_record\030\t \003(\r"
    "\022&\n\036last_take_continue_kill_reward\030\n \001(\r"
    "\022\027\n\017is_first_battle\030\013 \001(\r\022\032\n\022today_battl"
    "e_times\030\014 \001(\r\"3\n\rRoleGuildData\022\"\n\032take_c"
    "hapter_reward_record\030\001 \003(\r\"H\n\020LuxurySign"
    "InData\022\022\n\nsign_in_id\030\001 \001(\r\022\016\n\006status\030\002 \001"
    "(\r\022\020\n\010rewar_id\030\003 \001(\r\"I\n\026PlayerLuxurySign"
    "InData\022/\n\021sign_in_data_list\030\001 \003(\0132\024.PB.L"
    "uxurySignInData\"\036\n\003Gem\022\n\n\002id\030\001 \001(\r\022\013\n\003nu"
    "m\030\002 \001(\r\"Z\n\rPlayerGemInfo\022\031\n\010gem_list\030\001 \003"
    "(\0132\007.PB.Gem\022\026\n\016hole_open_list\030\002 \003(\r\022\026\n\016h"
    "ole_init_time\030\003 \001(\r\":\n\021RoleEquipmentInfo"
    "\022%\n\016equipment_list\030\001 \003(\0132\r.PB.Equipment\""
    "\211\001\n\tFormation\022\017\n\007hero_id\030\001 \002(\r\022\026\n\016equipm"
    "ent_list\030\002 \003(\r\022\025\n\rtreasure_list\030\003 \003(\r\022\020\n"
    "\010gem_list\030\004 \003(\r\022\021\n\tcard_list\030\005 \003(\r\022\027\n\017bl"
    "ess_sprite_id\030\006 \001(\r\"\231\002\n\014RoleHeroInfo\022 \n\030"
    "normal_free_summon_times\030\001 \002(\r\022\037\n\027normal"
    "_free_summon_time\030\002 \002(\r\022\035\n\025high_free_sum"
    "mon_time\030\003 \002(\r\022\031\n\021high_summon_times\030\004 \002("
    "\r\022\033\n\thero_list\030\005 \003(\0132\010.PB.Hero\022\027\n\017collec"
    "tion_list\030\006 \003(\r\022\032\n\022reinforcement_list\030\007 "
    "\003(\r\022%\n\016formation_list\030\010 \003(\0132\r.PB.Formati"
    "on\022\023\n\013train_times\030\t \001(\r\"7\n\020RoleTreasureI"
    "nfo\022#\n\rtreasure_list\030\001 \003(\0132\014.PB.Treasure"
    "\"+\n\014RoleItemInfo\022\033\n\titem_list\030\001 \003(\0132\010.PB"
    ".Item\"*\n\014EmailContext\022\014\n\004type\030\001 \002(\r\022\014\n\004t"
    "ext\030\002 \002(\t\"\204\001\n\tEmailInfo\022\013\n\003uid\030\001 \002(\r\022\017\n\007"
    "info_id\030\002 \002(\r\022\024\n\014receive_time\030\003 \002(\r\022&\n\014c"
    "ontext_list\030\004 \003(\0132\020.PB.EmailContext\022\r\n\005t"
    "itle\030\005 \001(\t\022\014\n\004text\030\006 \001(\t\"M\n\rRoleEmailInf"
    "o\022!\n\nemail_list\030\001 \003(\0132\r.PB.EmailInfo\022\031\n\021"
    "is_have_new_email\030\002 \001(\r\"Y\n\007MapData\022\014\n\004st"
    "ar\030\001 \002(\r\022\024\n\014battle_times\030\002 \002(\r\022\023\n\013reset_"
    "times\030\003 \002(\r\022\025\n\ris_get_reward\030\004 \002(\r\"F\n\013Ch"
    "apterData\022\035\n\010map_list\030\001 \003(\0132\013.PB.MapData"
    "\022\030\n\020star_reward_list\030\002 \003(\r\"W\n\nMainFBData"
    "\022%\n\014chapter_list\030\001 \003(\0132\017.PB.ChapterData\022"
    "\"\n\032take_chapter_reward_record\030\002 \001(\r\":\n\013H"
    "eroMapData\022\024\n\014battle_times\030\001 \002(\r\022\025\n\ris_g"
    "et_reward\030\002 \002(\r\"M\n\rHeroFBChapter\022!\n\010map_"
    "list\030\001 \003(\0132\017.PB.HeroMapData\022\031\n\021is_pass_e"
    "xtra_map\030\002 \002(\r\"K\n\nHeroFBData\022\'\n\014chapter_"
    "list\030\001 \003(\0132\021.PB.HeroFBChapter\022\024\n\014battle_"
    "times\030\002 \002(\r\"Q\n\020DailyChapterData\022\017\n\007chapt"
    "er\030\001 \001(\r\022\026\n\016max_idx_record\030\002 \001(\005\022\024\n\014batt"
    "le_times\030\003 \001(\r\"9\n\013DailyFBData\022*\n\014chapter"
    "_list\030\001 \003(\0132\024.PB.DailyChapterData\"[\n\021Eli"
    "teMapEnemyData\022\016\n\006map_id\030\001 \002(\r\022%\n\014monste"
    "r_list\030\002 \003(\0132\017.PB.MonsterData\022\017\n\007is_dead"
    "\030\003 \001(\r\"t\n\016EliteFBChapter\022\035\n\010map_list\030\001 \003"
    "(\0132\013.PB.MapData\022\030\n\020star_reward_list\030\002 \003("
    "\r\022)\n\nenemy_data\030\003 \002(\0132\025.PB.EliteMapEnemy"
    "Data\"X\n\013EliteFBData\022(\n\014chapter_list\030\001 \003("
    "\0132\022.PB.EliteFBChapter\022\037\n\027last_refresh_en"
    "emy_time\030\002 \001(\r\"\223\003\n\013TowerFBData\022\025\n\rmap_st"
    "ar_list\030\001 \003(\r\022\030\n\020map_level_record\030\002 \002(\r\022"
    "$\n\034keep_best_star_passed_record\030\003 \002(\r\022%\n"
    "\017select_pro_list\030\004 \003(\0132\014.PB.Property\022\031\n\021"
    "is_buy_star_goods\030\005 \002(\r\022\026\n\016star_goods_id"
    "x\030\006 \002(\r\022\025\n\ris_need_reset\030\007 \002(\r\022\031\n\021today_"
    "reset_times\030\010 \002(\r\022\020\n\010cur_star\030\t \002(\r\022\027\n\017s"
    "tar_max_record\030\n \002(\r\022\027\n\017elite_map_level\030"
    "\013 \002(\r\022\036\n\026elite_map_battle_times\030\014 \002(\r\022\"\n"
    "\032buy_elite_map_battle_times\030\r \002(\r\022\031\n\021ran"
    "d_pro_idx_list\030\016 \003(\r\"\320\001\n\nRoleFBInfo\022$\n\014m"
    "ain_fb_data\030\001 \002(\0132\016.PB.MainFBData\022$\n\014her"
    "o_fb_data\030\002 \002(\0132\016.PB.HeroFBData\022&\n\rdaily"
    "_fb_data\030\003 \002(\0132\017.PB.DailyFBData\022&\n\rtower"
    "_fb_data\030\004 \002(\0132\017.PB.TowerFBData\022&\n\relite"
    "_fb_data\030\005 \002(\0132\017.PB.EliteFBData\"0\n\tShopG"
    "oods\022\020\n\010goods_id\030\001 \002(\r\022\021\n\tgoods_num\030\002 \002("
    "\r\"\204\001\n\014HeroShopData\022!\n\ngoods_list\030\001 \003(\0132\r"
    ".PB.ShopGoods\022\031\n\021last_recover_time\030\002 \002(\r"
    "\022\032\n\022free_refresh_times\030\003 \002(\r\022\032\n\022cost_ref"
    "resh_times\030\004 \002(\r\"\234\001\n\rGuildShopData\022.\n\027re"
    "ward_goods_buy_record\030\001 \003(\0132\r.PB.ShopGoo"
    "ds\022,\n\025item_goods_buy_record\030\002 \003(\0132\r.PB.S"
    "hopGoods\022-\n\026limit_goods_buy_record\030\003 \003(\013"
    "2\r.PB.ShopGoods\"^\n\014MallShopData\022&\n\017item_"
    "buy_record\030\001 \003(\0132\r.PB.ShopGoods\022&\n\017gift_"
    "buy_record\030\002 \003(\0132\r.PB.ShopGoods\"2\n\rTower"
    "ShopData\022!\n\nbuy_record\030\001 \003(\0132\r.PB.ShopGo"
    "ods\"2\n\rArenaShopData\022!\n\nbuy_record\030\001 \003(\013"
    "2\r.PB.ShopGoods\"\206\001\n\016AwakenShopData\022!\n\ngo"
    "ods_list\030\001 \003(\0132\r.PB.ShopGoods\022\031\n\021last_re"
    "cover_time\030\002 \002(\r\022\032\n\022free_refresh_times\030\003"
    " \002(\r\022\032\n\022cost_refresh_times\030\004 \002(\r\"n\n\rFair"
    "yShopData\022!\n\ngoods_list\030\001 \003(\0132\r.PB.ShopG"
    "oods\022\032\n\022used_refresh_times\030\002 \002(\r\022\036\n\026last"
    "_auto_refresh_time\030\003 \002(\r\"7\n\022ScoreMatchSh"
    "opData\022!\n\nbuy_record\030\001 \003(\0132\r.PB.ShopGood"
    "s\"5\n\020SevenDayShopData\022!\n\nbuy_record\030\001 \003("
    "\0132\r.PB.ShopGoods\"6\n\021LevelGiftShopData\022!\n"
    "\nbuy_record\030\001 \003(\0132\r.PB.ShopGoods\"s\n\023Endl"
    "essLandShopData\022,\n\025item_goods_buy_record"
    "\030\001 \003(\0132\r.PB.ShopGoods\022.\n\027reward_goods_bu"
    "y_record\030\002 \003(\0132\r.PB.ShopGoods\"\215\001\n\021Direct"
    "BuyShopData\022!\n\ngoods_list\030\001 \003(\0132\r.PB.Sho"
    "pGoods\022\031\n\021last_refresh_time\030\002 \001(\r\022\033\n\023can"
    "_take_goods_list\030\003 \003(\r\022\035\n\025last_refresh_y"
    "ear_day\030\004 \001(\r\";\n\020ExchangeShopData\022\'\n\020goo"
    "ds_buy_record\030\001 \003(\0132\r.PB.ShopGoods\"<\n\021Re"
    "commendShopData\022\'\n\020goods_buy_record\030\001 \003("
    "\0132\r.PB.ShopGoods\"q\n\017TeamDungeonShop\022.\n\027n"
    "ormal_goods_buy_record\030\001 \003(\0132\r.PB.ShopGo"
    "ods\022.\n\027reward_goods_buy_record\030\002 \003(\0132\r.P"
    "B.ShopGoods\"~\n\rChristmasShop\0226\n\037score_ex"
    "change_goods_buy_record\030\001 \003(\0132\r.PB.ShopG"
    "oods\0225\n\036item_exchange_goods_buy_record\030\002"
    " \003(\0132\r.PB.ShopGoods\"S\n\013CrystalShop\022\033\n\023to"
    "day_refresh_times\030\001 \001(\r\022\'\n\020goods_buy_rec"
    "ord\030\002 \003(\0132\r.PB.ShopGoods\":\n\017ResourceWarS"
    "hop\022\'\n\020goods_buy_record\030\001 \003(\0132\r.PB.ShopG"
    "oods\"5\n\nGMShopData\022\'\n\020goods_buy_record\030\001"
    " \003(\0132\r.PB.ShopGoods\"\277\006\n\014RoleShopInfo\022#\n\t"
    "hero_shop\030\001 \002(\0132\020.PB.HeroShopData\022%\n\ngui"
    "ld_shop\030\002 \002(\0132\021.PB.GuildShopData\022#\n\tmall"
    "_shop\030\003 \002(\0132\020.PB.MallShopData\022%\n\ntower_s"
    "hop\030\004 \002(\0132\021.PB.TowerShopData\022%\n\narena_sh"
    "op\030\005 \002(\0132\021.PB.ArenaShopData\022\'\n\013awaken_sh"
    "op\030\006 \002(\0132\022.PB.AwakenShopData\022%\n\nfairy_sh"
    "op\030\007 \002(\0132\021.PB.FairyShopData\0220\n\020score_mat"
    "ch_shop\030\010 \002(\0132\026.PB.ScoreMatchShopData\022,\n"
    "\016seven_day_shop\030\t \001(\0132\024.PB.SevenDayShopD"
    "ata\022.\n\017level_gift_shop\030\n \001(\0132\025.PB.LevelG"
    "iftShopData\0222\n\021endless_land_shop\030\013 \001(\0132\027"
    ".PB.EndlessLandShopData\022.\n\017direct_buy_sh"
    "op\030\014 \001(\0132\025.PB.DirectBuyShopData\022+\n\rexcha"
    "nge_shop\030\r \001(\0132\024.PB.ExchangeShopData\022-\n\016"
    "recommend_shop\030\016 \001(\0132\025.PB.RecommendShopD"
    "ata\022-\n\020teamdungeon_shop\030\017 \001(\0132\023.PB.TeamD"
    "ungeonShop\022)\n\016christmas_shop\030\020 \001(\0132\021.PB."
    "ChristmasShop\022%\n\014crystal_shop\030\021 \001(\0132\017.PB"
    ".CrystalShop\022.\n\021resource_war_shop\030\022 \001(\0132"
    "\023.PB.ResourceWarShop\022\037\n\007gm_shop\030\023 \001(\0132\016."
    "PB.GMShopData\"g\n\nSpiritData\022\n\n\002id\030\001 \001(\r\022"
    "\025\n\renhance_level\030\002 \001(\r\022\023\n\013train_stage\030\003 "
    "\001(\r\022\023\n\013train_times\030\004 \001(\r\022\014\n\004star\030\005 \001(\r\"*"
    "\n\rSpiritPokedex\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001"
    "(\r\"\227\001\n\016RoleSpiritInfo\022\r\n\005stage\030\001 \002(\r\022\r\n\005"
    "level\030\002 \002(\r\022\031\n\021cur_use_spirit_id\030\003 \001(\r\022#"
    "\n\013spirit_list\030\004 \003(\0132\016.PB.SpiritData\022\'\n\014p"
    "okedex_list\030\005 \003(\0132\021.PB.SpiritPokedex\"j\n\n"
    "FriendData\022\017\n\007role_id\030\001 \002(\r\022\026\n\016is_give_e"
    "nergy\030\002 \002(\r\022\030\n\020get_energy_state\030\003 \002(\r\022\031\n"
    "\021help_battle_times\030\004 \001(\r\"w\n\016RoleFriendDa"
    "ta\022#\n\013friend_list\030\001 \003(\0132\016.PB.FriendData\022"
    "\022\n\nblack_list\030\002 \003(\r\022\022\n\napply_list\030\003 \003(\r\022"
    "\030\n\020get_energy_times\030\004 \002(\r\"\213\001\n\rRoleRebelI"
    "nfo\022\023\n\013rebel_level\030\001 \002(\r\022\025\n\rtoday_exploi"
    "t\030\002 \002(\r\022\024\n\014today_damage\030\003 \002(\r\022\036\n\026reward_"
    "get_record_list\030\004 \003(\r\022\030\n\020is_already_shar"
    "e\030\005 \002(\r\"\200\001\n\016RoleDuobaoInfo\022\027\n\017peace_over"
    "_time\030\001 \001(\r\022\031\n\021doubao_times_list\030\002 \003(\r\022\032"
    "\n\022daily_duobao_times\030\003 \001(\r\022\036\n\026pregross_r"
    "eward_record\030\004 \003(\r\"U\n\017AchievementData\022\n\n"
    "\002id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\022\r\n\005value\030\003 \002(\r\022"
    "\030\n\020cur_reward_level\030\004 \002(\r\"C\n\022RoleAchieve"
    "mntInfo\022-\n\020achievement_list\030\001 \003(\0132\023.PB.A"
    "chievementData\"@\n\014DailyMission\022\n\n\002id\030\001 \002"
    "(\r\022\025\n\ris_get_reward\030\002 \002(\r\022\r\n\005value\030\003 \002(\r"
    "\"j\n\024RoleDailyMissionInfo\022\r\n\005point\030\001 \002(\r\022"
    "\033\n\023point_reward_record\030\002 \003(\r\022&\n\014mission_"
    "list\030\003 \003(\0132\020.PB.DailyMission\",\n\tSkillDat"
    "a\022\020\n\010skill_id\030\001 \002(\r\022\r\n\005level\030\002 \002(\r\"7\n\022Ro"
    "leGuildSkillInfo\022!\n\nskill_list\030\001 \003(\0132\r.P"
    "B.SkillData\"D\n\016RoleSignInData\022\027\n\017cur_sig"
    "n_in_day\030\001 \002(\r\022\031\n\021last_sign_in_time\030\002 \002("
    "\r\"A\n\017LoginRewardData\022\032\n\022reward_record_li"
    "st\030\001 \003(\r\022\022\n\nlogin_days\030\002 \001(\r\"\334\001\n\021RoleKin"
    "gMatchData\022\023\n\013last_season\030\001 \001(\r\022\032\n\022total"
    "_battle_times\030\002 \001(\r\022\027\n\017total_win_times\030\003"
    " \001(\r\022\027\n\017today_win_times\030\004 \001(\r\022\023\n\013stage_l"
    "evel\030\005 \001(\r\022\017\n\007context\030\006 \001(\r\022\033\n\023history_s"
    "tage_level\030\007 \001(\r\022!\n\031season_task_reward_r"
    "ecord\030\010 \003(\r\"\217\001\n\025PlayerTeamDungeonData\022\032\n"
    "\022today_battle_times\030\001 \001(\r\022\031\n\021pass_dungeo"
    "n_list\030\002 \003(\r\022\037\n\027today_kill_reward_times\030"
    "\003 \001(\r\022\036\n\026today_mvp_reward_times\030\004 \001(\r\"9\n"
    "\rCardGroupData\022\017\n\007card_id\030\001 \001(\r\022\027\n\017is_al"
    "ready_open\030\002 \001(\r\"+\n\017CollectionGroup\022\n\n\002i"
    "d\030\001 \001(\r\022\014\n\004star\030\002 \001(\r\"U\n\016CollectionBook\022"
    "\017\n\007book_id\030\001 \001(\r\0222\n\025collection_group_lis"
    "t\030\002 \003(\0132\023.PB.CollectionGroup\"\302\004\n\016RoleZha"
    "nBuData\022\033\n\tcard_list\030\001 \003(\0132\010.PB.Card\022 \n\030"
    "history_collection_value\030\002 \001(\r\022\036\n\026low_ca"
    "rd_group_map_idx\030\003 \001(\r\022\035\n\025cur_low_card_g"
    "roup_id\030\004 \001(\r\022(\n low_card_group_last_rec"
    "over_time\030\005 \001(\r\022(\n cur_low_card_group_re"
    "fresh_times\030\006 \001(\r\022,\n$today_low_card_grou"
    "p_open_card_times\030\007 \001(\r\022)\n!high_card_gro"
    "up_last_refresh_time\030\010 \001(\r\022)\n\016low_card_g"
    "roup\030\t \003(\0132\021.PB.CardGroupData\022*\n\017high_ca"
    "rd_group\030\n \003(\0132\021.PB.CardGroupData\0220\n\024col"
    "lection_book_list\030\013 \003(\0132\022.PB.CollectionB"
    "ook\022\031\n\021achievement_level\030\014 \001(\r\022/\n\'today_"
    "low_card_group_cost_refresh_times\030\r \001(\r\022"
    "0\n(today_high_card_group_cost_refresh_ti"
    "mes\030\016 \001(\r\"v\n\022WorldLevelTaskData\022\017\n\007task_"
    "id\030\001 \001(\r\022\017\n\007context\030\002 \001(\r\022\027\n\017is_already_"
    "take\030\003 \001(\r\022\021\n\ttask_type\030\004 \001(\r\022\022\n\ntask_le"
    "vel\030\005 \001(\r\"o\n\026RoleWorldLevelTaskInfo\022$\n\034i"
    "s_already_take_final_reward\030\001 \001(\r\022/\n\017tas"
    "k_event_list\030\002 \003(\0132\026.PB.WorldLevelTaskDa"
    "ta\"5\n\022RoleHangUpDropData\022\037\n\027last_obtain_"
    "reward_time\030\001 \001(\r\"\217\t\n\016RoleSecondInfo\022!\n\010"
    "pvp_data\030\001 \001(\0132\017.PB.RolePVPData\022%\n\ntitle"
    "_info\030\002 \001(\0132\021.PB.RoleTitleInfo\0222\n\021endles"
    "s_land_info\030\003 \001(\0132\027.PB.RoleEndlessLandIn"
    "fo\022%\n\nguild_data\030\004 \001(\0132\021.PB.RoleGuildDat"
    "a\0227\n\023luxury_sign_in_data\030\005 \001(\0132\032.PB.Play"
    "erLuxurySignInData\022#\n\010gem_info\030\006 \001(\0132\021.P"
    "B.PlayerGemInfo\022(\n\016role_item_info\030\007 \001(\0132"
    "\020.PB.RoleItemInfo\0222\n\023role_equipment_info"
    "\030\010 \001(\0132\025.PB.RoleEquipmentInfo\0220\n\022role_tr"
    "easure_info\030\t \001(\0132\024.PB.RoleTreasureInfo\022"
    "(\n\016role_shop_info\030\n \001(\0132\020.PB.RoleShopInf"
    "o\022,\n\020role_sprite_info\030\013 \001(\0132\022.PB.RoleSpi"
    "ritInfo\022*\n\017role_rebel_info\030\014 \001(\0132\021.PB.Ro"
    "leRebelInfo\022,\n\020role_duobao_info\030\r \001(\0132\022."
    "PB.RoleDuobaoInfo\022$\n\014role_fb_info\030\016 \001(\0132"
    "\016.PB.RoleFBInfo\0225\n\025role_achievement_info"
    "\030\017 \001(\0132\026.PB.RoleAchievemntInfo\0229\n\027role_d"
    "aily_mission_info\030\020 \001(\0132\030.PB.RoleDailyMi"
    "ssionInfo\0225\n\025role_guild_skill_info\030\021 \001(\013"
    "2\026.PB.RoleGuildSkillInfo\022-\n\021role_sign_in"
    "_data\030\022 \001(\0132\022.PB.RoleSignInData\022.\n\021login"
    "_reward_data\030\023 \001(\0132\023.PB.LoginRewardData\022"
    ".\n\017king_match_data\030\024 \001(\0132\025.PB.RoleKingMa"
    "tchData\0224\n\021team_dungeon_data\030\025 \001(\0132\031.PB."
    "PlayerTeamDungeonData\022,\n\020role_zhanbu_dat"
    "a\030\026 \001(\0132\022.PB.RoleZhanBuData\022>\n\032role_worl"
    "d_level_task_info\030\027 \001(\0132\032.PB.RoleWorldLe"
    "velTaskInfo\0226\n\026role_hang_up_drop_data\030\030 "
    "\001(\0132\026.PB.RoleHangUpDropData\"f\n\nRewardDat"
    "a\022\013\n\003uid\030\001 \001(\r\022\017\n\007info_id\030\002 \001(\r\022\016\n\006value"
    "1\030\003 \001(\r\022\016\n\006value2\030\004 \001(\r\022\014\n\004time\030\005 \001(\r\022\014\n"
    "\004text\030\006 \002(\t\"5\n\016RoleRewardData\022#\n\013reward_"
    "list\030\001 \003(\0132\016.PB.RewardData\"n\n\007YCSData\022\027\n"
    "\017today_get_times\030\001 \001(\r\022\027\n\017total_get_time"
    "s\030\002 \001(\r\022\032\n\022total_reward_value\030\003 \001(\r\022\025\n\rl"
    "ast_get_time\030\004 \001(\r\":\n\007TQTData\022\025\n\rlast_ge"
    "t_time\030\001 \001(\r\022\030\n\020take_record_list\030\002 \003(\r\"M"
    "\n\022SevenDayTargetData\022\021\n\ttarget_id\030\001 \001(\r\022"
    "\r\n\005value\030\002 \001(\r\022\025\n\ris_get_reward\030\003 \001(\r\"=\n"
    "\025LevelShopActivityData\022\r\n\005level\030\001 \001(\r\022\025\n"
    "\ractivate_time\030\002 \001(\r\"\037\n\004Gift\022\n\n\002id\030\001 \001(\r"
    "\022\013\n\003num\030\002 \001(\r\"\304\001\n\013VipGiftData\022\026\n\016init_vi"
    "p_level\030\001 \001(\r\022\037\n\027vip_level_reward_record"
    "\030\002 \001(\005\022 \n\016week_gift_list\030\003 \003(\0132\010.PB.Gift"
    "\022*\n\"today_recommend_recharge_reward_id\030\004"
    " \001(\r\022.\n&today_recommend_recharge_reward_"
    "status\030\005 \001(\r\"+\n\016CommonRecharge\022\n\n\002id\030\001 \001"
    "(\r\022\r\n\005times\030\002 \001(\r\"Q\n\rMonthCardData\022\017\n\007ca"
    "rd_id\030\001 \001(\r\022\020\n\010buy_time\030\002 \001(\r\022\035\n\025last_ta"
    "ke_reward_time\030\003 \001(\r\"\242\001\n\020RoleRechargeDat"
    "a\022)\n\rrecharge_list\030\001 \003(\0132\022.PB.CommonRech"
    "arge\022*\n\017month_card_list\030\002 \003(\0132\021.PB.Month"
    "CardData\022\031\n\021order_record_list\030\003 \003(\r\022\034\n\024t"
    "oday_recharge_times\030\004 \001(\r\"R\n\022OpenServerF"
    "undData\022\033\n\023is_already_buy_fund\030\001 \001(\r\022\037\n\027"
    "fund_reward_take_record\030\002 \003(\r\"3\n\024AllPeop"
    "leWelfareData\022\033\n\023welfare_take_record\030\001 \003"
    "(\r\"\201\003\n\021LimitActivityData\022\025\n\rrecruit_time"
    "s\030\001 \001(\r\022\033\n\023accumulate_recharge\030\002 \001(\r\022\035\n\025"
    "recruit_reward_record\030\003 \003(\r\022)\n!accumulat"
    "e_recharge_reward_record\030\004 \003(\r\0225\n\035single"
    "_recharge_reward_record\030\005 \003(\0132\016.PB.Recor"
    "dData\022$\n\034first_recharge_reward_record\030\006 "
    "\003(\r\022\026\n\016total_recharge\030\007 \001(\r\022$\n\034last_sing"
    "le_recharge_data_id\030\010 \001(\r\022(\n last_accumu"
    "late_recharge_data_id\030\t \001(\r\022)\n\rrecharge_"
    "list\030\n \003(\0132\022.PB.CommonRecharge\"\244\001\n\021Super"
    "DiscountData\022\016\n\006status\030\001 \001(\r\022$\n\034take_acc"
    "umulate_reward_times\030\002 \001(\r\022\025\n\rcur_buy_ti"
    "mes\030\003 \001(\r\022\035\n\025last_activity_data_id\030\004 \001(\r"
    "\022#\n\033took_accumulate_reward_list\030\005 \003(\r\"O\n"
    "\016ActivityTarget\022\021\n\ttarget_id\030\001 \001(\r\022\017\n\007co"
    "ntext\030\002 \001(\r\022\031\n\021take_reward_times\030\003 \001(\r\"T"
    "\n\020FestivalActivity\022\027\n\017data_reset_time\030\001 "
    "\001(\r\022\'\n\013target_list\030\002 \003(\0132\022.PB.ActivityTa"
    "rget\"\223\007\n\030RoleFestivalActivityInfo\0220\n\022loo"
    "p_once_recharge\030\001 \001(\0132\024.PB.FestivalActiv"
    "ity\0226\n\030loop_accumulate_recharge\030\002 \001(\0132\024."
    "PB.FestivalActivity\022+\n\rlimit_recruit\030\003 \001"
    "(\0132\024.PB.FestivalActivity\0224\n\026activity_onc"
    "e_recharge\030\004 \001(\0132\024.PB.FestivalActivity\022:"
    "\n\034activity_accumulate_recharge\030\005 \001(\0132\024.P"
    "B.FestivalActivity\022.\n\020diamond_exchange\030\006"
    " \001(\0132\024.PB.FestivalActivity\022+\n\ractive_tar"
    "get\030\007 \001(\0132\024.PB.FestivalActivity\022+\n\ritem_"
    "exchange\030\010 \001(\0132\024.PB.FestivalActivity\022,\n\016"
    "festival_login\030\t \001(\0132\024.PB.FestivalActivi"
    "ty\022/\n\021open_server_login\030\n \001(\0132\024.PB.Festi"
    "valActivity\022:\n\034open_svr_accumulate_recha"
    "rge\030\013 \001(\0132\024.PB.FestivalActivity\0224\n\026festi"
    "val_item_exchange\030\014 \001(\0132\024.PB.FestivalAct"
    "ivity\0224\n\026festival_discount_sell\030\r \001(\0132\024."
    "PB.FestivalActivity\0224\n\026festival_active_t"
    "arget\030\016 \001(\0132\024.PB.FestivalActivity\0227\n\031ope"
    "n_server_active_target\030\017 \001(\0132\024.PB.Festiv"
    "alActivity\0226\n\030festival_active_target_2\030\020"
    " \001(\0132\024.PB.FestivalActivity\0226\n\030activity_o"
    "nce_recharge_2\030\021 \001(\0132\024.PB.FestivalActivi"
    "ty\"U\n\026AccurateRecommendGoods\022\020\n\010goods_id"
    "\030\001 \001(\r\022\021\n\tbuy_times\030\002 \001(\r\022\026\n\016can_take_ti"
    "mes\030\003 \001(\r\"K\n\031RoleAccurateRecommendData\022."
    "\n\ngoods_list\030\001 \003(\0132\032.PB.AccurateRecommen"
    "dGoods\"\264\001\n\021RoleChristmasData\022\023\n\013total_sc"
    "ore\030\001 \001(\r\022\021\n\tcur_score\030\002 \001(\r\022,\n$already_"
    "take_lower_boss_reward_level\030\003 \001(\r\022+\n#al"
    "ready_take_high_boss_reward_level\030\004 \001(\r\022"
    "\034\n\024last_reset_data_time\030\005 \001(\r\"5\n\022OnlineR"
    "ewardRecord\022\014\n\004days\030\001 \001(\r\022\021\n\tflag_list\030\002"
    " \003(\r\"[\n\020OnlineRewardData\022\023\n\013online_time\030"
    "\001 \001(\r\0222\n\022reward_record_list\030\002 \003(\0132\026.PB.O"
    "nlineRewardRecord\",\n\021SevenDayLoginData\022\027"
    "\n\017daily_data_list\030\001 \003(\r\"8\n\020RecallFriendD"
    "ata\022\021\n\tfriend_id\030\001 \001(\r\022\021\n\tsend_time\030\002 \001("
    "\r\"\353\002\n\024FacebookActivityData\022/\n\'is_already"
    "_take_account_bingding_reward\030\001 \001(\r\022\033\n\023r"
    "eady_to_share_time\030\002 \001(\r\022!\n\031recall_succe"
    "ss_friend_num\030\003 \001(\r\022!\n\031invite_success_fr"
    "iend_num\030\004 \001(\r\022!\n\031recall_reward_record_l"
    "ist\030\005 \003(\r\022!\n\031invite_reward_record_list\030\006"
    " \003(\r\0227\n\031send_recall_friend_record\030\007 \003(\0132"
    "\024.PB.RecallFriendData\022!\n\031send_invite_fri"
    "end_record\030\010 \003(\t\022\035\n\025ready_to_commend_tim"
    "e\030\t \001(\r\"j\n\022RechargeRewardData\022\034\n\024is_took"
    "_extra_reward\030\001 \001(\r\022\027\n\017daily_data_list\030\002"
    " \003(\r\022\035\n\025last_activity_data_id\030\003 \001(\r\"j\n\027T"
    "otalRechargeRewardData\022\024\n\014total_amount\030\001"
    " \001(\r\022\032\n\022reward_record_list\030\002 \003(\r\022\035\n\025last"
    "_activity_data_id\030\003 \001(\r\"]\n\014HotSaleGoods\022"
    "\020\n\010goods_id\030\001 \001(\r\022\024\n\014cur_data_idx\030\002 \001(\r\022"
    "\021\n\tbuy_times\030\003 \001(\r\022\022\n\ntake_times\030\004 \001(\r\"["
    "\n\024RoleHotSaleGoodsData\022\035\n\025last_activity_"
    "data_id\030\001 \001(\r\022$\n\ngoods_list\030\002 \003(\0132\020.PB.H"
    "otSaleGoods\"\217\001\n\023RoleCampRecruitData\022\023\n\013c"
    "ur_data_id\030\001 \001(\r\022#\n\033today_already_recrui"
    "t_times\030\002 \001(\r\022\027\n\017camp_score_list\030\003 \003(\r\022%"
    "\n\035score_task_reward_record_list\030\004 \003(\r\"M\n"
    "\022UnlockActivityData\022\031\n\021is_score_for_shop"
    "\030\001 \001(\r\022\034\n\024watching_video_times\030\002 \001(\r\"g\n\027"
    "RechargeAndCostRankData\022\035\n\025last_activity"
    "_data_id\030\001 \001(\r\022\024\n\014cost_diamond\030\002 \001(\r\022\027\n\017"
    "recharge_amount\030\003 \001(\r\"\343\n\n\020RoleActivityDa"
    "ta\022\035\n\010tqt_data\030\001 \001(\0132\013.PB.TQTData\022\035\n\010ycs"
    "_data\030\002 \001(\0132\013.PB.YCSData\0225\n\025seven_day_ta"
    "rget_list\030\003 \003(\0132\026.PB.SevenDayTargetData\022"
    "%\n\035completion_reward_record_list\030\004 \003(\r\022@"
    "\n\035level_shop_activity_data_list\030\005 \003(\0132\031."
    "PB.LevelShopActivityData\022#\n\033level_gift_t"
    "ake_record_list\030\006 \003(\r\022&\n\rvip_gift_data\030\007"
    " \001(\0132\017.PB.VipGiftData\022+\n\rrecharge_data\030\010"
    " \001(\0132\024.PB.RoleRechargeData\0225\n\025open_serve"
    "r_fund_data\030\t \001(\0132\026.PB.OpenServerFundDat"
    "a\0229\n\027all_people_welfare_data\030\n \001(\0132\030.PB."
    "AllPeopleWelfareData\0222\n\023limit_activity_d"
    "ata\030\013 \001(\0132\025.PB.LimitActivityData\022\037\n\027is_t"
    "ake_next_day_reward\030\014 \001(\r\0222\n\023super_disco"
    "unt_data\030\r \001(\0132\025.PB.SuperDiscountData\022A\n"
    "\033role_festival_activity_info\030\016 \001(\0132\034.PB."
    "RoleFestivalActivityInfo\022C\n\034role_accurat"
    "e_recommend_data\030\017 \001(\0132\035.PB.RoleAccurate"
    "RecommendData\0222\n\023role_christmas_data\030\020 \001"
    "(\0132\025.PB.RoleChristmasData\0220\n\022online_rewa"
    "rd_data\030\021 \001(\0132\024.PB.OnlineRewardData\0223\n\024s"
    "even_day_login_data\030\022 \001(\0132\025.PB.SevenDayL"
    "oginData\0228\n\026facebook_activity_data\030\023 \001(\013"
    "2\030.PB.FacebookActivityData\0224\n\024recharge_r"
    "eward_data\030\024 \001(\0132\026.PB.RechargeRewardData"
    "\022\?\n\032total_recharge_reward_data\030\025 \001(\0132\033.P"
    "B.TotalRechargeRewardData\0226\n\027new_super_d"
    "iscount_data\030\026 \001(\0132\025.PB.SuperDiscountDat"
    "a\0225\n\023role_hot_sale_goods\030\027 \001(\0132\030.PB.Role"
    "HotSaleGoodsData\0227\n\026role_camp_recruit_da"
    "ta\030\030 \001(\0132\027.PB.RoleCampRecruitData\0229\n\031rol"
    "e_unlock_activity_data\030\031 \001(\0132\026.PB.Unlock"
    "ActivityData\022E\n role_recharge_and_cost_r"
    "ank_data\030\032 \001(\0132\033.PB.RechargeAndCostRankD"
    "ata\"R\n\017LandPatrolEvent\022\020\n\010event_id\030\001 \001(\r"
    "\022\023\n\013happen_time\030\002 \001(\r\022\030\n\020is_double_rewar"
    "d\030\003 \001(\r\"\353\002\n\014LandCityData\022\017\n\007city_id\030\001 \002("
    "\r\022\023\n\013skill_level\030\002 \001(\r\022\033\n\023patrol_hero_in"
    "fo_id\030\003 \001(\r\022\031\n\021start_patrol_time\030\004 \001(\r\022\023"
    "\n\013patrol_type\030\005 \001(\r\022\021\n\ttime_type\030\006 \001(\r\022\017"
    "\n\007is_riot\030\007 \001(\r\022\026\n\016is_take_reward\030\010 \001(\r\022"
    "\027\n\017reward_item_num\030\t \001(\r\022\036\n\026last_happen_"
    "event_time\030\n \001(\r\022\025\n\rinterval_time\030\013 \001(\r\022"
    ".\n\021patrol_event_list\030\014 \001(\0132\023.PB.LandPatr"
    "olEvent\022,\n\017riot_event_list\030\r \001(\0132\023.PB.La"
    "ndPatrolEvent\"\325\002\n\rGuildBaseData\022\020\n\010guild"
    "_id\030\001 \002(\r\022\021\n\tserver_id\030\002 \001(\r\022\022\n\nguild_na"
    "me\030\003 \001(\t\022\017\n\007icon_id\030\004 \001(\r\022\023\n\013create_time"
    "\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\013\n\003exp\030\007 \001(\r\022\n\n\002qs"
    "\030\010 \001(\r\022\020\n\010qy_times\030\t \001(\r\022\016\n\006notice\030\n \001(\t"
    "\022\023\n\013declaration\030\013 \001(\t\022\030\n\020cur_pass_chapte"
    "r\030\014 \001(\r\022\033\n\023today_start_chapter\030\r \001(\r\022\036\n\026"
    "history_chapter_record\030\016 \001(\r\022\037\n\027is_from_"
    "history_chapter\030\017 \001(\r\022\016\n\006active\030\020 \001(\r\"\316\002"
    "\n\013GuildMember\022\017\n\007role_id\030\001 \002(\r\022\020\n\010positi"
    "on\030\002 \001(\r\022\032\n\022total_contribution\030\003 \001(\r\022\030\n\020"
    "cur_contribution\030\004 \001(\r\022\032\n\022today_contribu"
    "tion\030\005 \001(\r\022\030\n\020last_logout_time\030\006 \001(\r\022\017\n\007"
    "qy_type\030\007 \001(\r\022\027\n\017battle_fb_times\030\010 \001(\r\022\033"
    "\n\023buy_battle_fb_times\030\t \001(\r\022\035\n\025qs_reward"
    "_record_list\030\n \003(\r\022&\n\036battle_times_last_"
    "recover_time\030\013 \001(\r\022\"\n\032take_chapter_rewar"
    "d_record\030\014 \003(\r\"P\n\nGuildEvent\022\020\n\010event_id"
    "\030\001 \002(\r\022\023\n\013target_name\030\002 \001(\t\022\r\n\005value\030\003 \001"
    "(\r\022\014\n\004time\030\004 \001(\r\"O\n\021GuildLeaveMessage\022\014\n"
    "\004time\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\020\n\010position\030\003 "
    "\001(\r\022\014\n\004text\030\004 \001(\t\"\231\001\n\nChatRecord\022\017\n\007role"
    "_id\030\001 \001(\r\022\023\n\013head_img_id\030\002 \001(\r\022\026\n\016role_v"
    "ip_level\030\003 \001(\r\022\021\n\trole_name\030\004 \001(\t\022\021\n\tcha"
    "t_text\030\005 \001(\t\022\014\n\004time\030\006 \001(\r\022\031\n\021role_use_t"
    "itle_id\030\007 \001(\r\"\\\n\020GuildCampMonster\022\014\n\004cam"
    "p\030\001 \001(\r\022\023\n\013killer_name\030\002 \001(\t\022%\n\014monster_"
    "list\030\003 \003(\0132\017.PB.MonsterData\"H\n\nGuildFBBo"
    "x\022\017\n\007box_idx\030\001 \001(\r\022\026\n\016box_reward_idx\030\002 \001"
    "(\r\022\021\n\trole_name\030\003 \001(\t\"k\n\014GuildCampBox\022\014\n"
    "\004camp\030\001 \001(\r\022,\n\024take_box_record_list\030\002 \003("
    "\0132\016.PB.GuildFBBox\022\037\n\027take_reward_player_"
    "list\030\003 \003(\r\"P\n\024GuildMapRewardRecord\022\017\n\007ch"
    "apter\030\001 \001(\r\022\'\n\rcamp_box_list\030\002 \003(\0132\020.PB."
    "GuildCampBox\";\n\030GuildMonsterDamageRecord"
    "\022\017\n\007role_id\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\"\364\003\n\tGu"
    "ildInfo\022$\n\tbase_data\030\001 \001(\0132\021.PB.GuildBas"
    "eData\022$\n\013member_list\030\002 \003(\0132\017.PB.GuildMem"
    "ber\0221\n\022leave_message_list\030\003 \003(\0132\025.PB.Gui"
    "ldLeaveMessage\022\"\n\nevent_list\030\004 \003(\0132\016.PB."
    "GuildEvent\022!\n\nskill_list\030\005 \003(\0132\r.PB.Skil"
    "lData\022\022\n\napply_list\030\006 \003(\r\022!\n\ngoods_list\030"
    "\007 \003(\0132\r.PB.ShopGoods\022(\n\020chat_record_list"
    "\030\010 \003(\0132\016.PB.ChatRecord\0228\n\022damage_record_"
    "list\030\t \003(\0132\034.PB.GuildMonsterDamageRecord"
    "\022/\n\021camp_monster_list\030\n \003(\0132\024.PB.GuildCa"
    "mpMonster\0228\n\026map_reward_record_list\030\013 \003("
    "\0132\030.PB.GuildMapRewardRecord\022\033\n\023create_mo"
    "nster_time\030\014 \001(\r\"{\n\nMapComment\022\017\n\007role_i"
    "d\030\001 \001(\r\022\022\n\ncomment_id\030\002 \001(\r\022\014\n\004text\030\003 \001("
    "\t\022\014\n\004time\030\004 \001(\r\022\022\n\nlike_times\030\005 \001(\r\022\030\n\020l"
    "ike_player_list\030\006 \003(\r\"C\n\013MapComments\022\016\n\006"
    "map_id\030\001 \001(\r\022$\n\014comment_list\030\002 \003(\0132\016.PB."
    "MapComment\">\n\014RoleTempData\022\014\n\004type\030\001 \001(\r"
    "\022\014\n\004text\030\002 \001(\t\022\022\n\nparam_list\030\003 \003(\r\"9\n\rRo"
    "leTempDatas\022(\n\016temp_data_list\030\001 \003(\0132\020.PB"
    ".RoleTempData\"t\n\025KingMatchBattleTarget\022\017"
    "\n\007role_id\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\022\014\n\004st"
    "ar\030\003 \001(\r\022\024\n\014battle_times\030\004 \001(\r\022\023\n\013stage_"
    "level\030\005 \001(\r\"V\n\016KingMatchStage\022\r\n\005stage\030\001"
    " \001(\r\0225\n\022battle_target_list\030\002 \003(\0132\031.PB.Ki"
    "ngMatchBattleTarget\"4\n\016RoleSeasonRank\022\017\n"
    "\007role_id\030\001 \001(\r\022\021\n\tserver_id\030\002 \001(\r\"G\n\016Sea"
    "sonRankData\022\016\n\006season\030\001 \001(\r\022%\n\trank_list"
    "\030\002 \003(\0132\022.PB.RoleSeasonRank\"j\n\rKingMatchD"
    "ata\022&\n\nstage_list\030\001 \003(\0132\022.PB.KingMatchSt"
    "age\0221\n\025last_season_rank_list\030\002 \003(\0132\022.PB."
    "SeasonRankData\"J\n\021TeamDungeonMember\022\021\n\ts"
    "erver_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\017\n\007rol"
    "e_id\030\003 \001(\r\"\223\001\n\023TeamDungeonRoleRank\022\014\n\004ra"
    "nk\030\001 \001(\r\022\020\n\010use_time\030\002 \001(\r\022\023\n\013finish_tim"
    "e\030\003 \001(\r\022\033\n\023captain_head_img_id\030\004 \001(\r\022*\n\013"
    "member_list\030\005 \003(\0132\025.PB.TeamDungeonMember"
    "\"V\n\017TeamDungeonRank\022\022\n\ndungeon_id\030\001 \001(\r\022"
    "/\n\016role_rank_list\030\002 \003(\0132\027.PB.TeamDungeon"
    "RoleRank\"x\n\030TeamDungeonLotteryRecord\022\021\n\t"
    "server_id\030\001 \001(\r\022\021\n\trole_name\030\002 \001(\t\022\017\n\007it"
    "em_id\030\003 \001(\r\022\020\n\010item_num\030\004 \001(\r\022\023\n\013record_"
    "time\030\005 \001(\r\"w\n\017TeamDungeonData\022.\n\021dungeon"
    "_rank_list\030\001 \003(\0132\023.PB.TeamDungeonRank\0224\n"
    "\016lottery_record\030\002 \003(\0132\034.PB.TeamDungeonLo"
    "tteryRecord\"W\n\026TurntableLotteryRecord\022\017\n"
    "\007role_id\030\001 \001(\r\022\014\n\004time\030\002 \001(\r\022\r\n\005index\030\003 "
    "\001(\r\022\017\n\007context\030\004 \001(\r\"\212\001\n\rTurntableData\022\021"
    "\n\tserver_id\030\001 \001(\r\022\034\n\024cur_activity_data_i"
    "d\030\002 \001(\r\022\017\n\007diamond\030\003 \001(\r\0227\n\023lottery_reco"
    "rd_list\030\004 \003(\0132\032.PB.TurntableLotteryRecor"
    "d\"H\n\026AllServerTurntableData\022.\n\023turntable"
    "_data_list\030\001 \003(\0132\021.PB.TurntableData\"5\n\020S"
    "coreMatchTarget\022\021\n\ttarget_id\030\001 \001(\r\022\016\n\006st"
    "atus\030\002 \001(\r\"\333\001\n\022RoleScoreMatchData\022\017\n\007rol"
    "e_id\030\001 \001(\r\022\024\n\014battle_times\030\002 \001(\r\022\025\n\rrefr"
    "esh_times\030\003 \001(\r\022\030\n\020buy_battle_times\030\004 \001("
    "\r\022\014\n\004camp\030\005 \001(\r\022\021\n\twin_times\030\006 \001(\r\022\032\n\022ta"
    "sk_reward_record\030\007 \003(\r\0220\n\022battle_target_"
    "list\030\010 \003(\0132\024.PB.ScoreMatchTarget\"\235\001\n\016Sco"
    "reMatchData\022\032\n\022cur_activity_index\030\001 \001(\r\022"
    "\027\n\017activity_status\030\002 \001(\r\022\032\n\022activity_ove"
    "r_time\030\003 \001(\r\022:\n\032role_score_match_data_li"
    "st\030\004 \003(\0132\026.PB.RoleScoreMatchData\"~\n\023Role"
    "ResourceWarData\022\017\n\007role_id\030\001 \001(\r\022\030\n\020tech"
    "nology_level\030\002 \001(\r\022\031\n\021total_accupy_time\030"
    "\003 \001(\r\022!\n\031reward_resource_war_score\030\004 \001(\r"
    "\"N\n\020ResourceWarEnemy\022\017\n\007role_id\030\001 \001(\r\022\027\n"
    "\017be_attack_times\030\002 \001(\r\022\020\n\010enemy_id\030\003 \001(\r"
    "\"~\n\027ResourceWarBattleRecord\022\023\n\013attacker_"
    "id\030\001 \001(\r\022\023\n\013defender_id\030\002 \001(\r\022\023\n\013battle_"
    "time\030\003 \001(\r\022\017\n\007chapter\030\004 \001(\r\022\023\n\013resource_"
    "id\030\005 \001(\r\"\217\003\n\027ResourceWarResourceData\022\017\n\007"
    "chapter\030\001 \001(\r\022\023\n\013resource_id\030\002 \001(\r\022\025\n\rre"
    "source_type\030\003 \001(\r\022\031\n\021occupy_start_time\030\004"
    " \001(\r\022\030\n\020occupy_over_time\030\005 \001(\r\022\020\n\010owner_"
    "id\030\006 \001(\r\022\031\n\021keep_occupy_times\030\007 \001(\r\022\035\n\025l"
    "ast_base_reward_time\030\010 \001(\r\022\036\n\026last_extra"
    "_reward_time\030\t \001(\r\022!\n\031base_reward_interv"
    "al_time\030\n \001(\r\022\"\n\032cur_extra_reward_need_t"
    "ime\030\013 \001(\r\022&\n\036already_send_base_reward_ti"
    "mes\030\014 \001(\r\022\'\n\037already_send_extra_reward_t"
    "imes\030\r \001(\r\"\353\001\n\017ResourceWarData\0227\n\022resour"
    "ce_data_list\030\001 \003(\0132\033.PB.ResourceWarResou"
    "rceData\022<\n\033role_resource_war_data_list\030\002"
    " \003(\0132\027.PB.RoleResourceWarData\022(\n\nenemy_l"
    "ist\030\003 \003(\0132\024.PB.ResourceWarEnemy\0227\n\022battl"
    "e_record_list\030\004 \003(\0132\033.PB.ResourceWarBatt"
    "leRecord\"<\n\020StarDefenderInfo\022\017\n\007role_id\030"
    "\001 \001(\r\022\027\n\017be_attack_times\030\002 \001(\r\"\203\001\n\rStarT"
    "owerInfo\022\020\n\010tower_id\030\001 \001(\r\022\022\n\ndurability"
    "\030\002 \001(\r\022\037\n\027monster_be_attack_times\030\003 \001(\r\022"
    "+\n\rdefender_list\030\004 \003(\0132\024.PB.StarDefender"
    "Info\"0\n\rGuildWarScore\022\020\n\010guild_id\030\001 \001(\r\022"
    "\r\n\005score\030\002 \001(\r\"\207\002\n\010StarInfo\022\021\n\tregion_id"
    "\030\001 \001(\r\022\017\n\007info_id\030\002 \001(\r\022\027\n\017belong_guild_"
    "id\030\003 \001(\r\022\027\n\017attack_guild_id\030\004 \001(\r\022\037\n\027too"
    "k_reward_record_list\030\005 \003(\r\022\030\n\020declare_wa"
    "r_list\030\006 \003(\r\022%\n\nscore_list\030\007 \003(\0132\021.PB.Gu"
    "ildWarScore\022%\n\ntower_list\030\010 \003(\0132\021.PB.Sta"
    "rTowerInfo\022\034\n\024last_belong_guild_id\030\t \001(\r"
    "\"\220\001\n\020RoleGuildWarData\022\017\n\007role_id\030\001 \001(\r\022\""
    "\n\032buy_high_star_battle_times\030\002 \001(\r\022\"\n\032us"
    "ed_low_star_battle_times\030\003 \001(\r\022#\n\033used_h"
    "igh_star_battle_times\030\004 \001(\r\"g\n\014GuildWarD"
    "ata\022\037\n\tstar_list\030\001 \003(\0132\014.PB.StarInfo\0226\n\030"
    "role_guild_war_data_list\030\002 \003(\0132\024.PB.Role"
    "GuildWarData", 25692);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data_define.proto", &protobuf_RegisterTypes);
  Item::default_instance_ = new Item();
  Equipment::default_instance_ = new Equipment();
  Treasure::default_instance_ = new Treasure();
  fairy::default_instance_ = new fairy();
  Card::default_instance_ = new Card();
  HeroTrainData::default_instance_ = new HeroTrainData();
  RecordData::default_instance_ = new RecordData();
  Hero::default_instance_ = new Hero();
  MonsterData::default_instance_ = new MonsterData();
  ArenaRankData::default_instance_ = new ArenaRankData();
  ArenaRankDataList::default_instance_ = new ArenaRankDataList();
  role_rank_data::default_instance_ = new role_rank_data();
  role_rank_list::default_instance_ = new role_rank_list();
  all_server_role_rank_list::default_instance_ = new all_server_role_rank_list();
  GuildRankData::default_instance_ = new GuildRankData();
  Property::default_instance_ = new Property();
  FormationProperty::default_instance_ = new FormationProperty();
  GuideData::default_instance_ = new GuideData();
  PlayerPVPData::default_instance_ = new PlayerPVPData();
  RoleBaseInfo::default_instance_ = new RoleBaseInfo();
  RolePVPData::default_instance_ = new RolePVPData();
  TitleData::default_instance_ = new TitleData();
  RoleTitleInfo::default_instance_ = new RoleTitleInfo();
  RoleEndlessLandInfo::default_instance_ = new RoleEndlessLandInfo();
  RoleGuildData::default_instance_ = new RoleGuildData();
  LuxurySignInData::default_instance_ = new LuxurySignInData();
  PlayerLuxurySignInData::default_instance_ = new PlayerLuxurySignInData();
  Gem::default_instance_ = new Gem();
  PlayerGemInfo::default_instance_ = new PlayerGemInfo();
  RoleEquipmentInfo::default_instance_ = new RoleEquipmentInfo();
  Formation::default_instance_ = new Formation();
  RoleHeroInfo::default_instance_ = new RoleHeroInfo();
  RoleTreasureInfo::default_instance_ = new RoleTreasureInfo();
  RoleItemInfo::default_instance_ = new RoleItemInfo();
  EmailContext::default_instance_ = new EmailContext();
  EmailInfo::default_instance_ = new EmailInfo();
  RoleEmailInfo::default_instance_ = new RoleEmailInfo();
  MapData::default_instance_ = new MapData();
  ChapterData::default_instance_ = new ChapterData();
  MainFBData::default_instance_ = new MainFBData();
  HeroMapData::default_instance_ = new HeroMapData();
  HeroFBChapter::default_instance_ = new HeroFBChapter();
  HeroFBData::default_instance_ = new HeroFBData();
  DailyChapterData::default_instance_ = new DailyChapterData();
  DailyFBData::default_instance_ = new DailyFBData();
  EliteMapEnemyData::default_instance_ = new EliteMapEnemyData();
  EliteFBChapter::default_instance_ = new EliteFBChapter();
  EliteFBData::default_instance_ = new EliteFBData();
  TowerFBData::default_instance_ = new TowerFBData();
  RoleFBInfo::default_instance_ = new RoleFBInfo();
  ShopGoods::default_instance_ = new ShopGoods();
  HeroShopData::default_instance_ = new HeroShopData();
  GuildShopData::default_instance_ = new GuildShopData();
  MallShopData::default_instance_ = new MallShopData();
  TowerShopData::default_instance_ = new TowerShopData();
  ArenaShopData::default_instance_ = new ArenaShopData();
  AwakenShopData::default_instance_ = new AwakenShopData();
  FairyShopData::default_instance_ = new FairyShopData();
  ScoreMatchShopData::default_instance_ = new ScoreMatchShopData();
  SevenDayShopData::default_instance_ = new SevenDayShopData();
  LevelGiftShopData::default_instance_ = new LevelGiftShopData();
  EndlessLandShopData::default_instance_ = new EndlessLandShopData();
  DirectBuyShopData::default_instance_ = new DirectBuyShopData();
  ExchangeShopData::default_instance_ = new ExchangeShopData();
  RecommendShopData::default_instance_ = new RecommendShopData();
  TeamDungeonShop::default_instance_ = new TeamDungeonShop();
  ChristmasShop::default_instance_ = new ChristmasShop();
  CrystalShop::default_instance_ = new CrystalShop();
  ResourceWarShop::default_instance_ = new ResourceWarShop();
  GMShopData::default_instance_ = new GMShopData();
  RoleShopInfo::default_instance_ = new RoleShopInfo();
  SpiritData::default_instance_ = new SpiritData();
  SpiritPokedex::default_instance_ = new SpiritPokedex();
  RoleSpiritInfo::default_instance_ = new RoleSpiritInfo();
  FriendData::default_instance_ = new FriendData();
  RoleFriendData::default_instance_ = new RoleFriendData();
  RoleRebelInfo::default_instance_ = new RoleRebelInfo();
  RoleDuobaoInfo::default_instance_ = new RoleDuobaoInfo();
  AchievementData::default_instance_ = new AchievementData();
  RoleAchievemntInfo::default_instance_ = new RoleAchievemntInfo();
  DailyMission::default_instance_ = new DailyMission();
  RoleDailyMissionInfo::default_instance_ = new RoleDailyMissionInfo();
  SkillData::default_instance_ = new SkillData();
  RoleGuildSkillInfo::default_instance_ = new RoleGuildSkillInfo();
  RoleSignInData::default_instance_ = new RoleSignInData();
  LoginRewardData::default_instance_ = new LoginRewardData();
  RoleKingMatchData::default_instance_ = new RoleKingMatchData();
  PlayerTeamDungeonData::default_instance_ = new PlayerTeamDungeonData();
  CardGroupData::default_instance_ = new CardGroupData();
  CollectionGroup::default_instance_ = new CollectionGroup();
  CollectionBook::default_instance_ = new CollectionBook();
  RoleZhanBuData::default_instance_ = new RoleZhanBuData();
  WorldLevelTaskData::default_instance_ = new WorldLevelTaskData();
  RoleWorldLevelTaskInfo::default_instance_ = new RoleWorldLevelTaskInfo();
  RoleHangUpDropData::default_instance_ = new RoleHangUpDropData();
  RoleSecondInfo::default_instance_ = new RoleSecondInfo();
  RewardData::default_instance_ = new RewardData();
  RoleRewardData::default_instance_ = new RoleRewardData();
  YCSData::default_instance_ = new YCSData();
  TQTData::default_instance_ = new TQTData();
  SevenDayTargetData::default_instance_ = new SevenDayTargetData();
  LevelShopActivityData::default_instance_ = new LevelShopActivityData();
  Gift::default_instance_ = new Gift();
  VipGiftData::default_instance_ = new VipGiftData();
  CommonRecharge::default_instance_ = new CommonRecharge();
  MonthCardData::default_instance_ = new MonthCardData();
  RoleRechargeData::default_instance_ = new RoleRechargeData();
  OpenServerFundData::default_instance_ = new OpenServerFundData();
  AllPeopleWelfareData::default_instance_ = new AllPeopleWelfareData();
  LimitActivityData::default_instance_ = new LimitActivityData();
  SuperDiscountData::default_instance_ = new SuperDiscountData();
  ActivityTarget::default_instance_ = new ActivityTarget();
  FestivalActivity::default_instance_ = new FestivalActivity();
  RoleFestivalActivityInfo::default_instance_ = new RoleFestivalActivityInfo();
  AccurateRecommendGoods::default_instance_ = new AccurateRecommendGoods();
  RoleAccurateRecommendData::default_instance_ = new RoleAccurateRecommendData();
  RoleChristmasData::default_instance_ = new RoleChristmasData();
  OnlineRewardRecord::default_instance_ = new OnlineRewardRecord();
  OnlineRewardData::default_instance_ = new OnlineRewardData();
  SevenDayLoginData::default_instance_ = new SevenDayLoginData();
  RecallFriendData::default_instance_ = new RecallFriendData();
  FacebookActivityData::default_instance_ = new FacebookActivityData();
  RechargeRewardData::default_instance_ = new RechargeRewardData();
  TotalRechargeRewardData::default_instance_ = new TotalRechargeRewardData();
  HotSaleGoods::default_instance_ = new HotSaleGoods();
  RoleHotSaleGoodsData::default_instance_ = new RoleHotSaleGoodsData();
  RoleCampRecruitData::default_instance_ = new RoleCampRecruitData();
  UnlockActivityData::default_instance_ = new UnlockActivityData();
  RechargeAndCostRankData::default_instance_ = new RechargeAndCostRankData();
  RoleActivityData::default_instance_ = new RoleActivityData();
  LandPatrolEvent::default_instance_ = new LandPatrolEvent();
  LandCityData::default_instance_ = new LandCityData();
  GuildBaseData::default_instance_ = new GuildBaseData();
  GuildMember::default_instance_ = new GuildMember();
  GuildEvent::default_instance_ = new GuildEvent();
  GuildLeaveMessage::default_instance_ = new GuildLeaveMessage();
  ChatRecord::default_instance_ = new ChatRecord();
  GuildCampMonster::default_instance_ = new GuildCampMonster();
  GuildFBBox::default_instance_ = new GuildFBBox();
  GuildCampBox::default_instance_ = new GuildCampBox();
  GuildMapRewardRecord::default_instance_ = new GuildMapRewardRecord();
  GuildMonsterDamageRecord::default_instance_ = new GuildMonsterDamageRecord();
  GuildInfo::default_instance_ = new GuildInfo();
  MapComment::default_instance_ = new MapComment();
  MapComments::default_instance_ = new MapComments();
  RoleTempData::default_instance_ = new RoleTempData();
  RoleTempDatas::default_instance_ = new RoleTempDatas();
  KingMatchBattleTarget::default_instance_ = new KingMatchBattleTarget();
  KingMatchStage::default_instance_ = new KingMatchStage();
  RoleSeasonRank::default_instance_ = new RoleSeasonRank();
  SeasonRankData::default_instance_ = new SeasonRankData();
  KingMatchData::default_instance_ = new KingMatchData();
  TeamDungeonMember::default_instance_ = new TeamDungeonMember();
  TeamDungeonRoleRank::default_instance_ = new TeamDungeonRoleRank();
  TeamDungeonRank::default_instance_ = new TeamDungeonRank();
  TeamDungeonLotteryRecord::default_instance_ = new TeamDungeonLotteryRecord();
  TeamDungeonData::default_instance_ = new TeamDungeonData();
  TurntableLotteryRecord::default_instance_ = new TurntableLotteryRecord();
  TurntableData::default_instance_ = new TurntableData();
  AllServerTurntableData::default_instance_ = new AllServerTurntableData();
  ScoreMatchTarget::default_instance_ = new ScoreMatchTarget();
  RoleScoreMatchData::default_instance_ = new RoleScoreMatchData();
  ScoreMatchData::default_instance_ = new ScoreMatchData();
  RoleResourceWarData::default_instance_ = new RoleResourceWarData();
  ResourceWarEnemy::default_instance_ = new ResourceWarEnemy();
  ResourceWarBattleRecord::default_instance_ = new ResourceWarBattleRecord();
  ResourceWarResourceData::default_instance_ = new ResourceWarResourceData();
  ResourceWarData::default_instance_ = new ResourceWarData();
  StarDefenderInfo::default_instance_ = new StarDefenderInfo();
  StarTowerInfo::default_instance_ = new StarTowerInfo();
  GuildWarScore::default_instance_ = new GuildWarScore();
  StarInfo::default_instance_ = new StarInfo();
  RoleGuildWarData::default_instance_ = new RoleGuildWarData();
  GuildWarData::default_instance_ = new GuildWarData();
  Item::default_instance_->InitAsDefaultInstance();
  Equipment::default_instance_->InitAsDefaultInstance();
  Treasure::default_instance_->InitAsDefaultInstance();
  fairy::default_instance_->InitAsDefaultInstance();
  Card::default_instance_->InitAsDefaultInstance();
  HeroTrainData::default_instance_->InitAsDefaultInstance();
  RecordData::default_instance_->InitAsDefaultInstance();
  Hero::default_instance_->InitAsDefaultInstance();
  MonsterData::default_instance_->InitAsDefaultInstance();
  ArenaRankData::default_instance_->InitAsDefaultInstance();
  ArenaRankDataList::default_instance_->InitAsDefaultInstance();
  role_rank_data::default_instance_->InitAsDefaultInstance();
  role_rank_list::default_instance_->InitAsDefaultInstance();
  all_server_role_rank_list::default_instance_->InitAsDefaultInstance();
  GuildRankData::default_instance_->InitAsDefaultInstance();
  Property::default_instance_->InitAsDefaultInstance();
  FormationProperty::default_instance_->InitAsDefaultInstance();
  GuideData::default_instance_->InitAsDefaultInstance();
  PlayerPVPData::default_instance_->InitAsDefaultInstance();
  RoleBaseInfo::default_instance_->InitAsDefaultInstance();
  RolePVPData::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  RoleTitleInfo::default_instance_->InitAsDefaultInstance();
  RoleEndlessLandInfo::default_instance_->InitAsDefaultInstance();
  RoleGuildData::default_instance_->InitAsDefaultInstance();
  LuxurySignInData::default_instance_->InitAsDefaultInstance();
  PlayerLuxurySignInData::default_instance_->InitAsDefaultInstance();
  Gem::default_instance_->InitAsDefaultInstance();
  PlayerGemInfo::default_instance_->InitAsDefaultInstance();
  RoleEquipmentInfo::default_instance_->InitAsDefaultInstance();
  Formation::default_instance_->InitAsDefaultInstance();
  RoleHeroInfo::default_instance_->InitAsDefaultInstance();
  RoleTreasureInfo::default_instance_->InitAsDefaultInstance();
  RoleItemInfo::default_instance_->InitAsDefaultInstance();
  EmailContext::default_instance_->InitAsDefaultInstance();
  EmailInfo::default_instance_->InitAsDefaultInstance();
  RoleEmailInfo::default_instance_->InitAsDefaultInstance();
  MapData::default_instance_->InitAsDefaultInstance();
  ChapterData::default_instance_->InitAsDefaultInstance();
  MainFBData::default_instance_->InitAsDefaultInstance();
  HeroMapData::default_instance_->InitAsDefaultInstance();
  HeroFBChapter::default_instance_->InitAsDefaultInstance();
  HeroFBData::default_instance_->InitAsDefaultInstance();
  DailyChapterData::default_instance_->InitAsDefaultInstance();
  DailyFBData::default_instance_->InitAsDefaultInstance();
  EliteMapEnemyData::default_instance_->InitAsDefaultInstance();
  EliteFBChapter::default_instance_->InitAsDefaultInstance();
  EliteFBData::default_instance_->InitAsDefaultInstance();
  TowerFBData::default_instance_->InitAsDefaultInstance();
  RoleFBInfo::default_instance_->InitAsDefaultInstance();
  ShopGoods::default_instance_->InitAsDefaultInstance();
  HeroShopData::default_instance_->InitAsDefaultInstance();
  GuildShopData::default_instance_->InitAsDefaultInstance();
  MallShopData::default_instance_->InitAsDefaultInstance();
  TowerShopData::default_instance_->InitAsDefaultInstance();
  ArenaShopData::default_instance_->InitAsDefaultInstance();
  AwakenShopData::default_instance_->InitAsDefaultInstance();
  FairyShopData::default_instance_->InitAsDefaultInstance();
  ScoreMatchShopData::default_instance_->InitAsDefaultInstance();
  SevenDayShopData::default_instance_->InitAsDefaultInstance();
  LevelGiftShopData::default_instance_->InitAsDefaultInstance();
  EndlessLandShopData::default_instance_->InitAsDefaultInstance();
  DirectBuyShopData::default_instance_->InitAsDefaultInstance();
  ExchangeShopData::default_instance_->InitAsDefaultInstance();
  RecommendShopData::default_instance_->InitAsDefaultInstance();
  TeamDungeonShop::default_instance_->InitAsDefaultInstance();
  ChristmasShop::default_instance_->InitAsDefaultInstance();
  CrystalShop::default_instance_->InitAsDefaultInstance();
  ResourceWarShop::default_instance_->InitAsDefaultInstance();
  GMShopData::default_instance_->InitAsDefaultInstance();
  RoleShopInfo::default_instance_->InitAsDefaultInstance();
  SpiritData::default_instance_->InitAsDefaultInstance();
  SpiritPokedex::default_instance_->InitAsDefaultInstance();
  RoleSpiritInfo::default_instance_->InitAsDefaultInstance();
  FriendData::default_instance_->InitAsDefaultInstance();
  RoleFriendData::default_instance_->InitAsDefaultInstance();
  RoleRebelInfo::default_instance_->InitAsDefaultInstance();
  RoleDuobaoInfo::default_instance_->InitAsDefaultInstance();
  AchievementData::default_instance_->InitAsDefaultInstance();
  RoleAchievemntInfo::default_instance_->InitAsDefaultInstance();
  DailyMission::default_instance_->InitAsDefaultInstance();
  RoleDailyMissionInfo::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  RoleGuildSkillInfo::default_instance_->InitAsDefaultInstance();
  RoleSignInData::default_instance_->InitAsDefaultInstance();
  LoginRewardData::default_instance_->InitAsDefaultInstance();
  RoleKingMatchData::default_instance_->InitAsDefaultInstance();
  PlayerTeamDungeonData::default_instance_->InitAsDefaultInstance();
  CardGroupData::default_instance_->InitAsDefaultInstance();
  CollectionGroup::default_instance_->InitAsDefaultInstance();
  CollectionBook::default_instance_->InitAsDefaultInstance();
  RoleZhanBuData::default_instance_->InitAsDefaultInstance();
  WorldLevelTaskData::default_instance_->InitAsDefaultInstance();
  RoleWorldLevelTaskInfo::default_instance_->InitAsDefaultInstance();
  RoleHangUpDropData::default_instance_->InitAsDefaultInstance();
  RoleSecondInfo::default_instance_->InitAsDefaultInstance();
  RewardData::default_instance_->InitAsDefaultInstance();
  RoleRewardData::default_instance_->InitAsDefaultInstance();
  YCSData::default_instance_->InitAsDefaultInstance();
  TQTData::default_instance_->InitAsDefaultInstance();
  SevenDayTargetData::default_instance_->InitAsDefaultInstance();
  LevelShopActivityData::default_instance_->InitAsDefaultInstance();
  Gift::default_instance_->InitAsDefaultInstance();
  VipGiftData::default_instance_->InitAsDefaultInstance();
  CommonRecharge::default_instance_->InitAsDefaultInstance();
  MonthCardData::default_instance_->InitAsDefaultInstance();
  RoleRechargeData::default_instance_->InitAsDefaultInstance();
  OpenServerFundData::default_instance_->InitAsDefaultInstance();
  AllPeopleWelfareData::default_instance_->InitAsDefaultInstance();
  LimitActivityData::default_instance_->InitAsDefaultInstance();
  SuperDiscountData::default_instance_->InitAsDefaultInstance();
  ActivityTarget::default_instance_->InitAsDefaultInstance();
  FestivalActivity::default_instance_->InitAsDefaultInstance();
  RoleFestivalActivityInfo::default_instance_->InitAsDefaultInstance();
  AccurateRecommendGoods::default_instance_->InitAsDefaultInstance();
  RoleAccurateRecommendData::default_instance_->InitAsDefaultInstance();
  RoleChristmasData::default_instance_->InitAsDefaultInstance();
  OnlineRewardRecord::default_instance_->InitAsDefaultInstance();
  OnlineRewardData::default_instance_->InitAsDefaultInstance();
  SevenDayLoginData::default_instance_->InitAsDefaultInstance();
  RecallFriendData::default_instance_->InitAsDefaultInstance();
  FacebookActivityData::default_instance_->InitAsDefaultInstance();
  RechargeRewardData::default_instance_->InitAsDefaultInstance();
  TotalRechargeRewardData::default_instance_->InitAsDefaultInstance();
  HotSaleGoods::default_instance_->InitAsDefaultInstance();
  RoleHotSaleGoodsData::default_instance_->InitAsDefaultInstance();
  RoleCampRecruitData::default_instance_->InitAsDefaultInstance();
  UnlockActivityData::default_instance_->InitAsDefaultInstance();
  RechargeAndCostRankData::default_instance_->InitAsDefaultInstance();
  RoleActivityData::default_instance_->InitAsDefaultInstance();
  LandPatrolEvent::default_instance_->InitAsDefaultInstance();
  LandCityData::default_instance_->InitAsDefaultInstance();
  GuildBaseData::default_instance_->InitAsDefaultInstance();
  GuildMember::default_instance_->InitAsDefaultInstance();
  GuildEvent::default_instance_->InitAsDefaultInstance();
  GuildLeaveMessage::default_instance_->InitAsDefaultInstance();
  ChatRecord::default_instance_->InitAsDefaultInstance();
  GuildCampMonster::default_instance_->InitAsDefaultInstance();
  GuildFBBox::default_instance_->InitAsDefaultInstance();
  GuildCampBox::default_instance_->InitAsDefaultInstance();
  GuildMapRewardRecord::default_instance_->InitAsDefaultInstance();
  GuildMonsterDamageRecord::default_instance_->InitAsDefaultInstance();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  MapComment::default_instance_->InitAsDefaultInstance();
  MapComments::default_instance_->InitAsDefaultInstance();
  RoleTempData::default_instance_->InitAsDefaultInstance();
  RoleTempDatas::default_instance_->InitAsDefaultInstance();
  KingMatchBattleTarget::default_instance_->InitAsDefaultInstance();
  KingMatchStage::default_instance_->InitAsDefaultInstance();
  RoleSeasonRank::default_instance_->InitAsDefaultInstance();
  SeasonRankData::default_instance_->InitAsDefaultInstance();
  KingMatchData::default_instance_->InitAsDefaultInstance();
  TeamDungeonMember::default_instance_->InitAsDefaultInstance();
  TeamDungeonRoleRank::default_instance_->InitAsDefaultInstance();
  TeamDungeonRank::default_instance_->InitAsDefaultInstance();
  TeamDungeonLotteryRecord::default_instance_->InitAsDefaultInstance();
  TeamDungeonData::default_instance_->InitAsDefaultInstance();
  TurntableLotteryRecord::default_instance_->InitAsDefaultInstance();
  TurntableData::default_instance_->InitAsDefaultInstance();
  AllServerTurntableData::default_instance_->InitAsDefaultInstance();
  ScoreMatchTarget::default_instance_->InitAsDefaultInstance();
  RoleScoreMatchData::default_instance_->InitAsDefaultInstance();
  ScoreMatchData::default_instance_->InitAsDefaultInstance();
  RoleResourceWarData::default_instance_->InitAsDefaultInstance();
  ResourceWarEnemy::default_instance_->InitAsDefaultInstance();
  ResourceWarBattleRecord::default_instance_->InitAsDefaultInstance();
  ResourceWarResourceData::default_instance_->InitAsDefaultInstance();
  ResourceWarData::default_instance_->InitAsDefaultInstance();
  StarDefenderInfo::default_instance_->InitAsDefaultInstance();
  StarTowerInfo::default_instance_->InitAsDefaultInstance();
  GuildWarScore::default_instance_->InitAsDefaultInstance();
  StarInfo::default_instance_->InitAsDefaultInstance();
  RoleGuildWarData::default_instance_->InitAsDefaultInstance();
  GuildWarData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_5fdefine_2eproto {
  StaticDescriptorInitializer_data_5fdefine_2eproto() {
    protobuf_AddDesc_data_5fdefine_2eproto();
  }
} static_descriptor_initializer_data_5fdefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Item::kItemIdFieldNumber;
const int Item::kItemNumFieldNumber;
#endif  // !_MSC_VER

Item::Item()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Item::InitAsDefaultInstance() {
}

Item::Item(const Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Item::SharedCtor() {
  _cached_size_ = 0;
  item_id_ = 0u;
  item_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Item::~Item() {
  SharedDtor();
}

void Item::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Item_descriptor_;
}

const Item& Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Item* Item::default_instance_ = NULL;

Item* Item::New() const {
  return new Item;
}

void Item::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_id_ = 0u;
    item_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 item_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_num;
        break;
      }

      // required uint32 item_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_id(), output);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 item_id = 1;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_id(), target);
  }

  // required uint32 item_num = 2;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 item_id = 1;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // required uint32 item_num = 2;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Item::MergeFrom(const Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Item::CopyFrom(const Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Item::Swap(Item* other) {
  if (other != this) {
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Item_descriptor_;
  metadata.reflection = Item_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Equipment::kUidFieldNumber;
const int Equipment::kInfoIdFieldNumber;
const int Equipment::kEnhanceLevelFieldNumber;
const int Equipment::kRefineLevelFieldNumber;
const int Equipment::kRefineExpFieldNumber;
const int Equipment::kEnhanceCostGoldFieldNumber;
const int Equipment::kRefineCostItemListFieldNumber;
const int Equipment::kStarFieldNumber;
const int Equipment::kStarLevelFieldNumber;
#endif  // !_MSC_VER

Equipment::Equipment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Equipment::InitAsDefaultInstance() {
}

Equipment::Equipment(const Equipment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Equipment::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  enhance_level_ = 0u;
  refine_level_ = 0u;
  refine_exp_ = 0u;
  enhance_cost_gold_ = 0u;
  star_ = 0u;
  star_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Equipment::~Equipment() {
  SharedDtor();
}

void Equipment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Equipment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Equipment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Equipment_descriptor_;
}

const Equipment& Equipment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Equipment* Equipment::default_instance_ = NULL;

Equipment* Equipment::New() const {
  return new Equipment;
}

void Equipment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    enhance_level_ = 0u;
    refine_level_ = 0u;
    refine_exp_ = 0u;
    enhance_cost_gold_ = 0u;
    star_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_level_ = 0u;
  }
  refine_cost_item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Equipment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enhance_level;
        break;
      }

      // required uint32 enhance_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_refine_level;
        break;
      }

      // required uint32 refine_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refine_exp;
        break;
      }

      // required uint32 refine_exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_exp_)));
          set_has_refine_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enhance_cost_gold;
        break;
      }

      // required uint32 enhance_cost_gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_cost_gold_)));
          set_has_enhance_cost_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine_cost_item_list;
        break;
      }

      // repeated .PB.Item refine_cost_item_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine_cost_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine_cost_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine_cost_item_list;
        if (input->ExpectTag(64)) goto parse_star;
        break;
      }

      // optional uint32 star = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_star_level;
        break;
      }

      // optional uint32 star_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_level_)));
          set_has_star_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Equipment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enhance_level(), output);
  }

  // required uint32 refine_level = 4;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refine_level(), output);
  }

  // required uint32 refine_exp = 5;
  if (has_refine_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refine_exp(), output);
  }

  // required uint32 enhance_cost_gold = 6;
  if (has_enhance_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->enhance_cost_gold(), output);
  }

  // repeated .PB.Item refine_cost_item_list = 7;
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refine_cost_item_list(i), output);
  }

  // optional uint32 star = 8;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->star(), output);
  }

  // optional uint32 star_level = 9;
  if (has_star_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->star_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Equipment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enhance_level(), target);
  }

  // required uint32 refine_level = 4;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refine_level(), target);
  }

  // required uint32 refine_exp = 5;
  if (has_refine_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refine_exp(), target);
  }

  // required uint32 enhance_cost_gold = 6;
  if (has_enhance_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->enhance_cost_gold(), target);
  }

  // repeated .PB.Item refine_cost_item_list = 7;
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refine_cost_item_list(i), target);
  }

  // optional uint32 star = 8;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->star(), target);
  }

  // optional uint32 star_level = 9;
  if (has_star_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->star_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Equipment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 enhance_level = 3;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_level());
    }

    // required uint32 refine_level = 4;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_level());
    }

    // required uint32 refine_exp = 5;
    if (has_refine_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_exp());
    }

    // required uint32 enhance_cost_gold = 6;
    if (has_enhance_cost_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_cost_gold());
    }

    // optional uint32 star = 8;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 star_level = 9;
    if (has_star_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_level());
    }

  }
  // repeated .PB.Item refine_cost_item_list = 7;
  total_size += 1 * this->refine_cost_item_list_size();
  for (int i = 0; i < this->refine_cost_item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine_cost_item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Equipment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Equipment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Equipment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Equipment::MergeFrom(const Equipment& from) {
  GOOGLE_CHECK_NE(&from, this);
  refine_cost_item_list_.MergeFrom(from.refine_cost_item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
    if (from.has_refine_exp()) {
      set_refine_exp(from.refine_exp());
    }
    if (from.has_enhance_cost_gold()) {
      set_enhance_cost_gold(from.enhance_cost_gold());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star_level()) {
      set_star_level(from.star_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Equipment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Equipment::CopyFrom(const Equipment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Equipment::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  for (int i = 0; i < refine_cost_item_list_size(); i++) {
    if (!this->refine_cost_item_list(i).IsInitialized()) return false;
  }
  return true;
}

void Equipment::Swap(Equipment* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(refine_exp_, other->refine_exp_);
    std::swap(enhance_cost_gold_, other->enhance_cost_gold_);
    refine_cost_item_list_.Swap(&other->refine_cost_item_list_);
    std::swap(star_, other->star_);
    std::swap(star_level_, other->star_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Equipment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Equipment_descriptor_;
  metadata.reflection = Equipment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Treasure::kUidFieldNumber;
const int Treasure::kInfoIdFieldNumber;
const int Treasure::kEnhanceLevelFieldNumber;
const int Treasure::kEnhanceExpFieldNumber;
const int Treasure::kRefineLevelFieldNumber;
#endif  // !_MSC_VER

Treasure::Treasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Treasure::InitAsDefaultInstance() {
}

Treasure::Treasure(const Treasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Treasure::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  enhance_level_ = 0u;
  enhance_exp_ = 0u;
  refine_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Treasure::~Treasure() {
  SharedDtor();
}

void Treasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Treasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Treasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Treasure_descriptor_;
}

const Treasure& Treasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Treasure* Treasure::default_instance_ = NULL;

Treasure* Treasure::New() const {
  return new Treasure;
}

void Treasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    enhance_level_ = 0u;
    enhance_exp_ = 0u;
    refine_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Treasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enhance_level;
        break;
      }

      // required uint32 enhance_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_enhance_exp;
        break;
      }

      // required uint32 enhance_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_exp_)));
          set_has_enhance_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_refine_level;
        break;
      }

      // required uint32 refine_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refine_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refine_level_)));
          set_has_refine_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Treasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enhance_level(), output);
  }

  // required uint32 enhance_exp = 4;
  if (has_enhance_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->enhance_exp(), output);
  }

  // required uint32 refine_level = 5;
  if (has_refine_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refine_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Treasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 enhance_level = 3;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enhance_level(), target);
  }

  // required uint32 enhance_exp = 4;
  if (has_enhance_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->enhance_exp(), target);
  }

  // required uint32 refine_level = 5;
  if (has_refine_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refine_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Treasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 enhance_level = 3;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_level());
    }

    // required uint32 enhance_exp = 4;
    if (has_enhance_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_exp());
    }

    // required uint32 refine_level = 5;
    if (has_refine_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refine_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Treasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Treasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Treasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Treasure::MergeFrom(const Treasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_enhance_exp()) {
      set_enhance_exp(from.enhance_exp());
    }
    if (from.has_refine_level()) {
      set_refine_level(from.refine_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Treasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Treasure::CopyFrom(const Treasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Treasure::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Treasure::Swap(Treasure* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(enhance_exp_, other->enhance_exp_);
    std::swap(refine_level_, other->refine_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Treasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Treasure_descriptor_;
  metadata.reflection = Treasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fairy::kUidFieldNumber;
const int fairy::kInfoIdFieldNumber;
const int fairy::kLevelFieldNumber;
const int fairy::kExpFieldNumber;
const int fairy::kBreakLevelFieldNumber;
#endif  // !_MSC_VER

fairy::fairy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void fairy::InitAsDefaultInstance() {
}

fairy::fairy(const fairy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void fairy::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  break_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fairy::~fairy() {
  SharedDtor();
}

void fairy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fairy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fairy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fairy_descriptor_;
}

const fairy& fairy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

fairy* fairy::default_instance_ = NULL;

fairy* fairy::New() const {
  return new fairy;
}

void fairy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    break_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fairy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_break_level;
        break;
      }

      // required uint32 break_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &break_level_)));
          set_has_break_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void fairy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->break_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* fairy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->break_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int fairy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 break_level = 5;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fairy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fairy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fairy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fairy::MergeFrom(const fairy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fairy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fairy::CopyFrom(const fairy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fairy::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void fairy::Swap(fairy* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(break_level_, other->break_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fairy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fairy_descriptor_;
  metadata.reflection = fairy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Card::kUidFieldNumber;
const int Card::kInfoIdFieldNumber;
const int Card::kLevelFieldNumber;
const int Card::kExpFieldNumber;
const int Card::kBreakLevelFieldNumber;
#endif  // !_MSC_VER

Card::Card()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Card::InitAsDefaultInstance() {
}

Card::Card(const Card& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Card::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  break_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Card::~Card() {
  SharedDtor();
}

void Card::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Card::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Card::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Card_descriptor_;
}

const Card& Card::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Card* Card::default_instance_ = NULL;

Card* Card::New() const {
  return new Card;
}

void Card::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    break_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Card::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_break_level;
        break;
      }

      // required uint32 break_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &break_level_)));
          set_has_break_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Card::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->break_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Card::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 break_level = 5;
  if (has_break_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->break_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Card::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 break_level = 5;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Card::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Card* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Card*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Card::MergeFrom(const Card& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Card::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Card::CopyFrom(const Card& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Card::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Card::Swap(Card* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(break_level_, other->break_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Card::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Card_descriptor_;
  metadata.reflection = Card_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroTrainData::kProTypeFieldNumber;
const int HeroTrainData::kProValueFieldNumber;
const int HeroTrainData::kProLevelFieldNumber;
const int HeroTrainData::kTmpProValueFieldNumber;
const int HeroTrainData::kRewardFlagFieldNumber;
#endif  // !_MSC_VER

HeroTrainData::HeroTrainData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroTrainData::InitAsDefaultInstance() {
}

HeroTrainData::HeroTrainData(const HeroTrainData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroTrainData::SharedCtor() {
  _cached_size_ = 0;
  pro_type_ = 0u;
  pro_value_ = 0u;
  pro_level_ = 0u;
  tmp_pro_value_ = 0u;
  reward_flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroTrainData::~HeroTrainData() {
  SharedDtor();
}

void HeroTrainData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroTrainData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroTrainData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroTrainData_descriptor_;
}

const HeroTrainData& HeroTrainData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroTrainData* HeroTrainData::default_instance_ = NULL;

HeroTrainData* HeroTrainData::New() const {
  return new HeroTrainData;
}

void HeroTrainData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pro_type_ = 0u;
    pro_value_ = 0u;
    pro_level_ = 0u;
    tmp_pro_value_ = 0u;
    reward_flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroTrainData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 pro_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_type_)));
          set_has_pro_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pro_value;
        break;
      }

      // required uint32 pro_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_value_)));
          set_has_pro_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pro_level;
        break;
      }

      // required uint32 pro_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_level_)));
          set_has_pro_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tmp_pro_value;
        break;
      }

      // required uint32 tmp_pro_value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tmp_pro_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmp_pro_value_)));
          set_has_tmp_pro_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_flag;
        break;
      }

      // required uint32 reward_flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flag_)));
          set_has_reward_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroTrainData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 pro_type = 1;
  if (has_pro_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pro_type(), output);
  }

  // required uint32 pro_value = 2;
  if (has_pro_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pro_value(), output);
  }

  // required uint32 pro_level = 3;
  if (has_pro_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pro_level(), output);
  }

  // required uint32 tmp_pro_value = 4;
  if (has_tmp_pro_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tmp_pro_value(), output);
  }

  // required uint32 reward_flag = 5;
  if (has_reward_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reward_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroTrainData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 pro_type = 1;
  if (has_pro_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pro_type(), target);
  }

  // required uint32 pro_value = 2;
  if (has_pro_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pro_value(), target);
  }

  // required uint32 pro_level = 3;
  if (has_pro_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pro_level(), target);
  }

  // required uint32 tmp_pro_value = 4;
  if (has_tmp_pro_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tmp_pro_value(), target);
  }

  // required uint32 reward_flag = 5;
  if (has_reward_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reward_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroTrainData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 pro_type = 1;
    if (has_pro_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_type());
    }

    // required uint32 pro_value = 2;
    if (has_pro_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_value());
    }

    // required uint32 pro_level = 3;
    if (has_pro_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_level());
    }

    // required uint32 tmp_pro_value = 4;
    if (has_tmp_pro_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmp_pro_value());
    }

    // required uint32 reward_flag = 5;
    if (has_reward_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroTrainData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroTrainData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroTrainData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroTrainData::MergeFrom(const HeroTrainData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pro_type()) {
      set_pro_type(from.pro_type());
    }
    if (from.has_pro_value()) {
      set_pro_value(from.pro_value());
    }
    if (from.has_pro_level()) {
      set_pro_level(from.pro_level());
    }
    if (from.has_tmp_pro_value()) {
      set_tmp_pro_value(from.tmp_pro_value());
    }
    if (from.has_reward_flag()) {
      set_reward_flag(from.reward_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroTrainData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroTrainData::CopyFrom(const HeroTrainData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroTrainData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void HeroTrainData::Swap(HeroTrainData* other) {
  if (other != this) {
    std::swap(pro_type_, other->pro_type_);
    std::swap(pro_value_, other->pro_value_);
    std::swap(pro_level_, other->pro_level_);
    std::swap(tmp_pro_value_, other->tmp_pro_value_);
    std::swap(reward_flag_, other->reward_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroTrainData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroTrainData_descriptor_;
  metadata.reflection = HeroTrainData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecordData::kIdFieldNumber;
const int RecordData::kNumFieldNumber;
#endif  // !_MSC_VER

RecordData::RecordData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecordData::InitAsDefaultInstance() {
}

RecordData::RecordData(const RecordData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecordData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecordData::~RecordData() {
  SharedDtor();
}

void RecordData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecordData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecordData_descriptor_;
}

const RecordData& RecordData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RecordData* RecordData::default_instance_ = NULL;

RecordData* RecordData::New() const {
  return new RecordData;
}

void RecordData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecordData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecordData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecordData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecordData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecordData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecordData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecordData::MergeFrom(const RecordData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecordData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordData::CopyFrom(const RecordData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordData::IsInitialized() const {

  return true;
}

void RecordData::Swap(RecordData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecordData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecordData_descriptor_;
  metadata.reflection = RecordData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Hero::kUidFieldNumber;
const int Hero::kInfoIdFieldNumber;
const int Hero::kLevelFieldNumber;
const int Hero::kExpFieldNumber;
const int Hero::kQualityFieldNumber;
const int Hero::kBreakLevelFieldNumber;
const int Hero::kDestinyLevelFieldNumber;
const int Hero::kDestinyExpFieldNumber;
const int Hero::kAwakenStarFieldNumber;
const int Hero::kAwakenLevelFieldNumber;
const int Hero::kAwakenItemListFieldNumber;
const int Hero::kTrainDataListFieldNumber;
const int Hero::kTrainCostItemNumFieldNumber;
const int Hero::kDestinyCostItemNumFieldNumber;
const int Hero::kTrainCostDiamondFieldNumber;
const int Hero::kTrainCostGoldFieldNumber;
const int Hero::kQualityStageFieldNumber;
#endif  // !_MSC_VER

Hero::Hero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Hero::InitAsDefaultInstance() {
}

Hero::Hero(const Hero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Hero::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  quality_ = 0u;
  break_level_ = 0u;
  destiny_level_ = 0u;
  destiny_exp_ = 0u;
  awaken_star_ = 0u;
  awaken_level_ = 0u;
  train_cost_item_num_ = 0u;
  destiny_cost_item_num_ = 0u;
  train_cost_diamond_ = 0u;
  train_cost_gold_ = 0u;
  quality_stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Hero::~Hero() {
  SharedDtor();
}

void Hero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Hero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Hero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Hero_descriptor_;
}

const Hero& Hero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Hero* Hero::default_instance_ = NULL;

Hero* Hero::New() const {
  return new Hero;
}

void Hero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    quality_ = 0u;
    break_level_ = 0u;
    destiny_level_ = 0u;
    destiny_exp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    awaken_star_ = 0u;
    awaken_level_ = 0u;
    train_cost_item_num_ = 0u;
    destiny_cost_item_num_ = 0u;
    train_cost_diamond_ = 0u;
    train_cost_gold_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    quality_stage_ = 0u;
  }
  awaken_item_list_.Clear();
  train_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Hero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_quality;
        break;
      }

      // required uint32 quality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_break_level;
        break;
      }

      // required uint32 break_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &break_level_)));
          set_has_break_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_destiny_level;
        break;
      }

      // required uint32 destiny_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_level_)));
          set_has_destiny_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_destiny_exp;
        break;
      }

      // required uint32 destiny_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_exp_)));
          set_has_destiny_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_awaken_star;
        break;
      }

      // required uint32 awaken_star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awaken_star_)));
          set_has_awaken_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_awaken_level;
        break;
      }

      // required uint32 awaken_level = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awaken_level_)));
          set_has_awaken_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_awaken_item_list;
        break;
      }

      // repeated uint32 awaken_item_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awaken_item_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_awaken_item_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awaken_item_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_awaken_item_list;
        if (input->ExpectTag(98)) goto parse_train_data_list;
        break;
      }

      // repeated .PB.HeroTrainData train_data_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_train_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_train_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_train_data_list;
        if (input->ExpectTag(104)) goto parse_train_cost_item_num;
        break;
      }

      // required uint32 train_cost_item_num = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_item_num_)));
          set_has_train_cost_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_destiny_cost_item_num;
        break;
      }

      // required uint32 destiny_cost_item_num = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_cost_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_cost_item_num_)));
          set_has_destiny_cost_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_train_cost_diamond;
        break;
      }

      // required uint32 train_cost_diamond = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_diamond_)));
          set_has_train_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_train_cost_gold;
        break;
      }

      // required uint32 train_cost_gold = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_cost_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_cost_gold_)));
          set_has_train_cost_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_quality_stage;
        break;
      }

      // optional uint32 quality_stage = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_stage_)));
          set_has_quality_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Hero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quality(), output);
  }

  // required uint32 break_level = 6;
  if (has_break_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->break_level(), output);
  }

  // required uint32 destiny_level = 7;
  if (has_destiny_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->destiny_level(), output);
  }

  // required uint32 destiny_exp = 8;
  if (has_destiny_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->destiny_exp(), output);
  }

  // required uint32 awaken_star = 9;
  if (has_awaken_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->awaken_star(), output);
  }

  // required uint32 awaken_level = 10;
  if (has_awaken_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->awaken_level(), output);
  }

  // repeated uint32 awaken_item_list = 11;
  for (int i = 0; i < this->awaken_item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->awaken_item_list(i), output);
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  for (int i = 0; i < this->train_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->train_data_list(i), output);
  }

  // required uint32 train_cost_item_num = 13;
  if (has_train_cost_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->train_cost_item_num(), output);
  }

  // required uint32 destiny_cost_item_num = 14;
  if (has_destiny_cost_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->destiny_cost_item_num(), output);
  }

  // required uint32 train_cost_diamond = 15;
  if (has_train_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->train_cost_diamond(), output);
  }

  // required uint32 train_cost_gold = 16;
  if (has_train_cost_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->train_cost_gold(), output);
  }

  // optional uint32 quality_stage = 17;
  if (has_quality_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->quality_stage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Hero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // required uint32 quality = 5;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quality(), target);
  }

  // required uint32 break_level = 6;
  if (has_break_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->break_level(), target);
  }

  // required uint32 destiny_level = 7;
  if (has_destiny_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->destiny_level(), target);
  }

  // required uint32 destiny_exp = 8;
  if (has_destiny_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->destiny_exp(), target);
  }

  // required uint32 awaken_star = 9;
  if (has_awaken_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->awaken_star(), target);
  }

  // required uint32 awaken_level = 10;
  if (has_awaken_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->awaken_level(), target);
  }

  // repeated uint32 awaken_item_list = 11;
  for (int i = 0; i < this->awaken_item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->awaken_item_list(i), target);
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  for (int i = 0; i < this->train_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->train_data_list(i), target);
  }

  // required uint32 train_cost_item_num = 13;
  if (has_train_cost_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->train_cost_item_num(), target);
  }

  // required uint32 destiny_cost_item_num = 14;
  if (has_destiny_cost_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->destiny_cost_item_num(), target);
  }

  // required uint32 train_cost_diamond = 15;
  if (has_train_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->train_cost_diamond(), target);
  }

  // required uint32 train_cost_gold = 16;
  if (has_train_cost_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->train_cost_gold(), target);
  }

  // optional uint32 quality_stage = 17;
  if (has_quality_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->quality_stage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Hero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 quality = 5;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 break_level = 6;
    if (has_break_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->break_level());
    }

    // required uint32 destiny_level = 7;
    if (has_destiny_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_level());
    }

    // required uint32 destiny_exp = 8;
    if (has_destiny_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 awaken_star = 9;
    if (has_awaken_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awaken_star());
    }

    // required uint32 awaken_level = 10;
    if (has_awaken_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awaken_level());
    }

    // required uint32 train_cost_item_num = 13;
    if (has_train_cost_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_item_num());
    }

    // required uint32 destiny_cost_item_num = 14;
    if (has_destiny_cost_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_cost_item_num());
    }

    // required uint32 train_cost_diamond = 15;
    if (has_train_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_diamond());
    }

    // required uint32 train_cost_gold = 16;
    if (has_train_cost_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_cost_gold());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 quality_stage = 17;
    if (has_quality_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality_stage());
    }

  }
  // repeated uint32 awaken_item_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->awaken_item_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awaken_item_list(i));
    }
    total_size += 1 * this->awaken_item_list_size() + data_size;
  }

  // repeated .PB.HeroTrainData train_data_list = 12;
  total_size += 1 * this->train_data_list_size();
  for (int i = 0; i < this->train_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->train_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Hero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Hero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Hero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Hero::MergeFrom(const Hero& from) {
  GOOGLE_CHECK_NE(&from, this);
  awaken_item_list_.MergeFrom(from.awaken_item_list_);
  train_data_list_.MergeFrom(from.train_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_break_level()) {
      set_break_level(from.break_level());
    }
    if (from.has_destiny_level()) {
      set_destiny_level(from.destiny_level());
    }
    if (from.has_destiny_exp()) {
      set_destiny_exp(from.destiny_exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_awaken_star()) {
      set_awaken_star(from.awaken_star());
    }
    if (from.has_awaken_level()) {
      set_awaken_level(from.awaken_level());
    }
    if (from.has_train_cost_item_num()) {
      set_train_cost_item_num(from.train_cost_item_num());
    }
    if (from.has_destiny_cost_item_num()) {
      set_destiny_cost_item_num(from.destiny_cost_item_num());
    }
    if (from.has_train_cost_diamond()) {
      set_train_cost_diamond(from.train_cost_diamond());
    }
    if (from.has_train_cost_gold()) {
      set_train_cost_gold(from.train_cost_gold());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quality_stage()) {
      set_quality_stage(from.quality_stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Hero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hero::CopyFrom(const Hero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hero::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000f3ff) != 0x0000f3ff) return false;

  for (int i = 0; i < train_data_list_size(); i++) {
    if (!this->train_data_list(i).IsInitialized()) return false;
  }
  return true;
}

void Hero::Swap(Hero* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(quality_, other->quality_);
    std::swap(break_level_, other->break_level_);
    std::swap(destiny_level_, other->destiny_level_);
    std::swap(destiny_exp_, other->destiny_exp_);
    std::swap(awaken_star_, other->awaken_star_);
    std::swap(awaken_level_, other->awaken_level_);
    awaken_item_list_.Swap(&other->awaken_item_list_);
    train_data_list_.Swap(&other->train_data_list_);
    std::swap(train_cost_item_num_, other->train_cost_item_num_);
    std::swap(destiny_cost_item_num_, other->destiny_cost_item_num_);
    std::swap(train_cost_diamond_, other->train_cost_diamond_);
    std::swap(train_cost_gold_, other->train_cost_gold_);
    std::swap(quality_stage_, other->quality_stage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Hero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Hero_descriptor_;
  metadata.reflection = Hero_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterData::kIdxFieldNumber;
const int MonsterData::kDamageFieldNumber;
const int MonsterData::kTotalHpFieldNumber;
#endif  // !_MSC_VER

MonsterData::MonsterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterData::InitAsDefaultInstance() {
}

MonsterData::MonsterData(const MonsterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterData::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  damage_ = 0u;
  total_hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterData::~MonsterData() {
  SharedDtor();
}

void MonsterData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterData_descriptor_;
}

const MonsterData& MonsterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MonsterData* MonsterData::default_instance_ = NULL;

MonsterData* MonsterData::New() const {
  return new MonsterData;
}

void MonsterData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    damage_ = 0u;
    total_hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // required uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_hp;
        break;
      }

      // required uint32 total_hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_hp_)));
          set_has_total_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // required uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // required uint32 total_hp = 3;
  if (has_total_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // required uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // required uint32 total_hp = 3;
    if (has_total_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterData::MergeFrom(const MonsterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_total_hp()) {
      set_total_hp(from.total_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterData::CopyFrom(const MonsterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MonsterData::Swap(MonsterData* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(damage_, other->damage_);
    std::swap(total_hp_, other->total_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterData_descriptor_;
  metadata.reflection = MonsterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRankData::kRoleIdFieldNumber;
const int ArenaRankData::kCurRankFieldNumber;
const int ArenaRankData::kHistoryRankFieldNumber;
#endif  // !_MSC_VER

ArenaRankData::ArenaRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRankData::InitAsDefaultInstance() {
}

ArenaRankData::ArenaRankData(const ArenaRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRankData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  cur_rank_ = 0u;
  history_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRankData::~ArenaRankData() {
  SharedDtor();
}

void ArenaRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRankData_descriptor_;
}

const ArenaRankData& ArenaRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaRankData* ArenaRankData::default_instance_ = NULL;

ArenaRankData* ArenaRankData::New() const {
  return new ArenaRankData;
}

void ArenaRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    cur_rank_ = 0u;
    history_rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_rank;
        break;
      }

      // required uint32 cur_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_rank_)));
          set_has_cur_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_history_rank;
        break;
      }

      // required uint32 history_rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_rank_)));
          set_has_history_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 cur_rank = 2;
  if (has_cur_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_rank(), output);
  }

  // required uint32 history_rank = 3;
  if (has_history_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->history_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 cur_rank = 2;
  if (has_cur_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_rank(), target);
  }

  // required uint32 history_rank = 3;
  if (has_history_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->history_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 cur_rank = 2;
    if (has_cur_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_rank());
    }

    // required uint32 history_rank = 3;
    if (has_history_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRankData::MergeFrom(const ArenaRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_cur_rank()) {
      set_cur_rank(from.cur_rank());
    }
    if (from.has_history_rank()) {
      set_history_rank(from.history_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRankData::CopyFrom(const ArenaRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArenaRankData::Swap(ArenaRankData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(cur_rank_, other->cur_rank_);
    std::swap(history_rank_, other->history_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRankData_descriptor_;
  metadata.reflection = ArenaRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRankDataList::kRankListFieldNumber;
#endif  // !_MSC_VER

ArenaRankDataList::ArenaRankDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaRankDataList::InitAsDefaultInstance() {
}

ArenaRankDataList::ArenaRankDataList(const ArenaRankDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRankDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRankDataList::~ArenaRankDataList() {
  SharedDtor();
}

void ArenaRankDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaRankDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaRankDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaRankDataList_descriptor_;
}

const ArenaRankDataList& ArenaRankDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaRankDataList* ArenaRankDataList::default_instance_ = NULL;

ArenaRankDataList* ArenaRankDataList::New() const {
  return new ArenaRankDataList;
}

void ArenaRankDataList::Clear() {
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaRankDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ArenaRankData rank_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRankDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ArenaRankData rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaRankDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ArenaRankData rank_list = 1;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaRankDataList::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ArenaRankData rank_list = 1;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRankDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaRankDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaRankDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaRankDataList::MergeFrom(const ArenaRankDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaRankDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaRankDataList::CopyFrom(const ArenaRankDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRankDataList::IsInitialized() const {

  for (int i = 0; i < rank_list_size(); i++) {
    if (!this->rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRankDataList::Swap(ArenaRankDataList* other) {
  if (other != this) {
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaRankDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaRankDataList_descriptor_;
  metadata.reflection = ArenaRankDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_rank_data::kRoleIdFieldNumber;
const int role_rank_data::kLevelFieldNumber;
const int role_rank_data::kRankFieldNumber;
const int role_rank_data::kValueFieldNumber;
const int role_rank_data::kParam1FieldNumber;
const int role_rank_data::kUpdateTimeFieldNumber;
const int role_rank_data::kServerIdFieldNumber;
const int role_rank_data::kParam2FieldNumber;
#endif  // !_MSC_VER

role_rank_data::role_rank_data()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_rank_data::InitAsDefaultInstance() {
}

role_rank_data::role_rank_data(const role_rank_data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_rank_data::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  level_ = 0u;
  rank_ = 0u;
  value_ = 0u;
  param1_ = 0u;
  update_time_ = 0u;
  server_id_ = 0u;
  param2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_rank_data::~role_rank_data() {
  SharedDtor();
}

void role_rank_data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_rank_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_rank_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_rank_data_descriptor_;
}

const role_rank_data& role_rank_data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

role_rank_data* role_rank_data::default_instance_ = NULL;

role_rank_data* role_rank_data::New() const {
  return new role_rank_data;
}

void role_rank_data::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    level_ = 0u;
    rank_ = 0u;
    value_ = 0u;
    param1_ = 0u;
    update_time_ = 0u;
    server_id_ = 0u;
    param2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_rank_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // required uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // required uint32 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_param1;
        break;
      }

      // required uint32 param1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_param2;
        break;
      }

      // optional uint32 param2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_rank_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // required uint32 value = 4;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // required uint32 param1 = 5;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->param1(), output);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->update_time(), output);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->server_id(), output);
  }

  // optional uint32 param2 = 8;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->param2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_rank_data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // required uint32 value = 4;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // required uint32 param1 = 5;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->param1(), target);
  }

  // required uint32 update_time = 6;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->update_time(), target);
  }

  // optional uint32 server_id = 7;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->server_id(), target);
  }

  // optional uint32 param2 = 8;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->param2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_rank_data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 value = 4;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 param1 = 5;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // required uint32 update_time = 6;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

    // optional uint32 server_id = 7;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 param2 = 8;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_rank_data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_rank_data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_rank_data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_rank_data::MergeFrom(const role_rank_data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_rank_data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_rank_data::CopyFrom(const role_rank_data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_rank_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void role_rank_data::Swap(role_rank_data* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(level_, other->level_);
    std::swap(rank_, other->rank_);
    std::swap(value_, other->value_);
    std::swap(param1_, other->param1_);
    std::swap(update_time_, other->update_time_);
    std::swap(server_id_, other->server_id_);
    std::swap(param2_, other->param2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_rank_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_rank_data_descriptor_;
  metadata.reflection = role_rank_data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int role_rank_list::kServerIdFieldNumber;
const int role_rank_list::kRankListFieldNumber;
#endif  // !_MSC_VER

role_rank_list::role_rank_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void role_rank_list::InitAsDefaultInstance() {
}

role_rank_list::role_rank_list(const role_rank_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void role_rank_list::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

role_rank_list::~role_rank_list() {
  SharedDtor();
}

void role_rank_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void role_rank_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* role_rank_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return role_rank_list_descriptor_;
}

const role_rank_list& role_rank_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

role_rank_list* role_rank_list::default_instance_ = NULL;

role_rank_list* role_rank_list::New() const {
  return new role_rank_list;
}

void role_rank_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool role_rank_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        break;
      }

      // repeated .PB.role_rank_data rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void role_rank_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // repeated .PB.role_rank_data rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* role_rank_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // repeated .PB.role_rank_data rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int role_rank_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  // repeated .PB.role_rank_data rank_list = 2;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void role_rank_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const role_rank_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const role_rank_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void role_rank_list::MergeFrom(const role_rank_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void role_rank_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void role_rank_list::CopyFrom(const role_rank_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool role_rank_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rank_list_size(); i++) {
    if (!this->rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void role_rank_list::Swap(role_rank_list* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata role_rank_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = role_rank_list_descriptor_;
  metadata.reflection = role_rank_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int all_server_role_rank_list::kRankTypeFieldNumber;
const int all_server_role_rank_list::kAllRankListFieldNumber;
#endif  // !_MSC_VER

all_server_role_rank_list::all_server_role_rank_list()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void all_server_role_rank_list::InitAsDefaultInstance() {
}

all_server_role_rank_list::all_server_role_rank_list(const all_server_role_rank_list& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void all_server_role_rank_list::SharedCtor() {
  _cached_size_ = 0;
  rank_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

all_server_role_rank_list::~all_server_role_rank_list() {
  SharedDtor();
}

void all_server_role_rank_list::SharedDtor() {
  if (this != default_instance_) {
  }
}

void all_server_role_rank_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* all_server_role_rank_list::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return all_server_role_rank_list_descriptor_;
}

const all_server_role_rank_list& all_server_role_rank_list::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

all_server_role_rank_list* all_server_role_rank_list::default_instance_ = NULL;

all_server_role_rank_list* all_server_role_rank_list::New() const {
  return new all_server_role_rank_list;
}

void all_server_role_rank_list::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_type_ = 0u;
  }
  all_rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool all_server_role_rank_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rank_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_type_)));
          set_has_rank_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_rank_list;
        break;
      }

      // repeated .PB.role_rank_list all_rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_all_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void all_server_role_rank_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank_type(), output);
  }

  // repeated .PB.role_rank_list all_rank_list = 2;
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->all_rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* all_server_role_rank_list::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rank_type = 1;
  if (has_rank_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank_type(), target);
  }

  // repeated .PB.role_rank_list all_rank_list = 2;
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->all_rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int all_server_role_rank_list::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rank_type = 1;
    if (has_rank_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank_type());
    }

  }
  // repeated .PB.role_rank_list all_rank_list = 2;
  total_size += 1 * this->all_rank_list_size();
  for (int i = 0; i < this->all_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void all_server_role_rank_list::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const all_server_role_rank_list* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const all_server_role_rank_list*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void all_server_role_rank_list::MergeFrom(const all_server_role_rank_list& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_rank_list_.MergeFrom(from.all_rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank_type()) {
      set_rank_type(from.rank_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void all_server_role_rank_list::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void all_server_role_rank_list::CopyFrom(const all_server_role_rank_list& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool all_server_role_rank_list::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < all_rank_list_size(); i++) {
    if (!this->all_rank_list(i).IsInitialized()) return false;
  }
  return true;
}

void all_server_role_rank_list::Swap(all_server_role_rank_list* other) {
  if (other != this) {
    std::swap(rank_type_, other->rank_type_);
    all_rank_list_.Swap(&other->all_rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata all_server_role_rank_list::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = all_server_role_rank_list_descriptor_;
  metadata.reflection = all_server_role_rank_list_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildRankData::kGuildIdFieldNumber;
const int GuildRankData::kRankFieldNumber;
const int GuildRankData::kValueFieldNumber;
const int GuildRankData::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

GuildRankData::GuildRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildRankData::InitAsDefaultInstance() {
}

GuildRankData::GuildRankData(const GuildRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildRankData::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  rank_ = 0u;
  value_ = 0u;
  update_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildRankData::~GuildRankData() {
  SharedDtor();
}

void GuildRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildRankData_descriptor_;
}

const GuildRankData& GuildRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildRankData* GuildRankData::default_instance_ = NULL;

GuildRankData* GuildRankData::New() const {
  return new GuildRankData;
}

void GuildRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    rank_ = 0u;
    value_ = 0u;
    update_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // required uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_update_time;
        break;
      }

      // required uint32 update_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_time_)));
          set_has_update_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // required uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // required uint32 update_time = 4;
  if (has_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->update_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // required uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 update_time = 4;
    if (has_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildRankData::MergeFrom(const GuildRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_update_time()) {
      set_update_time(from.update_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildRankData::CopyFrom(const GuildRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GuildRankData::Swap(GuildRankData* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(rank_, other->rank_);
    std::swap(value_, other->value_);
    std::swap(update_time_, other->update_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildRankData_descriptor_;
  metadata.reflection = GuildRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Property::kTypeFieldNumber;
const int Property::kValueFieldNumber;
#endif  // !_MSC_VER

Property::Property()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Property::InitAsDefaultInstance() {
}

Property::Property(const Property& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Property::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Property::~Property() {
  SharedDtor();
}

void Property::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Property::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Property::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Property_descriptor_;
}

const Property& Property::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Property* Property::default_instance_ = NULL;

Property* Property::New() const {
  return new Property;
}

void Property::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Property::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Property::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Property::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Property::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Property::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Property* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Property*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Property::MergeFrom(const Property& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Property::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Property::CopyFrom(const Property& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Property::Swap(Property* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Property::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Property_descriptor_;
  metadata.reflection = Property_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationProperty::kSlotFieldNumber;
const int FormationProperty::kProListFieldNumber;
#endif  // !_MSC_VER

FormationProperty::FormationProperty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormationProperty::InitAsDefaultInstance() {
}

FormationProperty::FormationProperty(const FormationProperty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormationProperty::SharedCtor() {
  _cached_size_ = 0;
  slot_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationProperty::~FormationProperty() {
  SharedDtor();
}

void FormationProperty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormationProperty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormationProperty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationProperty_descriptor_;
}

const FormationProperty& FormationProperty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FormationProperty* FormationProperty::default_instance_ = NULL;

FormationProperty* FormationProperty::New() const {
  return new FormationProperty;
}

void FormationProperty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_ = 0u;
  }
  pro_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationProperty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 slot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro_list;
        break;
      }

      // repeated .PB.Property pro_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pro_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationProperty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 slot = 1;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slot(), output);
  }

  // repeated .PB.Property pro_list = 2;
  for (int i = 0; i < this->pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pro_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationProperty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 slot = 1;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slot(), target);
  }

  // repeated .PB.Property pro_list = 2;
  for (int i = 0; i < this->pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pro_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationProperty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 slot = 1;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slot());
    }

  }
  // repeated .PB.Property pro_list = 2;
  total_size += 1 * this->pro_list_size();
  for (int i = 0; i < this->pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pro_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormationProperty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationProperty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationProperty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationProperty::MergeFrom(const FormationProperty& from) {
  GOOGLE_CHECK_NE(&from, this);
  pro_list_.MergeFrom(from.pro_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationProperty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationProperty::CopyFrom(const FormationProperty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationProperty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pro_list_size(); i++) {
    if (!this->pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void FormationProperty::Swap(FormationProperty* other) {
  if (other != this) {
    std::swap(slot_, other->slot_);
    pro_list_.Swap(&other->pro_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationProperty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationProperty_descriptor_;
  metadata.reflection = FormationProperty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuideData::kKeyFieldNumber;
const int GuideData::kValueFieldNumber;
#endif  // !_MSC_VER

GuideData::GuideData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuideData::InitAsDefaultInstance() {
}

GuideData::GuideData(const GuideData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuideData::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideData::~GuideData() {
  SharedDtor();
}

void GuideData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuideData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuideData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuideData_descriptor_;
}

const GuideData& GuideData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuideData* GuideData::default_instance_ = NULL;

GuideData* GuideData::New() const {
  return new GuideData;
}

void GuideData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuideData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuideData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuideData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuideData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuideData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuideData::MergeFrom(const GuideData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuideData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuideData::CopyFrom(const GuideData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideData::IsInitialized() const {

  return true;
}

void GuideData::Swap(GuideData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuideData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuideData_descriptor_;
  metadata.reflection = GuideData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPVPData::kTodayBattleTimesFieldNumber;
const int PlayerPVPData::kWeekBattleTimesFieldNumber;
const int PlayerPVPData::kDailyRewardTakeRecordFieldNumber;
const int PlayerPVPData::kWeekRewardTakeRecordFieldNumber;
#endif  // !_MSC_VER

PlayerPVPData::PlayerPVPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPVPData::InitAsDefaultInstance() {
}

PlayerPVPData::PlayerPVPData(const PlayerPVPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPVPData::SharedCtor() {
  _cached_size_ = 0;
  today_battle_times_ = 0u;
  week_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPVPData::~PlayerPVPData() {
  SharedDtor();
}

void PlayerPVPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPVPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPVPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPVPData_descriptor_;
}

const PlayerPVPData& PlayerPVPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

PlayerPVPData* PlayerPVPData::default_instance_ = NULL;

PlayerPVPData* PlayerPVPData::New() const {
  return new PlayerPVPData;
}

void PlayerPVPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_battle_times_ = 0u;
    week_battle_times_ = 0u;
  }
  daily_reward_take_record_.Clear();
  week_reward_take_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPVPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_battle_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_battle_times_)));
          set_has_today_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week_battle_times;
        break;
      }

      // optional uint32 week_battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_battle_times_)));
          set_has_week_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_reward_take_record;
        break;
      }

      // repeated uint32 daily_reward_take_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_reward_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_daily_reward_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daily_reward_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_daily_reward_take_record;
        if (input->ExpectTag(32)) goto parse_week_reward_take_record;
        break;
      }

      // repeated uint32 week_reward_take_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_reward_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_week_reward_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_week_reward_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_week_reward_take_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPVPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_battle_times(), output);
  }

  // optional uint32 week_battle_times = 2;
  if (has_week_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->week_battle_times(), output);
  }

  // repeated uint32 daily_reward_take_record = 3;
  for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->daily_reward_take_record(i), output);
  }

  // repeated uint32 week_reward_take_record = 4;
  for (int i = 0; i < this->week_reward_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->week_reward_take_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPVPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_battle_times(), target);
  }

  // optional uint32 week_battle_times = 2;
  if (has_week_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->week_battle_times(), target);
  }

  // repeated uint32 daily_reward_take_record = 3;
  for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->daily_reward_take_record(i), target);
  }

  // repeated uint32 week_reward_take_record = 4;
  for (int i = 0; i < this->week_reward_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->week_reward_take_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPVPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_battle_times = 1;
    if (has_today_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_battle_times());
    }

    // optional uint32 week_battle_times = 2;
    if (has_week_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_battle_times());
    }

  }
  // repeated uint32 daily_reward_take_record = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->daily_reward_take_record(i));
    }
    total_size += 1 * this->daily_reward_take_record_size() + data_size;
  }

  // repeated uint32 week_reward_take_record = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->week_reward_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->week_reward_take_record(i));
    }
    total_size += 1 * this->week_reward_take_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPVPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPVPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPVPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPVPData::MergeFrom(const PlayerPVPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_reward_take_record_.MergeFrom(from.daily_reward_take_record_);
  week_reward_take_record_.MergeFrom(from.week_reward_take_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_battle_times()) {
      set_today_battle_times(from.today_battle_times());
    }
    if (from.has_week_battle_times()) {
      set_week_battle_times(from.week_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPVPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPVPData::CopyFrom(const PlayerPVPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPVPData::IsInitialized() const {

  return true;
}

void PlayerPVPData::Swap(PlayerPVPData* other) {
  if (other != this) {
    std::swap(today_battle_times_, other->today_battle_times_);
    std::swap(week_battle_times_, other->week_battle_times_);
    daily_reward_take_record_.Swap(&other->daily_reward_take_record_);
    week_reward_take_record_.Swap(&other->week_reward_take_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPVPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPVPData_descriptor_;
  metadata.reflection = PlayerPVPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleBaseInfo::kRoleIdFieldNumber;
const int RoleBaseInfo::kRoleNameFieldNumber;
const int RoleBaseInfo::kAccountFieldNumber;
const int RoleBaseInfo::kStaminaFieldNumber;
const int RoleBaseInfo::kEnergyFieldNumber;
const int RoleBaseInfo::kSexFieldNumber;
const int RoleBaseInfo::kLevelFieldNumber;
const int RoleBaseInfo::kDailyInitLevelFieldNumber;
const int RoleBaseInfo::kExpFieldNumber;
const int RoleBaseInfo::kGoldFieldNumber;
const int RoleBaseInfo::kDiamondFieldNumber;
const int RoleBaseInfo::kHeadImageIdFieldNumber;
const int RoleBaseInfo::kVipLevelFieldNumber;
const int RoleBaseInfo::kVipExpFieldNumber;
const int RoleBaseInfo::kRiotSuppressTimesFieldNumber;
const int RoleBaseInfo::kHeroSoulFieldNumber;
const int RoleBaseInfo::kGodSoulFieldNumber;
const int RoleBaseInfo::kFairySoulFieldNumber;
const int RoleBaseInfo::kArenaPrestigeFieldNumber;
const int RoleBaseInfo::kTowerPrestigeFieldNumber;
const int RoleBaseInfo::kFightingPowerFieldNumber;
const int RoleBaseInfo::kWantedFieldNumber;
const int RoleBaseInfo::kRebelValueFieldNumber;
const int RoleBaseInfo::kHonorFieldNumber;
const int RoleBaseInfo::kCurContributionFieldNumber;
const int RoleBaseInfo::kWorldBossBattleTimesFieldNumber;
const int RoleBaseInfo::kGuildFbRewardChapterFieldNumber;
const int RoleBaseInfo::kLastLoginTimeFieldNumber;
const int RoleBaseInfo::kLastLogoutTimeFieldNumber;
const int RoleBaseInfo::kTotalOnlineTimeFieldNumber;
const int RoleBaseInfo::kLoginTimesFieldNumber;
const int RoleBaseInfo::kLastStaminaRecoverTimeFieldNumber;
const int RoleBaseInfo::kLastEnergyRecoverTimeFieldNumber;
const int RoleBaseInfo::kLastWantedRecoverTimeFieldNumber;
const int RoleBaseInfo::kFormationProListFieldNumber;
const int RoleBaseInfo::kOnceFlagListFieldNumber;
const int RoleBaseInfo::kGuideXFieldNumber;
const int RoleBaseInfo::kGuideYFieldNumber;
const int RoleBaseInfo::kGuideListFieldNumber;
const int RoleBaseInfo::kDuobaoPeaceOverTimeFieldNumber;
const int RoleBaseInfo::kLeaveGuildTimeFieldNumber;
const int RoleBaseInfo::kLastActivityNoticeIdFieldNumber;
const int RoleBaseInfo::kActivationCodeTakeRecordFieldNumber;
const int RoleBaseInfo::kFriendshipPointFieldNumber;
const int RoleBaseInfo::kTodayFriendshipPointFieldNumber;
const int RoleBaseInfo::kEndlessStoneFieldNumber;
const int RoleBaseInfo::kNobilityLevelFieldNumber;
const int RoleBaseInfo::kUpdateTimesFieldNumber;
const int RoleBaseInfo::kTotalRechargeAmountFieldNumber;
const int RoleBaseInfo::kGemCoinFieldNumber;
const int RoleBaseInfo::kDestinyCoinFieldNumber;
const int RoleBaseInfo::kStarSoulFieldNumber;
const int RoleBaseInfo::kTurntableScoreFieldNumber;
const int RoleBaseInfo::kTurntableActivityDataIdFieldNumber;
const int RoleBaseInfo::kTodayUsedHelpBattleTimesFieldNumber;
const int RoleBaseInfo::kRoleLoginDaysFieldNumber;
const int RoleBaseInfo::kCrystalFieldNumber;
const int RoleBaseInfo::kLastLoginTimeExFieldNumber;
const int RoleBaseInfo::kLastLogoutTimeExFieldNumber;
const int RoleBaseInfo::kCreateRoleTimeFieldNumber;
const int RoleBaseInfo::kIsAlreadyTakeClosedTestRebateFieldNumber;
const int RoleBaseInfo::kScoreMatchHonorFieldNumber;
const int RoleBaseInfo::kResourceWarScoreFieldNumber;
const int RoleBaseInfo::kYcoinFieldNumber;
const int RoleBaseInfo::kTodayChatTimesFieldNumber;
#endif  // !_MSC_VER

RoleBaseInfo::RoleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleBaseInfo::InitAsDefaultInstance() {
}

RoleBaseInfo::RoleBaseInfo(const RoleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stamina_ = 0u;
  energy_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  daily_init_level_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  diamond_ = 0u;
  head_image_id_ = 0u;
  vip_level_ = 0u;
  vip_exp_ = 0u;
  riot_suppress_times_ = 0u;
  hero_soul_ = 0u;
  god_soul_ = 0u;
  fairy_soul_ = 0u;
  arena_prestige_ = 0u;
  tower_prestige_ = 0u;
  fighting_power_ = 0u;
  wanted_ = 0u;
  rebel_value_ = 0u;
  honor_ = 0u;
  cur_contribution_ = 0u;
  world_boss_battle_times_ = 0u;
  guild_fb_reward_chapter_ = 0u;
  last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_logout_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_online_time_ = 0u;
  login_times_ = 0u;
  last_stamina_recover_time_ = 0u;
  last_energy_recover_time_ = 0u;
  last_wanted_recover_time_ = 0u;
  once_flag_list_ = 0u;
  guide_x_ = 0u;
  guide_y_ = 0u;
  duobao_peace_over_time_ = 0u;
  leave_guild_time_ = 0u;
  last_activity_notice_id_ = 0u;
  friendship_point_ = 0u;
  today_friendship_point_ = 0u;
  endless_stone_ = 0u;
  nobility_level_ = 0u;
  update_times_ = 0u;
  total_recharge_amount_ = 0u;
  gem_coin_ = 0u;
  destiny_coin_ = 0u;
  star_soul_ = 0u;
  turntable_score_ = 0u;
  turntable_activity_data_id_ = 0u;
  today_used_help_battle_times_ = 0u;
  role_login_days_ = 0u;
  crystal_ = 0u;
  last_login_time_ex_ = 0u;
  last_logout_time_ex_ = 0u;
  create_role_time_ = 0u;
  is_already_take_closed_test_rebate_ = 0u;
  score_match_honor_ = 0u;
  resource_war_score_ = 0u;
  ycoin_ = 0u;
  today_chat_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBaseInfo::~RoleBaseInfo() {
  SharedDtor();
}

void RoleBaseInfo::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_login_time_;
  }
  if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_logout_time_;
  }
  if (this != default_instance_) {
  }
}

void RoleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBaseInfo_descriptor_;
}

const RoleBaseInfo& RoleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleBaseInfo* RoleBaseInfo::default_instance_ = NULL;

RoleBaseInfo* RoleBaseInfo::New() const {
  return new RoleBaseInfo;
}

void RoleBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    stamina_ = 0u;
    energy_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    daily_init_level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    exp_ = 0u;
    gold_ = 0u;
    diamond_ = 0u;
    head_image_id_ = 0u;
    vip_level_ = 0u;
    vip_exp_ = 0u;
    riot_suppress_times_ = 0u;
    hero_soul_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    god_soul_ = 0u;
    fairy_soul_ = 0u;
    arena_prestige_ = 0u;
    tower_prestige_ = 0u;
    fighting_power_ = 0u;
    wanted_ = 0u;
    rebel_value_ = 0u;
    honor_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    cur_contribution_ = 0u;
    world_boss_battle_times_ = 0u;
    guild_fb_reward_chapter_ = 0u;
    if (has_last_login_time()) {
      if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
        last_login_time_->clear();
      }
    }
    if (has_last_logout_time()) {
      if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
        last_logout_time_->clear();
      }
    }
    total_online_time_ = 0u;
    login_times_ = 0u;
    last_stamina_recover_time_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    last_energy_recover_time_ = 0u;
    last_wanted_recover_time_ = 0u;
    once_flag_list_ = 0u;
    guide_x_ = 0u;
    guide_y_ = 0u;
    duobao_peace_over_time_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    leave_guild_time_ = 0u;
    last_activity_notice_id_ = 0u;
    friendship_point_ = 0u;
    today_friendship_point_ = 0u;
    endless_stone_ = 0u;
    nobility_level_ = 0u;
    update_times_ = 0u;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    total_recharge_amount_ = 0u;
    gem_coin_ = 0u;
    destiny_coin_ = 0u;
    star_soul_ = 0u;
    turntable_score_ = 0u;
    turntable_activity_data_id_ = 0u;
    today_used_help_battle_times_ = 0u;
    role_login_days_ = 0u;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    crystal_ = 0u;
    last_login_time_ex_ = 0u;
    last_logout_time_ex_ = 0u;
    create_role_time_ = 0u;
    is_already_take_closed_test_rebate_ = 0u;
    score_match_honor_ = 0u;
    resource_war_score_ = 0u;
    ycoin_ = 0u;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    today_chat_times_ = 0u;
  }
  formation_pro_list_.Clear();
  guide_list_.Clear();
  activation_code_take_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // required string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // required string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stamina;
        break;
      }

      // optional uint32 stamina = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stamina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stamina_)));
          set_has_stamina();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_energy;
        break;
      }

      // optional uint32 energy = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_daily_init_level;
        break;
      }

      // optional uint32 daily_init_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_init_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_init_level_)));
          set_has_daily_init_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_head_image_id;
        break;
      }

      // optional uint32 head_image_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_image_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_image_id_)));
          set_has_head_image_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vip_exp;
        break;
      }

      // optional uint32 vip_exp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_exp_)));
          set_has_vip_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_riot_suppress_times;
        break;
      }

      // optional uint32 riot_suppress_times = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_riot_suppress_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &riot_suppress_times_)));
          set_has_riot_suppress_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_hero_soul;
        break;
      }

      // optional uint32 hero_soul = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hero_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_soul_)));
          set_has_hero_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_god_soul;
        break;
      }

      // optional uint32 god_soul = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_god_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &god_soul_)));
          set_has_god_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fairy_soul;
        break;
      }

      // optional uint32 fairy_soul = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fairy_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fairy_soul_)));
          set_has_fairy_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_arena_prestige;
        break;
      }

      // optional uint32 arena_prestige = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arena_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arena_prestige_)));
          set_has_arena_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tower_prestige;
        break;
      }

      // optional uint32 tower_prestige = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tower_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_prestige_)));
          set_has_tower_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fighting_power;
        break;
      }

      // optional uint32 fighting_power = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fighting_power_)));
          set_has_fighting_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_wanted;
        break;
      }

      // optional uint32 wanted = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wanted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wanted_)));
          set_has_wanted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_rebel_value;
        break;
      }

      // optional uint32 rebel_value = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rebel_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebel_value_)));
          set_has_rebel_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_honor;
        break;
      }

      // optional uint32 honor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &honor_)));
          set_has_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_cur_contribution;
        break;
      }

      // optional uint32 cur_contribution = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_contribution_)));
          set_has_cur_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_world_boss_battle_times;
        break;
      }

      // optional uint32 world_boss_battle_times = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world_boss_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_boss_battle_times_)));
          set_has_world_boss_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_guild_fb_reward_chapter;
        break;
      }

      // optional uint32 guild_fb_reward_chapter = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_fb_reward_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_fb_reward_chapter_)));
          set_has_guild_fb_reward_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_last_login_time;
        break;
      }

      // optional string last_login_time = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_login_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_login_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_login_time().data(), this->last_login_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_last_logout_time;
        break;
      }

      // optional string last_logout_time = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_logout_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_last_logout_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->last_logout_time().data(), this->last_logout_time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_total_online_time;
        break;
      }

      // optional uint32 total_online_time = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_online_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_online_time_)));
          set_has_total_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_login_times;
        break;
      }

      // optional uint32 login_times = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_times_)));
          set_has_login_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_last_stamina_recover_time;
        break;
      }

      // optional uint32 last_stamina_recover_time = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_stamina_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_stamina_recover_time_)));
          set_has_last_stamina_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_last_energy_recover_time;
        break;
      }

      // optional uint32 last_energy_recover_time = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_energy_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_energy_recover_time_)));
          set_has_last_energy_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_last_wanted_recover_time;
        break;
      }

      // optional uint32 last_wanted_recover_time = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_wanted_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_wanted_recover_time_)));
          set_has_last_wanted_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_formation_pro_list;
        break;
      }

      // repeated .PB.FormationProperty formation_pro_list = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formation_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_formation_pro_list;
        if (input->ExpectTag(288)) goto parse_once_flag_list;
        break;
      }

      // optional uint32 once_flag_list = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_once_flag_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &once_flag_list_)));
          set_has_once_flag_list();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_guide_x;
        break;
      }

      // optional uint32 guide_x = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_x_)));
          set_has_guide_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_guide_y;
        break;
      }

      // optional uint32 guide_y = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guide_y_)));
          set_has_guide_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_guide_list;
        break;
      }

      // repeated .PB.GuideData guide_list = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guide_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_guide_list;
        if (input->ExpectTag(320)) goto parse_duobao_peace_over_time;
        break;
      }

      // optional uint32 duobao_peace_over_time = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duobao_peace_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duobao_peace_over_time_)));
          set_has_duobao_peace_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_leave_guild_time;
        break;
      }

      // optional uint32 leave_guild_time = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leave_guild_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leave_guild_time_)));
          set_has_leave_guild_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_last_activity_notice_id;
        break;
      }

      // optional uint32 last_activity_notice_id = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity_notice_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_notice_id_)));
          set_has_last_activity_notice_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_activation_code_take_record;
        break;
      }

      // repeated uint32 activation_code_take_record = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activation_code_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 344, input, this->mutable_activation_code_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activation_code_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_activation_code_take_record;
        if (input->ExpectTag(352)) goto parse_friendship_point;
        break;
      }

      // optional uint32 friendship_point = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friendship_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friendship_point_)));
          set_has_friendship_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_today_friendship_point;
        break;
      }

      // optional uint32 today_friendship_point = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_friendship_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_friendship_point_)));
          set_has_today_friendship_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_endless_stone;
        break;
      }

      // optional uint32 endless_stone = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endless_stone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endless_stone_)));
          set_has_endless_stone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_nobility_level;
        break;
      }

      // optional uint32 nobility_level = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nobility_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nobility_level_)));
          set_has_nobility_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_update_times;
        break;
      }

      // optional uint32 update_times = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_times_)));
          set_has_update_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_total_recharge_amount;
        break;
      }

      // optional uint32 total_recharge_amount = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_amount_)));
          set_has_total_recharge_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_gem_coin;
        break;
      }

      // optional uint32 gem_coin = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gem_coin_)));
          set_has_gem_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_destiny_coin;
        break;
      }

      // optional uint32 destiny_coin = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destiny_coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destiny_coin_)));
          set_has_destiny_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_star_soul;
        break;
      }

      // optional uint32 star_soul = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_soul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_soul_)));
          set_has_star_soul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_turntable_score;
        break;
      }

      // optional uint32 turntable_score = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turntable_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turntable_score_)));
          set_has_turntable_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_turntable_activity_data_id;
        break;
      }

      // optional uint32 turntable_activity_data_id = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_turntable_activity_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &turntable_activity_data_id_)));
          set_has_turntable_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_today_used_help_battle_times;
        break;
      }

      // optional uint32 today_used_help_battle_times = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_used_help_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_used_help_battle_times_)));
          set_has_today_used_help_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_role_login_days;
        break;
      }

      // optional uint32 role_login_days = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_login_days_)));
          set_has_role_login_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_crystal;
        break;
      }

      // optional uint32 crystal = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crystal_)));
          set_has_crystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_last_login_time_ex;
        break;
      }

      // optional uint32 last_login_time_ex = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_login_time_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_login_time_ex_)));
          set_has_last_login_time_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_last_logout_time_ex;
        break;
      }

      // optional uint32 last_logout_time_ex = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time_ex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logout_time_ex_)));
          set_has_last_logout_time_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_create_role_time;
        break;
      }

      // optional uint32 create_role_time = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_role_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_role_time_)));
          set_has_create_role_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_is_already_take_closed_test_rebate;
        break;
      }

      // optional uint32 is_already_take_closed_test_rebate = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_take_closed_test_rebate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_take_closed_test_rebate_)));
          set_has_is_already_take_closed_test_rebate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_score_match_honor;
        break;
      }

      // optional uint32 score_match_honor = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_match_honor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_match_honor_)));
          set_has_score_match_honor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_resource_war_score;
        break;
      }

      // optional uint32 resource_war_score = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_war_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_war_score_)));
          set_has_resource_war_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_ycoin;
        break;
      }

      // optional uint32 ycoin = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ycoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ycoin_)));
          set_has_ycoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_today_chat_times;
        break;
      }

      // optional uint32 today_chat_times = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_chat_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_chat_times_)));
          set_has_today_chat_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 stamina = 4;
  if (has_stamina()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stamina(), output);
  }

  // optional uint32 energy = 5;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->energy(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint32 daily_init_level = 8;
  if (has_daily_init_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->daily_init_level(), output);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->exp(), output);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gold(), output);
  }

  // optional uint32 diamond = 11;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->diamond(), output);
  }

  // optional uint32 head_image_id = 12;
  if (has_head_image_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->head_image_id(), output);
  }

  // optional uint32 vip_level = 13;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->vip_level(), output);
  }

  // optional uint32 vip_exp = 14;
  if (has_vip_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->vip_exp(), output);
  }

  // optional uint32 riot_suppress_times = 15;
  if (has_riot_suppress_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->riot_suppress_times(), output);
  }

  // optional uint32 hero_soul = 16;
  if (has_hero_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hero_soul(), output);
  }

  // optional uint32 god_soul = 17;
  if (has_god_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->god_soul(), output);
  }

  // optional uint32 fairy_soul = 18;
  if (has_fairy_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fairy_soul(), output);
  }

  // optional uint32 arena_prestige = 19;
  if (has_arena_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->arena_prestige(), output);
  }

  // optional uint32 tower_prestige = 20;
  if (has_tower_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tower_prestige(), output);
  }

  // optional uint32 fighting_power = 21;
  if (has_fighting_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fighting_power(), output);
  }

  // optional uint32 wanted = 22;
  if (has_wanted()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->wanted(), output);
  }

  // optional uint32 rebel_value = 23;
  if (has_rebel_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->rebel_value(), output);
  }

  // optional uint32 honor = 24;
  if (has_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->honor(), output);
  }

  // optional uint32 cur_contribution = 25;
  if (has_cur_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->cur_contribution(), output);
  }

  // optional uint32 world_boss_battle_times = 26;
  if (has_world_boss_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->world_boss_battle_times(), output);
  }

  // optional uint32 guild_fb_reward_chapter = 27;
  if (has_guild_fb_reward_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->guild_fb_reward_chapter(), output);
  }

  // optional string last_login_time = 28;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_time().data(), this->last_login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->last_login_time(), output);
  }

  // optional string last_logout_time = 29;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_logout_time().data(), this->last_logout_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->last_logout_time(), output);
  }

  // optional uint32 total_online_time = 30;
  if (has_total_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->total_online_time(), output);
  }

  // optional uint32 login_times = 31;
  if (has_login_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->login_times(), output);
  }

  // optional uint32 last_stamina_recover_time = 32;
  if (has_last_stamina_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->last_stamina_recover_time(), output);
  }

  // optional uint32 last_energy_recover_time = 33;
  if (has_last_energy_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->last_energy_recover_time(), output);
  }

  // optional uint32 last_wanted_recover_time = 34;
  if (has_last_wanted_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->last_wanted_recover_time(), output);
  }

  // repeated .PB.FormationProperty formation_pro_list = 35;
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->formation_pro_list(i), output);
  }

  // optional uint32 once_flag_list = 36;
  if (has_once_flag_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->once_flag_list(), output);
  }

  // optional uint32 guide_x = 37;
  if (has_guide_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->guide_x(), output);
  }

  // optional uint32 guide_y = 38;
  if (has_guide_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->guide_y(), output);
  }

  // repeated .PB.GuideData guide_list = 39;
  for (int i = 0; i < this->guide_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->guide_list(i), output);
  }

  // optional uint32 duobao_peace_over_time = 40;
  if (has_duobao_peace_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->duobao_peace_over_time(), output);
  }

  // optional uint32 leave_guild_time = 41;
  if (has_leave_guild_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->leave_guild_time(), output);
  }

  // optional uint32 last_activity_notice_id = 42;
  if (has_last_activity_notice_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->last_activity_notice_id(), output);
  }

  // repeated uint32 activation_code_take_record = 43;
  for (int i = 0; i < this->activation_code_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      43, this->activation_code_take_record(i), output);
  }

  // optional uint32 friendship_point = 44;
  if (has_friendship_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(44, this->friendship_point(), output);
  }

  // optional uint32 today_friendship_point = 45;
  if (has_today_friendship_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(45, this->today_friendship_point(), output);
  }

  // optional uint32 endless_stone = 46;
  if (has_endless_stone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(46, this->endless_stone(), output);
  }

  // optional uint32 nobility_level = 47;
  if (has_nobility_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(47, this->nobility_level(), output);
  }

  // optional uint32 update_times = 48;
  if (has_update_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(48, this->update_times(), output);
  }

  // optional uint32 total_recharge_amount = 49;
  if (has_total_recharge_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(49, this->total_recharge_amount(), output);
  }

  // optional uint32 gem_coin = 50;
  if (has_gem_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(50, this->gem_coin(), output);
  }

  // optional uint32 destiny_coin = 51;
  if (has_destiny_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(51, this->destiny_coin(), output);
  }

  // optional uint32 star_soul = 52;
  if (has_star_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(52, this->star_soul(), output);
  }

  // optional uint32 turntable_score = 53;
  if (has_turntable_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(53, this->turntable_score(), output);
  }

  // optional uint32 turntable_activity_data_id = 54;
  if (has_turntable_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(54, this->turntable_activity_data_id(), output);
  }

  // optional uint32 today_used_help_battle_times = 55;
  if (has_today_used_help_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(55, this->today_used_help_battle_times(), output);
  }

  // optional uint32 role_login_days = 56;
  if (has_role_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(56, this->role_login_days(), output);
  }

  // optional uint32 crystal = 57;
  if (has_crystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(57, this->crystal(), output);
  }

  // optional uint32 last_login_time_ex = 58;
  if (has_last_login_time_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(58, this->last_login_time_ex(), output);
  }

  // optional uint32 last_logout_time_ex = 59;
  if (has_last_logout_time_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(59, this->last_logout_time_ex(), output);
  }

  // optional uint32 create_role_time = 60;
  if (has_create_role_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->create_role_time(), output);
  }

  // optional uint32 is_already_take_closed_test_rebate = 61;
  if (has_is_already_take_closed_test_rebate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(61, this->is_already_take_closed_test_rebate(), output);
  }

  // optional uint32 score_match_honor = 62;
  if (has_score_match_honor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(62, this->score_match_honor(), output);
  }

  // optional uint32 resource_war_score = 63;
  if (has_resource_war_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(63, this->resource_war_score(), output);
  }

  // optional uint32 ycoin = 64;
  if (has_ycoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(64, this->ycoin(), output);
  }

  // optional uint32 today_chat_times = 65;
  if (has_today_chat_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(65, this->today_chat_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // required string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 stamina = 4;
  if (has_stamina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stamina(), target);
  }

  // optional uint32 energy = 5;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->energy(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint32 daily_init_level = 8;
  if (has_daily_init_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->daily_init_level(), target);
  }

  // optional uint32 exp = 9;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->exp(), target);
  }

  // optional uint32 gold = 10;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gold(), target);
  }

  // optional uint32 diamond = 11;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->diamond(), target);
  }

  // optional uint32 head_image_id = 12;
  if (has_head_image_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->head_image_id(), target);
  }

  // optional uint32 vip_level = 13;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->vip_level(), target);
  }

  // optional uint32 vip_exp = 14;
  if (has_vip_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->vip_exp(), target);
  }

  // optional uint32 riot_suppress_times = 15;
  if (has_riot_suppress_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->riot_suppress_times(), target);
  }

  // optional uint32 hero_soul = 16;
  if (has_hero_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->hero_soul(), target);
  }

  // optional uint32 god_soul = 17;
  if (has_god_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->god_soul(), target);
  }

  // optional uint32 fairy_soul = 18;
  if (has_fairy_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fairy_soul(), target);
  }

  // optional uint32 arena_prestige = 19;
  if (has_arena_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->arena_prestige(), target);
  }

  // optional uint32 tower_prestige = 20;
  if (has_tower_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tower_prestige(), target);
  }

  // optional uint32 fighting_power = 21;
  if (has_fighting_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fighting_power(), target);
  }

  // optional uint32 wanted = 22;
  if (has_wanted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->wanted(), target);
  }

  // optional uint32 rebel_value = 23;
  if (has_rebel_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->rebel_value(), target);
  }

  // optional uint32 honor = 24;
  if (has_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->honor(), target);
  }

  // optional uint32 cur_contribution = 25;
  if (has_cur_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->cur_contribution(), target);
  }

  // optional uint32 world_boss_battle_times = 26;
  if (has_world_boss_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->world_boss_battle_times(), target);
  }

  // optional uint32 guild_fb_reward_chapter = 27;
  if (has_guild_fb_reward_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->guild_fb_reward_chapter(), target);
  }

  // optional string last_login_time = 28;
  if (has_last_login_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_login_time().data(), this->last_login_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->last_login_time(), target);
  }

  // optional string last_logout_time = 29;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->last_logout_time().data(), this->last_logout_time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->last_logout_time(), target);
  }

  // optional uint32 total_online_time = 30;
  if (has_total_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->total_online_time(), target);
  }

  // optional uint32 login_times = 31;
  if (has_login_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->login_times(), target);
  }

  // optional uint32 last_stamina_recover_time = 32;
  if (has_last_stamina_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(32, this->last_stamina_recover_time(), target);
  }

  // optional uint32 last_energy_recover_time = 33;
  if (has_last_energy_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->last_energy_recover_time(), target);
  }

  // optional uint32 last_wanted_recover_time = 34;
  if (has_last_wanted_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->last_wanted_recover_time(), target);
  }

  // repeated .PB.FormationProperty formation_pro_list = 35;
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->formation_pro_list(i), target);
  }

  // optional uint32 once_flag_list = 36;
  if (has_once_flag_list()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(36, this->once_flag_list(), target);
  }

  // optional uint32 guide_x = 37;
  if (has_guide_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->guide_x(), target);
  }

  // optional uint32 guide_y = 38;
  if (has_guide_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->guide_y(), target);
  }

  // repeated .PB.GuideData guide_list = 39;
  for (int i = 0; i < this->guide_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->guide_list(i), target);
  }

  // optional uint32 duobao_peace_over_time = 40;
  if (has_duobao_peace_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->duobao_peace_over_time(), target);
  }

  // optional uint32 leave_guild_time = 41;
  if (has_leave_guild_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(41, this->leave_guild_time(), target);
  }

  // optional uint32 last_activity_notice_id = 42;
  if (has_last_activity_notice_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(42, this->last_activity_notice_id(), target);
  }

  // repeated uint32 activation_code_take_record = 43;
  for (int i = 0; i < this->activation_code_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(43, this->activation_code_take_record(i), target);
  }

  // optional uint32 friendship_point = 44;
  if (has_friendship_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(44, this->friendship_point(), target);
  }

  // optional uint32 today_friendship_point = 45;
  if (has_today_friendship_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(45, this->today_friendship_point(), target);
  }

  // optional uint32 endless_stone = 46;
  if (has_endless_stone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(46, this->endless_stone(), target);
  }

  // optional uint32 nobility_level = 47;
  if (has_nobility_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(47, this->nobility_level(), target);
  }

  // optional uint32 update_times = 48;
  if (has_update_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(48, this->update_times(), target);
  }

  // optional uint32 total_recharge_amount = 49;
  if (has_total_recharge_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(49, this->total_recharge_amount(), target);
  }

  // optional uint32 gem_coin = 50;
  if (has_gem_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(50, this->gem_coin(), target);
  }

  // optional uint32 destiny_coin = 51;
  if (has_destiny_coin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(51, this->destiny_coin(), target);
  }

  // optional uint32 star_soul = 52;
  if (has_star_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(52, this->star_soul(), target);
  }

  // optional uint32 turntable_score = 53;
  if (has_turntable_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(53, this->turntable_score(), target);
  }

  // optional uint32 turntable_activity_data_id = 54;
  if (has_turntable_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(54, this->turntable_activity_data_id(), target);
  }

  // optional uint32 today_used_help_battle_times = 55;
  if (has_today_used_help_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(55, this->today_used_help_battle_times(), target);
  }

  // optional uint32 role_login_days = 56;
  if (has_role_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(56, this->role_login_days(), target);
  }

  // optional uint32 crystal = 57;
  if (has_crystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(57, this->crystal(), target);
  }

  // optional uint32 last_login_time_ex = 58;
  if (has_last_login_time_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(58, this->last_login_time_ex(), target);
  }

  // optional uint32 last_logout_time_ex = 59;
  if (has_last_logout_time_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(59, this->last_logout_time_ex(), target);
  }

  // optional uint32 create_role_time = 60;
  if (has_create_role_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->create_role_time(), target);
  }

  // optional uint32 is_already_take_closed_test_rebate = 61;
  if (has_is_already_take_closed_test_rebate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(61, this->is_already_take_closed_test_rebate(), target);
  }

  // optional uint32 score_match_honor = 62;
  if (has_score_match_honor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(62, this->score_match_honor(), target);
  }

  // optional uint32 resource_war_score = 63;
  if (has_resource_war_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(63, this->resource_war_score(), target);
  }

  // optional uint32 ycoin = 64;
  if (has_ycoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(64, this->ycoin(), target);
  }

  // optional uint32 today_chat_times = 65;
  if (has_today_chat_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(65, this->today_chat_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // required string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 stamina = 4;
    if (has_stamina()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stamina());
    }

    // optional uint32 energy = 5;
    if (has_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->energy());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 daily_init_level = 8;
    if (has_daily_init_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_init_level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 exp = 9;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 gold = 10;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional uint32 diamond = 11;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 head_image_id = 12;
    if (has_head_image_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_image_id());
    }

    // optional uint32 vip_level = 13;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 vip_exp = 14;
    if (has_vip_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_exp());
    }

    // optional uint32 riot_suppress_times = 15;
    if (has_riot_suppress_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->riot_suppress_times());
    }

    // optional uint32 hero_soul = 16;
    if (has_hero_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_soul());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 god_soul = 17;
    if (has_god_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->god_soul());
    }

    // optional uint32 fairy_soul = 18;
    if (has_fairy_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fairy_soul());
    }

    // optional uint32 arena_prestige = 19;
    if (has_arena_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arena_prestige());
    }

    // optional uint32 tower_prestige = 20;
    if (has_tower_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_prestige());
    }

    // optional uint32 fighting_power = 21;
    if (has_fighting_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fighting_power());
    }

    // optional uint32 wanted = 22;
    if (has_wanted()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wanted());
    }

    // optional uint32 rebel_value = 23;
    if (has_rebel_value()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebel_value());
    }

    // optional uint32 honor = 24;
    if (has_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->honor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 cur_contribution = 25;
    if (has_cur_contribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_contribution());
    }

    // optional uint32 world_boss_battle_times = 26;
    if (has_world_boss_battle_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world_boss_battle_times());
    }

    // optional uint32 guild_fb_reward_chapter = 27;
    if (has_guild_fb_reward_chapter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_fb_reward_chapter());
    }

    // optional string last_login_time = 28;
    if (has_last_login_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_login_time());
    }

    // optional string last_logout_time = 29;
    if (has_last_logout_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->last_logout_time());
    }

    // optional uint32 total_online_time = 30;
    if (has_total_online_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_online_time());
    }

    // optional uint32 login_times = 31;
    if (has_login_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_times());
    }

    // optional uint32 last_stamina_recover_time = 32;
    if (has_last_stamina_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_stamina_recover_time());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional uint32 last_energy_recover_time = 33;
    if (has_last_energy_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_energy_recover_time());
    }

    // optional uint32 last_wanted_recover_time = 34;
    if (has_last_wanted_recover_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_wanted_recover_time());
    }

    // optional uint32 once_flag_list = 36;
    if (has_once_flag_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->once_flag_list());
    }

    // optional uint32 guide_x = 37;
    if (has_guide_x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_x());
    }

    // optional uint32 guide_y = 38;
    if (has_guide_y()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guide_y());
    }

    // optional uint32 duobao_peace_over_time = 40;
    if (has_duobao_peace_over_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duobao_peace_over_time());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional uint32 leave_guild_time = 41;
    if (has_leave_guild_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leave_guild_time());
    }

    // optional uint32 last_activity_notice_id = 42;
    if (has_last_activity_notice_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_notice_id());
    }

    // optional uint32 friendship_point = 44;
    if (has_friendship_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friendship_point());
    }

    // optional uint32 today_friendship_point = 45;
    if (has_today_friendship_point()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_friendship_point());
    }

    // optional uint32 endless_stone = 46;
    if (has_endless_stone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endless_stone());
    }

    // optional uint32 nobility_level = 47;
    if (has_nobility_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nobility_level());
    }

    // optional uint32 update_times = 48;
    if (has_update_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_times());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional uint32 total_recharge_amount = 49;
    if (has_total_recharge_amount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge_amount());
    }

    // optional uint32 gem_coin = 50;
    if (has_gem_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gem_coin());
    }

    // optional uint32 destiny_coin = 51;
    if (has_destiny_coin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destiny_coin());
    }

    // optional uint32 star_soul = 52;
    if (has_star_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_soul());
    }

    // optional uint32 turntable_score = 53;
    if (has_turntable_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turntable_score());
    }

    // optional uint32 turntable_activity_data_id = 54;
    if (has_turntable_activity_data_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->turntable_activity_data_id());
    }

    // optional uint32 today_used_help_battle_times = 55;
    if (has_today_used_help_battle_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_used_help_battle_times());
    }

    // optional uint32 role_login_days = 56;
    if (has_role_login_days()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_login_days());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional uint32 crystal = 57;
    if (has_crystal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crystal());
    }

    // optional uint32 last_login_time_ex = 58;
    if (has_last_login_time_ex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_login_time_ex());
    }

    // optional uint32 last_logout_time_ex = 59;
    if (has_last_logout_time_ex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logout_time_ex());
    }

    // optional uint32 create_role_time = 60;
    if (has_create_role_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_role_time());
    }

    // optional uint32 is_already_take_closed_test_rebate = 61;
    if (has_is_already_take_closed_test_rebate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_take_closed_test_rebate());
    }

    // optional uint32 score_match_honor = 62;
    if (has_score_match_honor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score_match_honor());
    }

    // optional uint32 resource_war_score = 63;
    if (has_resource_war_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_war_score());
    }

    // optional uint32 ycoin = 64;
    if (has_ycoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ycoin());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional uint32 today_chat_times = 65;
    if (has_today_chat_times()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_chat_times());
    }

  }
  // repeated .PB.FormationProperty formation_pro_list = 35;
  total_size += 2 * this->formation_pro_list_size();
  for (int i = 0; i < this->formation_pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formation_pro_list(i));
  }

  // repeated .PB.GuideData guide_list = 39;
  total_size += 2 * this->guide_list_size();
  for (int i = 0; i < this->guide_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guide_list(i));
  }

  // repeated uint32 activation_code_take_record = 43;
  {
    int data_size = 0;
    for (int i = 0; i < this->activation_code_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activation_code_take_record(i));
    }
    total_size += 2 * this->activation_code_take_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBaseInfo::MergeFrom(const RoleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  formation_pro_list_.MergeFrom(from.formation_pro_list_);
  guide_list_.MergeFrom(from.guide_list_);
  activation_code_take_record_.MergeFrom(from.activation_code_take_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_stamina()) {
      set_stamina(from.stamina());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_daily_init_level()) {
      set_daily_init_level(from.daily_init_level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_head_image_id()) {
      set_head_image_id(from.head_image_id());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_vip_exp()) {
      set_vip_exp(from.vip_exp());
    }
    if (from.has_riot_suppress_times()) {
      set_riot_suppress_times(from.riot_suppress_times());
    }
    if (from.has_hero_soul()) {
      set_hero_soul(from.hero_soul());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_god_soul()) {
      set_god_soul(from.god_soul());
    }
    if (from.has_fairy_soul()) {
      set_fairy_soul(from.fairy_soul());
    }
    if (from.has_arena_prestige()) {
      set_arena_prestige(from.arena_prestige());
    }
    if (from.has_tower_prestige()) {
      set_tower_prestige(from.tower_prestige());
    }
    if (from.has_fighting_power()) {
      set_fighting_power(from.fighting_power());
    }
    if (from.has_wanted()) {
      set_wanted(from.wanted());
    }
    if (from.has_rebel_value()) {
      set_rebel_value(from.rebel_value());
    }
    if (from.has_honor()) {
      set_honor(from.honor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cur_contribution()) {
      set_cur_contribution(from.cur_contribution());
    }
    if (from.has_world_boss_battle_times()) {
      set_world_boss_battle_times(from.world_boss_battle_times());
    }
    if (from.has_guild_fb_reward_chapter()) {
      set_guild_fb_reward_chapter(from.guild_fb_reward_chapter());
    }
    if (from.has_last_login_time()) {
      set_last_login_time(from.last_login_time());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_total_online_time()) {
      set_total_online_time(from.total_online_time());
    }
    if (from.has_login_times()) {
      set_login_times(from.login_times());
    }
    if (from.has_last_stamina_recover_time()) {
      set_last_stamina_recover_time(from.last_stamina_recover_time());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_last_energy_recover_time()) {
      set_last_energy_recover_time(from.last_energy_recover_time());
    }
    if (from.has_last_wanted_recover_time()) {
      set_last_wanted_recover_time(from.last_wanted_recover_time());
    }
    if (from.has_once_flag_list()) {
      set_once_flag_list(from.once_flag_list());
    }
    if (from.has_guide_x()) {
      set_guide_x(from.guide_x());
    }
    if (from.has_guide_y()) {
      set_guide_y(from.guide_y());
    }
    if (from.has_duobao_peace_over_time()) {
      set_duobao_peace_over_time(from.duobao_peace_over_time());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_leave_guild_time()) {
      set_leave_guild_time(from.leave_guild_time());
    }
    if (from.has_last_activity_notice_id()) {
      set_last_activity_notice_id(from.last_activity_notice_id());
    }
    if (from.has_friendship_point()) {
      set_friendship_point(from.friendship_point());
    }
    if (from.has_today_friendship_point()) {
      set_today_friendship_point(from.today_friendship_point());
    }
    if (from.has_endless_stone()) {
      set_endless_stone(from.endless_stone());
    }
    if (from.has_nobility_level()) {
      set_nobility_level(from.nobility_level());
    }
    if (from.has_update_times()) {
      set_update_times(from.update_times());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_total_recharge_amount()) {
      set_total_recharge_amount(from.total_recharge_amount());
    }
    if (from.has_gem_coin()) {
      set_gem_coin(from.gem_coin());
    }
    if (from.has_destiny_coin()) {
      set_destiny_coin(from.destiny_coin());
    }
    if (from.has_star_soul()) {
      set_star_soul(from.star_soul());
    }
    if (from.has_turntable_score()) {
      set_turntable_score(from.turntable_score());
    }
    if (from.has_turntable_activity_data_id()) {
      set_turntable_activity_data_id(from.turntable_activity_data_id());
    }
    if (from.has_today_used_help_battle_times()) {
      set_today_used_help_battle_times(from.today_used_help_battle_times());
    }
    if (from.has_role_login_days()) {
      set_role_login_days(from.role_login_days());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_crystal()) {
      set_crystal(from.crystal());
    }
    if (from.has_last_login_time_ex()) {
      set_last_login_time_ex(from.last_login_time_ex());
    }
    if (from.has_last_logout_time_ex()) {
      set_last_logout_time_ex(from.last_logout_time_ex());
    }
    if (from.has_create_role_time()) {
      set_create_role_time(from.create_role_time());
    }
    if (from.has_is_already_take_closed_test_rebate()) {
      set_is_already_take_closed_test_rebate(from.is_already_take_closed_test_rebate());
    }
    if (from.has_score_match_honor()) {
      set_score_match_honor(from.score_match_honor());
    }
    if (from.has_resource_war_score()) {
      set_resource_war_score(from.resource_war_score());
    }
    if (from.has_ycoin()) {
      set_ycoin(from.ycoin());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_today_chat_times()) {
      set_today_chat_times(from.today_chat_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBaseInfo::CopyFrom(const RoleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < formation_pro_list_size(); i++) {
    if (!this->formation_pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleBaseInfo::Swap(RoleBaseInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(account_, other->account_);
    std::swap(stamina_, other->stamina_);
    std::swap(energy_, other->energy_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(daily_init_level_, other->daily_init_level_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(head_image_id_, other->head_image_id_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(vip_exp_, other->vip_exp_);
    std::swap(riot_suppress_times_, other->riot_suppress_times_);
    std::swap(hero_soul_, other->hero_soul_);
    std::swap(god_soul_, other->god_soul_);
    std::swap(fairy_soul_, other->fairy_soul_);
    std::swap(arena_prestige_, other->arena_prestige_);
    std::swap(tower_prestige_, other->tower_prestige_);
    std::swap(fighting_power_, other->fighting_power_);
    std::swap(wanted_, other->wanted_);
    std::swap(rebel_value_, other->rebel_value_);
    std::swap(honor_, other->honor_);
    std::swap(cur_contribution_, other->cur_contribution_);
    std::swap(world_boss_battle_times_, other->world_boss_battle_times_);
    std::swap(guild_fb_reward_chapter_, other->guild_fb_reward_chapter_);
    std::swap(last_login_time_, other->last_login_time_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(total_online_time_, other->total_online_time_);
    std::swap(login_times_, other->login_times_);
    std::swap(last_stamina_recover_time_, other->last_stamina_recover_time_);
    std::swap(last_energy_recover_time_, other->last_energy_recover_time_);
    std::swap(last_wanted_recover_time_, other->last_wanted_recover_time_);
    formation_pro_list_.Swap(&other->formation_pro_list_);
    std::swap(once_flag_list_, other->once_flag_list_);
    std::swap(guide_x_, other->guide_x_);
    std::swap(guide_y_, other->guide_y_);
    guide_list_.Swap(&other->guide_list_);
    std::swap(duobao_peace_over_time_, other->duobao_peace_over_time_);
    std::swap(leave_guild_time_, other->leave_guild_time_);
    std::swap(last_activity_notice_id_, other->last_activity_notice_id_);
    activation_code_take_record_.Swap(&other->activation_code_take_record_);
    std::swap(friendship_point_, other->friendship_point_);
    std::swap(today_friendship_point_, other->today_friendship_point_);
    std::swap(endless_stone_, other->endless_stone_);
    std::swap(nobility_level_, other->nobility_level_);
    std::swap(update_times_, other->update_times_);
    std::swap(total_recharge_amount_, other->total_recharge_amount_);
    std::swap(gem_coin_, other->gem_coin_);
    std::swap(destiny_coin_, other->destiny_coin_);
    std::swap(star_soul_, other->star_soul_);
    std::swap(turntable_score_, other->turntable_score_);
    std::swap(turntable_activity_data_id_, other->turntable_activity_data_id_);
    std::swap(today_used_help_battle_times_, other->today_used_help_battle_times_);
    std::swap(role_login_days_, other->role_login_days_);
    std::swap(crystal_, other->crystal_);
    std::swap(last_login_time_ex_, other->last_login_time_ex_);
    std::swap(last_logout_time_ex_, other->last_logout_time_ex_);
    std::swap(create_role_time_, other->create_role_time_);
    std::swap(is_already_take_closed_test_rebate_, other->is_already_take_closed_test_rebate_);
    std::swap(score_match_honor_, other->score_match_honor_);
    std::swap(resource_war_score_, other->resource_war_score_);
    std::swap(ycoin_, other->ycoin_);
    std::swap(today_chat_times_, other->today_chat_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBaseInfo_descriptor_;
  metadata.reflection = RoleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePVPData::kTodayBattleTimesFieldNumber;
const int RolePVPData::kWeekBattleTimesFieldNumber;
const int RolePVPData::kScoreFieldNumber;
const int RolePVPData::kWinTimesFieldNumber;
const int RolePVPData::kTotalBattleTimesFieldNumber;
const int RolePVPData::kDailyRewardTakeRecordFieldNumber;
const int RolePVPData::kWeeklyRewardTakeRecordFieldNumber;
const int RolePVPData::kLastWeekRankFieldNumber;
#endif  // !_MSC_VER

RolePVPData::RolePVPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RolePVPData::InitAsDefaultInstance() {
}

RolePVPData::RolePVPData(const RolePVPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RolePVPData::SharedCtor() {
  _cached_size_ = 0;
  today_battle_times_ = 0u;
  week_battle_times_ = 0u;
  score_ = 0u;
  win_times_ = 0u;
  total_battle_times_ = 0u;
  last_week_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePVPData::~RolePVPData() {
  SharedDtor();
}

void RolePVPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RolePVPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePVPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePVPData_descriptor_;
}

const RolePVPData& RolePVPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RolePVPData* RolePVPData::default_instance_ = NULL;

RolePVPData* RolePVPData::New() const {
  return new RolePVPData;
}

void RolePVPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_battle_times_ = 0u;
    week_battle_times_ = 0u;
    score_ = 0u;
    win_times_ = 0u;
    total_battle_times_ = 0u;
    last_week_rank_ = 0u;
  }
  daily_reward_take_record_.Clear();
  weekly_reward_take_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePVPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_battle_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_battle_times_)));
          set_has_today_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_week_battle_times;
        break;
      }

      // optional uint32 week_battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_battle_times_)));
          set_has_week_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win_times;
        break;
      }

      // optional uint32 win_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_times_)));
          set_has_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_battle_times;
        break;
      }

      // optional uint32 total_battle_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_battle_times_)));
          set_has_total_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_reward_take_record;
        break;
      }

      // repeated uint32 daily_reward_take_record = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_reward_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_daily_reward_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daily_reward_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_reward_take_record;
        if (input->ExpectTag(56)) goto parse_weekly_reward_take_record;
        break;
      }

      // repeated uint32 weekly_reward_take_record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekly_reward_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_weekly_reward_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_weekly_reward_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_weekly_reward_take_record;
        if (input->ExpectTag(64)) goto parse_last_week_rank;
        break;
      }

      // optional uint32 last_week_rank = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_week_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_week_rank_)));
          set_has_last_week_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RolePVPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_battle_times(), output);
  }

  // optional uint32 week_battle_times = 2;
  if (has_week_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->week_battle_times(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // optional uint32 win_times = 4;
  if (has_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->win_times(), output);
  }

  // optional uint32 total_battle_times = 5;
  if (has_total_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_battle_times(), output);
  }

  // repeated uint32 daily_reward_take_record = 6;
  for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->daily_reward_take_record(i), output);
  }

  // repeated uint32 weekly_reward_take_record = 7;
  for (int i = 0; i < this->weekly_reward_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->weekly_reward_take_record(i), output);
  }

  // optional uint32 last_week_rank = 8;
  if (has_last_week_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_week_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RolePVPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_battle_times(), target);
  }

  // optional uint32 week_battle_times = 2;
  if (has_week_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->week_battle_times(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  // optional uint32 win_times = 4;
  if (has_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->win_times(), target);
  }

  // optional uint32 total_battle_times = 5;
  if (has_total_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_battle_times(), target);
  }

  // repeated uint32 daily_reward_take_record = 6;
  for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->daily_reward_take_record(i), target);
  }

  // repeated uint32 weekly_reward_take_record = 7;
  for (int i = 0; i < this->weekly_reward_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->weekly_reward_take_record(i), target);
  }

  // optional uint32 last_week_rank = 8;
  if (has_last_week_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_week_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RolePVPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_battle_times = 1;
    if (has_today_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_battle_times());
    }

    // optional uint32 week_battle_times = 2;
    if (has_week_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_battle_times());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 win_times = 4;
    if (has_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_times());
    }

    // optional uint32 total_battle_times = 5;
    if (has_total_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_battle_times());
    }

    // optional uint32 last_week_rank = 8;
    if (has_last_week_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_week_rank());
    }

  }
  // repeated uint32 daily_reward_take_record = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_reward_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->daily_reward_take_record(i));
    }
    total_size += 1 * this->daily_reward_take_record_size() + data_size;
  }

  // repeated uint32 weekly_reward_take_record = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->weekly_reward_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->weekly_reward_take_record(i));
    }
    total_size += 1 * this->weekly_reward_take_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePVPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePVPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePVPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePVPData::MergeFrom(const RolePVPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_reward_take_record_.MergeFrom(from.daily_reward_take_record_);
  weekly_reward_take_record_.MergeFrom(from.weekly_reward_take_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_battle_times()) {
      set_today_battle_times(from.today_battle_times());
    }
    if (from.has_week_battle_times()) {
      set_week_battle_times(from.week_battle_times());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_win_times()) {
      set_win_times(from.win_times());
    }
    if (from.has_total_battle_times()) {
      set_total_battle_times(from.total_battle_times());
    }
    if (from.has_last_week_rank()) {
      set_last_week_rank(from.last_week_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePVPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePVPData::CopyFrom(const RolePVPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePVPData::IsInitialized() const {

  return true;
}

void RolePVPData::Swap(RolePVPData* other) {
  if (other != this) {
    std::swap(today_battle_times_, other->today_battle_times_);
    std::swap(week_battle_times_, other->week_battle_times_);
    std::swap(score_, other->score_);
    std::swap(win_times_, other->win_times_);
    std::swap(total_battle_times_, other->total_battle_times_);
    daily_reward_take_record_.Swap(&other->daily_reward_take_record_);
    weekly_reward_take_record_.Swap(&other->weekly_reward_take_record_);
    std::swap(last_week_rank_, other->last_week_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePVPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePVPData_descriptor_;
  metadata.reflection = RolePVPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kIdFieldNumber;
const int TitleData::kOverTimeFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  over_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    over_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_over_time;
        break;
      }

      // optional uint32 over_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &over_time_)));
          set_has_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 over_time = 2;
  if (has_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->over_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 over_time = 2;
  if (has_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->over_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 over_time = 2;
    if (has_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->over_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_over_time()) {
      set_over_time(from.over_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {

  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(over_time_, other->over_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTitleInfo::kCurUseTitleIdFieldNumber;
const int RoleTitleInfo::kTitleListFieldNumber;
const int RoleTitleInfo::kCurUseNicknameIdFieldNumber;
#endif  // !_MSC_VER

RoleTitleInfo::RoleTitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleTitleInfo::InitAsDefaultInstance() {
}

RoleTitleInfo::RoleTitleInfo(const RoleTitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleTitleInfo::SharedCtor() {
  _cached_size_ = 0;
  cur_use_title_id_ = 0u;
  cur_use_nickname_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTitleInfo::~RoleTitleInfo() {
  SharedDtor();
}

void RoleTitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleTitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTitleInfo_descriptor_;
}

const RoleTitleInfo& RoleTitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleTitleInfo* RoleTitleInfo::default_instance_ = NULL;

RoleTitleInfo* RoleTitleInfo::New() const {
  return new RoleTitleInfo;
}

void RoleTitleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_use_title_id_ = 0u;
    cur_use_nickname_id_ = 0u;
  }
  title_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_use_title_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_use_title_id_)));
          set_has_cur_use_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title_list;
        break;
      }

      // repeated .PB.TitleData title_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title_list;
        if (input->ExpectTag(24)) goto parse_cur_use_nickname_id;
        break;
      }

      // optional uint32 cur_use_nickname_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_use_nickname_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_use_nickname_id_)));
          set_has_cur_use_nickname_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleTitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_use_title_id = 1;
  if (has_cur_use_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_use_title_id(), output);
  }

  // repeated .PB.TitleData title_list = 2;
  for (int i = 0; i < this->title_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title_list(i), output);
  }

  // optional uint32 cur_use_nickname_id = 3;
  if (has_cur_use_nickname_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_use_nickname_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleTitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_use_title_id = 1;
  if (has_cur_use_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_use_title_id(), target);
  }

  // repeated .PB.TitleData title_list = 2;
  for (int i = 0; i < this->title_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title_list(i), target);
  }

  // optional uint32 cur_use_nickname_id = 3;
  if (has_cur_use_nickname_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_use_nickname_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleTitleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_use_title_id = 1;
    if (has_cur_use_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_use_title_id());
    }

    // optional uint32 cur_use_nickname_id = 3;
    if (has_cur_use_nickname_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_use_nickname_id());
    }

  }
  // repeated .PB.TitleData title_list = 2;
  total_size += 1 * this->title_list_size();
  for (int i = 0; i < this->title_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTitleInfo::MergeFrom(const RoleTitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_list_.MergeFrom(from.title_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_use_title_id()) {
      set_cur_use_title_id(from.cur_use_title_id());
    }
    if (from.has_cur_use_nickname_id()) {
      set_cur_use_nickname_id(from.cur_use_nickname_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTitleInfo::CopyFrom(const RoleTitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTitleInfo::IsInitialized() const {

  return true;
}

void RoleTitleInfo::Swap(RoleTitleInfo* other) {
  if (other != this) {
    std::swap(cur_use_title_id_, other->cur_use_title_id_);
    title_list_.Swap(&other->title_list_);
    std::swap(cur_use_nickname_id_, other->cur_use_nickname_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTitleInfo_descriptor_;
  metadata.reflection = RoleTitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEndlessLandInfo::kIsTodayFirstBattleFieldNumber;
const int RoleEndlessLandInfo::kCurWaveFieldNumber;
const int RoleEndlessLandInfo::kTodayWaveRecordFieldNumber;
const int RoleEndlessLandInfo::kCurWaveKillNumFieldNumber;
const int RoleEndlessLandInfo::kHistoryWaveRecordFieldNumber;
const int RoleEndlessLandInfo::kCurKeepKillNumFieldNumber;
const int RoleEndlessLandInfo::kKeepKillNumRecordFieldNumber;
const int RoleEndlessLandInfo::kTodayCollisionRewardTimesFieldNumber;
const int RoleEndlessLandInfo::kKeepKillRewardRecordFieldNumber;
const int RoleEndlessLandInfo::kLastTakeContinueKillRewardFieldNumber;
const int RoleEndlessLandInfo::kIsFirstBattleFieldNumber;
const int RoleEndlessLandInfo::kTodayBattleTimesFieldNumber;
#endif  // !_MSC_VER

RoleEndlessLandInfo::RoleEndlessLandInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEndlessLandInfo::InitAsDefaultInstance() {
}

RoleEndlessLandInfo::RoleEndlessLandInfo(const RoleEndlessLandInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEndlessLandInfo::SharedCtor() {
  _cached_size_ = 0;
  is_today_first_battle_ = 0u;
  cur_wave_ = 0u;
  today_wave_record_ = 0u;
  cur_wave_kill_num_ = 0u;
  history_wave_record_ = 0u;
  cur_keep_kill_num_ = 0u;
  keep_kill_num_record_ = 0u;
  today_collision_reward_times_ = 0u;
  last_take_continue_kill_reward_ = 0u;
  is_first_battle_ = 0u;
  today_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEndlessLandInfo::~RoleEndlessLandInfo() {
  SharedDtor();
}

void RoleEndlessLandInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEndlessLandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEndlessLandInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEndlessLandInfo_descriptor_;
}

const RoleEndlessLandInfo& RoleEndlessLandInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleEndlessLandInfo* RoleEndlessLandInfo::default_instance_ = NULL;

RoleEndlessLandInfo* RoleEndlessLandInfo::New() const {
  return new RoleEndlessLandInfo;
}

void RoleEndlessLandInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_today_first_battle_ = 0u;
    cur_wave_ = 0u;
    today_wave_record_ = 0u;
    cur_wave_kill_num_ = 0u;
    history_wave_record_ = 0u;
    cur_keep_kill_num_ = 0u;
    keep_kill_num_record_ = 0u;
    today_collision_reward_times_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    last_take_continue_kill_reward_ = 0u;
    is_first_battle_ = 0u;
    today_battle_times_ = 0u;
  }
  keep_kill_reward_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEndlessLandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_today_first_battle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_today_first_battle_)));
          set_has_is_today_first_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_wave;
        break;
      }

      // optional uint32 cur_wave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_wave_)));
          set_has_cur_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_wave_record;
        break;
      }

      // optional uint32 today_wave_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_wave_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_wave_record_)));
          set_has_today_wave_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_wave_kill_num;
        break;
      }

      // optional uint32 cur_wave_kill_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_wave_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_wave_kill_num_)));
          set_has_cur_wave_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_history_wave_record;
        break;
      }

      // optional uint32 history_wave_record = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_wave_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_wave_record_)));
          set_has_history_wave_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_keep_kill_num;
        break;
      }

      // optional uint32 cur_keep_kill_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_keep_kill_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_keep_kill_num_)));
          set_has_cur_keep_kill_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_keep_kill_num_record;
        break;
      }

      // optional uint32 keep_kill_num_record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_kill_num_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keep_kill_num_record_)));
          set_has_keep_kill_num_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_today_collision_reward_times;
        break;
      }

      // optional uint32 today_collision_reward_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_collision_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_collision_reward_times_)));
          set_has_today_collision_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_keep_kill_reward_record;
        break;
      }

      // repeated uint32 keep_kill_reward_record = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_kill_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_keep_kill_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_keep_kill_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_keep_kill_reward_record;
        if (input->ExpectTag(80)) goto parse_last_take_continue_kill_reward;
        break;
      }

      // optional uint32 last_take_continue_kill_reward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_take_continue_kill_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_take_continue_kill_reward_)));
          set_has_last_take_continue_kill_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_first_battle;
        break;
      }

      // optional uint32 is_first_battle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_first_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_first_battle_)));
          set_has_is_first_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_today_battle_times;
        break;
      }

      // optional uint32 today_battle_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_battle_times_)));
          set_has_today_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEndlessLandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_today_first_battle = 1;
  if (has_is_today_first_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_today_first_battle(), output);
  }

  // optional uint32 cur_wave = 2;
  if (has_cur_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_wave(), output);
  }

  // optional uint32 today_wave_record = 3;
  if (has_today_wave_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_wave_record(), output);
  }

  // optional uint32 cur_wave_kill_num = 4;
  if (has_cur_wave_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_wave_kill_num(), output);
  }

  // optional uint32 history_wave_record = 5;
  if (has_history_wave_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->history_wave_record(), output);
  }

  // optional uint32 cur_keep_kill_num = 6;
  if (has_cur_keep_kill_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_keep_kill_num(), output);
  }

  // optional uint32 keep_kill_num_record = 7;
  if (has_keep_kill_num_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->keep_kill_num_record(), output);
  }

  // optional uint32 today_collision_reward_times = 8;
  if (has_today_collision_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->today_collision_reward_times(), output);
  }

  // repeated uint32 keep_kill_reward_record = 9;
  for (int i = 0; i < this->keep_kill_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->keep_kill_reward_record(i), output);
  }

  // optional uint32 last_take_continue_kill_reward = 10;
  if (has_last_take_continue_kill_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_take_continue_kill_reward(), output);
  }

  // optional uint32 is_first_battle = 11;
  if (has_is_first_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->is_first_battle(), output);
  }

  // optional uint32 today_battle_times = 12;
  if (has_today_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->today_battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEndlessLandInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_today_first_battle = 1;
  if (has_is_today_first_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_today_first_battle(), target);
  }

  // optional uint32 cur_wave = 2;
  if (has_cur_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_wave(), target);
  }

  // optional uint32 today_wave_record = 3;
  if (has_today_wave_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_wave_record(), target);
  }

  // optional uint32 cur_wave_kill_num = 4;
  if (has_cur_wave_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_wave_kill_num(), target);
  }

  // optional uint32 history_wave_record = 5;
  if (has_history_wave_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->history_wave_record(), target);
  }

  // optional uint32 cur_keep_kill_num = 6;
  if (has_cur_keep_kill_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_keep_kill_num(), target);
  }

  // optional uint32 keep_kill_num_record = 7;
  if (has_keep_kill_num_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->keep_kill_num_record(), target);
  }

  // optional uint32 today_collision_reward_times = 8;
  if (has_today_collision_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->today_collision_reward_times(), target);
  }

  // repeated uint32 keep_kill_reward_record = 9;
  for (int i = 0; i < this->keep_kill_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->keep_kill_reward_record(i), target);
  }

  // optional uint32 last_take_continue_kill_reward = 10;
  if (has_last_take_continue_kill_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_take_continue_kill_reward(), target);
  }

  // optional uint32 is_first_battle = 11;
  if (has_is_first_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->is_first_battle(), target);
  }

  // optional uint32 today_battle_times = 12;
  if (has_today_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->today_battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEndlessLandInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_today_first_battle = 1;
    if (has_is_today_first_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_today_first_battle());
    }

    // optional uint32 cur_wave = 2;
    if (has_cur_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_wave());
    }

    // optional uint32 today_wave_record = 3;
    if (has_today_wave_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_wave_record());
    }

    // optional uint32 cur_wave_kill_num = 4;
    if (has_cur_wave_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_wave_kill_num());
    }

    // optional uint32 history_wave_record = 5;
    if (has_history_wave_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_wave_record());
    }

    // optional uint32 cur_keep_kill_num = 6;
    if (has_cur_keep_kill_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_keep_kill_num());
    }

    // optional uint32 keep_kill_num_record = 7;
    if (has_keep_kill_num_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keep_kill_num_record());
    }

    // optional uint32 today_collision_reward_times = 8;
    if (has_today_collision_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_collision_reward_times());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 last_take_continue_kill_reward = 10;
    if (has_last_take_continue_kill_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_take_continue_kill_reward());
    }

    // optional uint32 is_first_battle = 11;
    if (has_is_first_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_first_battle());
    }

    // optional uint32 today_battle_times = 12;
    if (has_today_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_battle_times());
    }

  }
  // repeated uint32 keep_kill_reward_record = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->keep_kill_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->keep_kill_reward_record(i));
    }
    total_size += 1 * this->keep_kill_reward_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEndlessLandInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEndlessLandInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEndlessLandInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEndlessLandInfo::MergeFrom(const RoleEndlessLandInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  keep_kill_reward_record_.MergeFrom(from.keep_kill_reward_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_today_first_battle()) {
      set_is_today_first_battle(from.is_today_first_battle());
    }
    if (from.has_cur_wave()) {
      set_cur_wave(from.cur_wave());
    }
    if (from.has_today_wave_record()) {
      set_today_wave_record(from.today_wave_record());
    }
    if (from.has_cur_wave_kill_num()) {
      set_cur_wave_kill_num(from.cur_wave_kill_num());
    }
    if (from.has_history_wave_record()) {
      set_history_wave_record(from.history_wave_record());
    }
    if (from.has_cur_keep_kill_num()) {
      set_cur_keep_kill_num(from.cur_keep_kill_num());
    }
    if (from.has_keep_kill_num_record()) {
      set_keep_kill_num_record(from.keep_kill_num_record());
    }
    if (from.has_today_collision_reward_times()) {
      set_today_collision_reward_times(from.today_collision_reward_times());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_last_take_continue_kill_reward()) {
      set_last_take_continue_kill_reward(from.last_take_continue_kill_reward());
    }
    if (from.has_is_first_battle()) {
      set_is_first_battle(from.is_first_battle());
    }
    if (from.has_today_battle_times()) {
      set_today_battle_times(from.today_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEndlessLandInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEndlessLandInfo::CopyFrom(const RoleEndlessLandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEndlessLandInfo::IsInitialized() const {

  return true;
}

void RoleEndlessLandInfo::Swap(RoleEndlessLandInfo* other) {
  if (other != this) {
    std::swap(is_today_first_battle_, other->is_today_first_battle_);
    std::swap(cur_wave_, other->cur_wave_);
    std::swap(today_wave_record_, other->today_wave_record_);
    std::swap(cur_wave_kill_num_, other->cur_wave_kill_num_);
    std::swap(history_wave_record_, other->history_wave_record_);
    std::swap(cur_keep_kill_num_, other->cur_keep_kill_num_);
    std::swap(keep_kill_num_record_, other->keep_kill_num_record_);
    std::swap(today_collision_reward_times_, other->today_collision_reward_times_);
    keep_kill_reward_record_.Swap(&other->keep_kill_reward_record_);
    std::swap(last_take_continue_kill_reward_, other->last_take_continue_kill_reward_);
    std::swap(is_first_battle_, other->is_first_battle_);
    std::swap(today_battle_times_, other->today_battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEndlessLandInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEndlessLandInfo_descriptor_;
  metadata.reflection = RoleEndlessLandInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGuildData::kTakeChapterRewardRecordFieldNumber;
#endif  // !_MSC_VER

RoleGuildData::RoleGuildData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleGuildData::InitAsDefaultInstance() {
}

RoleGuildData::RoleGuildData(const RoleGuildData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleGuildData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGuildData::~RoleGuildData() {
  SharedDtor();
}

void RoleGuildData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleGuildData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGuildData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGuildData_descriptor_;
}

const RoleGuildData& RoleGuildData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleGuildData* RoleGuildData::default_instance_ = NULL;

RoleGuildData* RoleGuildData::New() const {
  return new RoleGuildData;
}

void RoleGuildData::Clear() {
  take_chapter_reward_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGuildData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 take_chapter_reward_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_chapter_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_take_chapter_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_take_chapter_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_take_chapter_reward_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleGuildData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 take_chapter_reward_record = 1;
  for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->take_chapter_reward_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleGuildData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 take_chapter_reward_record = 1;
  for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->take_chapter_reward_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleGuildData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 take_chapter_reward_record = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->take_chapter_reward_record(i));
    }
    total_size += 1 * this->take_chapter_reward_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGuildData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGuildData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGuildData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGuildData::MergeFrom(const RoleGuildData& from) {
  GOOGLE_CHECK_NE(&from, this);
  take_chapter_reward_record_.MergeFrom(from.take_chapter_reward_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGuildData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGuildData::CopyFrom(const RoleGuildData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGuildData::IsInitialized() const {

  return true;
}

void RoleGuildData::Swap(RoleGuildData* other) {
  if (other != this) {
    take_chapter_reward_record_.Swap(&other->take_chapter_reward_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGuildData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGuildData_descriptor_;
  metadata.reflection = RoleGuildData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LuxurySignInData::kSignInIdFieldNumber;
const int LuxurySignInData::kStatusFieldNumber;
const int LuxurySignInData::kRewarIdFieldNumber;
#endif  // !_MSC_VER

LuxurySignInData::LuxurySignInData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LuxurySignInData::InitAsDefaultInstance() {
}

LuxurySignInData::LuxurySignInData(const LuxurySignInData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LuxurySignInData::SharedCtor() {
  _cached_size_ = 0;
  sign_in_id_ = 0u;
  status_ = 0u;
  rewar_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LuxurySignInData::~LuxurySignInData() {
  SharedDtor();
}

void LuxurySignInData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LuxurySignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LuxurySignInData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LuxurySignInData_descriptor_;
}

const LuxurySignInData& LuxurySignInData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LuxurySignInData* LuxurySignInData::default_instance_ = NULL;

LuxurySignInData* LuxurySignInData::New() const {
  return new LuxurySignInData;
}

void LuxurySignInData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sign_in_id_ = 0u;
    status_ = 0u;
    rewar_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LuxurySignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sign_in_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sign_in_id_)));
          set_has_sign_in_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewar_id;
        break;
      }

      // optional uint32 rewar_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewar_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewar_id_)));
          set_has_rewar_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LuxurySignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sign_in_id = 1;
  if (has_sign_in_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sign_in_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // optional uint32 rewar_id = 3;
  if (has_rewar_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewar_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LuxurySignInData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sign_in_id = 1;
  if (has_sign_in_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sign_in_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  // optional uint32 rewar_id = 3;
  if (has_rewar_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewar_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LuxurySignInData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sign_in_id = 1;
    if (has_sign_in_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sign_in_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 rewar_id = 3;
    if (has_rewar_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewar_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LuxurySignInData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LuxurySignInData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LuxurySignInData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LuxurySignInData::MergeFrom(const LuxurySignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign_in_id()) {
      set_sign_in_id(from.sign_in_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_rewar_id()) {
      set_rewar_id(from.rewar_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LuxurySignInData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LuxurySignInData::CopyFrom(const LuxurySignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LuxurySignInData::IsInitialized() const {

  return true;
}

void LuxurySignInData::Swap(LuxurySignInData* other) {
  if (other != this) {
    std::swap(sign_in_id_, other->sign_in_id_);
    std::swap(status_, other->status_);
    std::swap(rewar_id_, other->rewar_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LuxurySignInData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LuxurySignInData_descriptor_;
  metadata.reflection = LuxurySignInData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLuxurySignInData::kSignInDataListFieldNumber;
#endif  // !_MSC_VER

PlayerLuxurySignInData::PlayerLuxurySignInData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLuxurySignInData::InitAsDefaultInstance() {
}

PlayerLuxurySignInData::PlayerLuxurySignInData(const PlayerLuxurySignInData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLuxurySignInData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLuxurySignInData::~PlayerLuxurySignInData() {
  SharedDtor();
}

void PlayerLuxurySignInData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLuxurySignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLuxurySignInData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLuxurySignInData_descriptor_;
}

const PlayerLuxurySignInData& PlayerLuxurySignInData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

PlayerLuxurySignInData* PlayerLuxurySignInData::default_instance_ = NULL;

PlayerLuxurySignInData* PlayerLuxurySignInData::New() const {
  return new PlayerLuxurySignInData;
}

void PlayerLuxurySignInData::Clear() {
  sign_in_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLuxurySignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.LuxurySignInData sign_in_data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign_in_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sign_in_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sign_in_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLuxurySignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.LuxurySignInData sign_in_data_list = 1;
  for (int i = 0; i < this->sign_in_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sign_in_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLuxurySignInData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.LuxurySignInData sign_in_data_list = 1;
  for (int i = 0; i < this->sign_in_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sign_in_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLuxurySignInData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.LuxurySignInData sign_in_data_list = 1;
  total_size += 1 * this->sign_in_data_list_size();
  for (int i = 0; i < this->sign_in_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sign_in_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLuxurySignInData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLuxurySignInData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLuxurySignInData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLuxurySignInData::MergeFrom(const PlayerLuxurySignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sign_in_data_list_.MergeFrom(from.sign_in_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLuxurySignInData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLuxurySignInData::CopyFrom(const PlayerLuxurySignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLuxurySignInData::IsInitialized() const {

  return true;
}

void PlayerLuxurySignInData::Swap(PlayerLuxurySignInData* other) {
  if (other != this) {
    sign_in_data_list_.Swap(&other->sign_in_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLuxurySignInData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLuxurySignInData_descriptor_;
  metadata.reflection = PlayerLuxurySignInData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gem::kIdFieldNumber;
const int Gem::kNumFieldNumber;
#endif  // !_MSC_VER

Gem::Gem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gem::InitAsDefaultInstance() {
}

Gem::Gem(const Gem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gem::~Gem() {
  SharedDtor();
}

void Gem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gem_descriptor_;
}

const Gem& Gem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Gem* Gem::default_instance_ = NULL;

Gem* Gem::New() const {
  return new Gem;
}

void Gem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gem::MergeFrom(const Gem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gem::CopyFrom(const Gem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gem::IsInitialized() const {

  return true;
}

void Gem::Swap(Gem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gem_descriptor_;
  metadata.reflection = Gem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGemInfo::kGemListFieldNumber;
const int PlayerGemInfo::kHoleOpenListFieldNumber;
const int PlayerGemInfo::kHoleInitTimeFieldNumber;
#endif  // !_MSC_VER

PlayerGemInfo::PlayerGemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGemInfo::InitAsDefaultInstance() {
}

PlayerGemInfo::PlayerGemInfo(const PlayerGemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGemInfo::SharedCtor() {
  _cached_size_ = 0;
  hole_init_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGemInfo::~PlayerGemInfo() {
  SharedDtor();
}

void PlayerGemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerGemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGemInfo_descriptor_;
}

const PlayerGemInfo& PlayerGemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

PlayerGemInfo* PlayerGemInfo::default_instance_ = NULL;

PlayerGemInfo* PlayerGemInfo::New() const {
  return new PlayerGemInfo;
}

void PlayerGemInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    hole_init_time_ = 0u;
  }
  gem_list_.Clear();
  hole_open_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Gem gem_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gem_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gem_list;
        if (input->ExpectTag(16)) goto parse_hole_open_list;
        break;
      }

      // repeated uint32 hole_open_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_open_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hole_open_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hole_open_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hole_open_list;
        if (input->ExpectTag(24)) goto parse_hole_init_time;
        break;
      }

      // optional uint32 hole_init_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hole_init_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hole_init_time_)));
          set_has_hole_init_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Gem gem_list = 1;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gem_list(i), output);
  }

  // repeated uint32 hole_open_list = 2;
  for (int i = 0; i < this->hole_open_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hole_open_list(i), output);
  }

  // optional uint32 hole_init_time = 3;
  if (has_hole_init_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hole_init_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Gem gem_list = 1;
  for (int i = 0; i < this->gem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gem_list(i), target);
  }

  // repeated uint32 hole_open_list = 2;
  for (int i = 0; i < this->hole_open_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hole_open_list(i), target);
  }

  // optional uint32 hole_init_time = 3;
  if (has_hole_init_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hole_init_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 hole_init_time = 3;
    if (has_hole_init_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hole_init_time());
    }

  }
  // repeated .PB.Gem gem_list = 1;
  total_size += 1 * this->gem_list_size();
  for (int i = 0; i < this->gem_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gem_list(i));
  }

  // repeated uint32 hole_open_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hole_open_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hole_open_list(i));
    }
    total_size += 1 * this->hole_open_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGemInfo::MergeFrom(const PlayerGemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gem_list_.MergeFrom(from.gem_list_);
  hole_open_list_.MergeFrom(from.hole_open_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_hole_init_time()) {
      set_hole_init_time(from.hole_init_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGemInfo::CopyFrom(const PlayerGemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGemInfo::IsInitialized() const {

  return true;
}

void PlayerGemInfo::Swap(PlayerGemInfo* other) {
  if (other != this) {
    gem_list_.Swap(&other->gem_list_);
    hole_open_list_.Swap(&other->hole_open_list_);
    std::swap(hole_init_time_, other->hole_init_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGemInfo_descriptor_;
  metadata.reflection = PlayerGemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEquipmentInfo::kEquipmentListFieldNumber;
#endif  // !_MSC_VER

RoleEquipmentInfo::RoleEquipmentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEquipmentInfo::InitAsDefaultInstance() {
}

RoleEquipmentInfo::RoleEquipmentInfo(const RoleEquipmentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEquipmentInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEquipmentInfo::~RoleEquipmentInfo() {
  SharedDtor();
}

void RoleEquipmentInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEquipmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEquipmentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEquipmentInfo_descriptor_;
}

const RoleEquipmentInfo& RoleEquipmentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleEquipmentInfo* RoleEquipmentInfo::default_instance_ = NULL;

RoleEquipmentInfo* RoleEquipmentInfo::New() const {
  return new RoleEquipmentInfo;
}

void RoleEquipmentInfo::Clear() {
  equipment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEquipmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Equipment equipment_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipment_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEquipmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Equipment equipment_list = 1;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEquipmentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Equipment equipment_list = 1;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEquipmentInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Equipment equipment_list = 1;
  total_size += 1 * this->equipment_list_size();
  for (int i = 0; i < this->equipment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEquipmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEquipmentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEquipmentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEquipmentInfo::MergeFrom(const RoleEquipmentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_list_.MergeFrom(from.equipment_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEquipmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEquipmentInfo::CopyFrom(const RoleEquipmentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEquipmentInfo::IsInitialized() const {

  for (int i = 0; i < equipment_list_size(); i++) {
    if (!this->equipment_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleEquipmentInfo::Swap(RoleEquipmentInfo* other) {
  if (other != this) {
    equipment_list_.Swap(&other->equipment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEquipmentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEquipmentInfo_descriptor_;
  metadata.reflection = RoleEquipmentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Formation::kHeroIdFieldNumber;
const int Formation::kEquipmentListFieldNumber;
const int Formation::kTreasureListFieldNumber;
const int Formation::kGemListFieldNumber;
const int Formation::kCardListFieldNumber;
const int Formation::kBlessSpriteIdFieldNumber;
#endif  // !_MSC_VER

Formation::Formation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Formation::InitAsDefaultInstance() {
}

Formation::Formation(const Formation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Formation::SharedCtor() {
  _cached_size_ = 0;
  hero_id_ = 0u;
  bless_sprite_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Formation::~Formation() {
  SharedDtor();
}

void Formation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Formation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Formation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Formation_descriptor_;
}

const Formation& Formation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Formation* Formation::default_instance_ = NULL;

Formation* Formation::New() const {
  return new Formation;
}

void Formation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hero_id_ = 0u;
    bless_sprite_id_ = 0u;
  }
  equipment_list_.Clear();
  treasure_list_.Clear();
  gem_list_.Clear();
  card_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Formation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 hero_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
          set_has_hero_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment_list;
        break;
      }

      // repeated uint32 equipment_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equipment_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_equipment_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_equipment_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equipment_list;
        if (input->ExpectTag(24)) goto parse_treasure_list;
        break;
      }

      // repeated uint32 treasure_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasure_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_treasure_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_treasure_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_treasure_list;
        if (input->ExpectTag(32)) goto parse_gem_list;
        break;
      }

      // repeated uint32 gem_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gem_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_gem_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gem_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gem_list;
        if (input->ExpectTag(40)) goto parse_card_list;
        break;
      }

      // repeated uint32 card_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_card_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_card_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_card_list;
        if (input->ExpectTag(48)) goto parse_bless_sprite_id;
        break;
      }

      // optional uint32 bless_sprite_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bless_sprite_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bless_sprite_id_)));
          set_has_bless_sprite_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Formation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // repeated uint32 equipment_list = 2;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->equipment_list(i), output);
  }

  // repeated uint32 treasure_list = 3;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->treasure_list(i), output);
  }

  // repeated uint32 gem_list = 4;
  for (int i = 0; i < this->gem_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->gem_list(i), output);
  }

  // repeated uint32 card_list = 5;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->card_list(i), output);
  }

  // optional uint32 bless_sprite_id = 6;
  if (has_bless_sprite_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bless_sprite_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Formation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 hero_id = 1;
  if (has_hero_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // repeated uint32 equipment_list = 2;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->equipment_list(i), target);
  }

  // repeated uint32 treasure_list = 3;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->treasure_list(i), target);
  }

  // repeated uint32 gem_list = 4;
  for (int i = 0; i < this->gem_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->gem_list(i), target);
  }

  // repeated uint32 card_list = 5;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->card_list(i), target);
  }

  // optional uint32 bless_sprite_id = 6;
  if (has_bless_sprite_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bless_sprite_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Formation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 hero_id = 1;
    if (has_hero_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 bless_sprite_id = 6;
    if (has_bless_sprite_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bless_sprite_id());
    }

  }
  // repeated uint32 equipment_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->equipment_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->equipment_list(i));
    }
    total_size += 1 * this->equipment_list_size() + data_size;
  }

  // repeated uint32 treasure_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->treasure_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->treasure_list(i));
    }
    total_size += 1 * this->treasure_list_size() + data_size;
  }

  // repeated uint32 gem_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->gem_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gem_list(i));
    }
    total_size += 1 * this->gem_list_size() + data_size;
  }

  // repeated uint32 card_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->card_list(i));
    }
    total_size += 1 * this->card_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Formation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Formation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Formation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Formation::MergeFrom(const Formation& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipment_list_.MergeFrom(from.equipment_list_);
  treasure_list_.MergeFrom(from.treasure_list_);
  gem_list_.MergeFrom(from.gem_list_);
  card_list_.MergeFrom(from.card_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_id()) {
      set_hero_id(from.hero_id());
    }
    if (from.has_bless_sprite_id()) {
      set_bless_sprite_id(from.bless_sprite_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Formation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Formation::CopyFrom(const Formation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Formation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Formation::Swap(Formation* other) {
  if (other != this) {
    std::swap(hero_id_, other->hero_id_);
    equipment_list_.Swap(&other->equipment_list_);
    treasure_list_.Swap(&other->treasure_list_);
    gem_list_.Swap(&other->gem_list_);
    card_list_.Swap(&other->card_list_);
    std::swap(bless_sprite_id_, other->bless_sprite_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Formation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Formation_descriptor_;
  metadata.reflection = Formation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHeroInfo::kNormalFreeSummonTimesFieldNumber;
const int RoleHeroInfo::kNormalFreeSummonTimeFieldNumber;
const int RoleHeroInfo::kHighFreeSummonTimeFieldNumber;
const int RoleHeroInfo::kHighSummonTimesFieldNumber;
const int RoleHeroInfo::kHeroListFieldNumber;
const int RoleHeroInfo::kCollectionListFieldNumber;
const int RoleHeroInfo::kReinforcementListFieldNumber;
const int RoleHeroInfo::kFormationListFieldNumber;
const int RoleHeroInfo::kTrainTimesFieldNumber;
#endif  // !_MSC_VER

RoleHeroInfo::RoleHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleHeroInfo::InitAsDefaultInstance() {
}

RoleHeroInfo::RoleHeroInfo(const RoleHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  normal_free_summon_times_ = 0u;
  normal_free_summon_time_ = 0u;
  high_free_summon_time_ = 0u;
  high_summon_times_ = 0u;
  train_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHeroInfo::~RoleHeroInfo() {
  SharedDtor();
}

void RoleHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHeroInfo_descriptor_;
}

const RoleHeroInfo& RoleHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleHeroInfo* RoleHeroInfo::default_instance_ = NULL;

RoleHeroInfo* RoleHeroInfo::New() const {
  return new RoleHeroInfo;
}

void RoleHeroInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normal_free_summon_times_ = 0u;
    normal_free_summon_time_ = 0u;
    high_free_summon_time_ = 0u;
    high_summon_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    train_times_ = 0u;
  }
  hero_list_.Clear();
  collection_list_.Clear();
  reinforcement_list_.Clear();
  formation_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 normal_free_summon_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_free_summon_times_)));
          set_has_normal_free_summon_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_normal_free_summon_time;
        break;
      }

      // required uint32 normal_free_summon_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_free_summon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normal_free_summon_time_)));
          set_has_normal_free_summon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_high_free_summon_time;
        break;
      }

      // required uint32 high_free_summon_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_free_summon_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_free_summon_time_)));
          set_has_high_free_summon_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_high_summon_times;
        break;
      }

      // required uint32 high_summon_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_summon_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_summon_times_)));
          set_has_high_summon_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hero_list;
        break;
      }

      // repeated .PB.Hero hero_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hero_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_hero_list;
        if (input->ExpectTag(48)) goto parse_collection_list;
        break;
      }

      // repeated uint32 collection_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collection_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_collection_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_collection_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_collection_list;
        if (input->ExpectTag(56)) goto parse_reinforcement_list;
        break;
      }

      // repeated uint32 reinforcement_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reinforcement_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_reinforcement_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reinforcement_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_reinforcement_list;
        if (input->ExpectTag(66)) goto parse_formation_list;
        break;
      }

      // repeated .PB.Formation formation_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formation_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formation_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_formation_list;
        if (input->ExpectTag(72)) goto parse_train_times;
        break;
      }

      // optional uint32 train_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_times_)));
          set_has_train_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 normal_free_summon_times = 1;
  if (has_normal_free_summon_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->normal_free_summon_times(), output);
  }

  // required uint32 normal_free_summon_time = 2;
  if (has_normal_free_summon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->normal_free_summon_time(), output);
  }

  // required uint32 high_free_summon_time = 3;
  if (has_high_free_summon_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->high_free_summon_time(), output);
  }

  // required uint32 high_summon_times = 4;
  if (has_high_summon_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->high_summon_times(), output);
  }

  // repeated .PB.Hero hero_list = 5;
  for (int i = 0; i < this->hero_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->hero_list(i), output);
  }

  // repeated uint32 collection_list = 6;
  for (int i = 0; i < this->collection_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->collection_list(i), output);
  }

  // repeated uint32 reinforcement_list = 7;
  for (int i = 0; i < this->reinforcement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->reinforcement_list(i), output);
  }

  // repeated .PB.Formation formation_list = 8;
  for (int i = 0; i < this->formation_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->formation_list(i), output);
  }

  // optional uint32 train_times = 9;
  if (has_train_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->train_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 normal_free_summon_times = 1;
  if (has_normal_free_summon_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->normal_free_summon_times(), target);
  }

  // required uint32 normal_free_summon_time = 2;
  if (has_normal_free_summon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->normal_free_summon_time(), target);
  }

  // required uint32 high_free_summon_time = 3;
  if (has_high_free_summon_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->high_free_summon_time(), target);
  }

  // required uint32 high_summon_times = 4;
  if (has_high_summon_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->high_summon_times(), target);
  }

  // repeated .PB.Hero hero_list = 5;
  for (int i = 0; i < this->hero_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->hero_list(i), target);
  }

  // repeated uint32 collection_list = 6;
  for (int i = 0; i < this->collection_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->collection_list(i), target);
  }

  // repeated uint32 reinforcement_list = 7;
  for (int i = 0; i < this->reinforcement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->reinforcement_list(i), target);
  }

  // repeated .PB.Formation formation_list = 8;
  for (int i = 0; i < this->formation_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->formation_list(i), target);
  }

  // optional uint32 train_times = 9;
  if (has_train_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->train_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 normal_free_summon_times = 1;
    if (has_normal_free_summon_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_free_summon_times());
    }

    // required uint32 normal_free_summon_time = 2;
    if (has_normal_free_summon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normal_free_summon_time());
    }

    // required uint32 high_free_summon_time = 3;
    if (has_high_free_summon_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_free_summon_time());
    }

    // required uint32 high_summon_times = 4;
    if (has_high_summon_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_summon_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 train_times = 9;
    if (has_train_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_times());
    }

  }
  // repeated .PB.Hero hero_list = 5;
  total_size += 1 * this->hero_list_size();
  for (int i = 0; i < this->hero_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hero_list(i));
  }

  // repeated uint32 collection_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->collection_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->collection_list(i));
    }
    total_size += 1 * this->collection_list_size() + data_size;
  }

  // repeated uint32 reinforcement_list = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->reinforcement_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reinforcement_list(i));
    }
    total_size += 1 * this->reinforcement_list_size() + data_size;
  }

  // repeated .PB.Formation formation_list = 8;
  total_size += 1 * this->formation_list_size();
  for (int i = 0; i < this->formation_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formation_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHeroInfo::MergeFrom(const RoleHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hero_list_.MergeFrom(from.hero_list_);
  collection_list_.MergeFrom(from.collection_list_);
  reinforcement_list_.MergeFrom(from.reinforcement_list_);
  formation_list_.MergeFrom(from.formation_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normal_free_summon_times()) {
      set_normal_free_summon_times(from.normal_free_summon_times());
    }
    if (from.has_normal_free_summon_time()) {
      set_normal_free_summon_time(from.normal_free_summon_time());
    }
    if (from.has_high_free_summon_time()) {
      set_high_free_summon_time(from.high_free_summon_time());
    }
    if (from.has_high_summon_times()) {
      set_high_summon_times(from.high_summon_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_train_times()) {
      set_train_times(from.train_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHeroInfo::CopyFrom(const RoleHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHeroInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < hero_list_size(); i++) {
    if (!this->hero_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < formation_list_size(); i++) {
    if (!this->formation_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleHeroInfo::Swap(RoleHeroInfo* other) {
  if (other != this) {
    std::swap(normal_free_summon_times_, other->normal_free_summon_times_);
    std::swap(normal_free_summon_time_, other->normal_free_summon_time_);
    std::swap(high_free_summon_time_, other->high_free_summon_time_);
    std::swap(high_summon_times_, other->high_summon_times_);
    hero_list_.Swap(&other->hero_list_);
    collection_list_.Swap(&other->collection_list_);
    reinforcement_list_.Swap(&other->reinforcement_list_);
    formation_list_.Swap(&other->formation_list_);
    std::swap(train_times_, other->train_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHeroInfo_descriptor_;
  metadata.reflection = RoleHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTreasureInfo::kTreasureListFieldNumber;
#endif  // !_MSC_VER

RoleTreasureInfo::RoleTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleTreasureInfo::InitAsDefaultInstance() {
}

RoleTreasureInfo::RoleTreasureInfo(const RoleTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleTreasureInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTreasureInfo::~RoleTreasureInfo() {
  SharedDtor();
}

void RoleTreasureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTreasureInfo_descriptor_;
}

const RoleTreasureInfo& RoleTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleTreasureInfo* RoleTreasureInfo::default_instance_ = NULL;

RoleTreasureInfo* RoleTreasureInfo::New() const {
  return new RoleTreasureInfo;
}

void RoleTreasureInfo::Clear() {
  treasure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Treasure treasure_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_treasure_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasure_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_treasure_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Treasure treasure_list = 1;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->treasure_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Treasure treasure_list = 1;
  for (int i = 0; i < this->treasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->treasure_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleTreasureInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Treasure treasure_list = 1;
  total_size += 1 * this->treasure_list_size();
  for (int i = 0; i < this->treasure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasure_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTreasureInfo::MergeFrom(const RoleTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasure_list_.MergeFrom(from.treasure_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTreasureInfo::CopyFrom(const RoleTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTreasureInfo::IsInitialized() const {

  for (int i = 0; i < treasure_list_size(); i++) {
    if (!this->treasure_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleTreasureInfo::Swap(RoleTreasureInfo* other) {
  if (other != this) {
    treasure_list_.Swap(&other->treasure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTreasureInfo_descriptor_;
  metadata.reflection = RoleTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleItemInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

RoleItemInfo::RoleItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleItemInfo::InitAsDefaultInstance() {
}

RoleItemInfo::RoleItemInfo(const RoleItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleItemInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleItemInfo::~RoleItemInfo() {
  SharedDtor();
}

void RoleItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleItemInfo_descriptor_;
}

const RoleItemInfo& RoleItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleItemInfo* RoleItemInfo::default_instance_ = NULL;

RoleItemInfo* RoleItemInfo::New() const {
  return new RoleItemInfo;
}

void RoleItemInfo::Clear() {
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Item item_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Item item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Item item_list = 1;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleItemInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.Item item_list = 1;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleItemInfo::MergeFrom(const RoleItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleItemInfo::CopyFrom(const RoleItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleItemInfo::IsInitialized() const {

  for (int i = 0; i < item_list_size(); i++) {
    if (!this->item_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleItemInfo::Swap(RoleItemInfo* other) {
  if (other != this) {
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleItemInfo_descriptor_;
  metadata.reflection = RoleItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailContext::kTypeFieldNumber;
const int EmailContext::kTextFieldNumber;
#endif  // !_MSC_VER

EmailContext::EmailContext()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailContext::InitAsDefaultInstance() {
}

EmailContext::EmailContext(const EmailContext& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailContext::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailContext::~EmailContext() {
  SharedDtor();
}

void EmailContext::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void EmailContext::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailContext::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailContext_descriptor_;
}

const EmailContext& EmailContext::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EmailContext* EmailContext::default_instance_ = NULL;

EmailContext* EmailContext::New() const {
  return new EmailContext;
}

void EmailContext::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailContext::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // required string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailContext::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailContext::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailContext::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailContext::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailContext* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailContext*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailContext::MergeFrom(const EmailContext& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailContext::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailContext::CopyFrom(const EmailContext& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailContext::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EmailContext::Swap(EmailContext* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailContext::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailContext_descriptor_;
  metadata.reflection = EmailContext_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmailInfo::kUidFieldNumber;
const int EmailInfo::kInfoIdFieldNumber;
const int EmailInfo::kReceiveTimeFieldNumber;
const int EmailInfo::kContextListFieldNumber;
const int EmailInfo::kTitleFieldNumber;
const int EmailInfo::kTextFieldNumber;
#endif  // !_MSC_VER

EmailInfo::EmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmailInfo::InitAsDefaultInstance() {
}

EmailInfo::EmailInfo(const EmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmailInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  receive_time_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmailInfo::~EmailInfo() {
  SharedDtor();
}

void EmailInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void EmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmailInfo_descriptor_;
}

const EmailInfo& EmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EmailInfo* EmailInfo::default_instance_ = NULL;

EmailInfo* EmailInfo::New() const {
  return new EmailInfo;
}

void EmailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    receive_time_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  context_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // required uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_receive_time;
        break;
      }

      // required uint32 receive_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_receive_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receive_time_)));
          set_has_receive_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context_list;
        break;
      }

      // repeated .PB.EmailContext context_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_context_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_context_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_context_list;
        if (input->ExpectTag(42)) goto parse_title;
        break;
      }

      // optional string title = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // required uint32 receive_time = 3;
  if (has_receive_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receive_time(), output);
  }

  // repeated .PB.EmailContext context_list = 4;
  for (int i = 0; i < this->context_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->context_list(i), output);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->title(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // required uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // required uint32 receive_time = 3;
  if (has_receive_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receive_time(), target);
  }

  // repeated .PB.EmailContext context_list = 4;
  for (int i = 0; i < this->context_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->context_list(i), target);
  }

  // optional string title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->title(), target);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // required uint32 receive_time = 3;
    if (has_receive_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receive_time());
    }

    // optional string title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated .PB.EmailContext context_list = 4;
  total_size += 1 * this->context_list_size();
  for (int i = 0; i < this->context_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->context_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmailInfo::MergeFrom(const EmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  context_list_.MergeFrom(from.context_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_receive_time()) {
      set_receive_time(from.receive_time());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailInfo::CopyFrom(const EmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < context_list_size(); i++) {
    if (!this->context_list(i).IsInitialized()) return false;
  }
  return true;
}

void EmailInfo::Swap(EmailInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(receive_time_, other->receive_time_);
    context_list_.Swap(&other->context_list_);
    std::swap(title_, other->title_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmailInfo_descriptor_;
  metadata.reflection = EmailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEmailInfo::kEmailListFieldNumber;
const int RoleEmailInfo::kIsHaveNewEmailFieldNumber;
#endif  // !_MSC_VER

RoleEmailInfo::RoleEmailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEmailInfo::InitAsDefaultInstance() {
}

RoleEmailInfo::RoleEmailInfo(const RoleEmailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEmailInfo::SharedCtor() {
  _cached_size_ = 0;
  is_have_new_email_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEmailInfo::~RoleEmailInfo() {
  SharedDtor();
}

void RoleEmailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEmailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEmailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEmailInfo_descriptor_;
}

const RoleEmailInfo& RoleEmailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleEmailInfo* RoleEmailInfo::default_instance_ = NULL;

RoleEmailInfo* RoleEmailInfo::New() const {
  return new RoleEmailInfo;
}

void RoleEmailInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_have_new_email_ = 0u;
  }
  email_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEmailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.EmailInfo email_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_email_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_email_list;
        if (input->ExpectTag(16)) goto parse_is_have_new_email;
        break;
      }

      // optional uint32 is_have_new_email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_have_new_email:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_have_new_email_)));
          set_has_is_have_new_email();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEmailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.EmailInfo email_list = 1;
  for (int i = 0; i < this->email_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->email_list(i), output);
  }

  // optional uint32 is_have_new_email = 2;
  if (has_is_have_new_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_have_new_email(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEmailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.EmailInfo email_list = 1;
  for (int i = 0; i < this->email_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->email_list(i), target);
  }

  // optional uint32 is_have_new_email = 2;
  if (has_is_have_new_email()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_have_new_email(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEmailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 is_have_new_email = 2;
    if (has_is_have_new_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_have_new_email());
    }

  }
  // repeated .PB.EmailInfo email_list = 1;
  total_size += 1 * this->email_list_size();
  for (int i = 0; i < this->email_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->email_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEmailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEmailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEmailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEmailInfo::MergeFrom(const RoleEmailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  email_list_.MergeFrom(from.email_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_have_new_email()) {
      set_is_have_new_email(from.is_have_new_email());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEmailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEmailInfo::CopyFrom(const RoleEmailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEmailInfo::IsInitialized() const {

  for (int i = 0; i < email_list_size(); i++) {
    if (!this->email_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleEmailInfo::Swap(RoleEmailInfo* other) {
  if (other != this) {
    email_list_.Swap(&other->email_list_);
    std::swap(is_have_new_email_, other->is_have_new_email_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEmailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEmailInfo_descriptor_;
  metadata.reflection = RoleEmailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapData::kStarFieldNumber;
const int MapData::kBattleTimesFieldNumber;
const int MapData::kResetTimesFieldNumber;
const int MapData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

MapData::MapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapData::InitAsDefaultInstance() {
}

MapData::MapData(const MapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapData::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  battle_times_ = 0u;
  reset_times_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapData::~MapData() {
  SharedDtor();
}

void MapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapData_descriptor_;
}

const MapData& MapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MapData* MapData::default_instance_ = NULL;

MapData* MapData::New() const {
  return new MapData;
}

void MapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    star_ = 0u;
    battle_times_ = 0u;
    reset_times_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 star = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_times;
        break;
      }

      // required uint32 battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reset_times;
        break;
      }

      // required uint32 reset_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reset_times_)));
          set_has_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 star = 1;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->star(), output);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_times(), output);
  }

  // required uint32 reset_times = 3;
  if (has_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reset_times(), output);
  }

  // required uint32 is_get_reward = 4;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 star = 1;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->star(), target);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_times(), target);
  }

  // required uint32 reset_times = 3;
  if (has_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reset_times(), target);
  }

  // required uint32 is_get_reward = 4;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 star = 1;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // required uint32 battle_times = 2;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // required uint32 reset_times = 3;
    if (has_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reset_times());
    }

    // required uint32 is_get_reward = 4;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapData::MergeFrom(const MapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_reset_times()) {
      set_reset_times(from.reset_times());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapData::CopyFrom(const MapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MapData::Swap(MapData* other) {
  if (other != this) {
    std::swap(star_, other->star_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(reset_times_, other->reset_times_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapData_descriptor_;
  metadata.reflection = MapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChapterData::kMapListFieldNumber;
const int ChapterData::kStarRewardListFieldNumber;
#endif  // !_MSC_VER

ChapterData::ChapterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChapterData::InitAsDefaultInstance() {
}

ChapterData::ChapterData(const ChapterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChapterData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChapterData::~ChapterData() {
  SharedDtor();
}

void ChapterData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChapterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChapterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChapterData_descriptor_;
}

const ChapterData& ChapterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ChapterData* ChapterData::default_instance_ = NULL;

ChapterData* ChapterData::New() const {
  return new ChapterData;
}

void ChapterData::Clear() {
  map_list_.Clear();
  star_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChapterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.MapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        break;
      }

      // repeated uint32 star_reward_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_star_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_star_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChapterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->star_reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChapterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->star_reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChapterData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.MapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  // repeated uint32 star_reward_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->star_reward_list(i));
    }
    total_size += 1 * this->star_reward_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChapterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChapterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChapterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChapterData::MergeFrom(const ChapterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  star_reward_list_.MergeFrom(from.star_reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChapterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChapterData::CopyFrom(const ChapterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterData::IsInitialized() const {

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  return true;
}

void ChapterData::Swap(ChapterData* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    star_reward_list_.Swap(&other->star_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChapterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChapterData_descriptor_;
  metadata.reflection = ChapterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MainFBData::kChapterListFieldNumber;
const int MainFBData::kTakeChapterRewardRecordFieldNumber;
#endif  // !_MSC_VER

MainFBData::MainFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MainFBData::InitAsDefaultInstance() {
}

MainFBData::MainFBData(const MainFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MainFBData::SharedCtor() {
  _cached_size_ = 0;
  take_chapter_reward_record_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainFBData::~MainFBData() {
  SharedDtor();
}

void MainFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MainFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainFBData_descriptor_;
}

const MainFBData& MainFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MainFBData* MainFBData::default_instance_ = NULL;

MainFBData* MainFBData::New() const {
  return new MainFBData;
}

void MainFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    take_chapter_reward_record_ = 0u;
  }
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ChapterData chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectTag(16)) goto parse_take_chapter_reward_record;
        break;
      }

      // optional uint32 take_chapter_reward_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_chapter_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_chapter_reward_record_)));
          set_has_take_chapter_reward_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MainFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  // optional uint32 take_chapter_reward_record = 2;
  if (has_take_chapter_reward_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->take_chapter_reward_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MainFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  // optional uint32 take_chapter_reward_record = 2;
  if (has_take_chapter_reward_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->take_chapter_reward_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MainFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 take_chapter_reward_record = 2;
    if (has_take_chapter_reward_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->take_chapter_reward_record());
    }

  }
  // repeated .PB.ChapterData chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainFBData::MergeFrom(const MainFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_take_chapter_reward_record()) {
      set_take_chapter_reward_record(from.take_chapter_reward_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainFBData::CopyFrom(const MainFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainFBData::IsInitialized() const {

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void MainFBData::Swap(MainFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(take_chapter_reward_record_, other->take_chapter_reward_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainFBData_descriptor_;
  metadata.reflection = MainFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroMapData::kBattleTimesFieldNumber;
const int HeroMapData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

HeroMapData::HeroMapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroMapData::InitAsDefaultInstance() {
}

HeroMapData::HeroMapData(const HeroMapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroMapData::SharedCtor() {
  _cached_size_ = 0;
  battle_times_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroMapData::~HeroMapData() {
  SharedDtor();
}

void HeroMapData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroMapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroMapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroMapData_descriptor_;
}

const HeroMapData& HeroMapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroMapData* HeroMapData::default_instance_ = NULL;

HeroMapData* HeroMapData::New() const {
  return new HeroMapData;
}

void HeroMapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_times_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroMapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battle_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroMapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battle_times = 1;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle_times(), output);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroMapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battle_times = 1;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle_times(), target);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroMapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battle_times = 1;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // required uint32 is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroMapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroMapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroMapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroMapData::MergeFrom(const HeroMapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroMapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroMapData::CopyFrom(const HeroMapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroMapData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HeroMapData::Swap(HeroMapData* other) {
  if (other != this) {
    std::swap(battle_times_, other->battle_times_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroMapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroMapData_descriptor_;
  metadata.reflection = HeroMapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroFBChapter::kMapListFieldNumber;
const int HeroFBChapter::kIsPassExtraMapFieldNumber;
#endif  // !_MSC_VER

HeroFBChapter::HeroFBChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroFBChapter::InitAsDefaultInstance() {
}

HeroFBChapter::HeroFBChapter(const HeroFBChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroFBChapter::SharedCtor() {
  _cached_size_ = 0;
  is_pass_extra_map_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroFBChapter::~HeroFBChapter() {
  SharedDtor();
}

void HeroFBChapter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroFBChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFBChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFBChapter_descriptor_;
}

const HeroFBChapter& HeroFBChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroFBChapter* HeroFBChapter::default_instance_ = NULL;

HeroFBChapter* HeroFBChapter::New() const {
  return new HeroFBChapter;
}

void HeroFBChapter::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_pass_extra_map_ = 0u;
  }
  map_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroFBChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.HeroMapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_is_pass_extra_map;
        break;
      }

      // required uint32 is_pass_extra_map = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_pass_extra_map:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_pass_extra_map_)));
          set_has_is_pass_extra_map();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroFBChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.HeroMapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // required uint32 is_pass_extra_map = 2;
  if (has_is_pass_extra_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_pass_extra_map(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroFBChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.HeroMapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // required uint32 is_pass_extra_map = 2;
  if (has_is_pass_extra_map()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_pass_extra_map(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroFBChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 is_pass_extra_map = 2;
    if (has_is_pass_extra_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_pass_extra_map());
    }

  }
  // repeated .PB.HeroMapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFBChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroFBChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroFBChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroFBChapter::MergeFrom(const HeroFBChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_pass_extra_map()) {
      set_is_pass_extra_map(from.is_pass_extra_map());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroFBChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFBChapter::CopyFrom(const HeroFBChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroFBChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroFBChapter::Swap(HeroFBChapter* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    std::swap(is_pass_extra_map_, other->is_pass_extra_map_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroFBChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFBChapter_descriptor_;
  metadata.reflection = HeroFBChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroFBData::kChapterListFieldNumber;
const int HeroFBData::kBattleTimesFieldNumber;
#endif  // !_MSC_VER

HeroFBData::HeroFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroFBData::InitAsDefaultInstance() {
}

HeroFBData::HeroFBData(const HeroFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroFBData::SharedCtor() {
  _cached_size_ = 0;
  battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroFBData::~HeroFBData() {
  SharedDtor();
}

void HeroFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroFBData_descriptor_;
}

const HeroFBData& HeroFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroFBData* HeroFBData::default_instance_ = NULL;

HeroFBData* HeroFBData::New() const {
  return new HeroFBData;
}

void HeroFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battle_times_ = 0u;
  }
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.HeroFBChapter chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectTag(16)) goto parse_battle_times;
        break;
      }

      // required uint32 battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.HeroFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.HeroFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  // required uint32 battle_times = 2;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 battle_times = 2;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

  }
  // repeated .PB.HeroFBChapter chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroFBData::MergeFrom(const HeroFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroFBData::CopyFrom(const HeroFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroFBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroFBData::Swap(HeroFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroFBData_descriptor_;
  metadata.reflection = HeroFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyChapterData::kChapterFieldNumber;
const int DailyChapterData::kMaxIdxRecordFieldNumber;
const int DailyChapterData::kBattleTimesFieldNumber;
#endif  // !_MSC_VER

DailyChapterData::DailyChapterData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyChapterData::InitAsDefaultInstance() {
}

DailyChapterData::DailyChapterData(const DailyChapterData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyChapterData::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0u;
  max_idx_record_ = 0;
  battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyChapterData::~DailyChapterData() {
  SharedDtor();
}

void DailyChapterData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyChapterData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyChapterData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyChapterData_descriptor_;
}

const DailyChapterData& DailyChapterData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DailyChapterData* DailyChapterData::default_instance_ = NULL;

DailyChapterData* DailyChapterData::New() const {
  return new DailyChapterData;
}

void DailyChapterData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0u;
    max_idx_record_ = 0;
    battle_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyChapterData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_idx_record;
        break;
      }

      // optional int32 max_idx_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_idx_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_idx_record_)));
          set_has_max_idx_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_times;
        break;
      }

      // optional uint32 battle_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyChapterData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter(), output);
  }

  // optional int32 max_idx_record = 2;
  if (has_max_idx_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_idx_record(), output);
  }

  // optional uint32 battle_times = 3;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyChapterData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter(), target);
  }

  // optional int32 max_idx_record = 2;
  if (has_max_idx_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_idx_record(), target);
  }

  // optional uint32 battle_times = 3;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyChapterData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter());
    }

    // optional int32 max_idx_record = 2;
    if (has_max_idx_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_idx_record());
    }

    // optional uint32 battle_times = 3;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyChapterData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyChapterData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyChapterData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyChapterData::MergeFrom(const DailyChapterData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
    if (from.has_max_idx_record()) {
      set_max_idx_record(from.max_idx_record());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyChapterData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyChapterData::CopyFrom(const DailyChapterData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyChapterData::IsInitialized() const {

  return true;
}

void DailyChapterData::Swap(DailyChapterData* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    std::swap(max_idx_record_, other->max_idx_record_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyChapterData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyChapterData_descriptor_;
  metadata.reflection = DailyChapterData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyFBData::kChapterListFieldNumber;
#endif  // !_MSC_VER

DailyFBData::DailyFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyFBData::InitAsDefaultInstance() {
}

DailyFBData::DailyFBData(const DailyFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyFBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyFBData::~DailyFBData() {
  SharedDtor();
}

void DailyFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyFBData_descriptor_;
}

const DailyFBData& DailyFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DailyFBData* DailyFBData::default_instance_ = NULL;

DailyFBData* DailyFBData::New() const {
  return new DailyFBData;
}

void DailyFBData::Clear() {
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.DailyChapterData chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.DailyChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.DailyChapterData chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyFBData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.DailyChapterData chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyFBData::MergeFrom(const DailyFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyFBData::CopyFrom(const DailyFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyFBData::IsInitialized() const {

  return true;
}

void DailyFBData::Swap(DailyFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyFBData_descriptor_;
  metadata.reflection = DailyFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteMapEnemyData::kMapIdFieldNumber;
const int EliteMapEnemyData::kMonsterListFieldNumber;
const int EliteMapEnemyData::kIsDeadFieldNumber;
#endif  // !_MSC_VER

EliteMapEnemyData::EliteMapEnemyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteMapEnemyData::InitAsDefaultInstance() {
}

EliteMapEnemyData::EliteMapEnemyData(const EliteMapEnemyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteMapEnemyData::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  is_dead_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteMapEnemyData::~EliteMapEnemyData() {
  SharedDtor();
}

void EliteMapEnemyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteMapEnemyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteMapEnemyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteMapEnemyData_descriptor_;
}

const EliteMapEnemyData& EliteMapEnemyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteMapEnemyData* EliteMapEnemyData::default_instance_ = NULL;

EliteMapEnemyData* EliteMapEnemyData::New() const {
  return new EliteMapEnemyData;
}

void EliteMapEnemyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
    is_dead_ = 0u;
  }
  monster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteMapEnemyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_list;
        break;
      }

      // repeated .PB.MonsterData monster_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster_list;
        if (input->ExpectTag(24)) goto parse_is_dead;
        break;
      }

      // optional uint32 is_dead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_dead_)));
          set_has_is_dead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteMapEnemyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // repeated .PB.MonsterData monster_list = 2;
  for (int i = 0; i < this->monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster_list(i), output);
  }

  // optional uint32 is_dead = 3;
  if (has_is_dead()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_dead(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteMapEnemyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // repeated .PB.MonsterData monster_list = 2;
  for (int i = 0; i < this->monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster_list(i), target);
  }

  // optional uint32 is_dead = 3;
  if (has_is_dead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_dead(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteMapEnemyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

    // optional uint32 is_dead = 3;
    if (has_is_dead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_dead());
    }

  }
  // repeated .PB.MonsterData monster_list = 2;
  total_size += 1 * this->monster_list_size();
  for (int i = 0; i < this->monster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteMapEnemyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteMapEnemyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteMapEnemyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteMapEnemyData::MergeFrom(const EliteMapEnemyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_list_.MergeFrom(from.monster_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
    if (from.has_is_dead()) {
      set_is_dead(from.is_dead());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteMapEnemyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteMapEnemyData::CopyFrom(const EliteMapEnemyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteMapEnemyData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < monster_list_size(); i++) {
    if (!this->monster_list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteMapEnemyData::Swap(EliteMapEnemyData* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    monster_list_.Swap(&other->monster_list_);
    std::swap(is_dead_, other->is_dead_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteMapEnemyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteMapEnemyData_descriptor_;
  metadata.reflection = EliteMapEnemyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteFBChapter::kMapListFieldNumber;
const int EliteFBChapter::kStarRewardListFieldNumber;
const int EliteFBChapter::kEnemyDataFieldNumber;
#endif  // !_MSC_VER

EliteFBChapter::EliteFBChapter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteFBChapter::InitAsDefaultInstance() {
  enemy_data_ = const_cast< ::PB::EliteMapEnemyData*>(&::PB::EliteMapEnemyData::default_instance());
}

EliteFBChapter::EliteFBChapter(const EliteFBChapter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteFBChapter::SharedCtor() {
  _cached_size_ = 0;
  enemy_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteFBChapter::~EliteFBChapter() {
  SharedDtor();
}

void EliteFBChapter::SharedDtor() {
  if (this != default_instance_) {
    delete enemy_data_;
  }
}

void EliteFBChapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteFBChapter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteFBChapter_descriptor_;
}

const EliteFBChapter& EliteFBChapter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteFBChapter* EliteFBChapter::default_instance_ = NULL;

EliteFBChapter* EliteFBChapter::New() const {
  return new EliteFBChapter;
}

void EliteFBChapter::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_enemy_data()) {
      if (enemy_data_ != NULL) enemy_data_->::PB::EliteMapEnemyData::Clear();
    }
  }
  map_list_.Clear();
  star_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteFBChapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.MapData map_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_map_list;
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        break;
      }

      // repeated uint32 star_reward_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_star_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_star_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star_reward_list;
        if (input->ExpectTag(26)) goto parse_enemy_data;
        break;
      }

      // required .PB.EliteMapEnemyData enemy_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemy_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteFBChapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->map_list(i), output);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->star_reward_list(i), output);
  }

  // required .PB.EliteMapEnemyData enemy_data = 3;
  if (has_enemy_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteFBChapter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.MapData map_list = 1;
  for (int i = 0; i < this->map_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->map_list(i), target);
  }

  // repeated uint32 star_reward_list = 2;
  for (int i = 0; i < this->star_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->star_reward_list(i), target);
  }

  // required .PB.EliteMapEnemyData enemy_data = 3;
  if (has_enemy_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteFBChapter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // required .PB.EliteMapEnemyData enemy_data = 3;
    if (has_enemy_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemy_data());
    }

  }
  // repeated .PB.MapData map_list = 1;
  total_size += 1 * this->map_list_size();
  for (int i = 0; i < this->map_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_list(i));
  }

  // repeated uint32 star_reward_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->star_reward_list(i));
    }
    total_size += 1 * this->star_reward_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteFBChapter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteFBChapter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteFBChapter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteFBChapter::MergeFrom(const EliteFBChapter& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_list_.MergeFrom(from.map_list_);
  star_reward_list_.MergeFrom(from.star_reward_list_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_enemy_data()) {
      mutable_enemy_data()->::PB::EliteMapEnemyData::MergeFrom(from.enemy_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteFBChapter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteFBChapter::CopyFrom(const EliteFBChapter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteFBChapter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  for (int i = 0; i < map_list_size(); i++) {
    if (!this->map_list(i).IsInitialized()) return false;
  }
  if (has_enemy_data()) {
    if (!this->enemy_data().IsInitialized()) return false;
  }
  return true;
}

void EliteFBChapter::Swap(EliteFBChapter* other) {
  if (other != this) {
    map_list_.Swap(&other->map_list_);
    star_reward_list_.Swap(&other->star_reward_list_);
    std::swap(enemy_data_, other->enemy_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteFBChapter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteFBChapter_descriptor_;
  metadata.reflection = EliteFBChapter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteFBData::kChapterListFieldNumber;
const int EliteFBData::kLastRefreshEnemyTimeFieldNumber;
#endif  // !_MSC_VER

EliteFBData::EliteFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteFBData::InitAsDefaultInstance() {
}

EliteFBData::EliteFBData(const EliteFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteFBData::SharedCtor() {
  _cached_size_ = 0;
  last_refresh_enemy_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteFBData::~EliteFBData() {
  SharedDtor();
}

void EliteFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteFBData_descriptor_;
}

const EliteFBData& EliteFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EliteFBData* EliteFBData::default_instance_ = NULL;

EliteFBData* EliteFBData::New() const {
  return new EliteFBData;
}

void EliteFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_refresh_enemy_time_ = 0u;
  }
  chapter_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.EliteFBChapter chapter_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chapter_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chapter_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_chapter_list;
        if (input->ExpectTag(16)) goto parse_last_refresh_enemy_time;
        break;
      }

      // optional uint32 last_refresh_enemy_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_refresh_enemy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_refresh_enemy_time_)));
          set_has_last_refresh_enemy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.EliteFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chapter_list(i), output);
  }

  // optional uint32 last_refresh_enemy_time = 2;
  if (has_last_refresh_enemy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_refresh_enemy_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.EliteFBChapter chapter_list = 1;
  for (int i = 0; i < this->chapter_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chapter_list(i), target);
  }

  // optional uint32 last_refresh_enemy_time = 2;
  if (has_last_refresh_enemy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_refresh_enemy_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 last_refresh_enemy_time = 2;
    if (has_last_refresh_enemy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_refresh_enemy_time());
    }

  }
  // repeated .PB.EliteFBChapter chapter_list = 1;
  total_size += 1 * this->chapter_list_size();
  for (int i = 0; i < this->chapter_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chapter_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteFBData::MergeFrom(const EliteFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  chapter_list_.MergeFrom(from.chapter_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_refresh_enemy_time()) {
      set_last_refresh_enemy_time(from.last_refresh_enemy_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteFBData::CopyFrom(const EliteFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteFBData::IsInitialized() const {

  for (int i = 0; i < chapter_list_size(); i++) {
    if (!this->chapter_list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteFBData::Swap(EliteFBData* other) {
  if (other != this) {
    chapter_list_.Swap(&other->chapter_list_);
    std::swap(last_refresh_enemy_time_, other->last_refresh_enemy_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteFBData_descriptor_;
  metadata.reflection = EliteFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerFBData::kMapStarListFieldNumber;
const int TowerFBData::kMapLevelRecordFieldNumber;
const int TowerFBData::kKeepBestStarPassedRecordFieldNumber;
const int TowerFBData::kSelectProListFieldNumber;
const int TowerFBData::kIsBuyStarGoodsFieldNumber;
const int TowerFBData::kStarGoodsIdxFieldNumber;
const int TowerFBData::kIsNeedResetFieldNumber;
const int TowerFBData::kTodayResetTimesFieldNumber;
const int TowerFBData::kCurStarFieldNumber;
const int TowerFBData::kStarMaxRecordFieldNumber;
const int TowerFBData::kEliteMapLevelFieldNumber;
const int TowerFBData::kEliteMapBattleTimesFieldNumber;
const int TowerFBData::kBuyEliteMapBattleTimesFieldNumber;
const int TowerFBData::kRandProIdxListFieldNumber;
#endif  // !_MSC_VER

TowerFBData::TowerFBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerFBData::InitAsDefaultInstance() {
}

TowerFBData::TowerFBData(const TowerFBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerFBData::SharedCtor() {
  _cached_size_ = 0;
  map_level_record_ = 0u;
  keep_best_star_passed_record_ = 0u;
  is_buy_star_goods_ = 0u;
  star_goods_idx_ = 0u;
  is_need_reset_ = 0u;
  today_reset_times_ = 0u;
  cur_star_ = 0u;
  star_max_record_ = 0u;
  elite_map_level_ = 0u;
  elite_map_battle_times_ = 0u;
  buy_elite_map_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerFBData::~TowerFBData() {
  SharedDtor();
}

void TowerFBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerFBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerFBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerFBData_descriptor_;
}

const TowerFBData& TowerFBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TowerFBData* TowerFBData::default_instance_ = NULL;

TowerFBData* TowerFBData::New() const {
  return new TowerFBData;
}

void TowerFBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    map_level_record_ = 0u;
    keep_best_star_passed_record_ = 0u;
    is_buy_star_goods_ = 0u;
    star_goods_idx_ = 0u;
    is_need_reset_ = 0u;
    today_reset_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_star_ = 0u;
    star_max_record_ = 0u;
    elite_map_level_ = 0u;
    elite_map_battle_times_ = 0u;
    buy_elite_map_battle_times_ = 0u;
  }
  map_star_list_.Clear();
  select_pro_list_.Clear();
  rand_pro_idx_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerFBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 map_star_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_star_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_map_star_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_map_star_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_map_star_list;
        if (input->ExpectTag(16)) goto parse_map_level_record;
        break;
      }

      // required uint32 map_level_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_level_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_level_record_)));
          set_has_map_level_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_keep_best_star_passed_record;
        break;
      }

      // required uint32 keep_best_star_passed_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_best_star_passed_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keep_best_star_passed_record_)));
          set_has_keep_best_star_passed_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_select_pro_list;
        break;
      }

      // repeated .PB.Property select_pro_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_select_pro_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_select_pro_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_select_pro_list;
        if (input->ExpectTag(40)) goto parse_is_buy_star_goods;
        break;
      }

      // required uint32 is_buy_star_goods = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_buy_star_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_buy_star_goods_)));
          set_has_is_buy_star_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_goods_idx;
        break;
      }

      // required uint32 star_goods_idx = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_goods_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_goods_idx_)));
          set_has_star_goods_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_need_reset;
        break;
      }

      // required uint32 is_need_reset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_need_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_need_reset_)));
          set_has_is_need_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_today_reset_times;
        break;
      }

      // required uint32 today_reset_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_reset_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_reset_times_)));
          set_has_today_reset_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_star;
        break;
      }

      // required uint32 cur_star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_star_)));
          set_has_cur_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_star_max_record;
        break;
      }

      // required uint32 star_max_record = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_max_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_max_record_)));
          set_has_star_max_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_elite_map_level;
        break;
      }

      // required uint32 elite_map_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_map_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_map_level_)));
          set_has_elite_map_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_elite_map_battle_times;
        break;
      }

      // required uint32 elite_map_battle_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elite_map_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elite_map_battle_times_)));
          set_has_elite_map_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buy_elite_map_battle_times;
        break;
      }

      // required uint32 buy_elite_map_battle_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_elite_map_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_elite_map_battle_times_)));
          set_has_buy_elite_map_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rand_pro_idx_list;
        break;
      }

      // repeated uint32 rand_pro_idx_list = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rand_pro_idx_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_rand_pro_idx_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rand_pro_idx_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_rand_pro_idx_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerFBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 map_star_list = 1;
  for (int i = 0; i < this->map_star_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->map_star_list(i), output);
  }

  // required uint32 map_level_record = 2;
  if (has_map_level_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->map_level_record(), output);
  }

  // required uint32 keep_best_star_passed_record = 3;
  if (has_keep_best_star_passed_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->keep_best_star_passed_record(), output);
  }

  // repeated .PB.Property select_pro_list = 4;
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->select_pro_list(i), output);
  }

  // required uint32 is_buy_star_goods = 5;
  if (has_is_buy_star_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_buy_star_goods(), output);
  }

  // required uint32 star_goods_idx = 6;
  if (has_star_goods_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->star_goods_idx(), output);
  }

  // required uint32 is_need_reset = 7;
  if (has_is_need_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_need_reset(), output);
  }

  // required uint32 today_reset_times = 8;
  if (has_today_reset_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->today_reset_times(), output);
  }

  // required uint32 cur_star = 9;
  if (has_cur_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cur_star(), output);
  }

  // required uint32 star_max_record = 10;
  if (has_star_max_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->star_max_record(), output);
  }

  // required uint32 elite_map_level = 11;
  if (has_elite_map_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->elite_map_level(), output);
  }

  // required uint32 elite_map_battle_times = 12;
  if (has_elite_map_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->elite_map_battle_times(), output);
  }

  // required uint32 buy_elite_map_battle_times = 13;
  if (has_buy_elite_map_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->buy_elite_map_battle_times(), output);
  }

  // repeated uint32 rand_pro_idx_list = 14;
  for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->rand_pro_idx_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerFBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 map_star_list = 1;
  for (int i = 0; i < this->map_star_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->map_star_list(i), target);
  }

  // required uint32 map_level_record = 2;
  if (has_map_level_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->map_level_record(), target);
  }

  // required uint32 keep_best_star_passed_record = 3;
  if (has_keep_best_star_passed_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->keep_best_star_passed_record(), target);
  }

  // repeated .PB.Property select_pro_list = 4;
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->select_pro_list(i), target);
  }

  // required uint32 is_buy_star_goods = 5;
  if (has_is_buy_star_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_buy_star_goods(), target);
  }

  // required uint32 star_goods_idx = 6;
  if (has_star_goods_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->star_goods_idx(), target);
  }

  // required uint32 is_need_reset = 7;
  if (has_is_need_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_need_reset(), target);
  }

  // required uint32 today_reset_times = 8;
  if (has_today_reset_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->today_reset_times(), target);
  }

  // required uint32 cur_star = 9;
  if (has_cur_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cur_star(), target);
  }

  // required uint32 star_max_record = 10;
  if (has_star_max_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->star_max_record(), target);
  }

  // required uint32 elite_map_level = 11;
  if (has_elite_map_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->elite_map_level(), target);
  }

  // required uint32 elite_map_battle_times = 12;
  if (has_elite_map_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->elite_map_battle_times(), target);
  }

  // required uint32 buy_elite_map_battle_times = 13;
  if (has_buy_elite_map_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->buy_elite_map_battle_times(), target);
  }

  // repeated uint32 rand_pro_idx_list = 14;
  for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(14, this->rand_pro_idx_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerFBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 map_level_record = 2;
    if (has_map_level_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_level_record());
    }

    // required uint32 keep_best_star_passed_record = 3;
    if (has_keep_best_star_passed_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keep_best_star_passed_record());
    }

    // required uint32 is_buy_star_goods = 5;
    if (has_is_buy_star_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_buy_star_goods());
    }

    // required uint32 star_goods_idx = 6;
    if (has_star_goods_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_goods_idx());
    }

    // required uint32 is_need_reset = 7;
    if (has_is_need_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_need_reset());
    }

    // required uint32 today_reset_times = 8;
    if (has_today_reset_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_reset_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 cur_star = 9;
    if (has_cur_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_star());
    }

    // required uint32 star_max_record = 10;
    if (has_star_max_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star_max_record());
    }

    // required uint32 elite_map_level = 11;
    if (has_elite_map_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_map_level());
    }

    // required uint32 elite_map_battle_times = 12;
    if (has_elite_map_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elite_map_battle_times());
    }

    // required uint32 buy_elite_map_battle_times = 13;
    if (has_buy_elite_map_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_elite_map_battle_times());
    }

  }
  // repeated uint32 map_star_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->map_star_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->map_star_list(i));
    }
    total_size += 1 * this->map_star_list_size() + data_size;
  }

  // repeated .PB.Property select_pro_list = 4;
  total_size += 1 * this->select_pro_list_size();
  for (int i = 0; i < this->select_pro_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->select_pro_list(i));
  }

  // repeated uint32 rand_pro_idx_list = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->rand_pro_idx_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rand_pro_idx_list(i));
    }
    total_size += 1 * this->rand_pro_idx_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerFBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerFBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerFBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerFBData::MergeFrom(const TowerFBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  map_star_list_.MergeFrom(from.map_star_list_);
  select_pro_list_.MergeFrom(from.select_pro_list_);
  rand_pro_idx_list_.MergeFrom(from.rand_pro_idx_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_map_level_record()) {
      set_map_level_record(from.map_level_record());
    }
    if (from.has_keep_best_star_passed_record()) {
      set_keep_best_star_passed_record(from.keep_best_star_passed_record());
    }
    if (from.has_is_buy_star_goods()) {
      set_is_buy_star_goods(from.is_buy_star_goods());
    }
    if (from.has_star_goods_idx()) {
      set_star_goods_idx(from.star_goods_idx());
    }
    if (from.has_is_need_reset()) {
      set_is_need_reset(from.is_need_reset());
    }
    if (from.has_today_reset_times()) {
      set_today_reset_times(from.today_reset_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_star()) {
      set_cur_star(from.cur_star());
    }
    if (from.has_star_max_record()) {
      set_star_max_record(from.star_max_record());
    }
    if (from.has_elite_map_level()) {
      set_elite_map_level(from.elite_map_level());
    }
    if (from.has_elite_map_battle_times()) {
      set_elite_map_battle_times(from.elite_map_battle_times());
    }
    if (from.has_buy_elite_map_battle_times()) {
      set_buy_elite_map_battle_times(from.buy_elite_map_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerFBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerFBData::CopyFrom(const TowerFBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerFBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001ff6) != 0x00001ff6) return false;

  for (int i = 0; i < select_pro_list_size(); i++) {
    if (!this->select_pro_list(i).IsInitialized()) return false;
  }
  return true;
}

void TowerFBData::Swap(TowerFBData* other) {
  if (other != this) {
    map_star_list_.Swap(&other->map_star_list_);
    std::swap(map_level_record_, other->map_level_record_);
    std::swap(keep_best_star_passed_record_, other->keep_best_star_passed_record_);
    select_pro_list_.Swap(&other->select_pro_list_);
    std::swap(is_buy_star_goods_, other->is_buy_star_goods_);
    std::swap(star_goods_idx_, other->star_goods_idx_);
    std::swap(is_need_reset_, other->is_need_reset_);
    std::swap(today_reset_times_, other->today_reset_times_);
    std::swap(cur_star_, other->cur_star_);
    std::swap(star_max_record_, other->star_max_record_);
    std::swap(elite_map_level_, other->elite_map_level_);
    std::swap(elite_map_battle_times_, other->elite_map_battle_times_);
    std::swap(buy_elite_map_battle_times_, other->buy_elite_map_battle_times_);
    rand_pro_idx_list_.Swap(&other->rand_pro_idx_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerFBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerFBData_descriptor_;
  metadata.reflection = TowerFBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFBInfo::kMainFbDataFieldNumber;
const int RoleFBInfo::kHeroFbDataFieldNumber;
const int RoleFBInfo::kDailyFbDataFieldNumber;
const int RoleFBInfo::kTowerFbDataFieldNumber;
const int RoleFBInfo::kEliteFbDataFieldNumber;
#endif  // !_MSC_VER

RoleFBInfo::RoleFBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFBInfo::InitAsDefaultInstance() {
  main_fb_data_ = const_cast< ::PB::MainFBData*>(&::PB::MainFBData::default_instance());
  hero_fb_data_ = const_cast< ::PB::HeroFBData*>(&::PB::HeroFBData::default_instance());
  daily_fb_data_ = const_cast< ::PB::DailyFBData*>(&::PB::DailyFBData::default_instance());
  tower_fb_data_ = const_cast< ::PB::TowerFBData*>(&::PB::TowerFBData::default_instance());
  elite_fb_data_ = const_cast< ::PB::EliteFBData*>(&::PB::EliteFBData::default_instance());
}

RoleFBInfo::RoleFBInfo(const RoleFBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFBInfo::SharedCtor() {
  _cached_size_ = 0;
  main_fb_data_ = NULL;
  hero_fb_data_ = NULL;
  daily_fb_data_ = NULL;
  tower_fb_data_ = NULL;
  elite_fb_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFBInfo::~RoleFBInfo() {
  SharedDtor();
}

void RoleFBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete main_fb_data_;
    delete hero_fb_data_;
    delete daily_fb_data_;
    delete tower_fb_data_;
    delete elite_fb_data_;
  }
}

void RoleFBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFBInfo_descriptor_;
}

const RoleFBInfo& RoleFBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleFBInfo* RoleFBInfo::default_instance_ = NULL;

RoleFBInfo* RoleFBInfo::New() const {
  return new RoleFBInfo;
}

void RoleFBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_main_fb_data()) {
      if (main_fb_data_ != NULL) main_fb_data_->::PB::MainFBData::Clear();
    }
    if (has_hero_fb_data()) {
      if (hero_fb_data_ != NULL) hero_fb_data_->::PB::HeroFBData::Clear();
    }
    if (has_daily_fb_data()) {
      if (daily_fb_data_ != NULL) daily_fb_data_->::PB::DailyFBData::Clear();
    }
    if (has_tower_fb_data()) {
      if (tower_fb_data_ != NULL) tower_fb_data_->::PB::TowerFBData::Clear();
    }
    if (has_elite_fb_data()) {
      if (elite_fb_data_ != NULL) elite_fb_data_->::PB::EliteFBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.MainFBData main_fb_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_main_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hero_fb_data;
        break;
      }

      // required .PB.HeroFBData hero_fb_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_daily_fb_data;
        break;
      }

      // required .PB.DailyFBData daily_fb_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tower_fb_data;
        break;
      }

      // required .PB.TowerFBData tower_fb_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_elite_fb_data;
        break;
      }

      // required .PB.EliteFBData elite_fb_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_elite_fb_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elite_fb_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PB.MainFBData main_fb_data = 1;
  if (has_main_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->main_fb_data(), output);
  }

  // required .PB.HeroFBData hero_fb_data = 2;
  if (has_hero_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->hero_fb_data(), output);
  }

  // required .PB.DailyFBData daily_fb_data = 3;
  if (has_daily_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->daily_fb_data(), output);
  }

  // required .PB.TowerFBData tower_fb_data = 4;
  if (has_tower_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tower_fb_data(), output);
  }

  // required .PB.EliteFBData elite_fb_data = 5;
  if (has_elite_fb_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->elite_fb_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PB.MainFBData main_fb_data = 1;
  if (has_main_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->main_fb_data(), target);
  }

  // required .PB.HeroFBData hero_fb_data = 2;
  if (has_hero_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->hero_fb_data(), target);
  }

  // required .PB.DailyFBData daily_fb_data = 3;
  if (has_daily_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->daily_fb_data(), target);
  }

  // required .PB.TowerFBData tower_fb_data = 4;
  if (has_tower_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tower_fb_data(), target);
  }

  // required .PB.EliteFBData elite_fb_data = 5;
  if (has_elite_fb_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->elite_fb_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PB.MainFBData main_fb_data = 1;
    if (has_main_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->main_fb_data());
    }

    // required .PB.HeroFBData hero_fb_data = 2;
    if (has_hero_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_fb_data());
    }

    // required .PB.DailyFBData daily_fb_data = 3;
    if (has_daily_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_fb_data());
    }

    // required .PB.TowerFBData tower_fb_data = 4;
    if (has_tower_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_fb_data());
    }

    // required .PB.EliteFBData elite_fb_data = 5;
    if (has_elite_fb_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elite_fb_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFBInfo::MergeFrom(const RoleFBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_main_fb_data()) {
      mutable_main_fb_data()->::PB::MainFBData::MergeFrom(from.main_fb_data());
    }
    if (from.has_hero_fb_data()) {
      mutable_hero_fb_data()->::PB::HeroFBData::MergeFrom(from.hero_fb_data());
    }
    if (from.has_daily_fb_data()) {
      mutable_daily_fb_data()->::PB::DailyFBData::MergeFrom(from.daily_fb_data());
    }
    if (from.has_tower_fb_data()) {
      mutable_tower_fb_data()->::PB::TowerFBData::MergeFrom(from.tower_fb_data());
    }
    if (from.has_elite_fb_data()) {
      mutable_elite_fb_data()->::PB::EliteFBData::MergeFrom(from.elite_fb_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFBInfo::CopyFrom(const RoleFBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFBInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_main_fb_data()) {
    if (!this->main_fb_data().IsInitialized()) return false;
  }
  if (has_hero_fb_data()) {
    if (!this->hero_fb_data().IsInitialized()) return false;
  }
  if (has_tower_fb_data()) {
    if (!this->tower_fb_data().IsInitialized()) return false;
  }
  if (has_elite_fb_data()) {
    if (!this->elite_fb_data().IsInitialized()) return false;
  }
  return true;
}

void RoleFBInfo::Swap(RoleFBInfo* other) {
  if (other != this) {
    std::swap(main_fb_data_, other->main_fb_data_);
    std::swap(hero_fb_data_, other->hero_fb_data_);
    std::swap(daily_fb_data_, other->daily_fb_data_);
    std::swap(tower_fb_data_, other->tower_fb_data_);
    std::swap(elite_fb_data_, other->elite_fb_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFBInfo_descriptor_;
  metadata.reflection = RoleFBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopGoods::kGoodsIdFieldNumber;
const int ShopGoods::kGoodsNumFieldNumber;
#endif  // !_MSC_VER

ShopGoods::ShopGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShopGoods::InitAsDefaultInstance() {
}

ShopGoods::ShopGoods(const ShopGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShopGoods::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  goods_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGoods::~ShopGoods() {
  SharedDtor();
}

void ShopGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopGoods_descriptor_;
}

const ShopGoods& ShopGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ShopGoods* ShopGoods::default_instance_ = NULL;

ShopGoods* ShopGoods::New() const {
  return new ShopGoods;
}

void ShopGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    goods_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods_num;
        break;
      }

      // required uint32 goods_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_num_)));
          set_has_goods_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShopGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goods_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShopGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // required uint32 goods_num = 2;
  if (has_goods_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goods_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShopGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // required uint32 goods_num = 2;
    if (has_goods_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopGoods::MergeFrom(const ShopGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_goods_num()) {
      set_goods_num(from.goods_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopGoods::CopyFrom(const ShopGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShopGoods::Swap(ShopGoods* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(goods_num_, other->goods_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopGoods_descriptor_;
  metadata.reflection = ShopGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroShopData::kGoodsListFieldNumber;
const int HeroShopData::kLastRecoverTimeFieldNumber;
const int HeroShopData::kFreeRefreshTimesFieldNumber;
const int HeroShopData::kCostRefreshTimesFieldNumber;
#endif  // !_MSC_VER

HeroShopData::HeroShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroShopData::InitAsDefaultInstance() {
}

HeroShopData::HeroShopData(const HeroShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroShopData::SharedCtor() {
  _cached_size_ = 0;
  last_recover_time_ = 0u;
  free_refresh_times_ = 0u;
  cost_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroShopData::~HeroShopData() {
  SharedDtor();
}

void HeroShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroShopData_descriptor_;
}

const HeroShopData& HeroShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HeroShopData* HeroShopData::default_instance_ = NULL;

HeroShopData* HeroShopData::New() const {
  return new HeroShopData;
}

void HeroShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_recover_time_ = 0u;
    free_refresh_times_ = 0u;
    cost_refresh_times_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_last_recover_time;
        break;
      }

      // required uint32 last_recover_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_recover_time_)));
          set_has_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_refresh_times;
        break;
      }

      // required uint32 free_refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_times_)));
          set_has_free_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_refresh_times;
        break;
      }

      // required uint32 cost_refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_refresh_times_)));
          set_has_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_recover_time(), output);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_refresh_times(), output);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_recover_time(), target);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_refresh_times(), target);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 last_recover_time = 2;
    if (has_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_recover_time());
    }

    // required uint32 free_refresh_times = 3;
    if (has_free_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_refresh_times());
    }

    // required uint32 cost_refresh_times = 4;
    if (has_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_refresh_times());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroShopData::MergeFrom(const HeroShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_recover_time()) {
      set_last_recover_time(from.last_recover_time());
    }
    if (from.has_free_refresh_times()) {
      set_free_refresh_times(from.free_refresh_times());
    }
    if (from.has_cost_refresh_times()) {
      set_cost_refresh_times(from.cost_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroShopData::CopyFrom(const HeroShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void HeroShopData::Swap(HeroShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(last_recover_time_, other->last_recover_time_);
    std::swap(free_refresh_times_, other->free_refresh_times_);
    std::swap(cost_refresh_times_, other->cost_refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroShopData_descriptor_;
  metadata.reflection = HeroShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildShopData::kRewardGoodsBuyRecordFieldNumber;
const int GuildShopData::kItemGoodsBuyRecordFieldNumber;
const int GuildShopData::kLimitGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

GuildShopData::GuildShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildShopData::InitAsDefaultInstance() {
}

GuildShopData::GuildShopData(const GuildShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildShopData::~GuildShopData() {
  SharedDtor();
}

void GuildShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildShopData_descriptor_;
}

const GuildShopData& GuildShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildShopData* GuildShopData::default_instance_ = NULL;

GuildShopData* GuildShopData::New() const {
  return new GuildShopData;
}

void GuildShopData::Clear() {
  reward_goods_buy_record_.Clear();
  item_goods_buy_record_.Clear();
  limit_goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods reward_goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward_goods_buy_record;
        if (input->ExpectTag(18)) goto parse_item_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods item_goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_goods_buy_record;
        if (input->ExpectTag(26)) goto parse_limit_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods limit_goods_buy_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limit_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_limit_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limit_goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limit_goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  total_size += 1 * this->reward_goods_buy_record_size();
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  total_size += 1 * this->item_goods_buy_record_size();
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  total_size += 1 * this->limit_goods_buy_record_size();
  for (int i = 0; i < this->limit_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limit_goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildShopData::MergeFrom(const GuildShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_goods_buy_record_.MergeFrom(from.reward_goods_buy_record_);
  item_goods_buy_record_.MergeFrom(from.item_goods_buy_record_);
  limit_goods_buy_record_.MergeFrom(from.limit_goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildShopData::CopyFrom(const GuildShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildShopData::IsInitialized() const {

  for (int i = 0; i < reward_goods_buy_record_size(); i++) {
    if (!this->reward_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_goods_buy_record_size(); i++) {
    if (!this->item_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < limit_goods_buy_record_size(); i++) {
    if (!this->limit_goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void GuildShopData::Swap(GuildShopData* other) {
  if (other != this) {
    reward_goods_buy_record_.Swap(&other->reward_goods_buy_record_);
    item_goods_buy_record_.Swap(&other->item_goods_buy_record_);
    limit_goods_buy_record_.Swap(&other->limit_goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildShopData_descriptor_;
  metadata.reflection = GuildShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallShopData::kItemBuyRecordFieldNumber;
const int MallShopData::kGiftBuyRecordFieldNumber;
#endif  // !_MSC_VER

MallShopData::MallShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallShopData::InitAsDefaultInstance() {
}

MallShopData::MallShopData(const MallShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallShopData::~MallShopData() {
  SharedDtor();
}

void MallShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallShopData_descriptor_;
}

const MallShopData& MallShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MallShopData* MallShopData::default_instance_ = NULL;

MallShopData* MallShopData::New() const {
  return new MallShopData;
}

void MallShopData::Clear() {
  item_buy_record_.Clear();
  gift_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods item_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_buy_record;
        if (input->ExpectTag(18)) goto parse_gift_buy_record;
        break;
      }

      // repeated .PB.ShopGoods gift_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gift_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gift_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods item_buy_record = 1;
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_buy_record(i), output);
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gift_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods item_buy_record = 1;
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_buy_record(i), target);
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gift_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods item_buy_record = 1;
  total_size += 1 * this->item_buy_record_size();
  for (int i = 0; i < this->item_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_buy_record(i));
  }

  // repeated .PB.ShopGoods gift_buy_record = 2;
  total_size += 1 * this->gift_buy_record_size();
  for (int i = 0; i < this->gift_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gift_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallShopData::MergeFrom(const MallShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_buy_record_.MergeFrom(from.item_buy_record_);
  gift_buy_record_.MergeFrom(from.gift_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallShopData::CopyFrom(const MallShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallShopData::IsInitialized() const {

  for (int i = 0; i < item_buy_record_size(); i++) {
    if (!this->item_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gift_buy_record_size(); i++) {
    if (!this->gift_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void MallShopData::Swap(MallShopData* other) {
  if (other != this) {
    item_buy_record_.Swap(&other->item_buy_record_);
    gift_buy_record_.Swap(&other->gift_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallShopData_descriptor_;
  metadata.reflection = MallShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

TowerShopData::TowerShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TowerShopData::InitAsDefaultInstance() {
}

TowerShopData::TowerShopData(const TowerShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TowerShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerShopData::~TowerShopData() {
  SharedDtor();
}

void TowerShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerShopData_descriptor_;
}

const TowerShopData& TowerShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TowerShopData* TowerShopData::default_instance_ = NULL;

TowerShopData* TowerShopData::New() const {
  return new TowerShopData;
}

void TowerShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TowerShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TowerShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TowerShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerShopData::MergeFrom(const TowerShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerShopData::CopyFrom(const TowerShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void TowerShopData::Swap(TowerShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerShopData_descriptor_;
  metadata.reflection = TowerShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

ArenaShopData::ArenaShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaShopData::InitAsDefaultInstance() {
}

ArenaShopData::ArenaShopData(const ArenaShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaShopData::~ArenaShopData() {
  SharedDtor();
}

void ArenaShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaShopData_descriptor_;
}

const ArenaShopData& ArenaShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ArenaShopData* ArenaShopData::default_instance_ = NULL;

ArenaShopData* ArenaShopData::New() const {
  return new ArenaShopData;
}

void ArenaShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaShopData::MergeFrom(const ArenaShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaShopData::CopyFrom(const ArenaShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaShopData::Swap(ArenaShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaShopData_descriptor_;
  metadata.reflection = ArenaShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AwakenShopData::kGoodsListFieldNumber;
const int AwakenShopData::kLastRecoverTimeFieldNumber;
const int AwakenShopData::kFreeRefreshTimesFieldNumber;
const int AwakenShopData::kCostRefreshTimesFieldNumber;
#endif  // !_MSC_VER

AwakenShopData::AwakenShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AwakenShopData::InitAsDefaultInstance() {
}

AwakenShopData::AwakenShopData(const AwakenShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AwakenShopData::SharedCtor() {
  _cached_size_ = 0;
  last_recover_time_ = 0u;
  free_refresh_times_ = 0u;
  cost_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwakenShopData::~AwakenShopData() {
  SharedDtor();
}

void AwakenShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AwakenShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AwakenShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AwakenShopData_descriptor_;
}

const AwakenShopData& AwakenShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AwakenShopData* AwakenShopData::default_instance_ = NULL;

AwakenShopData* AwakenShopData::New() const {
  return new AwakenShopData;
}

void AwakenShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_recover_time_ = 0u;
    free_refresh_times_ = 0u;
    cost_refresh_times_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AwakenShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_last_recover_time;
        break;
      }

      // required uint32 last_recover_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_recover_time_)));
          set_has_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_free_refresh_times;
        break;
      }

      // required uint32 free_refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &free_refresh_times_)));
          set_has_free_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost_refresh_times;
        break;
      }

      // required uint32 cost_refresh_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_refresh_times_)));
          set_has_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwakenShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_recover_time(), output);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->free_refresh_times(), output);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cost_refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AwakenShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 last_recover_time = 2;
  if (has_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_recover_time(), target);
  }

  // required uint32 free_refresh_times = 3;
  if (has_free_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->free_refresh_times(), target);
  }

  // required uint32 cost_refresh_times = 4;
  if (has_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cost_refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AwakenShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 last_recover_time = 2;
    if (has_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_recover_time());
    }

    // required uint32 free_refresh_times = 3;
    if (has_free_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->free_refresh_times());
    }

    // required uint32 cost_refresh_times = 4;
    if (has_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_refresh_times());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwakenShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AwakenShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AwakenShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AwakenShopData::MergeFrom(const AwakenShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_recover_time()) {
      set_last_recover_time(from.last_recover_time());
    }
    if (from.has_free_refresh_times()) {
      set_free_refresh_times(from.free_refresh_times());
    }
    if (from.has_cost_refresh_times()) {
      set_cost_refresh_times(from.cost_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AwakenShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AwakenShopData::CopyFrom(const AwakenShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwakenShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void AwakenShopData::Swap(AwakenShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(last_recover_time_, other->last_recover_time_);
    std::swap(free_refresh_times_, other->free_refresh_times_);
    std::swap(cost_refresh_times_, other->cost_refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AwakenShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AwakenShopData_descriptor_;
  metadata.reflection = AwakenShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FairyShopData::kGoodsListFieldNumber;
const int FairyShopData::kUsedRefreshTimesFieldNumber;
const int FairyShopData::kLastAutoRefreshTimeFieldNumber;
#endif  // !_MSC_VER

FairyShopData::FairyShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FairyShopData::InitAsDefaultInstance() {
}

FairyShopData::FairyShopData(const FairyShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FairyShopData::SharedCtor() {
  _cached_size_ = 0;
  used_refresh_times_ = 0u;
  last_auto_refresh_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FairyShopData::~FairyShopData() {
  SharedDtor();
}

void FairyShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FairyShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FairyShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FairyShopData_descriptor_;
}

const FairyShopData& FairyShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FairyShopData* FairyShopData::default_instance_ = NULL;

FairyShopData* FairyShopData::New() const {
  return new FairyShopData;
}

void FairyShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    used_refresh_times_ = 0u;
    last_auto_refresh_time_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FairyShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_used_refresh_times;
        break;
      }

      // required uint32 used_refresh_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_refresh_times_)));
          set_has_used_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_auto_refresh_time;
        break;
      }

      // required uint32 last_auto_refresh_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_auto_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_auto_refresh_time_)));
          set_has_last_auto_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FairyShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // required uint32 used_refresh_times = 2;
  if (has_used_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->used_refresh_times(), output);
  }

  // required uint32 last_auto_refresh_time = 3;
  if (has_last_auto_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_auto_refresh_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FairyShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // required uint32 used_refresh_times = 2;
  if (has_used_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->used_refresh_times(), target);
  }

  // required uint32 last_auto_refresh_time = 3;
  if (has_last_auto_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_auto_refresh_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FairyShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 used_refresh_times = 2;
    if (has_used_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_refresh_times());
    }

    // required uint32 last_auto_refresh_time = 3;
    if (has_last_auto_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_auto_refresh_time());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FairyShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FairyShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FairyShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FairyShopData::MergeFrom(const FairyShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_used_refresh_times()) {
      set_used_refresh_times(from.used_refresh_times());
    }
    if (from.has_last_auto_refresh_time()) {
      set_last_auto_refresh_time(from.last_auto_refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FairyShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FairyShopData::CopyFrom(const FairyShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FairyShopData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void FairyShopData::Swap(FairyShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(used_refresh_times_, other->used_refresh_times_);
    std::swap(last_auto_refresh_time_, other->last_auto_refresh_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FairyShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FairyShopData_descriptor_;
  metadata.reflection = FairyShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreMatchShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

ScoreMatchShopData::ScoreMatchShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreMatchShopData::InitAsDefaultInstance() {
}

ScoreMatchShopData::ScoreMatchShopData(const ScoreMatchShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreMatchShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreMatchShopData::~ScoreMatchShopData() {
  SharedDtor();
}

void ScoreMatchShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreMatchShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMatchShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreMatchShopData_descriptor_;
}

const ScoreMatchShopData& ScoreMatchShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ScoreMatchShopData* ScoreMatchShopData::default_instance_ = NULL;

ScoreMatchShopData* ScoreMatchShopData::New() const {
  return new ScoreMatchShopData;
}

void ScoreMatchShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreMatchShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreMatchShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreMatchShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreMatchShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMatchShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreMatchShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreMatchShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreMatchShopData::MergeFrom(const ScoreMatchShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreMatchShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMatchShopData::CopyFrom(const ScoreMatchShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMatchShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ScoreMatchShopData::Swap(ScoreMatchShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreMatchShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreMatchShopData_descriptor_;
  metadata.reflection = ScoreMatchShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

SevenDayShopData::SevenDayShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayShopData::InitAsDefaultInstance() {
}

SevenDayShopData::SevenDayShopData(const SevenDayShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayShopData::~SevenDayShopData() {
  SharedDtor();
}

void SevenDayShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayShopData_descriptor_;
}

const SevenDayShopData& SevenDayShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SevenDayShopData* SevenDayShopData::default_instance_ = NULL;

SevenDayShopData* SevenDayShopData::New() const {
  return new SevenDayShopData;
}

void SevenDayShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayShopData::MergeFrom(const SevenDayShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayShopData::CopyFrom(const SevenDayShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void SevenDayShopData::Swap(SevenDayShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayShopData_descriptor_;
  metadata.reflection = SevenDayShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelGiftShopData::kBuyRecordFieldNumber;
#endif  // !_MSC_VER

LevelGiftShopData::LevelGiftShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelGiftShopData::InitAsDefaultInstance() {
}

LevelGiftShopData::LevelGiftShopData(const LevelGiftShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelGiftShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelGiftShopData::~LevelGiftShopData() {
  SharedDtor();
}

void LevelGiftShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelGiftShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelGiftShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelGiftShopData_descriptor_;
}

const LevelGiftShopData& LevelGiftShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LevelGiftShopData* LevelGiftShopData::default_instance_ = NULL;

LevelGiftShopData* LevelGiftShopData::New() const {
  return new LevelGiftShopData;
}

void LevelGiftShopData::Clear() {
  buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelGiftShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelGiftShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelGiftShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods buy_record = 1;
  for (int i = 0; i < this->buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelGiftShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods buy_record = 1;
  total_size += 1 * this->buy_record_size();
  for (int i = 0; i < this->buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelGiftShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelGiftShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelGiftShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelGiftShopData::MergeFrom(const LevelGiftShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buy_record_.MergeFrom(from.buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelGiftShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelGiftShopData::CopyFrom(const LevelGiftShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelGiftShopData::IsInitialized() const {

  for (int i = 0; i < buy_record_size(); i++) {
    if (!this->buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void LevelGiftShopData::Swap(LevelGiftShopData* other) {
  if (other != this) {
    buy_record_.Swap(&other->buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelGiftShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelGiftShopData_descriptor_;
  metadata.reflection = LevelGiftShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndlessLandShopData::kItemGoodsBuyRecordFieldNumber;
const int EndlessLandShopData::kRewardGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

EndlessLandShopData::EndlessLandShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EndlessLandShopData::InitAsDefaultInstance() {
}

EndlessLandShopData::EndlessLandShopData(const EndlessLandShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EndlessLandShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndlessLandShopData::~EndlessLandShopData() {
  SharedDtor();
}

void EndlessLandShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndlessLandShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndlessLandShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndlessLandShopData_descriptor_;
}

const EndlessLandShopData& EndlessLandShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

EndlessLandShopData* EndlessLandShopData::default_instance_ = NULL;

EndlessLandShopData* EndlessLandShopData::New() const {
  return new EndlessLandShopData;
}

void EndlessLandShopData::Clear() {
  item_goods_buy_record_.Clear();
  reward_goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndlessLandShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods item_goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item_goods_buy_record;
        if (input->ExpectTag(18)) goto parse_reward_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods reward_goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndlessLandShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods item_goods_buy_record = 1;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EndlessLandShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods item_goods_buy_record = 1;
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EndlessLandShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods item_goods_buy_record = 1;
  total_size += 1 * this->item_goods_buy_record_size();
  for (int i = 0; i < this->item_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  total_size += 1 * this->reward_goods_buy_record_size();
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndlessLandShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndlessLandShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndlessLandShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndlessLandShopData::MergeFrom(const EndlessLandShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_goods_buy_record_.MergeFrom(from.item_goods_buy_record_);
  reward_goods_buy_record_.MergeFrom(from.reward_goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndlessLandShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndlessLandShopData::CopyFrom(const EndlessLandShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndlessLandShopData::IsInitialized() const {

  for (int i = 0; i < item_goods_buy_record_size(); i++) {
    if (!this->item_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_goods_buy_record_size(); i++) {
    if (!this->reward_goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void EndlessLandShopData::Swap(EndlessLandShopData* other) {
  if (other != this) {
    item_goods_buy_record_.Swap(&other->item_goods_buy_record_);
    reward_goods_buy_record_.Swap(&other->reward_goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndlessLandShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndlessLandShopData_descriptor_;
  metadata.reflection = EndlessLandShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DirectBuyShopData::kGoodsListFieldNumber;
const int DirectBuyShopData::kLastRefreshTimeFieldNumber;
const int DirectBuyShopData::kCanTakeGoodsListFieldNumber;
const int DirectBuyShopData::kLastRefreshYearDayFieldNumber;
#endif  // !_MSC_VER

DirectBuyShopData::DirectBuyShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DirectBuyShopData::InitAsDefaultInstance() {
}

DirectBuyShopData::DirectBuyShopData(const DirectBuyShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DirectBuyShopData::SharedCtor() {
  _cached_size_ = 0;
  last_refresh_time_ = 0u;
  last_refresh_year_day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DirectBuyShopData::~DirectBuyShopData() {
  SharedDtor();
}

void DirectBuyShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DirectBuyShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DirectBuyShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DirectBuyShopData_descriptor_;
}

const DirectBuyShopData& DirectBuyShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DirectBuyShopData* DirectBuyShopData::default_instance_ = NULL;

DirectBuyShopData* DirectBuyShopData::New() const {
  return new DirectBuyShopData;
}

void DirectBuyShopData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    last_refresh_time_ = 0u;
    last_refresh_year_day_ = 0u;
  }
  goods_list_.Clear();
  can_take_goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DirectBuyShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectTag(16)) goto parse_last_refresh_time;
        break;
      }

      // optional uint32 last_refresh_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_refresh_time_)));
          set_has_last_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_take_goods_list;
        break;
      }

      // repeated uint32 can_take_goods_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_take_goods_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_can_take_goods_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_can_take_goods_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_take_goods_list;
        if (input->ExpectTag(32)) goto parse_last_refresh_year_day;
        break;
      }

      // optional uint32 last_refresh_year_day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_refresh_year_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_refresh_year_day_)));
          set_has_last_refresh_year_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DirectBuyShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  // optional uint32 last_refresh_time = 2;
  if (has_last_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_refresh_time(), output);
  }

  // repeated uint32 can_take_goods_list = 3;
  for (int i = 0; i < this->can_take_goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->can_take_goods_list(i), output);
  }

  // optional uint32 last_refresh_year_day = 4;
  if (has_last_refresh_year_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_refresh_year_day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DirectBuyShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  // optional uint32 last_refresh_time = 2;
  if (has_last_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_refresh_time(), target);
  }

  // repeated uint32 can_take_goods_list = 3;
  for (int i = 0; i < this->can_take_goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->can_take_goods_list(i), target);
  }

  // optional uint32 last_refresh_year_day = 4;
  if (has_last_refresh_year_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_refresh_year_day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DirectBuyShopData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 last_refresh_time = 2;
    if (has_last_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_refresh_time());
    }

    // optional uint32 last_refresh_year_day = 4;
    if (has_last_refresh_year_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_refresh_year_day());
    }

  }
  // repeated .PB.ShopGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  // repeated uint32 can_take_goods_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->can_take_goods_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->can_take_goods_list(i));
    }
    total_size += 1 * this->can_take_goods_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DirectBuyShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DirectBuyShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DirectBuyShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DirectBuyShopData::MergeFrom(const DirectBuyShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  can_take_goods_list_.MergeFrom(from.can_take_goods_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_last_refresh_time()) {
      set_last_refresh_time(from.last_refresh_time());
    }
    if (from.has_last_refresh_year_day()) {
      set_last_refresh_year_day(from.last_refresh_year_day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DirectBuyShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectBuyShopData::CopyFrom(const DirectBuyShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectBuyShopData::IsInitialized() const {

  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  return true;
}

void DirectBuyShopData::Swap(DirectBuyShopData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(last_refresh_time_, other->last_refresh_time_);
    can_take_goods_list_.Swap(&other->can_take_goods_list_);
    std::swap(last_refresh_year_day_, other->last_refresh_year_day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DirectBuyShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DirectBuyShopData_descriptor_;
  metadata.reflection = DirectBuyShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeShopData::kGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

ExchangeShopData::ExchangeShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeShopData::InitAsDefaultInstance() {
}

ExchangeShopData::ExchangeShopData(const ExchangeShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeShopData::~ExchangeShopData() {
  SharedDtor();
}

void ExchangeShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeShopData_descriptor_;
}

const ExchangeShopData& ExchangeShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ExchangeShopData* ExchangeShopData::default_instance_ = NULL;

ExchangeShopData* ExchangeShopData::New() const {
  return new ExchangeShopData;
}

void ExchangeShopData::Clear() {
  goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods goods_buy_record = 1;
  total_size += 1 * this->goods_buy_record_size();
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeShopData::MergeFrom(const ExchangeShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_buy_record_.MergeFrom(from.goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeShopData::CopyFrom(const ExchangeShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeShopData::IsInitialized() const {

  for (int i = 0; i < goods_buy_record_size(); i++) {
    if (!this->goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ExchangeShopData::Swap(ExchangeShopData* other) {
  if (other != this) {
    goods_buy_record_.Swap(&other->goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeShopData_descriptor_;
  metadata.reflection = ExchangeShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendShopData::kGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

RecommendShopData::RecommendShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecommendShopData::InitAsDefaultInstance() {
}

RecommendShopData::RecommendShopData(const RecommendShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecommendShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendShopData::~RecommendShopData() {
  SharedDtor();
}

void RecommendShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendShopData_descriptor_;
}

const RecommendShopData& RecommendShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RecommendShopData* RecommendShopData::default_instance_ = NULL;

RecommendShopData* RecommendShopData::New() const {
  return new RecommendShopData;
}

void RecommendShopData::Clear() {
  goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecommendShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecommendShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecommendShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods goods_buy_record = 1;
  total_size += 1 * this->goods_buy_record_size();
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendShopData::MergeFrom(const RecommendShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_buy_record_.MergeFrom(from.goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendShopData::CopyFrom(const RecommendShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendShopData::IsInitialized() const {

  for (int i = 0; i < goods_buy_record_size(); i++) {
    if (!this->goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void RecommendShopData::Swap(RecommendShopData* other) {
  if (other != this) {
    goods_buy_record_.Swap(&other->goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendShopData_descriptor_;
  metadata.reflection = RecommendShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonShop::kNormalGoodsBuyRecordFieldNumber;
const int TeamDungeonShop::kRewardGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

TeamDungeonShop::TeamDungeonShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonShop::InitAsDefaultInstance() {
}

TeamDungeonShop::TeamDungeonShop(const TeamDungeonShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonShop::~TeamDungeonShop() {
  SharedDtor();
}

void TeamDungeonShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDungeonShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonShop_descriptor_;
}

const TeamDungeonShop& TeamDungeonShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonShop* TeamDungeonShop::default_instance_ = NULL;

TeamDungeonShop* TeamDungeonShop::New() const {
  return new TeamDungeonShop;
}

void TeamDungeonShop::Clear() {
  normal_goods_buy_record_.Clear();
  reward_goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods normal_goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normal_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_normal_goods_buy_record;
        if (input->ExpectTag(18)) goto parse_reward_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods reward_goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods normal_goods_buy_record = 1;
  for (int i = 0; i < this->normal_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normal_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods normal_goods_buy_record = 1;
  for (int i = 0; i < this->normal_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normal_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonShop::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods normal_goods_buy_record = 1;
  total_size += 1 * this->normal_goods_buy_record_size();
  for (int i = 0; i < this->normal_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normal_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  total_size += 1 * this->reward_goods_buy_record_size();
  for (int i = 0; i < this->reward_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonShop::MergeFrom(const TeamDungeonShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  normal_goods_buy_record_.MergeFrom(from.normal_goods_buy_record_);
  reward_goods_buy_record_.MergeFrom(from.reward_goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonShop::CopyFrom(const TeamDungeonShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonShop::IsInitialized() const {

  for (int i = 0; i < normal_goods_buy_record_size(); i++) {
    if (!this->normal_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < reward_goods_buy_record_size(); i++) {
    if (!this->reward_goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void TeamDungeonShop::Swap(TeamDungeonShop* other) {
  if (other != this) {
    normal_goods_buy_record_.Swap(&other->normal_goods_buy_record_);
    reward_goods_buy_record_.Swap(&other->reward_goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonShop_descriptor_;
  metadata.reflection = TeamDungeonShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChristmasShop::kScoreExchangeGoodsBuyRecordFieldNumber;
const int ChristmasShop::kItemExchangeGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

ChristmasShop::ChristmasShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChristmasShop::InitAsDefaultInstance() {
}

ChristmasShop::ChristmasShop(const ChristmasShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChristmasShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChristmasShop::~ChristmasShop() {
  SharedDtor();
}

void ChristmasShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChristmasShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChristmasShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChristmasShop_descriptor_;
}

const ChristmasShop& ChristmasShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ChristmasShop* ChristmasShop::default_instance_ = NULL;

ChristmasShop* ChristmasShop::New() const {
  return new ChristmasShop;
}

void ChristmasShop::Clear() {
  score_exchange_goods_buy_record_.Clear();
  item_exchange_goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChristmasShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_exchange_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_exchange_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_score_exchange_goods_buy_record;
        if (input->ExpectTag(18)) goto parse_item_exchange_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_exchange_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_exchange_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item_exchange_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChristmasShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
  for (int i = 0; i < this->score_exchange_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->score_exchange_goods_buy_record(i), output);
  }

  // repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
  for (int i = 0; i < this->item_exchange_goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item_exchange_goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChristmasShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
  for (int i = 0; i < this->score_exchange_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->score_exchange_goods_buy_record(i), target);
  }

  // repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
  for (int i = 0; i < this->item_exchange_goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item_exchange_goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChristmasShop::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
  total_size += 1 * this->score_exchange_goods_buy_record_size();
  for (int i = 0; i < this->score_exchange_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_exchange_goods_buy_record(i));
  }

  // repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
  total_size += 1 * this->item_exchange_goods_buy_record_size();
  for (int i = 0; i < this->item_exchange_goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_exchange_goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChristmasShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChristmasShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChristmasShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChristmasShop::MergeFrom(const ChristmasShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_exchange_goods_buy_record_.MergeFrom(from.score_exchange_goods_buy_record_);
  item_exchange_goods_buy_record_.MergeFrom(from.item_exchange_goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChristmasShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChristmasShop::CopyFrom(const ChristmasShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChristmasShop::IsInitialized() const {

  for (int i = 0; i < score_exchange_goods_buy_record_size(); i++) {
    if (!this->score_exchange_goods_buy_record(i).IsInitialized()) return false;
  }
  for (int i = 0; i < item_exchange_goods_buy_record_size(); i++) {
    if (!this->item_exchange_goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ChristmasShop::Swap(ChristmasShop* other) {
  if (other != this) {
    score_exchange_goods_buy_record_.Swap(&other->score_exchange_goods_buy_record_);
    item_exchange_goods_buy_record_.Swap(&other->item_exchange_goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChristmasShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChristmasShop_descriptor_;
  metadata.reflection = ChristmasShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CrystalShop::kTodayRefreshTimesFieldNumber;
const int CrystalShop::kGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

CrystalShop::CrystalShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CrystalShop::InitAsDefaultInstance() {
}

CrystalShop::CrystalShop(const CrystalShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CrystalShop::SharedCtor() {
  _cached_size_ = 0;
  today_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CrystalShop::~CrystalShop() {
  SharedDtor();
}

void CrystalShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CrystalShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CrystalShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CrystalShop_descriptor_;
}

const CrystalShop& CrystalShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

CrystalShop* CrystalShop::default_instance_ = NULL;

CrystalShop* CrystalShop::New() const {
  return new CrystalShop;
}

void CrystalShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_refresh_times_ = 0u;
  }
  goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CrystalShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_refresh_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_refresh_times_)));
          set_has_today_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods_buy_record;
        break;
      }

      // repeated .PB.ShopGoods goods_buy_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CrystalShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_refresh_times = 1;
  if (has_today_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_refresh_times(), output);
  }

  // repeated .PB.ShopGoods goods_buy_record = 2;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CrystalShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_refresh_times = 1;
  if (has_today_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_refresh_times(), target);
  }

  // repeated .PB.ShopGoods goods_buy_record = 2;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CrystalShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_refresh_times = 1;
    if (has_today_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_refresh_times());
    }

  }
  // repeated .PB.ShopGoods goods_buy_record = 2;
  total_size += 1 * this->goods_buy_record_size();
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CrystalShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CrystalShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CrystalShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CrystalShop::MergeFrom(const CrystalShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_buy_record_.MergeFrom(from.goods_buy_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_refresh_times()) {
      set_today_refresh_times(from.today_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CrystalShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CrystalShop::CopyFrom(const CrystalShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrystalShop::IsInitialized() const {

  for (int i = 0; i < goods_buy_record_size(); i++) {
    if (!this->goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void CrystalShop::Swap(CrystalShop* other) {
  if (other != this) {
    std::swap(today_refresh_times_, other->today_refresh_times_);
    goods_buy_record_.Swap(&other->goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CrystalShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CrystalShop_descriptor_;
  metadata.reflection = CrystalShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceWarShop::kGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

ResourceWarShop::ResourceWarShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceWarShop::InitAsDefaultInstance() {
}

ResourceWarShop::ResourceWarShop(const ResourceWarShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceWarShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceWarShop::~ResourceWarShop() {
  SharedDtor();
}

void ResourceWarShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceWarShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceWarShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceWarShop_descriptor_;
}

const ResourceWarShop& ResourceWarShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ResourceWarShop* ResourceWarShop::default_instance_ = NULL;

ResourceWarShop* ResourceWarShop::New() const {
  return new ResourceWarShop;
}

void ResourceWarShop::Clear() {
  goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceWarShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceWarShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceWarShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceWarShop::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods goods_buy_record = 1;
  total_size += 1 * this->goods_buy_record_size();
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceWarShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceWarShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceWarShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceWarShop::MergeFrom(const ResourceWarShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_buy_record_.MergeFrom(from.goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceWarShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWarShop::CopyFrom(const ResourceWarShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWarShop::IsInitialized() const {

  for (int i = 0; i < goods_buy_record_size(); i++) {
    if (!this->goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceWarShop::Swap(ResourceWarShop* other) {
  if (other != this) {
    goods_buy_record_.Swap(&other->goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceWarShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceWarShop_descriptor_;
  metadata.reflection = ResourceWarShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMShopData::kGoodsBuyRecordFieldNumber;
#endif  // !_MSC_VER

GMShopData::GMShopData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMShopData::InitAsDefaultInstance() {
}

GMShopData::GMShopData(const GMShopData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMShopData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMShopData::~GMShopData() {
  SharedDtor();
}

void GMShopData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMShopData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMShopData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMShopData_descriptor_;
}

const GMShopData& GMShopData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GMShopData* GMShopData::default_instance_ = NULL;

GMShopData* GMShopData::New() const {
  return new GMShopData;
}

void GMShopData::Clear() {
  goods_buy_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMShopData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ShopGoods goods_buy_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_buy_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_buy_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_buy_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMShopData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_buy_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMShopData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ShopGoods goods_buy_record = 1;
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_buy_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMShopData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ShopGoods goods_buy_record = 1;
  total_size += 1 * this->goods_buy_record_size();
  for (int i = 0; i < this->goods_buy_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_buy_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMShopData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMShopData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMShopData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMShopData::MergeFrom(const GMShopData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_buy_record_.MergeFrom(from.goods_buy_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMShopData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMShopData::CopyFrom(const GMShopData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMShopData::IsInitialized() const {

  for (int i = 0; i < goods_buy_record_size(); i++) {
    if (!this->goods_buy_record(i).IsInitialized()) return false;
  }
  return true;
}

void GMShopData::Swap(GMShopData* other) {
  if (other != this) {
    goods_buy_record_.Swap(&other->goods_buy_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMShopData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMShopData_descriptor_;
  metadata.reflection = GMShopData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleShopInfo::kHeroShopFieldNumber;
const int RoleShopInfo::kGuildShopFieldNumber;
const int RoleShopInfo::kMallShopFieldNumber;
const int RoleShopInfo::kTowerShopFieldNumber;
const int RoleShopInfo::kArenaShopFieldNumber;
const int RoleShopInfo::kAwakenShopFieldNumber;
const int RoleShopInfo::kFairyShopFieldNumber;
const int RoleShopInfo::kScoreMatchShopFieldNumber;
const int RoleShopInfo::kSevenDayShopFieldNumber;
const int RoleShopInfo::kLevelGiftShopFieldNumber;
const int RoleShopInfo::kEndlessLandShopFieldNumber;
const int RoleShopInfo::kDirectBuyShopFieldNumber;
const int RoleShopInfo::kExchangeShopFieldNumber;
const int RoleShopInfo::kRecommendShopFieldNumber;
const int RoleShopInfo::kTeamdungeonShopFieldNumber;
const int RoleShopInfo::kChristmasShopFieldNumber;
const int RoleShopInfo::kCrystalShopFieldNumber;
const int RoleShopInfo::kResourceWarShopFieldNumber;
const int RoleShopInfo::kGmShopFieldNumber;
#endif  // !_MSC_VER

RoleShopInfo::RoleShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleShopInfo::InitAsDefaultInstance() {
  hero_shop_ = const_cast< ::PB::HeroShopData*>(&::PB::HeroShopData::default_instance());
  guild_shop_ = const_cast< ::PB::GuildShopData*>(&::PB::GuildShopData::default_instance());
  mall_shop_ = const_cast< ::PB::MallShopData*>(&::PB::MallShopData::default_instance());
  tower_shop_ = const_cast< ::PB::TowerShopData*>(&::PB::TowerShopData::default_instance());
  arena_shop_ = const_cast< ::PB::ArenaShopData*>(&::PB::ArenaShopData::default_instance());
  awaken_shop_ = const_cast< ::PB::AwakenShopData*>(&::PB::AwakenShopData::default_instance());
  fairy_shop_ = const_cast< ::PB::FairyShopData*>(&::PB::FairyShopData::default_instance());
  score_match_shop_ = const_cast< ::PB::ScoreMatchShopData*>(&::PB::ScoreMatchShopData::default_instance());
  seven_day_shop_ = const_cast< ::PB::SevenDayShopData*>(&::PB::SevenDayShopData::default_instance());
  level_gift_shop_ = const_cast< ::PB::LevelGiftShopData*>(&::PB::LevelGiftShopData::default_instance());
  endless_land_shop_ = const_cast< ::PB::EndlessLandShopData*>(&::PB::EndlessLandShopData::default_instance());
  direct_buy_shop_ = const_cast< ::PB::DirectBuyShopData*>(&::PB::DirectBuyShopData::default_instance());
  exchange_shop_ = const_cast< ::PB::ExchangeShopData*>(&::PB::ExchangeShopData::default_instance());
  recommend_shop_ = const_cast< ::PB::RecommendShopData*>(&::PB::RecommendShopData::default_instance());
  teamdungeon_shop_ = const_cast< ::PB::TeamDungeonShop*>(&::PB::TeamDungeonShop::default_instance());
  christmas_shop_ = const_cast< ::PB::ChristmasShop*>(&::PB::ChristmasShop::default_instance());
  crystal_shop_ = const_cast< ::PB::CrystalShop*>(&::PB::CrystalShop::default_instance());
  resource_war_shop_ = const_cast< ::PB::ResourceWarShop*>(&::PB::ResourceWarShop::default_instance());
  gm_shop_ = const_cast< ::PB::GMShopData*>(&::PB::GMShopData::default_instance());
}

RoleShopInfo::RoleShopInfo(const RoleShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleShopInfo::SharedCtor() {
  _cached_size_ = 0;
  hero_shop_ = NULL;
  guild_shop_ = NULL;
  mall_shop_ = NULL;
  tower_shop_ = NULL;
  arena_shop_ = NULL;
  awaken_shop_ = NULL;
  fairy_shop_ = NULL;
  score_match_shop_ = NULL;
  seven_day_shop_ = NULL;
  level_gift_shop_ = NULL;
  endless_land_shop_ = NULL;
  direct_buy_shop_ = NULL;
  exchange_shop_ = NULL;
  recommend_shop_ = NULL;
  teamdungeon_shop_ = NULL;
  christmas_shop_ = NULL;
  crystal_shop_ = NULL;
  resource_war_shop_ = NULL;
  gm_shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleShopInfo::~RoleShopInfo() {
  SharedDtor();
}

void RoleShopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete hero_shop_;
    delete guild_shop_;
    delete mall_shop_;
    delete tower_shop_;
    delete arena_shop_;
    delete awaken_shop_;
    delete fairy_shop_;
    delete score_match_shop_;
    delete seven_day_shop_;
    delete level_gift_shop_;
    delete endless_land_shop_;
    delete direct_buy_shop_;
    delete exchange_shop_;
    delete recommend_shop_;
    delete teamdungeon_shop_;
    delete christmas_shop_;
    delete crystal_shop_;
    delete resource_war_shop_;
    delete gm_shop_;
  }
}

void RoleShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleShopInfo_descriptor_;
}

const RoleShopInfo& RoleShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleShopInfo* RoleShopInfo::default_instance_ = NULL;

RoleShopInfo* RoleShopInfo::New() const {
  return new RoleShopInfo;
}

void RoleShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero_shop()) {
      if (hero_shop_ != NULL) hero_shop_->::PB::HeroShopData::Clear();
    }
    if (has_guild_shop()) {
      if (guild_shop_ != NULL) guild_shop_->::PB::GuildShopData::Clear();
    }
    if (has_mall_shop()) {
      if (mall_shop_ != NULL) mall_shop_->::PB::MallShopData::Clear();
    }
    if (has_tower_shop()) {
      if (tower_shop_ != NULL) tower_shop_->::PB::TowerShopData::Clear();
    }
    if (has_arena_shop()) {
      if (arena_shop_ != NULL) arena_shop_->::PB::ArenaShopData::Clear();
    }
    if (has_awaken_shop()) {
      if (awaken_shop_ != NULL) awaken_shop_->::PB::AwakenShopData::Clear();
    }
    if (has_fairy_shop()) {
      if (fairy_shop_ != NULL) fairy_shop_->::PB::FairyShopData::Clear();
    }
    if (has_score_match_shop()) {
      if (score_match_shop_ != NULL) score_match_shop_->::PB::ScoreMatchShopData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_seven_day_shop()) {
      if (seven_day_shop_ != NULL) seven_day_shop_->::PB::SevenDayShopData::Clear();
    }
    if (has_level_gift_shop()) {
      if (level_gift_shop_ != NULL) level_gift_shop_->::PB::LevelGiftShopData::Clear();
    }
    if (has_endless_land_shop()) {
      if (endless_land_shop_ != NULL) endless_land_shop_->::PB::EndlessLandShopData::Clear();
    }
    if (has_direct_buy_shop()) {
      if (direct_buy_shop_ != NULL) direct_buy_shop_->::PB::DirectBuyShopData::Clear();
    }
    if (has_exchange_shop()) {
      if (exchange_shop_ != NULL) exchange_shop_->::PB::ExchangeShopData::Clear();
    }
    if (has_recommend_shop()) {
      if (recommend_shop_ != NULL) recommend_shop_->::PB::RecommendShopData::Clear();
    }
    if (has_teamdungeon_shop()) {
      if (teamdungeon_shop_ != NULL) teamdungeon_shop_->::PB::TeamDungeonShop::Clear();
    }
    if (has_christmas_shop()) {
      if (christmas_shop_ != NULL) christmas_shop_->::PB::ChristmasShop::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_crystal_shop()) {
      if (crystal_shop_ != NULL) crystal_shop_->::PB::CrystalShop::Clear();
    }
    if (has_resource_war_shop()) {
      if (resource_war_shop_ != NULL) resource_war_shop_->::PB::ResourceWarShop::Clear();
    }
    if (has_gm_shop()) {
      if (gm_shop_ != NULL) gm_shop_->::PB::GMShopData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB.HeroShopData hero_shop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hero_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_shop;
        break;
      }

      // required .PB.GuildShopData guild_shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mall_shop;
        break;
      }

      // required .PB.MallShopData mall_shop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mall_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tower_shop;
        break;
      }

      // required .PB.TowerShopData tower_shop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arena_shop;
        break;
      }

      // required .PB.ArenaShopData arena_shop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_awaken_shop;
        break;
      }

      // required .PB.AwakenShopData awaken_shop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awaken_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awaken_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fairy_shop;
        break;
      }

      // required .PB.FairyShopData fairy_shop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fairy_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_score_match_shop;
        break;
      }

      // required .PB.ScoreMatchShopData score_match_shop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_match_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_score_match_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_seven_day_shop;
        break;
      }

      // optional .PB.SevenDayShopData seven_day_shop = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_day_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_day_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_level_gift_shop;
        break;
      }

      // optional .PB.LevelGiftShopData level_gift_shop = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_gift_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_level_gift_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_endless_land_shop;
        break;
      }

      // optional .PB.EndlessLandShopData endless_land_shop = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endless_land_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endless_land_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_direct_buy_shop;
        break;
      }

      // optional .PB.DirectBuyShopData direct_buy_shop = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direct_buy_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct_buy_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_exchange_shop;
        break;
      }

      // optional .PB.ExchangeShopData exchange_shop = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exchange_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exchange_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_recommend_shop;
        break;
      }

      // optional .PB.RecommendShopData recommend_shop = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recommend_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recommend_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_teamdungeon_shop;
        break;
      }

      // optional .PB.TeamDungeonShop teamdungeon_shop = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamdungeon_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamdungeon_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_christmas_shop;
        break;
      }

      // optional .PB.ChristmasShop christmas_shop = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_christmas_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmas_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_crystal_shop;
        break;
      }

      // optional .PB.CrystalShop crystal_shop = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_crystal_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_crystal_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_resource_war_shop;
        break;
      }

      // optional .PB.ResourceWarShop resource_war_shop = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_war_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_war_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_gm_shop;
        break;
      }

      // optional .PB.GMShopData gm_shop = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gm_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gm_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PB.HeroShopData hero_shop = 1;
  if (has_hero_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hero_shop(), output);
  }

  // required .PB.GuildShopData guild_shop = 2;
  if (has_guild_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guild_shop(), output);
  }

  // required .PB.MallShopData mall_shop = 3;
  if (has_mall_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mall_shop(), output);
  }

  // required .PB.TowerShopData tower_shop = 4;
  if (has_tower_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tower_shop(), output);
  }

  // required .PB.ArenaShopData arena_shop = 5;
  if (has_arena_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arena_shop(), output);
  }

  // required .PB.AwakenShopData awaken_shop = 6;
  if (has_awaken_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->awaken_shop(), output);
  }

  // required .PB.FairyShopData fairy_shop = 7;
  if (has_fairy_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fairy_shop(), output);
  }

  // required .PB.ScoreMatchShopData score_match_shop = 8;
  if (has_score_match_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->score_match_shop(), output);
  }

  // optional .PB.SevenDayShopData seven_day_shop = 9;
  if (has_seven_day_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->seven_day_shop(), output);
  }

  // optional .PB.LevelGiftShopData level_gift_shop = 10;
  if (has_level_gift_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->level_gift_shop(), output);
  }

  // optional .PB.EndlessLandShopData endless_land_shop = 11;
  if (has_endless_land_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->endless_land_shop(), output);
  }

  // optional .PB.DirectBuyShopData direct_buy_shop = 12;
  if (has_direct_buy_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->direct_buy_shop(), output);
  }

  // optional .PB.ExchangeShopData exchange_shop = 13;
  if (has_exchange_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->exchange_shop(), output);
  }

  // optional .PB.RecommendShopData recommend_shop = 14;
  if (has_recommend_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->recommend_shop(), output);
  }

  // optional .PB.TeamDungeonShop teamdungeon_shop = 15;
  if (has_teamdungeon_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->teamdungeon_shop(), output);
  }

  // optional .PB.ChristmasShop christmas_shop = 16;
  if (has_christmas_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->christmas_shop(), output);
  }

  // optional .PB.CrystalShop crystal_shop = 17;
  if (has_crystal_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->crystal_shop(), output);
  }

  // optional .PB.ResourceWarShop resource_war_shop = 18;
  if (has_resource_war_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->resource_war_shop(), output);
  }

  // optional .PB.GMShopData gm_shop = 19;
  if (has_gm_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->gm_shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PB.HeroShopData hero_shop = 1;
  if (has_hero_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hero_shop(), target);
  }

  // required .PB.GuildShopData guild_shop = 2;
  if (has_guild_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guild_shop(), target);
  }

  // required .PB.MallShopData mall_shop = 3;
  if (has_mall_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mall_shop(), target);
  }

  // required .PB.TowerShopData tower_shop = 4;
  if (has_tower_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tower_shop(), target);
  }

  // required .PB.ArenaShopData arena_shop = 5;
  if (has_arena_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arena_shop(), target);
  }

  // required .PB.AwakenShopData awaken_shop = 6;
  if (has_awaken_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->awaken_shop(), target);
  }

  // required .PB.FairyShopData fairy_shop = 7;
  if (has_fairy_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fairy_shop(), target);
  }

  // required .PB.ScoreMatchShopData score_match_shop = 8;
  if (has_score_match_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->score_match_shop(), target);
  }

  // optional .PB.SevenDayShopData seven_day_shop = 9;
  if (has_seven_day_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->seven_day_shop(), target);
  }

  // optional .PB.LevelGiftShopData level_gift_shop = 10;
  if (has_level_gift_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->level_gift_shop(), target);
  }

  // optional .PB.EndlessLandShopData endless_land_shop = 11;
  if (has_endless_land_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->endless_land_shop(), target);
  }

  // optional .PB.DirectBuyShopData direct_buy_shop = 12;
  if (has_direct_buy_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->direct_buy_shop(), target);
  }

  // optional .PB.ExchangeShopData exchange_shop = 13;
  if (has_exchange_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->exchange_shop(), target);
  }

  // optional .PB.RecommendShopData recommend_shop = 14;
  if (has_recommend_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->recommend_shop(), target);
  }

  // optional .PB.TeamDungeonShop teamdungeon_shop = 15;
  if (has_teamdungeon_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->teamdungeon_shop(), target);
  }

  // optional .PB.ChristmasShop christmas_shop = 16;
  if (has_christmas_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->christmas_shop(), target);
  }

  // optional .PB.CrystalShop crystal_shop = 17;
  if (has_crystal_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->crystal_shop(), target);
  }

  // optional .PB.ResourceWarShop resource_war_shop = 18;
  if (has_resource_war_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->resource_war_shop(), target);
  }

  // optional .PB.GMShopData gm_shop = 19;
  if (has_gm_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->gm_shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PB.HeroShopData hero_shop = 1;
    if (has_hero_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hero_shop());
    }

    // required .PB.GuildShopData guild_shop = 2;
    if (has_guild_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_shop());
    }

    // required .PB.MallShopData mall_shop = 3;
    if (has_mall_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mall_shop());
    }

    // required .PB.TowerShopData tower_shop = 4;
    if (has_tower_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower_shop());
    }

    // required .PB.ArenaShopData arena_shop = 5;
    if (has_arena_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_shop());
    }

    // required .PB.AwakenShopData awaken_shop = 6;
    if (has_awaken_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awaken_shop());
    }

    // required .PB.FairyShopData fairy_shop = 7;
    if (has_fairy_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fairy_shop());
    }

    // required .PB.ScoreMatchShopData score_match_shop = 8;
    if (has_score_match_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->score_match_shop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.SevenDayShopData seven_day_shop = 9;
    if (has_seven_day_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_day_shop());
    }

    // optional .PB.LevelGiftShopData level_gift_shop = 10;
    if (has_level_gift_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->level_gift_shop());
    }

    // optional .PB.EndlessLandShopData endless_land_shop = 11;
    if (has_endless_land_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endless_land_shop());
    }

    // optional .PB.DirectBuyShopData direct_buy_shop = 12;
    if (has_direct_buy_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct_buy_shop());
    }

    // optional .PB.ExchangeShopData exchange_shop = 13;
    if (has_exchange_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exchange_shop());
    }

    // optional .PB.RecommendShopData recommend_shop = 14;
    if (has_recommend_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recommend_shop());
    }

    // optional .PB.TeamDungeonShop teamdungeon_shop = 15;
    if (has_teamdungeon_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamdungeon_shop());
    }

    // optional .PB.ChristmasShop christmas_shop = 16;
    if (has_christmas_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmas_shop());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PB.CrystalShop crystal_shop = 17;
    if (has_crystal_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->crystal_shop());
    }

    // optional .PB.ResourceWarShop resource_war_shop = 18;
    if (has_resource_war_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_war_shop());
    }

    // optional .PB.GMShopData gm_shop = 19;
    if (has_gm_shop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gm_shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleShopInfo::MergeFrom(const RoleShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_shop()) {
      mutable_hero_shop()->::PB::HeroShopData::MergeFrom(from.hero_shop());
    }
    if (from.has_guild_shop()) {
      mutable_guild_shop()->::PB::GuildShopData::MergeFrom(from.guild_shop());
    }
    if (from.has_mall_shop()) {
      mutable_mall_shop()->::PB::MallShopData::MergeFrom(from.mall_shop());
    }
    if (from.has_tower_shop()) {
      mutable_tower_shop()->::PB::TowerShopData::MergeFrom(from.tower_shop());
    }
    if (from.has_arena_shop()) {
      mutable_arena_shop()->::PB::ArenaShopData::MergeFrom(from.arena_shop());
    }
    if (from.has_awaken_shop()) {
      mutable_awaken_shop()->::PB::AwakenShopData::MergeFrom(from.awaken_shop());
    }
    if (from.has_fairy_shop()) {
      mutable_fairy_shop()->::PB::FairyShopData::MergeFrom(from.fairy_shop());
    }
    if (from.has_score_match_shop()) {
      mutable_score_match_shop()->::PB::ScoreMatchShopData::MergeFrom(from.score_match_shop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_seven_day_shop()) {
      mutable_seven_day_shop()->::PB::SevenDayShopData::MergeFrom(from.seven_day_shop());
    }
    if (from.has_level_gift_shop()) {
      mutable_level_gift_shop()->::PB::LevelGiftShopData::MergeFrom(from.level_gift_shop());
    }
    if (from.has_endless_land_shop()) {
      mutable_endless_land_shop()->::PB::EndlessLandShopData::MergeFrom(from.endless_land_shop());
    }
    if (from.has_direct_buy_shop()) {
      mutable_direct_buy_shop()->::PB::DirectBuyShopData::MergeFrom(from.direct_buy_shop());
    }
    if (from.has_exchange_shop()) {
      mutable_exchange_shop()->::PB::ExchangeShopData::MergeFrom(from.exchange_shop());
    }
    if (from.has_recommend_shop()) {
      mutable_recommend_shop()->::PB::RecommendShopData::MergeFrom(from.recommend_shop());
    }
    if (from.has_teamdungeon_shop()) {
      mutable_teamdungeon_shop()->::PB::TeamDungeonShop::MergeFrom(from.teamdungeon_shop());
    }
    if (from.has_christmas_shop()) {
      mutable_christmas_shop()->::PB::ChristmasShop::MergeFrom(from.christmas_shop());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_crystal_shop()) {
      mutable_crystal_shop()->::PB::CrystalShop::MergeFrom(from.crystal_shop());
    }
    if (from.has_resource_war_shop()) {
      mutable_resource_war_shop()->::PB::ResourceWarShop::MergeFrom(from.resource_war_shop());
    }
    if (from.has_gm_shop()) {
      mutable_gm_shop()->::PB::GMShopData::MergeFrom(from.gm_shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleShopInfo::CopyFrom(const RoleShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleShopInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_hero_shop()) {
    if (!this->hero_shop().IsInitialized()) return false;
  }
  if (has_guild_shop()) {
    if (!this->guild_shop().IsInitialized()) return false;
  }
  if (has_mall_shop()) {
    if (!this->mall_shop().IsInitialized()) return false;
  }
  if (has_tower_shop()) {
    if (!this->tower_shop().IsInitialized()) return false;
  }
  if (has_arena_shop()) {
    if (!this->arena_shop().IsInitialized()) return false;
  }
  if (has_awaken_shop()) {
    if (!this->awaken_shop().IsInitialized()) return false;
  }
  if (has_fairy_shop()) {
    if (!this->fairy_shop().IsInitialized()) return false;
  }
  if (has_score_match_shop()) {
    if (!this->score_match_shop().IsInitialized()) return false;
  }
  if (has_seven_day_shop()) {
    if (!this->seven_day_shop().IsInitialized()) return false;
  }
  if (has_level_gift_shop()) {
    if (!this->level_gift_shop().IsInitialized()) return false;
  }
  if (has_endless_land_shop()) {
    if (!this->endless_land_shop().IsInitialized()) return false;
  }
  if (has_direct_buy_shop()) {
    if (!this->direct_buy_shop().IsInitialized()) return false;
  }
  if (has_exchange_shop()) {
    if (!this->exchange_shop().IsInitialized()) return false;
  }
  if (has_recommend_shop()) {
    if (!this->recommend_shop().IsInitialized()) return false;
  }
  if (has_teamdungeon_shop()) {
    if (!this->teamdungeon_shop().IsInitialized()) return false;
  }
  if (has_christmas_shop()) {
    if (!this->christmas_shop().IsInitialized()) return false;
  }
  if (has_crystal_shop()) {
    if (!this->crystal_shop().IsInitialized()) return false;
  }
  if (has_resource_war_shop()) {
    if (!this->resource_war_shop().IsInitialized()) return false;
  }
  if (has_gm_shop()) {
    if (!this->gm_shop().IsInitialized()) return false;
  }
  return true;
}

void RoleShopInfo::Swap(RoleShopInfo* other) {
  if (other != this) {
    std::swap(hero_shop_, other->hero_shop_);
    std::swap(guild_shop_, other->guild_shop_);
    std::swap(mall_shop_, other->mall_shop_);
    std::swap(tower_shop_, other->tower_shop_);
    std::swap(arena_shop_, other->arena_shop_);
    std::swap(awaken_shop_, other->awaken_shop_);
    std::swap(fairy_shop_, other->fairy_shop_);
    std::swap(score_match_shop_, other->score_match_shop_);
    std::swap(seven_day_shop_, other->seven_day_shop_);
    std::swap(level_gift_shop_, other->level_gift_shop_);
    std::swap(endless_land_shop_, other->endless_land_shop_);
    std::swap(direct_buy_shop_, other->direct_buy_shop_);
    std::swap(exchange_shop_, other->exchange_shop_);
    std::swap(recommend_shop_, other->recommend_shop_);
    std::swap(teamdungeon_shop_, other->teamdungeon_shop_);
    std::swap(christmas_shop_, other->christmas_shop_);
    std::swap(crystal_shop_, other->crystal_shop_);
    std::swap(resource_war_shop_, other->resource_war_shop_);
    std::swap(gm_shop_, other->gm_shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleShopInfo_descriptor_;
  metadata.reflection = RoleShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritData::kIdFieldNumber;
const int SpiritData::kEnhanceLevelFieldNumber;
const int SpiritData::kTrainStageFieldNumber;
const int SpiritData::kTrainTimesFieldNumber;
const int SpiritData::kStarFieldNumber;
#endif  // !_MSC_VER

SpiritData::SpiritData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpiritData::InitAsDefaultInstance() {
}

SpiritData::SpiritData(const SpiritData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpiritData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  enhance_level_ = 0u;
  train_stage_ = 0u;
  train_times_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritData::~SpiritData() {
  SharedDtor();
}

void SpiritData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritData_descriptor_;
}

const SpiritData& SpiritData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SpiritData* SpiritData::default_instance_ = NULL;

SpiritData* SpiritData::New() const {
  return new SpiritData;
}

void SpiritData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    enhance_level_ = 0u;
    train_stage_ = 0u;
    train_times_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enhance_level;
        break;
      }

      // optional uint32 enhance_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enhance_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enhance_level_)));
          set_has_enhance_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_train_stage;
        break;
      }

      // optional uint32 train_stage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_stage_)));
          set_has_train_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_train_times;
        break;
      }

      // optional uint32 train_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_train_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &train_times_)));
          set_has_train_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_star;
        break;
      }

      // optional uint32 star = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpiritData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 enhance_level = 2;
  if (has_enhance_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->enhance_level(), output);
  }

  // optional uint32 train_stage = 3;
  if (has_train_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->train_stage(), output);
  }

  // optional uint32 train_times = 4;
  if (has_train_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->train_times(), output);
  }

  // optional uint32 star = 5;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpiritData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 enhance_level = 2;
  if (has_enhance_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->enhance_level(), target);
  }

  // optional uint32 train_stage = 3;
  if (has_train_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->train_stage(), target);
  }

  // optional uint32 train_times = 4;
  if (has_train_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->train_times(), target);
  }

  // optional uint32 star = 5;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpiritData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 enhance_level = 2;
    if (has_enhance_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enhance_level());
    }

    // optional uint32 train_stage = 3;
    if (has_train_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_stage());
    }

    // optional uint32 train_times = 4;
    if (has_train_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->train_times());
    }

    // optional uint32 star = 5;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritData::MergeFrom(const SpiritData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_enhance_level()) {
      set_enhance_level(from.enhance_level());
    }
    if (from.has_train_stage()) {
      set_train_stage(from.train_stage());
    }
    if (from.has_train_times()) {
      set_train_times(from.train_times());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritData::CopyFrom(const SpiritData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritData::IsInitialized() const {

  return true;
}

void SpiritData::Swap(SpiritData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(enhance_level_, other->enhance_level_);
    std::swap(train_stage_, other->train_stage_);
    std::swap(train_times_, other->train_times_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritData_descriptor_;
  metadata.reflection = SpiritData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpiritPokedex::kIdFieldNumber;
const int SpiritPokedex::kLevelFieldNumber;
#endif  // !_MSC_VER

SpiritPokedex::SpiritPokedex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SpiritPokedex::InitAsDefaultInstance() {
}

SpiritPokedex::SpiritPokedex(const SpiritPokedex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SpiritPokedex::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpiritPokedex::~SpiritPokedex() {
  SharedDtor();
}

void SpiritPokedex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpiritPokedex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpiritPokedex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpiritPokedex_descriptor_;
}

const SpiritPokedex& SpiritPokedex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SpiritPokedex* SpiritPokedex::default_instance_ = NULL;

SpiritPokedex* SpiritPokedex::New() const {
  return new SpiritPokedex;
}

void SpiritPokedex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpiritPokedex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpiritPokedex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SpiritPokedex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SpiritPokedex::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpiritPokedex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpiritPokedex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpiritPokedex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpiritPokedex::MergeFrom(const SpiritPokedex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpiritPokedex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpiritPokedex::CopyFrom(const SpiritPokedex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpiritPokedex::IsInitialized() const {

  return true;
}

void SpiritPokedex::Swap(SpiritPokedex* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpiritPokedex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpiritPokedex_descriptor_;
  metadata.reflection = SpiritPokedex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSpiritInfo::kStageFieldNumber;
const int RoleSpiritInfo::kLevelFieldNumber;
const int RoleSpiritInfo::kCurUseSpiritIdFieldNumber;
const int RoleSpiritInfo::kSpiritListFieldNumber;
const int RoleSpiritInfo::kPokedexListFieldNumber;
#endif  // !_MSC_VER

RoleSpiritInfo::RoleSpiritInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSpiritInfo::InitAsDefaultInstance() {
}

RoleSpiritInfo::RoleSpiritInfo(const RoleSpiritInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSpiritInfo::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  level_ = 0u;
  cur_use_spirit_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSpiritInfo::~RoleSpiritInfo() {
  SharedDtor();
}

void RoleSpiritInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSpiritInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSpiritInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSpiritInfo_descriptor_;
}

const RoleSpiritInfo& RoleSpiritInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSpiritInfo* RoleSpiritInfo::default_instance_ = NULL;

RoleSpiritInfo* RoleSpiritInfo::New() const {
  return new RoleSpiritInfo;
}

void RoleSpiritInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
    level_ = 0u;
    cur_use_spirit_id_ = 0u;
  }
  spirit_list_.Clear();
  pokedex_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSpiritInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_use_spirit_id;
        break;
      }

      // optional uint32 cur_use_spirit_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_use_spirit_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_use_spirit_id_)));
          set_has_cur_use_spirit_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spirit_list;
        break;
      }

      // repeated .PB.SpiritData spirit_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spirit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spirit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_spirit_list;
        if (input->ExpectTag(42)) goto parse_pokedex_list;
        break;
      }

      // repeated .PB.SpiritPokedex pokedex_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pokedex_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokedex_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pokedex_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSpiritInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 cur_use_spirit_id = 3;
  if (has_cur_use_spirit_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_use_spirit_id(), output);
  }

  // repeated .PB.SpiritData spirit_list = 4;
  for (int i = 0; i < this->spirit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->spirit_list(i), output);
  }

  // repeated .PB.SpiritPokedex pokedex_list = 5;
  for (int i = 0; i < this->pokedex_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pokedex_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSpiritInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 cur_use_spirit_id = 3;
  if (has_cur_use_spirit_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_use_spirit_id(), target);
  }

  // repeated .PB.SpiritData spirit_list = 4;
  for (int i = 0; i < this->spirit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->spirit_list(i), target);
  }

  // repeated .PB.SpiritPokedex pokedex_list = 5;
  for (int i = 0; i < this->pokedex_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pokedex_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSpiritInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 cur_use_spirit_id = 3;
    if (has_cur_use_spirit_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_use_spirit_id());
    }

  }
  // repeated .PB.SpiritData spirit_list = 4;
  total_size += 1 * this->spirit_list_size();
  for (int i = 0; i < this->spirit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spirit_list(i));
  }

  // repeated .PB.SpiritPokedex pokedex_list = 5;
  total_size += 1 * this->pokedex_list_size();
  for (int i = 0; i < this->pokedex_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokedex_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSpiritInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSpiritInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSpiritInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSpiritInfo::MergeFrom(const RoleSpiritInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  spirit_list_.MergeFrom(from.spirit_list_);
  pokedex_list_.MergeFrom(from.pokedex_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_cur_use_spirit_id()) {
      set_cur_use_spirit_id(from.cur_use_spirit_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSpiritInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSpiritInfo::CopyFrom(const RoleSpiritInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSpiritInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleSpiritInfo::Swap(RoleSpiritInfo* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(level_, other->level_);
    std::swap(cur_use_spirit_id_, other->cur_use_spirit_id_);
    spirit_list_.Swap(&other->spirit_list_);
    pokedex_list_.Swap(&other->pokedex_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSpiritInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSpiritInfo_descriptor_;
  metadata.reflection = RoleSpiritInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendData::kRoleIdFieldNumber;
const int FriendData::kIsGiveEnergyFieldNumber;
const int FriendData::kGetEnergyStateFieldNumber;
const int FriendData::kHelpBattleTimesFieldNumber;
#endif  // !_MSC_VER

FriendData::FriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendData::InitAsDefaultInstance() {
}

FriendData::FriendData(const FriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  is_give_energy_ = 0u;
  get_energy_state_ = 0u;
  help_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendData::~FriendData() {
  SharedDtor();
}

void FriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendData_descriptor_;
}

const FriendData& FriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FriendData* FriendData::default_instance_ = NULL;

FriendData* FriendData::New() const {
  return new FriendData;
}

void FriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    is_give_energy_ = 0u;
    get_energy_state_ = 0u;
    help_battle_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_give_energy;
        break;
      }

      // required uint32 is_give_energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_give_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_give_energy_)));
          set_has_is_give_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_get_energy_state;
        break;
      }

      // required uint32 get_energy_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_energy_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_energy_state_)));
          set_has_get_energy_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_help_battle_times;
        break;
      }

      // optional uint32 help_battle_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_help_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &help_battle_times_)));
          set_has_help_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // required uint32 is_give_energy = 2;
  if (has_is_give_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_give_energy(), output);
  }

  // required uint32 get_energy_state = 3;
  if (has_get_energy_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->get_energy_state(), output);
  }

  // optional uint32 help_battle_times = 4;
  if (has_help_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->help_battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // required uint32 is_give_energy = 2;
  if (has_is_give_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_give_energy(), target);
  }

  // required uint32 get_energy_state = 3;
  if (has_get_energy_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->get_energy_state(), target);
  }

  // optional uint32 help_battle_times = 4;
  if (has_help_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->help_battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // required uint32 is_give_energy = 2;
    if (has_is_give_energy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_give_energy());
    }

    // required uint32 get_energy_state = 3;
    if (has_get_energy_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_energy_state());
    }

    // optional uint32 help_battle_times = 4;
    if (has_help_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->help_battle_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendData::MergeFrom(const FriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_is_give_energy()) {
      set_is_give_energy(from.is_give_energy());
    }
    if (from.has_get_energy_state()) {
      set_get_energy_state(from.get_energy_state());
    }
    if (from.has_help_battle_times()) {
      set_help_battle_times(from.help_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendData::CopyFrom(const FriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FriendData::Swap(FriendData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(is_give_energy_, other->is_give_energy_);
    std::swap(get_energy_state_, other->get_energy_state_);
    std::swap(help_battle_times_, other->help_battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendData_descriptor_;
  metadata.reflection = FriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFriendData::kFriendListFieldNumber;
const int RoleFriendData::kBlackListFieldNumber;
const int RoleFriendData::kApplyListFieldNumber;
const int RoleFriendData::kGetEnergyTimesFieldNumber;
#endif  // !_MSC_VER

RoleFriendData::RoleFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFriendData::InitAsDefaultInstance() {
}

RoleFriendData::RoleFriendData(const RoleFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFriendData::SharedCtor() {
  _cached_size_ = 0;
  get_energy_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFriendData::~RoleFriendData() {
  SharedDtor();
}

void RoleFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFriendData_descriptor_;
}

const RoleFriendData& RoleFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleFriendData* RoleFriendData::default_instance_ = NULL;

RoleFriendData* RoleFriendData::New() const {
  return new RoleFriendData;
}

void RoleFriendData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    get_energy_times_ = 0u;
  }
  friend_list_.Clear();
  black_list_.Clear();
  apply_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.FriendData friend_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friend_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friend_list;
        if (input->ExpectTag(16)) goto parse_black_list;
        break;
      }

      // repeated uint32 black_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_black_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_black_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_black_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_black_list;
        if (input->ExpectTag(24)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_apply_list;
        if (input->ExpectTag(32)) goto parse_get_energy_times;
        break;
      }

      // required uint32 get_energy_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_energy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &get_energy_times_)));
          set_has_get_energy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.FriendData friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friend_list(i), output);
  }

  // repeated uint32 black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->black_list(i), output);
  }

  // repeated uint32 apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->apply_list(i), output);
  }

  // required uint32 get_energy_times = 4;
  if (has_get_energy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->get_energy_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.FriendData friend_list = 1;
  for (int i = 0; i < this->friend_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friend_list(i), target);
  }

  // repeated uint32 black_list = 2;
  for (int i = 0; i < this->black_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->black_list(i), target);
  }

  // repeated uint32 apply_list = 3;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->apply_list(i), target);
  }

  // required uint32 get_energy_times = 4;
  if (has_get_energy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->get_energy_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // required uint32 get_energy_times = 4;
    if (has_get_energy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->get_energy_times());
    }

  }
  // repeated .PB.FriendData friend_list = 1;
  total_size += 1 * this->friend_list_size();
  for (int i = 0; i < this->friend_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friend_list(i));
  }

  // repeated uint32 black_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->black_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->black_list(i));
    }
    total_size += 1 * this->black_list_size() + data_size;
  }

  // repeated uint32 apply_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFriendData::MergeFrom(const RoleFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  friend_list_.MergeFrom(from.friend_list_);
  black_list_.MergeFrom(from.black_list_);
  apply_list_.MergeFrom(from.apply_list_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_get_energy_times()) {
      set_get_energy_times(from.get_energy_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFriendData::CopyFrom(const RoleFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFriendData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  for (int i = 0; i < friend_list_size(); i++) {
    if (!this->friend_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleFriendData::Swap(RoleFriendData* other) {
  if (other != this) {
    friend_list_.Swap(&other->friend_list_);
    black_list_.Swap(&other->black_list_);
    apply_list_.Swap(&other->apply_list_);
    std::swap(get_energy_times_, other->get_energy_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFriendData_descriptor_;
  metadata.reflection = RoleFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRebelInfo::kRebelLevelFieldNumber;
const int RoleRebelInfo::kTodayExploitFieldNumber;
const int RoleRebelInfo::kTodayDamageFieldNumber;
const int RoleRebelInfo::kRewardGetRecordListFieldNumber;
const int RoleRebelInfo::kIsAlreadyShareFieldNumber;
#endif  // !_MSC_VER

RoleRebelInfo::RoleRebelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRebelInfo::InitAsDefaultInstance() {
}

RoleRebelInfo::RoleRebelInfo(const RoleRebelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRebelInfo::SharedCtor() {
  _cached_size_ = 0;
  rebel_level_ = 0u;
  today_exploit_ = 0u;
  today_damage_ = 0u;
  is_already_share_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRebelInfo::~RoleRebelInfo() {
  SharedDtor();
}

void RoleRebelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRebelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRebelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRebelInfo_descriptor_;
}

const RoleRebelInfo& RoleRebelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleRebelInfo* RoleRebelInfo::default_instance_ = NULL;

RoleRebelInfo* RoleRebelInfo::New() const {
  return new RoleRebelInfo;
}

void RoleRebelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rebel_level_ = 0u;
    today_exploit_ = 0u;
    today_damage_ = 0u;
    is_already_share_ = 0u;
  }
  reward_get_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRebelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rebel_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rebel_level_)));
          set_has_rebel_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_exploit;
        break;
      }

      // required uint32 today_exploit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_exploit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_exploit_)));
          set_has_today_exploit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_today_damage;
        break;
      }

      // required uint32 today_damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_damage_)));
          set_has_today_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_get_record_list;
        break;
      }

      // repeated uint32 reward_get_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_get_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_reward_get_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_get_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_get_record_list;
        if (input->ExpectTag(40)) goto parse_is_already_share;
        break;
      }

      // required uint32 is_already_share = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_share:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_share_)));
          set_has_is_already_share();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRebelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rebel_level = 1;
  if (has_rebel_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rebel_level(), output);
  }

  // required uint32 today_exploit = 2;
  if (has_today_exploit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_exploit(), output);
  }

  // required uint32 today_damage = 3;
  if (has_today_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_damage(), output);
  }

  // repeated uint32 reward_get_record_list = 4;
  for (int i = 0; i < this->reward_get_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->reward_get_record_list(i), output);
  }

  // required uint32 is_already_share = 5;
  if (has_is_already_share()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->is_already_share(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRebelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rebel_level = 1;
  if (has_rebel_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rebel_level(), target);
  }

  // required uint32 today_exploit = 2;
  if (has_today_exploit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_exploit(), target);
  }

  // required uint32 today_damage = 3;
  if (has_today_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_damage(), target);
  }

  // repeated uint32 reward_get_record_list = 4;
  for (int i = 0; i < this->reward_get_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->reward_get_record_list(i), target);
  }

  // required uint32 is_already_share = 5;
  if (has_is_already_share()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->is_already_share(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRebelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rebel_level = 1;
    if (has_rebel_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rebel_level());
    }

    // required uint32 today_exploit = 2;
    if (has_today_exploit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_exploit());
    }

    // required uint32 today_damage = 3;
    if (has_today_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_damage());
    }

    // required uint32 is_already_share = 5;
    if (has_is_already_share()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_share());
    }

  }
  // repeated uint32 reward_get_record_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_get_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_get_record_list(i));
    }
    total_size += 1 * this->reward_get_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRebelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRebelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRebelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRebelInfo::MergeFrom(const RoleRebelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_get_record_list_.MergeFrom(from.reward_get_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rebel_level()) {
      set_rebel_level(from.rebel_level());
    }
    if (from.has_today_exploit()) {
      set_today_exploit(from.today_exploit());
    }
    if (from.has_today_damage()) {
      set_today_damage(from.today_damage());
    }
    if (from.has_is_already_share()) {
      set_is_already_share(from.is_already_share());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRebelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRebelInfo::CopyFrom(const RoleRebelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRebelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  return true;
}

void RoleRebelInfo::Swap(RoleRebelInfo* other) {
  if (other != this) {
    std::swap(rebel_level_, other->rebel_level_);
    std::swap(today_exploit_, other->today_exploit_);
    std::swap(today_damage_, other->today_damage_);
    reward_get_record_list_.Swap(&other->reward_get_record_list_);
    std::swap(is_already_share_, other->is_already_share_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRebelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRebelInfo_descriptor_;
  metadata.reflection = RoleRebelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDuobaoInfo::kPeaceOverTimeFieldNumber;
const int RoleDuobaoInfo::kDoubaoTimesListFieldNumber;
const int RoleDuobaoInfo::kDailyDuobaoTimesFieldNumber;
const int RoleDuobaoInfo::kPregrossRewardRecordFieldNumber;
#endif  // !_MSC_VER

RoleDuobaoInfo::RoleDuobaoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDuobaoInfo::InitAsDefaultInstance() {
}

RoleDuobaoInfo::RoleDuobaoInfo(const RoleDuobaoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDuobaoInfo::SharedCtor() {
  _cached_size_ = 0;
  peace_over_time_ = 0u;
  daily_duobao_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDuobaoInfo::~RoleDuobaoInfo() {
  SharedDtor();
}

void RoleDuobaoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDuobaoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDuobaoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDuobaoInfo_descriptor_;
}

const RoleDuobaoInfo& RoleDuobaoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleDuobaoInfo* RoleDuobaoInfo::default_instance_ = NULL;

RoleDuobaoInfo* RoleDuobaoInfo::New() const {
  return new RoleDuobaoInfo;
}

void RoleDuobaoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    peace_over_time_ = 0u;
    daily_duobao_times_ = 0u;
  }
  doubao_times_list_.Clear();
  pregross_reward_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDuobaoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 peace_over_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &peace_over_time_)));
          set_has_peace_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doubao_times_list;
        break;
      }

      // repeated uint32 doubao_times_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doubao_times_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_doubao_times_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_doubao_times_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doubao_times_list;
        if (input->ExpectTag(24)) goto parse_daily_duobao_times;
        break;
      }

      // optional uint32 daily_duobao_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_duobao_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_duobao_times_)));
          set_has_daily_duobao_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pregross_reward_record;
        break;
      }

      // repeated uint32 pregross_reward_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pregross_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_pregross_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pregross_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pregross_reward_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDuobaoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 peace_over_time = 1;
  if (has_peace_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->peace_over_time(), output);
  }

  // repeated uint32 doubao_times_list = 2;
  for (int i = 0; i < this->doubao_times_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->doubao_times_list(i), output);
  }

  // optional uint32 daily_duobao_times = 3;
  if (has_daily_duobao_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->daily_duobao_times(), output);
  }

  // repeated uint32 pregross_reward_record = 4;
  for (int i = 0; i < this->pregross_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->pregross_reward_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDuobaoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 peace_over_time = 1;
  if (has_peace_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->peace_over_time(), target);
  }

  // repeated uint32 doubao_times_list = 2;
  for (int i = 0; i < this->doubao_times_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->doubao_times_list(i), target);
  }

  // optional uint32 daily_duobao_times = 3;
  if (has_daily_duobao_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->daily_duobao_times(), target);
  }

  // repeated uint32 pregross_reward_record = 4;
  for (int i = 0; i < this->pregross_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->pregross_reward_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDuobaoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 peace_over_time = 1;
    if (has_peace_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->peace_over_time());
    }

    // optional uint32 daily_duobao_times = 3;
    if (has_daily_duobao_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_duobao_times());
    }

  }
  // repeated uint32 doubao_times_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->doubao_times_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->doubao_times_list(i));
    }
    total_size += 1 * this->doubao_times_list_size() + data_size;
  }

  // repeated uint32 pregross_reward_record = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pregross_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pregross_reward_record(i));
    }
    total_size += 1 * this->pregross_reward_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDuobaoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDuobaoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDuobaoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDuobaoInfo::MergeFrom(const RoleDuobaoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  doubao_times_list_.MergeFrom(from.doubao_times_list_);
  pregross_reward_record_.MergeFrom(from.pregross_reward_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peace_over_time()) {
      set_peace_over_time(from.peace_over_time());
    }
    if (from.has_daily_duobao_times()) {
      set_daily_duobao_times(from.daily_duobao_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDuobaoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDuobaoInfo::CopyFrom(const RoleDuobaoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDuobaoInfo::IsInitialized() const {

  return true;
}

void RoleDuobaoInfo::Swap(RoleDuobaoInfo* other) {
  if (other != this) {
    std::swap(peace_over_time_, other->peace_over_time_);
    doubao_times_list_.Swap(&other->doubao_times_list_);
    std::swap(daily_duobao_times_, other->daily_duobao_times_);
    pregross_reward_record_.Swap(&other->pregross_reward_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDuobaoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDuobaoInfo_descriptor_;
  metadata.reflection = RoleDuobaoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AchievementData::kIdFieldNumber;
const int AchievementData::kLevelFieldNumber;
const int AchievementData::kValueFieldNumber;
const int AchievementData::kCurRewardLevelFieldNumber;
#endif  // !_MSC_VER

AchievementData::AchievementData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AchievementData::InitAsDefaultInstance() {
}

AchievementData::AchievementData(const AchievementData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AchievementData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  level_ = 0u;
  value_ = 0u;
  cur_reward_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AchievementData::~AchievementData() {
  SharedDtor();
}

void AchievementData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AchievementData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AchievementData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AchievementData_descriptor_;
}

const AchievementData& AchievementData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AchievementData* AchievementData::default_instance_ = NULL;

AchievementData* AchievementData::New() const {
  return new AchievementData;
}

void AchievementData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    level_ = 0u;
    value_ = 0u;
    cur_reward_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AchievementData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_reward_level;
        break;
      }

      // required uint32 cur_reward_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_reward_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_reward_level_)));
          set_has_cur_reward_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AchievementData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // required uint32 cur_reward_level = 4;
  if (has_cur_reward_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_reward_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AchievementData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // required uint32 cur_reward_level = 4;
  if (has_cur_reward_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_reward_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AchievementData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // required uint32 cur_reward_level = 4;
    if (has_cur_reward_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_reward_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AchievementData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AchievementData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AchievementData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AchievementData::MergeFrom(const AchievementData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_cur_reward_level()) {
      set_cur_reward_level(from.cur_reward_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AchievementData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AchievementData::CopyFrom(const AchievementData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AchievementData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void AchievementData::Swap(AchievementData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(value_, other->value_);
    std::swap(cur_reward_level_, other->cur_reward_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AchievementData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AchievementData_descriptor_;
  metadata.reflection = AchievementData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleAchievemntInfo::kAchievementListFieldNumber;
#endif  // !_MSC_VER

RoleAchievemntInfo::RoleAchievemntInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleAchievemntInfo::InitAsDefaultInstance() {
}

RoleAchievemntInfo::RoleAchievemntInfo(const RoleAchievemntInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleAchievemntInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleAchievemntInfo::~RoleAchievemntInfo() {
  SharedDtor();
}

void RoleAchievemntInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleAchievemntInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAchievemntInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleAchievemntInfo_descriptor_;
}

const RoleAchievemntInfo& RoleAchievemntInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleAchievemntInfo* RoleAchievemntInfo::default_instance_ = NULL;

RoleAchievemntInfo* RoleAchievemntInfo::New() const {
  return new RoleAchievemntInfo;
}

void RoleAchievemntInfo::Clear() {
  achievement_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleAchievemntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.AchievementData achievement_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_achievement_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_achievement_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleAchievemntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.AchievementData achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->achievement_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleAchievemntInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.AchievementData achievement_list = 1;
  for (int i = 0; i < this->achievement_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->achievement_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleAchievemntInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.AchievementData achievement_list = 1;
  total_size += 1 * this->achievement_list_size();
  for (int i = 0; i < this->achievement_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->achievement_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAchievemntInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleAchievemntInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleAchievemntInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleAchievemntInfo::MergeFrom(const RoleAchievemntInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  achievement_list_.MergeFrom(from.achievement_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleAchievemntInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAchievemntInfo::CopyFrom(const RoleAchievemntInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAchievemntInfo::IsInitialized() const {

  for (int i = 0; i < achievement_list_size(); i++) {
    if (!this->achievement_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleAchievemntInfo::Swap(RoleAchievemntInfo* other) {
  if (other != this) {
    achievement_list_.Swap(&other->achievement_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleAchievemntInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleAchievemntInfo_descriptor_;
  metadata.reflection = RoleAchievemntInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyMission::kIdFieldNumber;
const int DailyMission::kIsGetRewardFieldNumber;
const int DailyMission::kValueFieldNumber;
#endif  // !_MSC_VER

DailyMission::DailyMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyMission::InitAsDefaultInstance() {
}

DailyMission::DailyMission(const DailyMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  is_get_reward_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyMission::~DailyMission() {
  SharedDtor();
}

void DailyMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyMission_descriptor_;
}

const DailyMission& DailyMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

DailyMission* DailyMission::default_instance_ = NULL;

DailyMission* DailyMission::New() const {
  return new DailyMission;
}

void DailyMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    is_get_reward_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_get_reward;
        break;
      }

      // required uint32 is_get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // required uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_get_reward(), output);
  }

  // required uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 is_get_reward = 2;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_get_reward(), target);
  }

  // required uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 is_get_reward = 2;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

    // required uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyMission::MergeFrom(const DailyMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyMission::CopyFrom(const DailyMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyMission::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DailyMission::Swap(DailyMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyMission_descriptor_;
  metadata.reflection = DailyMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDailyMissionInfo::kPointFieldNumber;
const int RoleDailyMissionInfo::kPointRewardRecordFieldNumber;
const int RoleDailyMissionInfo::kMissionListFieldNumber;
#endif  // !_MSC_VER

RoleDailyMissionInfo::RoleDailyMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDailyMissionInfo::InitAsDefaultInstance() {
}

RoleDailyMissionInfo::RoleDailyMissionInfo(const RoleDailyMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDailyMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDailyMissionInfo::~RoleDailyMissionInfo() {
  SharedDtor();
}

void RoleDailyMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDailyMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDailyMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDailyMissionInfo_descriptor_;
}

const RoleDailyMissionInfo& RoleDailyMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleDailyMissionInfo* RoleDailyMissionInfo::default_instance_ = NULL;

RoleDailyMissionInfo* RoleDailyMissionInfo::New() const {
  return new RoleDailyMissionInfo;
}

void RoleDailyMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    point_ = 0u;
  }
  point_reward_record_.Clear();
  mission_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDailyMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_reward_record;
        break;
      }

      // repeated uint32 point_reward_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_point_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_point_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point_reward_record;
        if (input->ExpectTag(26)) goto parse_mission_list;
        break;
      }

      // repeated .PB.DailyMission mission_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mission_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mission_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mission_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDailyMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 point = 1;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // repeated uint32 point_reward_record = 2;
  for (int i = 0; i < this->point_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->point_reward_record(i), output);
  }

  // repeated .PB.DailyMission mission_list = 3;
  for (int i = 0; i < this->mission_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mission_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDailyMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 point = 1;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // repeated uint32 point_reward_record = 2;
  for (int i = 0; i < this->point_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->point_reward_record(i), target);
  }

  // repeated .PB.DailyMission mission_list = 3;
  for (int i = 0; i < this->mission_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mission_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDailyMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 point = 1;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  // repeated uint32 point_reward_record = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->point_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->point_reward_record(i));
    }
    total_size += 1 * this->point_reward_record_size() + data_size;
  }

  // repeated .PB.DailyMission mission_list = 3;
  total_size += 1 * this->mission_list_size();
  for (int i = 0; i < this->mission_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mission_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDailyMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDailyMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDailyMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDailyMissionInfo::MergeFrom(const RoleDailyMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_reward_record_.MergeFrom(from.point_reward_record_);
  mission_list_.MergeFrom(from.mission_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDailyMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDailyMissionInfo::CopyFrom(const RoleDailyMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDailyMissionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mission_list_size(); i++) {
    if (!this->mission_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDailyMissionInfo::Swap(RoleDailyMissionInfo* other) {
  if (other != this) {
    std::swap(point_, other->point_);
    point_reward_record_.Swap(&other->point_reward_record_);
    mission_list_.Swap(&other->mission_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDailyMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDailyMissionInfo_descriptor_;
  metadata.reflection = RoleDailyMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kSkillIdFieldNumber;
const int SkillData::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillData::InitAsDefaultInstance() {
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_id(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_id(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_id());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGuildSkillInfo::kSkillListFieldNumber;
#endif  // !_MSC_VER

RoleGuildSkillInfo::RoleGuildSkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleGuildSkillInfo::InitAsDefaultInstance() {
}

RoleGuildSkillInfo::RoleGuildSkillInfo(const RoleGuildSkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleGuildSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGuildSkillInfo::~RoleGuildSkillInfo() {
  SharedDtor();
}

void RoleGuildSkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleGuildSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGuildSkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGuildSkillInfo_descriptor_;
}

const RoleGuildSkillInfo& RoleGuildSkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleGuildSkillInfo* RoleGuildSkillInfo::default_instance_ = NULL;

RoleGuildSkillInfo* RoleGuildSkillInfo::New() const {
  return new RoleGuildSkillInfo;
}

void RoleGuildSkillInfo::Clear() {
  skill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGuildSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.SkillData skill_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skill_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleGuildSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.SkillData skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->skill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleGuildSkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.SkillData skill_list = 1;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->skill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleGuildSkillInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PB.SkillData skill_list = 1;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGuildSkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGuildSkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGuildSkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGuildSkillInfo::MergeFrom(const RoleGuildSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_list_.MergeFrom(from.skill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGuildSkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGuildSkillInfo::CopyFrom(const RoleGuildSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGuildSkillInfo::IsInitialized() const {

  for (int i = 0; i < skill_list_size(); i++) {
    if (!this->skill_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleGuildSkillInfo::Swap(RoleGuildSkillInfo* other) {
  if (other != this) {
    skill_list_.Swap(&other->skill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGuildSkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGuildSkillInfo_descriptor_;
  metadata.reflection = RoleGuildSkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSignInData::kCurSignInDayFieldNumber;
const int RoleSignInData::kLastSignInTimeFieldNumber;
#endif  // !_MSC_VER

RoleSignInData::RoleSignInData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSignInData::InitAsDefaultInstance() {
}

RoleSignInData::RoleSignInData(const RoleSignInData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSignInData::SharedCtor() {
  _cached_size_ = 0;
  cur_sign_in_day_ = 0u;
  last_sign_in_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSignInData::~RoleSignInData() {
  SharedDtor();
}

void RoleSignInData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSignInData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSignInData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSignInData_descriptor_;
}

const RoleSignInData& RoleSignInData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSignInData* RoleSignInData::default_instance_ = NULL;

RoleSignInData* RoleSignInData::New() const {
  return new RoleSignInData;
}

void RoleSignInData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_sign_in_day_ = 0u;
    last_sign_in_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSignInData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cur_sign_in_day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_sign_in_day_)));
          set_has_cur_sign_in_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_sign_in_time;
        break;
      }

      // required uint32 last_sign_in_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_sign_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_sign_in_time_)));
          set_has_last_sign_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSignInData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cur_sign_in_day = 1;
  if (has_cur_sign_in_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_sign_in_day(), output);
  }

  // required uint32 last_sign_in_time = 2;
  if (has_last_sign_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->last_sign_in_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSignInData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cur_sign_in_day = 1;
  if (has_cur_sign_in_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_sign_in_day(), target);
  }

  // required uint32 last_sign_in_time = 2;
  if (has_last_sign_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->last_sign_in_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSignInData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cur_sign_in_day = 1;
    if (has_cur_sign_in_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_sign_in_day());
    }

    // required uint32 last_sign_in_time = 2;
    if (has_last_sign_in_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_sign_in_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSignInData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSignInData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSignInData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSignInData::MergeFrom(const RoleSignInData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_sign_in_day()) {
      set_cur_sign_in_day(from.cur_sign_in_day());
    }
    if (from.has_last_sign_in_time()) {
      set_last_sign_in_time(from.last_sign_in_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSignInData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSignInData::CopyFrom(const RoleSignInData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSignInData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleSignInData::Swap(RoleSignInData* other) {
  if (other != this) {
    std::swap(cur_sign_in_day_, other->cur_sign_in_day_);
    std::swap(last_sign_in_time_, other->last_sign_in_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSignInData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSignInData_descriptor_;
  metadata.reflection = RoleSignInData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRewardData::kRewardRecordListFieldNumber;
const int LoginRewardData::kLoginDaysFieldNumber;
#endif  // !_MSC_VER

LoginRewardData::LoginRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRewardData::InitAsDefaultInstance() {
}

LoginRewardData::LoginRewardData(const LoginRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRewardData::SharedCtor() {
  _cached_size_ = 0;
  login_days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRewardData::~LoginRewardData() {
  SharedDtor();
}

void LoginRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRewardData_descriptor_;
}

const LoginRewardData& LoginRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LoginRewardData* LoginRewardData::default_instance_ = NULL;

LoginRewardData* LoginRewardData::New() const {
  return new LoginRewardData;
}

void LoginRewardData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    login_days_ = 0u;
  }
  reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 reward_record_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_reward_record_list;
        if (input->ExpectTag(16)) goto parse_login_days;
        break;
      }

      // optional uint32 login_days = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_days:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_days_)));
          set_has_login_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 reward_record_list = 1;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->reward_record_list(i), output);
  }

  // optional uint32 login_days = 2;
  if (has_login_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->login_days(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 reward_record_list = 1;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->reward_record_list(i), target);
  }

  // optional uint32 login_days = 2;
  if (has_login_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->login_days(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 login_days = 2;
    if (has_login_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_days());
    }

  }
  // repeated uint32 reward_record_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_record_list(i));
    }
    total_size += 1 * this->reward_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRewardData::MergeFrom(const LoginRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_record_list_.MergeFrom(from.reward_record_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_login_days()) {
      set_login_days(from.login_days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRewardData::CopyFrom(const LoginRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRewardData::IsInitialized() const {

  return true;
}

void LoginRewardData::Swap(LoginRewardData* other) {
  if (other != this) {
    reward_record_list_.Swap(&other->reward_record_list_);
    std::swap(login_days_, other->login_days_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRewardData_descriptor_;
  metadata.reflection = LoginRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleKingMatchData::kLastSeasonFieldNumber;
const int RoleKingMatchData::kTotalBattleTimesFieldNumber;
const int RoleKingMatchData::kTotalWinTimesFieldNumber;
const int RoleKingMatchData::kTodayWinTimesFieldNumber;
const int RoleKingMatchData::kStageLevelFieldNumber;
const int RoleKingMatchData::kContextFieldNumber;
const int RoleKingMatchData::kHistoryStageLevelFieldNumber;
const int RoleKingMatchData::kSeasonTaskRewardRecordFieldNumber;
#endif  // !_MSC_VER

RoleKingMatchData::RoleKingMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleKingMatchData::InitAsDefaultInstance() {
}

RoleKingMatchData::RoleKingMatchData(const RoleKingMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleKingMatchData::SharedCtor() {
  _cached_size_ = 0;
  last_season_ = 0u;
  total_battle_times_ = 0u;
  total_win_times_ = 0u;
  today_win_times_ = 0u;
  stage_level_ = 0u;
  context_ = 0u;
  history_stage_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleKingMatchData::~RoleKingMatchData() {
  SharedDtor();
}

void RoleKingMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleKingMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleKingMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleKingMatchData_descriptor_;
}

const RoleKingMatchData& RoleKingMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleKingMatchData* RoleKingMatchData::default_instance_ = NULL;

RoleKingMatchData* RoleKingMatchData::New() const {
  return new RoleKingMatchData;
}

void RoleKingMatchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_season_ = 0u;
    total_battle_times_ = 0u;
    total_win_times_ = 0u;
    today_win_times_ = 0u;
    stage_level_ = 0u;
    context_ = 0u;
    history_stage_level_ = 0u;
  }
  season_task_reward_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleKingMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_season_)));
          set_has_last_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_battle_times;
        break;
      }

      // optional uint32 total_battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_battle_times_)));
          set_has_total_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_win_times;
        break;
      }

      // optional uint32 total_win_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_win_times_)));
          set_has_total_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_win_times;
        break;
      }

      // optional uint32 today_win_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_win_times_)));
          set_has_today_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stage_level;
        break;
      }

      // optional uint32 stage_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_level_)));
          set_has_stage_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_context;
        break;
      }

      // optional uint32 context = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_history_stage_level;
        break;
      }

      // optional uint32 history_stage_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_stage_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_stage_level_)));
          set_has_history_stage_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_season_task_reward_record;
        break;
      }

      // repeated uint32 season_task_reward_record = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season_task_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_season_task_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_season_task_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_season_task_reward_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleKingMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_season = 1;
  if (has_last_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_season(), output);
  }

  // optional uint32 total_battle_times = 2;
  if (has_total_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_battle_times(), output);
  }

  // optional uint32 total_win_times = 3;
  if (has_total_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_win_times(), output);
  }

  // optional uint32 today_win_times = 4;
  if (has_today_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_win_times(), output);
  }

  // optional uint32 stage_level = 5;
  if (has_stage_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stage_level(), output);
  }

  // optional uint32 context = 6;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->context(), output);
  }

  // optional uint32 history_stage_level = 7;
  if (has_history_stage_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->history_stage_level(), output);
  }

  // repeated uint32 season_task_reward_record = 8;
  for (int i = 0; i < this->season_task_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->season_task_reward_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleKingMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_season = 1;
  if (has_last_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_season(), target);
  }

  // optional uint32 total_battle_times = 2;
  if (has_total_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_battle_times(), target);
  }

  // optional uint32 total_win_times = 3;
  if (has_total_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_win_times(), target);
  }

  // optional uint32 today_win_times = 4;
  if (has_today_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_win_times(), target);
  }

  // optional uint32 stage_level = 5;
  if (has_stage_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stage_level(), target);
  }

  // optional uint32 context = 6;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->context(), target);
  }

  // optional uint32 history_stage_level = 7;
  if (has_history_stage_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->history_stage_level(), target);
  }

  // repeated uint32 season_task_reward_record = 8;
  for (int i = 0; i < this->season_task_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->season_task_reward_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleKingMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_season = 1;
    if (has_last_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_season());
    }

    // optional uint32 total_battle_times = 2;
    if (has_total_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_battle_times());
    }

    // optional uint32 total_win_times = 3;
    if (has_total_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_win_times());
    }

    // optional uint32 today_win_times = 4;
    if (has_today_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_win_times());
    }

    // optional uint32 stage_level = 5;
    if (has_stage_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_level());
    }

    // optional uint32 context = 6;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

    // optional uint32 history_stage_level = 7;
    if (has_history_stage_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_stage_level());
    }

  }
  // repeated uint32 season_task_reward_record = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->season_task_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->season_task_reward_record(i));
    }
    total_size += 1 * this->season_task_reward_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleKingMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleKingMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleKingMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleKingMatchData::MergeFrom(const RoleKingMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  season_task_reward_record_.MergeFrom(from.season_task_reward_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_season()) {
      set_last_season(from.last_season());
    }
    if (from.has_total_battle_times()) {
      set_total_battle_times(from.total_battle_times());
    }
    if (from.has_total_win_times()) {
      set_total_win_times(from.total_win_times());
    }
    if (from.has_today_win_times()) {
      set_today_win_times(from.today_win_times());
    }
    if (from.has_stage_level()) {
      set_stage_level(from.stage_level());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_history_stage_level()) {
      set_history_stage_level(from.history_stage_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleKingMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleKingMatchData::CopyFrom(const RoleKingMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleKingMatchData::IsInitialized() const {

  return true;
}

void RoleKingMatchData::Swap(RoleKingMatchData* other) {
  if (other != this) {
    std::swap(last_season_, other->last_season_);
    std::swap(total_battle_times_, other->total_battle_times_);
    std::swap(total_win_times_, other->total_win_times_);
    std::swap(today_win_times_, other->today_win_times_);
    std::swap(stage_level_, other->stage_level_);
    std::swap(context_, other->context_);
    std::swap(history_stage_level_, other->history_stage_level_);
    season_task_reward_record_.Swap(&other->season_task_reward_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleKingMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleKingMatchData_descriptor_;
  metadata.reflection = RoleKingMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTeamDungeonData::kTodayBattleTimesFieldNumber;
const int PlayerTeamDungeonData::kPassDungeonListFieldNumber;
const int PlayerTeamDungeonData::kTodayKillRewardTimesFieldNumber;
const int PlayerTeamDungeonData::kTodayMvpRewardTimesFieldNumber;
#endif  // !_MSC_VER

PlayerTeamDungeonData::PlayerTeamDungeonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTeamDungeonData::InitAsDefaultInstance() {
}

PlayerTeamDungeonData::PlayerTeamDungeonData(const PlayerTeamDungeonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTeamDungeonData::SharedCtor() {
  _cached_size_ = 0;
  today_battle_times_ = 0u;
  today_kill_reward_times_ = 0u;
  today_mvp_reward_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTeamDungeonData::~PlayerTeamDungeonData() {
  SharedDtor();
}

void PlayerTeamDungeonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerTeamDungeonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTeamDungeonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTeamDungeonData_descriptor_;
}

const PlayerTeamDungeonData& PlayerTeamDungeonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

PlayerTeamDungeonData* PlayerTeamDungeonData::default_instance_ = NULL;

PlayerTeamDungeonData* PlayerTeamDungeonData::New() const {
  return new PlayerTeamDungeonData;
}

void PlayerTeamDungeonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_battle_times_ = 0u;
    today_kill_reward_times_ = 0u;
    today_mvp_reward_times_ = 0u;
  }
  pass_dungeon_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTeamDungeonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_battle_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_battle_times_)));
          set_has_today_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_dungeon_list;
        break;
      }

      // repeated uint32 pass_dungeon_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_dungeon_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_pass_dungeon_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pass_dungeon_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass_dungeon_list;
        if (input->ExpectTag(24)) goto parse_today_kill_reward_times;
        break;
      }

      // optional uint32 today_kill_reward_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_kill_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_kill_reward_times_)));
          set_has_today_kill_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_mvp_reward_times;
        break;
      }

      // optional uint32 today_mvp_reward_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_mvp_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_mvp_reward_times_)));
          set_has_today_mvp_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerTeamDungeonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_battle_times(), output);
  }

  // repeated uint32 pass_dungeon_list = 2;
  for (int i = 0; i < this->pass_dungeon_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->pass_dungeon_list(i), output);
  }

  // optional uint32 today_kill_reward_times = 3;
  if (has_today_kill_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->today_kill_reward_times(), output);
  }

  // optional uint32 today_mvp_reward_times = 4;
  if (has_today_mvp_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_mvp_reward_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTeamDungeonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_battle_times = 1;
  if (has_today_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_battle_times(), target);
  }

  // repeated uint32 pass_dungeon_list = 2;
  for (int i = 0; i < this->pass_dungeon_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->pass_dungeon_list(i), target);
  }

  // optional uint32 today_kill_reward_times = 3;
  if (has_today_kill_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->today_kill_reward_times(), target);
  }

  // optional uint32 today_mvp_reward_times = 4;
  if (has_today_mvp_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_mvp_reward_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTeamDungeonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_battle_times = 1;
    if (has_today_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_battle_times());
    }

    // optional uint32 today_kill_reward_times = 3;
    if (has_today_kill_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_kill_reward_times());
    }

    // optional uint32 today_mvp_reward_times = 4;
    if (has_today_mvp_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_mvp_reward_times());
    }

  }
  // repeated uint32 pass_dungeon_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pass_dungeon_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pass_dungeon_list(i));
    }
    total_size += 1 * this->pass_dungeon_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTeamDungeonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTeamDungeonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTeamDungeonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTeamDungeonData::MergeFrom(const PlayerTeamDungeonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_dungeon_list_.MergeFrom(from.pass_dungeon_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_battle_times()) {
      set_today_battle_times(from.today_battle_times());
    }
    if (from.has_today_kill_reward_times()) {
      set_today_kill_reward_times(from.today_kill_reward_times());
    }
    if (from.has_today_mvp_reward_times()) {
      set_today_mvp_reward_times(from.today_mvp_reward_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTeamDungeonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTeamDungeonData::CopyFrom(const PlayerTeamDungeonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTeamDungeonData::IsInitialized() const {

  return true;
}

void PlayerTeamDungeonData::Swap(PlayerTeamDungeonData* other) {
  if (other != this) {
    std::swap(today_battle_times_, other->today_battle_times_);
    pass_dungeon_list_.Swap(&other->pass_dungeon_list_);
    std::swap(today_kill_reward_times_, other->today_kill_reward_times_);
    std::swap(today_mvp_reward_times_, other->today_mvp_reward_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTeamDungeonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTeamDungeonData_descriptor_;
  metadata.reflection = PlayerTeamDungeonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardGroupData::kCardIdFieldNumber;
const int CardGroupData::kIsAlreadyOpenFieldNumber;
#endif  // !_MSC_VER

CardGroupData::CardGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CardGroupData::InitAsDefaultInstance() {
}

CardGroupData::CardGroupData(const CardGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CardGroupData::SharedCtor() {
  _cached_size_ = 0;
  card_id_ = 0u;
  is_already_open_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardGroupData::~CardGroupData() {
  SharedDtor();
}

void CardGroupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardGroupData_descriptor_;
}

const CardGroupData& CardGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

CardGroupData* CardGroupData::default_instance_ = NULL;

CardGroupData* CardGroupData::New() const {
  return new CardGroupData;
}

void CardGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_id_ = 0u;
    is_already_open_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_already_open;
        break;
      }

      // optional uint32 is_already_open = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_open_)));
          set_has_is_already_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // optional uint32 is_already_open = 2;
  if (has_is_already_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_already_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CardGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 card_id = 1;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // optional uint32 is_already_open = 2;
  if (has_is_already_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_already_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CardGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_id());
    }

    // optional uint32 is_already_open = 2;
    if (has_is_already_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_open());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardGroupData::MergeFrom(const CardGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_is_already_open()) {
      set_is_already_open(from.is_already_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardGroupData::CopyFrom(const CardGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardGroupData::IsInitialized() const {

  return true;
}

void CardGroupData::Swap(CardGroupData* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(is_already_open_, other->is_already_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardGroupData_descriptor_;
  metadata.reflection = CardGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectionGroup::kIdFieldNumber;
const int CollectionGroup::kStarFieldNumber;
#endif  // !_MSC_VER

CollectionGroup::CollectionGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectionGroup::InitAsDefaultInstance() {
}

CollectionGroup::CollectionGroup(const CollectionGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectionGroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  star_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionGroup::~CollectionGroup() {
  SharedDtor();
}

void CollectionGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectionGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionGroup_descriptor_;
}

const CollectionGroup& CollectionGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

CollectionGroup* CollectionGroup::default_instance_ = NULL;

CollectionGroup* CollectionGroup::New() const {
  return new CollectionGroup;
}

void CollectionGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    star_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectionGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectionGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectionGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionGroup::MergeFrom(const CollectionGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionGroup::CopyFrom(const CollectionGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionGroup::IsInitialized() const {

  return true;
}

void CollectionGroup::Swap(CollectionGroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionGroup_descriptor_;
  metadata.reflection = CollectionGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CollectionBook::kBookIdFieldNumber;
const int CollectionBook::kCollectionGroupListFieldNumber;
#endif  // !_MSC_VER

CollectionBook::CollectionBook()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CollectionBook::InitAsDefaultInstance() {
}

CollectionBook::CollectionBook(const CollectionBook& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CollectionBook::SharedCtor() {
  _cached_size_ = 0;
  book_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CollectionBook::~CollectionBook() {
  SharedDtor();
}

void CollectionBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CollectionBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CollectionBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CollectionBook_descriptor_;
}

const CollectionBook& CollectionBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

CollectionBook* CollectionBook::default_instance_ = NULL;

CollectionBook* CollectionBook::New() const {
  return new CollectionBook;
}

void CollectionBook::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    book_id_ = 0u;
  }
  collection_group_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CollectionBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 book_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &book_id_)));
          set_has_book_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collection_group_list;
        break;
      }

      // repeated .PB.CollectionGroup collection_group_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection_group_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collection_group_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_collection_group_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CollectionBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 book_id = 1;
  if (has_book_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->book_id(), output);
  }

  // repeated .PB.CollectionGroup collection_group_list = 2;
  for (int i = 0; i < this->collection_group_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->collection_group_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CollectionBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 book_id = 1;
  if (has_book_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->book_id(), target);
  }

  // repeated .PB.CollectionGroup collection_group_list = 2;
  for (int i = 0; i < this->collection_group_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->collection_group_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CollectionBook::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 book_id = 1;
    if (has_book_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->book_id());
    }

  }
  // repeated .PB.CollectionGroup collection_group_list = 2;
  total_size += 1 * this->collection_group_list_size();
  for (int i = 0; i < this->collection_group_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collection_group_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CollectionBook::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CollectionBook* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CollectionBook*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CollectionBook::MergeFrom(const CollectionBook& from) {
  GOOGLE_CHECK_NE(&from, this);
  collection_group_list_.MergeFrom(from.collection_group_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_book_id()) {
      set_book_id(from.book_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CollectionBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionBook::CopyFrom(const CollectionBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionBook::IsInitialized() const {

  return true;
}

void CollectionBook::Swap(CollectionBook* other) {
  if (other != this) {
    std::swap(book_id_, other->book_id_);
    collection_group_list_.Swap(&other->collection_group_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CollectionBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CollectionBook_descriptor_;
  metadata.reflection = CollectionBook_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleZhanBuData::kCardListFieldNumber;
const int RoleZhanBuData::kHistoryCollectionValueFieldNumber;
const int RoleZhanBuData::kLowCardGroupMapIdxFieldNumber;
const int RoleZhanBuData::kCurLowCardGroupIdFieldNumber;
const int RoleZhanBuData::kLowCardGroupLastRecoverTimeFieldNumber;
const int RoleZhanBuData::kCurLowCardGroupRefreshTimesFieldNumber;
const int RoleZhanBuData::kTodayLowCardGroupOpenCardTimesFieldNumber;
const int RoleZhanBuData::kHighCardGroupLastRefreshTimeFieldNumber;
const int RoleZhanBuData::kLowCardGroupFieldNumber;
const int RoleZhanBuData::kHighCardGroupFieldNumber;
const int RoleZhanBuData::kCollectionBookListFieldNumber;
const int RoleZhanBuData::kAchievementLevelFieldNumber;
const int RoleZhanBuData::kTodayLowCardGroupCostRefreshTimesFieldNumber;
const int RoleZhanBuData::kTodayHighCardGroupCostRefreshTimesFieldNumber;
#endif  // !_MSC_VER

RoleZhanBuData::RoleZhanBuData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleZhanBuData::InitAsDefaultInstance() {
}

RoleZhanBuData::RoleZhanBuData(const RoleZhanBuData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleZhanBuData::SharedCtor() {
  _cached_size_ = 0;
  history_collection_value_ = 0u;
  low_card_group_map_idx_ = 0u;
  cur_low_card_group_id_ = 0u;
  low_card_group_last_recover_time_ = 0u;
  cur_low_card_group_refresh_times_ = 0u;
  today_low_card_group_open_card_times_ = 0u;
  high_card_group_last_refresh_time_ = 0u;
  achievement_level_ = 0u;
  today_low_card_group_cost_refresh_times_ = 0u;
  today_high_card_group_cost_refresh_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleZhanBuData::~RoleZhanBuData() {
  SharedDtor();
}

void RoleZhanBuData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleZhanBuData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleZhanBuData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleZhanBuData_descriptor_;
}

const RoleZhanBuData& RoleZhanBuData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleZhanBuData* RoleZhanBuData::default_instance_ = NULL;

RoleZhanBuData* RoleZhanBuData::New() const {
  return new RoleZhanBuData;
}

void RoleZhanBuData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    history_collection_value_ = 0u;
    low_card_group_map_idx_ = 0u;
    cur_low_card_group_id_ = 0u;
    low_card_group_last_recover_time_ = 0u;
    cur_low_card_group_refresh_times_ = 0u;
    today_low_card_group_open_card_times_ = 0u;
    high_card_group_last_refresh_time_ = 0u;
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    achievement_level_ = 0u;
    today_low_card_group_cost_refresh_times_ = 0u;
    today_high_card_group_cost_refresh_times_ = 0u;
  }
  card_list_.Clear();
  low_card_group_.Clear();
  high_card_group_.Clear();
  collection_book_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleZhanBuData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.Card card_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_card_list;
        if (input->ExpectTag(16)) goto parse_history_collection_value;
        break;
      }

      // optional uint32 history_collection_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_collection_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_collection_value_)));
          set_has_history_collection_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_low_card_group_map_idx;
        break;
      }

      // optional uint32 low_card_group_map_idx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_card_group_map_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_card_group_map_idx_)));
          set_has_low_card_group_map_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_low_card_group_id;
        break;
      }

      // optional uint32 cur_low_card_group_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_low_card_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_low_card_group_id_)));
          set_has_cur_low_card_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_low_card_group_last_recover_time;
        break;
      }

      // optional uint32 low_card_group_last_recover_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_low_card_group_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &low_card_group_last_recover_time_)));
          set_has_low_card_group_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_cur_low_card_group_refresh_times;
        break;
      }

      // optional uint32 cur_low_card_group_refresh_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_low_card_group_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_low_card_group_refresh_times_)));
          set_has_cur_low_card_group_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_today_low_card_group_open_card_times;
        break;
      }

      // optional uint32 today_low_card_group_open_card_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_low_card_group_open_card_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_low_card_group_open_card_times_)));
          set_has_today_low_card_group_open_card_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_high_card_group_last_refresh_time;
        break;
      }

      // optional uint32 high_card_group_last_refresh_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_high_card_group_last_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &high_card_group_last_refresh_time_)));
          set_has_high_card_group_last_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_low_card_group;
        break;
      }

      // repeated .PB.CardGroupData low_card_group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low_card_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_low_card_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_low_card_group;
        if (input->ExpectTag(82)) goto parse_high_card_group;
        break;
      }

      // repeated .PB.CardGroupData high_card_group = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high_card_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_high_card_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_high_card_group;
        if (input->ExpectTag(90)) goto parse_collection_book_list;
        break;
      }

      // repeated .PB.CollectionBook collection_book_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collection_book_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collection_book_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_collection_book_list;
        if (input->ExpectTag(96)) goto parse_achievement_level;
        break;
      }

      // optional uint32 achievement_level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_achievement_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_level_)));
          set_has_achievement_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_today_low_card_group_cost_refresh_times;
        break;
      }

      // optional uint32 today_low_card_group_cost_refresh_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_low_card_group_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_low_card_group_cost_refresh_times_)));
          set_has_today_low_card_group_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_today_high_card_group_cost_refresh_times;
        break;
      }

      // optional uint32 today_high_card_group_cost_refresh_times = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_high_card_group_cost_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_high_card_group_cost_refresh_times_)));
          set_has_today_high_card_group_cost_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleZhanBuData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.Card card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->card_list(i), output);
  }

  // optional uint32 history_collection_value = 2;
  if (has_history_collection_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->history_collection_value(), output);
  }

  // optional uint32 low_card_group_map_idx = 3;
  if (has_low_card_group_map_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->low_card_group_map_idx(), output);
  }

  // optional uint32 cur_low_card_group_id = 4;
  if (has_cur_low_card_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_low_card_group_id(), output);
  }

  // optional uint32 low_card_group_last_recover_time = 5;
  if (has_low_card_group_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->low_card_group_last_recover_time(), output);
  }

  // optional uint32 cur_low_card_group_refresh_times = 6;
  if (has_cur_low_card_group_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->cur_low_card_group_refresh_times(), output);
  }

  // optional uint32 today_low_card_group_open_card_times = 7;
  if (has_today_low_card_group_open_card_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->today_low_card_group_open_card_times(), output);
  }

  // optional uint32 high_card_group_last_refresh_time = 8;
  if (has_high_card_group_last_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->high_card_group_last_refresh_time(), output);
  }

  // repeated .PB.CardGroupData low_card_group = 9;
  for (int i = 0; i < this->low_card_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->low_card_group(i), output);
  }

  // repeated .PB.CardGroupData high_card_group = 10;
  for (int i = 0; i < this->high_card_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->high_card_group(i), output);
  }

  // repeated .PB.CollectionBook collection_book_list = 11;
  for (int i = 0; i < this->collection_book_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->collection_book_list(i), output);
  }

  // optional uint32 achievement_level = 12;
  if (has_achievement_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->achievement_level(), output);
  }

  // optional uint32 today_low_card_group_cost_refresh_times = 13;
  if (has_today_low_card_group_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->today_low_card_group_cost_refresh_times(), output);
  }

  // optional uint32 today_high_card_group_cost_refresh_times = 14;
  if (has_today_high_card_group_cost_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->today_high_card_group_cost_refresh_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleZhanBuData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.Card card_list = 1;
  for (int i = 0; i < this->card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->card_list(i), target);
  }

  // optional uint32 history_collection_value = 2;
  if (has_history_collection_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->history_collection_value(), target);
  }

  // optional uint32 low_card_group_map_idx = 3;
  if (has_low_card_group_map_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->low_card_group_map_idx(), target);
  }

  // optional uint32 cur_low_card_group_id = 4;
  if (has_cur_low_card_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_low_card_group_id(), target);
  }

  // optional uint32 low_card_group_last_recover_time = 5;
  if (has_low_card_group_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->low_card_group_last_recover_time(), target);
  }

  // optional uint32 cur_low_card_group_refresh_times = 6;
  if (has_cur_low_card_group_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->cur_low_card_group_refresh_times(), target);
  }

  // optional uint32 today_low_card_group_open_card_times = 7;
  if (has_today_low_card_group_open_card_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->today_low_card_group_open_card_times(), target);
  }

  // optional uint32 high_card_group_last_refresh_time = 8;
  if (has_high_card_group_last_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->high_card_group_last_refresh_time(), target);
  }

  // repeated .PB.CardGroupData low_card_group = 9;
  for (int i = 0; i < this->low_card_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->low_card_group(i), target);
  }

  // repeated .PB.CardGroupData high_card_group = 10;
  for (int i = 0; i < this->high_card_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->high_card_group(i), target);
  }

  // repeated .PB.CollectionBook collection_book_list = 11;
  for (int i = 0; i < this->collection_book_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->collection_book_list(i), target);
  }

  // optional uint32 achievement_level = 12;
  if (has_achievement_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->achievement_level(), target);
  }

  // optional uint32 today_low_card_group_cost_refresh_times = 13;
  if (has_today_low_card_group_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->today_low_card_group_cost_refresh_times(), target);
  }

  // optional uint32 today_high_card_group_cost_refresh_times = 14;
  if (has_today_high_card_group_cost_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->today_high_card_group_cost_refresh_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleZhanBuData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 history_collection_value = 2;
    if (has_history_collection_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_collection_value());
    }

    // optional uint32 low_card_group_map_idx = 3;
    if (has_low_card_group_map_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_card_group_map_idx());
    }

    // optional uint32 cur_low_card_group_id = 4;
    if (has_cur_low_card_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_low_card_group_id());
    }

    // optional uint32 low_card_group_last_recover_time = 5;
    if (has_low_card_group_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->low_card_group_last_recover_time());
    }

    // optional uint32 cur_low_card_group_refresh_times = 6;
    if (has_cur_low_card_group_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_low_card_group_refresh_times());
    }

    // optional uint32 today_low_card_group_open_card_times = 7;
    if (has_today_low_card_group_open_card_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_low_card_group_open_card_times());
    }

    // optional uint32 high_card_group_last_refresh_time = 8;
    if (has_high_card_group_last_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->high_card_group_last_refresh_time());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 achievement_level = 12;
    if (has_achievement_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement_level());
    }

    // optional uint32 today_low_card_group_cost_refresh_times = 13;
    if (has_today_low_card_group_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_low_card_group_cost_refresh_times());
    }

    // optional uint32 today_high_card_group_cost_refresh_times = 14;
    if (has_today_high_card_group_cost_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_high_card_group_cost_refresh_times());
    }

  }
  // repeated .PB.Card card_list = 1;
  total_size += 1 * this->card_list_size();
  for (int i = 0; i < this->card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_list(i));
  }

  // repeated .PB.CardGroupData low_card_group = 9;
  total_size += 1 * this->low_card_group_size();
  for (int i = 0; i < this->low_card_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->low_card_group(i));
  }

  // repeated .PB.CardGroupData high_card_group = 10;
  total_size += 1 * this->high_card_group_size();
  for (int i = 0; i < this->high_card_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->high_card_group(i));
  }

  // repeated .PB.CollectionBook collection_book_list = 11;
  total_size += 1 * this->collection_book_list_size();
  for (int i = 0; i < this->collection_book_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collection_book_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleZhanBuData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleZhanBuData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleZhanBuData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleZhanBuData::MergeFrom(const RoleZhanBuData& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_list_.MergeFrom(from.card_list_);
  low_card_group_.MergeFrom(from.low_card_group_);
  high_card_group_.MergeFrom(from.high_card_group_);
  collection_book_list_.MergeFrom(from.collection_book_list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_history_collection_value()) {
      set_history_collection_value(from.history_collection_value());
    }
    if (from.has_low_card_group_map_idx()) {
      set_low_card_group_map_idx(from.low_card_group_map_idx());
    }
    if (from.has_cur_low_card_group_id()) {
      set_cur_low_card_group_id(from.cur_low_card_group_id());
    }
    if (from.has_low_card_group_last_recover_time()) {
      set_low_card_group_last_recover_time(from.low_card_group_last_recover_time());
    }
    if (from.has_cur_low_card_group_refresh_times()) {
      set_cur_low_card_group_refresh_times(from.cur_low_card_group_refresh_times());
    }
    if (from.has_today_low_card_group_open_card_times()) {
      set_today_low_card_group_open_card_times(from.today_low_card_group_open_card_times());
    }
    if (from.has_high_card_group_last_refresh_time()) {
      set_high_card_group_last_refresh_time(from.high_card_group_last_refresh_time());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_achievement_level()) {
      set_achievement_level(from.achievement_level());
    }
    if (from.has_today_low_card_group_cost_refresh_times()) {
      set_today_low_card_group_cost_refresh_times(from.today_low_card_group_cost_refresh_times());
    }
    if (from.has_today_high_card_group_cost_refresh_times()) {
      set_today_high_card_group_cost_refresh_times(from.today_high_card_group_cost_refresh_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleZhanBuData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleZhanBuData::CopyFrom(const RoleZhanBuData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleZhanBuData::IsInitialized() const {

  for (int i = 0; i < card_list_size(); i++) {
    if (!this->card_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleZhanBuData::Swap(RoleZhanBuData* other) {
  if (other != this) {
    card_list_.Swap(&other->card_list_);
    std::swap(history_collection_value_, other->history_collection_value_);
    std::swap(low_card_group_map_idx_, other->low_card_group_map_idx_);
    std::swap(cur_low_card_group_id_, other->cur_low_card_group_id_);
    std::swap(low_card_group_last_recover_time_, other->low_card_group_last_recover_time_);
    std::swap(cur_low_card_group_refresh_times_, other->cur_low_card_group_refresh_times_);
    std::swap(today_low_card_group_open_card_times_, other->today_low_card_group_open_card_times_);
    std::swap(high_card_group_last_refresh_time_, other->high_card_group_last_refresh_time_);
    low_card_group_.Swap(&other->low_card_group_);
    high_card_group_.Swap(&other->high_card_group_);
    collection_book_list_.Swap(&other->collection_book_list_);
    std::swap(achievement_level_, other->achievement_level_);
    std::swap(today_low_card_group_cost_refresh_times_, other->today_low_card_group_cost_refresh_times_);
    std::swap(today_high_card_group_cost_refresh_times_, other->today_high_card_group_cost_refresh_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleZhanBuData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleZhanBuData_descriptor_;
  metadata.reflection = RoleZhanBuData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldLevelTaskData::kTaskIdFieldNumber;
const int WorldLevelTaskData::kContextFieldNumber;
const int WorldLevelTaskData::kIsAlreadyTakeFieldNumber;
const int WorldLevelTaskData::kTaskTypeFieldNumber;
const int WorldLevelTaskData::kTaskLevelFieldNumber;
#endif  // !_MSC_VER

WorldLevelTaskData::WorldLevelTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldLevelTaskData::InitAsDefaultInstance() {
}

WorldLevelTaskData::WorldLevelTaskData(const WorldLevelTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldLevelTaskData::SharedCtor() {
  _cached_size_ = 0;
  task_id_ = 0u;
  context_ = 0u;
  is_already_take_ = 0u;
  task_type_ = 0u;
  task_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldLevelTaskData::~WorldLevelTaskData() {
  SharedDtor();
}

void WorldLevelTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldLevelTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldLevelTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldLevelTaskData_descriptor_;
}

const WorldLevelTaskData& WorldLevelTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

WorldLevelTaskData* WorldLevelTaskData::default_instance_ = NULL;

WorldLevelTaskData* WorldLevelTaskData::New() const {
  return new WorldLevelTaskData;
}

void WorldLevelTaskData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_id_ = 0u;
    context_ = 0u;
    is_already_take_ = 0u;
    task_type_ = 0u;
    task_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldLevelTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 task_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_context;
        break;
      }

      // optional uint32 context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_already_take;
        break;
      }

      // optional uint32 is_already_take = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_already_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_take_)));
          set_has_is_already_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_task_type;
        break;
      }

      // optional uint32 task_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_type_)));
          set_has_task_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_task_level;
        break;
      }

      // optional uint32 task_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &task_level_)));
          set_has_task_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldLevelTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->task_id(), output);
  }

  // optional uint32 context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->context(), output);
  }

  // optional uint32 is_already_take = 3;
  if (has_is_already_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_already_take(), output);
  }

  // optional uint32 task_type = 4;
  if (has_task_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->task_type(), output);
  }

  // optional uint32 task_level = 5;
  if (has_task_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->task_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldLevelTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 task_id = 1;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->task_id(), target);
  }

  // optional uint32 context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->context(), target);
  }

  // optional uint32 is_already_take = 3;
  if (has_is_already_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_already_take(), target);
  }

  // optional uint32 task_type = 4;
  if (has_task_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->task_type(), target);
  }

  // optional uint32 task_level = 5;
  if (has_task_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->task_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldLevelTaskData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 task_id = 1;
    if (has_task_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_id());
    }

    // optional uint32 context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

    // optional uint32 is_already_take = 3;
    if (has_is_already_take()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_take());
    }

    // optional uint32 task_type = 4;
    if (has_task_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_type());
    }

    // optional uint32 task_level = 5;
    if (has_task_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->task_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldLevelTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldLevelTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldLevelTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldLevelTaskData::MergeFrom(const WorldLevelTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_is_already_take()) {
      set_is_already_take(from.is_already_take());
    }
    if (from.has_task_type()) {
      set_task_type(from.task_type());
    }
    if (from.has_task_level()) {
      set_task_level(from.task_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldLevelTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldLevelTaskData::CopyFrom(const WorldLevelTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldLevelTaskData::IsInitialized() const {

  return true;
}

void WorldLevelTaskData::Swap(WorldLevelTaskData* other) {
  if (other != this) {
    std::swap(task_id_, other->task_id_);
    std::swap(context_, other->context_);
    std::swap(is_already_take_, other->is_already_take_);
    std::swap(task_type_, other->task_type_);
    std::swap(task_level_, other->task_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldLevelTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldLevelTaskData_descriptor_;
  metadata.reflection = WorldLevelTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleWorldLevelTaskInfo::kIsAlreadyTakeFinalRewardFieldNumber;
const int RoleWorldLevelTaskInfo::kTaskEventListFieldNumber;
#endif  // !_MSC_VER

RoleWorldLevelTaskInfo::RoleWorldLevelTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleWorldLevelTaskInfo::InitAsDefaultInstance() {
}

RoleWorldLevelTaskInfo::RoleWorldLevelTaskInfo(const RoleWorldLevelTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleWorldLevelTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  is_already_take_final_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleWorldLevelTaskInfo::~RoleWorldLevelTaskInfo() {
  SharedDtor();
}

void RoleWorldLevelTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleWorldLevelTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleWorldLevelTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleWorldLevelTaskInfo_descriptor_;
}

const RoleWorldLevelTaskInfo& RoleWorldLevelTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleWorldLevelTaskInfo* RoleWorldLevelTaskInfo::default_instance_ = NULL;

RoleWorldLevelTaskInfo* RoleWorldLevelTaskInfo::New() const {
  return new RoleWorldLevelTaskInfo;
}

void RoleWorldLevelTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_already_take_final_reward_ = 0u;
  }
  task_event_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleWorldLevelTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_already_take_final_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_take_final_reward_)));
          set_has_is_already_take_final_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_event_list;
        break;
      }

      // repeated .PB.WorldLevelTaskData task_event_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_event_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleWorldLevelTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_already_take_final_reward = 1;
  if (has_is_already_take_final_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_already_take_final_reward(), output);
  }

  // repeated .PB.WorldLevelTaskData task_event_list = 2;
  for (int i = 0; i < this->task_event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_event_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleWorldLevelTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_already_take_final_reward = 1;
  if (has_is_already_take_final_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_already_take_final_reward(), target);
  }

  // repeated .PB.WorldLevelTaskData task_event_list = 2;
  for (int i = 0; i < this->task_event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_event_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleWorldLevelTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_already_take_final_reward = 1;
    if (has_is_already_take_final_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_take_final_reward());
    }

  }
  // repeated .PB.WorldLevelTaskData task_event_list = 2;
  total_size += 1 * this->task_event_list_size();
  for (int i = 0; i < this->task_event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_event_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleWorldLevelTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleWorldLevelTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleWorldLevelTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleWorldLevelTaskInfo::MergeFrom(const RoleWorldLevelTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_event_list_.MergeFrom(from.task_event_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_already_take_final_reward()) {
      set_is_already_take_final_reward(from.is_already_take_final_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleWorldLevelTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleWorldLevelTaskInfo::CopyFrom(const RoleWorldLevelTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleWorldLevelTaskInfo::IsInitialized() const {

  return true;
}

void RoleWorldLevelTaskInfo::Swap(RoleWorldLevelTaskInfo* other) {
  if (other != this) {
    std::swap(is_already_take_final_reward_, other->is_already_take_final_reward_);
    task_event_list_.Swap(&other->task_event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleWorldLevelTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleWorldLevelTaskInfo_descriptor_;
  metadata.reflection = RoleWorldLevelTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHangUpDropData::kLastObtainRewardTimeFieldNumber;
#endif  // !_MSC_VER

RoleHangUpDropData::RoleHangUpDropData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleHangUpDropData::InitAsDefaultInstance() {
}

RoleHangUpDropData::RoleHangUpDropData(const RoleHangUpDropData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleHangUpDropData::SharedCtor() {
  _cached_size_ = 0;
  last_obtain_reward_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHangUpDropData::~RoleHangUpDropData() {
  SharedDtor();
}

void RoleHangUpDropData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHangUpDropData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHangUpDropData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHangUpDropData_descriptor_;
}

const RoleHangUpDropData& RoleHangUpDropData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleHangUpDropData* RoleHangUpDropData::default_instance_ = NULL;

RoleHangUpDropData* RoleHangUpDropData::New() const {
  return new RoleHangUpDropData;
}

void RoleHangUpDropData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_obtain_reward_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHangUpDropData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_obtain_reward_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_obtain_reward_time_)));
          set_has_last_obtain_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleHangUpDropData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_obtain_reward_time = 1;
  if (has_last_obtain_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_obtain_reward_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleHangUpDropData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_obtain_reward_time = 1;
  if (has_last_obtain_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_obtain_reward_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleHangUpDropData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_obtain_reward_time = 1;
    if (has_last_obtain_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_obtain_reward_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHangUpDropData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHangUpDropData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHangUpDropData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHangUpDropData::MergeFrom(const RoleHangUpDropData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_obtain_reward_time()) {
      set_last_obtain_reward_time(from.last_obtain_reward_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHangUpDropData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHangUpDropData::CopyFrom(const RoleHangUpDropData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHangUpDropData::IsInitialized() const {

  return true;
}

void RoleHangUpDropData::Swap(RoleHangUpDropData* other) {
  if (other != this) {
    std::swap(last_obtain_reward_time_, other->last_obtain_reward_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHangUpDropData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHangUpDropData_descriptor_;
  metadata.reflection = RoleHangUpDropData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSecondInfo::kPvpDataFieldNumber;
const int RoleSecondInfo::kTitleInfoFieldNumber;
const int RoleSecondInfo::kEndlessLandInfoFieldNumber;
const int RoleSecondInfo::kGuildDataFieldNumber;
const int RoleSecondInfo::kLuxurySignInDataFieldNumber;
const int RoleSecondInfo::kGemInfoFieldNumber;
const int RoleSecondInfo::kRoleItemInfoFieldNumber;
const int RoleSecondInfo::kRoleEquipmentInfoFieldNumber;
const int RoleSecondInfo::kRoleTreasureInfoFieldNumber;
const int RoleSecondInfo::kRoleShopInfoFieldNumber;
const int RoleSecondInfo::kRoleSpriteInfoFieldNumber;
const int RoleSecondInfo::kRoleRebelInfoFieldNumber;
const int RoleSecondInfo::kRoleDuobaoInfoFieldNumber;
const int RoleSecondInfo::kRoleFbInfoFieldNumber;
const int RoleSecondInfo::kRoleAchievementInfoFieldNumber;
const int RoleSecondInfo::kRoleDailyMissionInfoFieldNumber;
const int RoleSecondInfo::kRoleGuildSkillInfoFieldNumber;
const int RoleSecondInfo::kRoleSignInDataFieldNumber;
const int RoleSecondInfo::kLoginRewardDataFieldNumber;
const int RoleSecondInfo::kKingMatchDataFieldNumber;
const int RoleSecondInfo::kTeamDungeonDataFieldNumber;
const int RoleSecondInfo::kRoleZhanbuDataFieldNumber;
const int RoleSecondInfo::kRoleWorldLevelTaskInfoFieldNumber;
const int RoleSecondInfo::kRoleHangUpDropDataFieldNumber;
#endif  // !_MSC_VER

RoleSecondInfo::RoleSecondInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSecondInfo::InitAsDefaultInstance() {
  pvp_data_ = const_cast< ::PB::RolePVPData*>(&::PB::RolePVPData::default_instance());
  title_info_ = const_cast< ::PB::RoleTitleInfo*>(&::PB::RoleTitleInfo::default_instance());
  endless_land_info_ = const_cast< ::PB::RoleEndlessLandInfo*>(&::PB::RoleEndlessLandInfo::default_instance());
  guild_data_ = const_cast< ::PB::RoleGuildData*>(&::PB::RoleGuildData::default_instance());
  luxury_sign_in_data_ = const_cast< ::PB::PlayerLuxurySignInData*>(&::PB::PlayerLuxurySignInData::default_instance());
  gem_info_ = const_cast< ::PB::PlayerGemInfo*>(&::PB::PlayerGemInfo::default_instance());
  role_item_info_ = const_cast< ::PB::RoleItemInfo*>(&::PB::RoleItemInfo::default_instance());
  role_equipment_info_ = const_cast< ::PB::RoleEquipmentInfo*>(&::PB::RoleEquipmentInfo::default_instance());
  role_treasure_info_ = const_cast< ::PB::RoleTreasureInfo*>(&::PB::RoleTreasureInfo::default_instance());
  role_shop_info_ = const_cast< ::PB::RoleShopInfo*>(&::PB::RoleShopInfo::default_instance());
  role_sprite_info_ = const_cast< ::PB::RoleSpiritInfo*>(&::PB::RoleSpiritInfo::default_instance());
  role_rebel_info_ = const_cast< ::PB::RoleRebelInfo*>(&::PB::RoleRebelInfo::default_instance());
  role_duobao_info_ = const_cast< ::PB::RoleDuobaoInfo*>(&::PB::RoleDuobaoInfo::default_instance());
  role_fb_info_ = const_cast< ::PB::RoleFBInfo*>(&::PB::RoleFBInfo::default_instance());
  role_achievement_info_ = const_cast< ::PB::RoleAchievemntInfo*>(&::PB::RoleAchievemntInfo::default_instance());
  role_daily_mission_info_ = const_cast< ::PB::RoleDailyMissionInfo*>(&::PB::RoleDailyMissionInfo::default_instance());
  role_guild_skill_info_ = const_cast< ::PB::RoleGuildSkillInfo*>(&::PB::RoleGuildSkillInfo::default_instance());
  role_sign_in_data_ = const_cast< ::PB::RoleSignInData*>(&::PB::RoleSignInData::default_instance());
  login_reward_data_ = const_cast< ::PB::LoginRewardData*>(&::PB::LoginRewardData::default_instance());
  king_match_data_ = const_cast< ::PB::RoleKingMatchData*>(&::PB::RoleKingMatchData::default_instance());
  team_dungeon_data_ = const_cast< ::PB::PlayerTeamDungeonData*>(&::PB::PlayerTeamDungeonData::default_instance());
  role_zhanbu_data_ = const_cast< ::PB::RoleZhanBuData*>(&::PB::RoleZhanBuData::default_instance());
  role_world_level_task_info_ = const_cast< ::PB::RoleWorldLevelTaskInfo*>(&::PB::RoleWorldLevelTaskInfo::default_instance());
  role_hang_up_drop_data_ = const_cast< ::PB::RoleHangUpDropData*>(&::PB::RoleHangUpDropData::default_instance());
}

RoleSecondInfo::RoleSecondInfo(const RoleSecondInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSecondInfo::SharedCtor() {
  _cached_size_ = 0;
  pvp_data_ = NULL;
  title_info_ = NULL;
  endless_land_info_ = NULL;
  guild_data_ = NULL;
  luxury_sign_in_data_ = NULL;
  gem_info_ = NULL;
  role_item_info_ = NULL;
  role_equipment_info_ = NULL;
  role_treasure_info_ = NULL;
  role_shop_info_ = NULL;
  role_sprite_info_ = NULL;
  role_rebel_info_ = NULL;
  role_duobao_info_ = NULL;
  role_fb_info_ = NULL;
  role_achievement_info_ = NULL;
  role_daily_mission_info_ = NULL;
  role_guild_skill_info_ = NULL;
  role_sign_in_data_ = NULL;
  login_reward_data_ = NULL;
  king_match_data_ = NULL;
  team_dungeon_data_ = NULL;
  role_zhanbu_data_ = NULL;
  role_world_level_task_info_ = NULL;
  role_hang_up_drop_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSecondInfo::~RoleSecondInfo() {
  SharedDtor();
}

void RoleSecondInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pvp_data_;
    delete title_info_;
    delete endless_land_info_;
    delete guild_data_;
    delete luxury_sign_in_data_;
    delete gem_info_;
    delete role_item_info_;
    delete role_equipment_info_;
    delete role_treasure_info_;
    delete role_shop_info_;
    delete role_sprite_info_;
    delete role_rebel_info_;
    delete role_duobao_info_;
    delete role_fb_info_;
    delete role_achievement_info_;
    delete role_daily_mission_info_;
    delete role_guild_skill_info_;
    delete role_sign_in_data_;
    delete login_reward_data_;
    delete king_match_data_;
    delete team_dungeon_data_;
    delete role_zhanbu_data_;
    delete role_world_level_task_info_;
    delete role_hang_up_drop_data_;
  }
}

void RoleSecondInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSecondInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSecondInfo_descriptor_;
}

const RoleSecondInfo& RoleSecondInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSecondInfo* RoleSecondInfo::default_instance_ = NULL;

RoleSecondInfo* RoleSecondInfo::New() const {
  return new RoleSecondInfo;
}

void RoleSecondInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pvp_data()) {
      if (pvp_data_ != NULL) pvp_data_->::PB::RolePVPData::Clear();
    }
    if (has_title_info()) {
      if (title_info_ != NULL) title_info_->::PB::RoleTitleInfo::Clear();
    }
    if (has_endless_land_info()) {
      if (endless_land_info_ != NULL) endless_land_info_->::PB::RoleEndlessLandInfo::Clear();
    }
    if (has_guild_data()) {
      if (guild_data_ != NULL) guild_data_->::PB::RoleGuildData::Clear();
    }
    if (has_luxury_sign_in_data()) {
      if (luxury_sign_in_data_ != NULL) luxury_sign_in_data_->::PB::PlayerLuxurySignInData::Clear();
    }
    if (has_gem_info()) {
      if (gem_info_ != NULL) gem_info_->::PB::PlayerGemInfo::Clear();
    }
    if (has_role_item_info()) {
      if (role_item_info_ != NULL) role_item_info_->::PB::RoleItemInfo::Clear();
    }
    if (has_role_equipment_info()) {
      if (role_equipment_info_ != NULL) role_equipment_info_->::PB::RoleEquipmentInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_role_treasure_info()) {
      if (role_treasure_info_ != NULL) role_treasure_info_->::PB::RoleTreasureInfo::Clear();
    }
    if (has_role_shop_info()) {
      if (role_shop_info_ != NULL) role_shop_info_->::PB::RoleShopInfo::Clear();
    }
    if (has_role_sprite_info()) {
      if (role_sprite_info_ != NULL) role_sprite_info_->::PB::RoleSpiritInfo::Clear();
    }
    if (has_role_rebel_info()) {
      if (role_rebel_info_ != NULL) role_rebel_info_->::PB::RoleRebelInfo::Clear();
    }
    if (has_role_duobao_info()) {
      if (role_duobao_info_ != NULL) role_duobao_info_->::PB::RoleDuobaoInfo::Clear();
    }
    if (has_role_fb_info()) {
      if (role_fb_info_ != NULL) role_fb_info_->::PB::RoleFBInfo::Clear();
    }
    if (has_role_achievement_info()) {
      if (role_achievement_info_ != NULL) role_achievement_info_->::PB::RoleAchievemntInfo::Clear();
    }
    if (has_role_daily_mission_info()) {
      if (role_daily_mission_info_ != NULL) role_daily_mission_info_->::PB::RoleDailyMissionInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_role_guild_skill_info()) {
      if (role_guild_skill_info_ != NULL) role_guild_skill_info_->::PB::RoleGuildSkillInfo::Clear();
    }
    if (has_role_sign_in_data()) {
      if (role_sign_in_data_ != NULL) role_sign_in_data_->::PB::RoleSignInData::Clear();
    }
    if (has_login_reward_data()) {
      if (login_reward_data_ != NULL) login_reward_data_->::PB::LoginRewardData::Clear();
    }
    if (has_king_match_data()) {
      if (king_match_data_ != NULL) king_match_data_->::PB::RoleKingMatchData::Clear();
    }
    if (has_team_dungeon_data()) {
      if (team_dungeon_data_ != NULL) team_dungeon_data_->::PB::PlayerTeamDungeonData::Clear();
    }
    if (has_role_zhanbu_data()) {
      if (role_zhanbu_data_ != NULL) role_zhanbu_data_->::PB::RoleZhanBuData::Clear();
    }
    if (has_role_world_level_task_info()) {
      if (role_world_level_task_info_ != NULL) role_world_level_task_info_->::PB::RoleWorldLevelTaskInfo::Clear();
    }
    if (has_role_hang_up_drop_data()) {
      if (role_hang_up_drop_data_ != NULL) role_hang_up_drop_data_->::PB::RoleHangUpDropData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSecondInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.RolePVPData pvp_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_title_info;
        break;
      }

      // optional .PB.RoleTitleInfo title_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_endless_land_info;
        break;
      }

      // optional .PB.RoleEndlessLandInfo endless_land_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endless_land_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endless_land_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guild_data;
        break;
      }

      // optional .PB.RoleGuildData guild_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guild_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_luxury_sign_in_data;
        break;
      }

      // optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_luxury_sign_in_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_luxury_sign_in_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gem_info;
        break;
      }

      // optional .PB.PlayerGemInfo gem_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gem_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gem_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_role_item_info;
        break;
      }

      // optional .PB.RoleItemInfo role_item_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_item_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_item_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_role_equipment_info;
        break;
      }

      // optional .PB.RoleEquipmentInfo role_equipment_info = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_equipment_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_equipment_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_role_treasure_info;
        break;
      }

      // optional .PB.RoleTreasureInfo role_treasure_info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_treasure_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_treasure_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_role_shop_info;
        break;
      }

      // optional .PB.RoleShopInfo role_shop_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_shop_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_shop_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_role_sprite_info;
        break;
      }

      // optional .PB.RoleSpiritInfo role_sprite_info = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_sprite_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_sprite_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_role_rebel_info;
        break;
      }

      // optional .PB.RoleRebelInfo role_rebel_info = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_rebel_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_rebel_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_role_duobao_info;
        break;
      }

      // optional .PB.RoleDuobaoInfo role_duobao_info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_duobao_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_duobao_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_role_fb_info;
        break;
      }

      // optional .PB.RoleFBInfo role_fb_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_fb_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_fb_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_role_achievement_info;
        break;
      }

      // optional .PB.RoleAchievemntInfo role_achievement_info = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_achievement_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_achievement_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_role_daily_mission_info;
        break;
      }

      // optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_daily_mission_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_daily_mission_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_role_guild_skill_info;
        break;
      }

      // optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_guild_skill_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_guild_skill_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_role_sign_in_data;
        break;
      }

      // optional .PB.RoleSignInData role_sign_in_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_sign_in_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_sign_in_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_login_reward_data;
        break;
      }

      // optional .PB.LoginRewardData login_reward_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_king_match_data;
        break;
      }

      // optional .PB.RoleKingMatchData king_match_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_king_match_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_king_match_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_team_dungeon_data;
        break;
      }

      // optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team_dungeon_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team_dungeon_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_role_zhanbu_data;
        break;
      }

      // optional .PB.RoleZhanBuData role_zhanbu_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_zhanbu_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_zhanbu_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_role_world_level_task_info;
        break;
      }

      // optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_world_level_task_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_world_level_task_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_role_hang_up_drop_data;
        break;
      }

      // optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_hang_up_drop_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_hang_up_drop_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSecondInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.RolePVPData pvp_data = 1;
  if (has_pvp_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pvp_data(), output);
  }

  // optional .PB.RoleTitleInfo title_info = 2;
  if (has_title_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->title_info(), output);
  }

  // optional .PB.RoleEndlessLandInfo endless_land_info = 3;
  if (has_endless_land_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->endless_land_info(), output);
  }

  // optional .PB.RoleGuildData guild_data = 4;
  if (has_guild_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->guild_data(), output);
  }

  // optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
  if (has_luxury_sign_in_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->luxury_sign_in_data(), output);
  }

  // optional .PB.PlayerGemInfo gem_info = 6;
  if (has_gem_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gem_info(), output);
  }

  // optional .PB.RoleItemInfo role_item_info = 7;
  if (has_role_item_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->role_item_info(), output);
  }

  // optional .PB.RoleEquipmentInfo role_equipment_info = 8;
  if (has_role_equipment_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->role_equipment_info(), output);
  }

  // optional .PB.RoleTreasureInfo role_treasure_info = 9;
  if (has_role_treasure_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->role_treasure_info(), output);
  }

  // optional .PB.RoleShopInfo role_shop_info = 10;
  if (has_role_shop_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->role_shop_info(), output);
  }

  // optional .PB.RoleSpiritInfo role_sprite_info = 11;
  if (has_role_sprite_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->role_sprite_info(), output);
  }

  // optional .PB.RoleRebelInfo role_rebel_info = 12;
  if (has_role_rebel_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->role_rebel_info(), output);
  }

  // optional .PB.RoleDuobaoInfo role_duobao_info = 13;
  if (has_role_duobao_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->role_duobao_info(), output);
  }

  // optional .PB.RoleFBInfo role_fb_info = 14;
  if (has_role_fb_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->role_fb_info(), output);
  }

  // optional .PB.RoleAchievemntInfo role_achievement_info = 15;
  if (has_role_achievement_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->role_achievement_info(), output);
  }

  // optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
  if (has_role_daily_mission_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->role_daily_mission_info(), output);
  }

  // optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
  if (has_role_guild_skill_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->role_guild_skill_info(), output);
  }

  // optional .PB.RoleSignInData role_sign_in_data = 18;
  if (has_role_sign_in_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->role_sign_in_data(), output);
  }

  // optional .PB.LoginRewardData login_reward_data = 19;
  if (has_login_reward_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->login_reward_data(), output);
  }

  // optional .PB.RoleKingMatchData king_match_data = 20;
  if (has_king_match_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->king_match_data(), output);
  }

  // optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
  if (has_team_dungeon_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->team_dungeon_data(), output);
  }

  // optional .PB.RoleZhanBuData role_zhanbu_data = 22;
  if (has_role_zhanbu_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->role_zhanbu_data(), output);
  }

  // optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
  if (has_role_world_level_task_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->role_world_level_task_info(), output);
  }

  // optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
  if (has_role_hang_up_drop_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->role_hang_up_drop_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSecondInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.RolePVPData pvp_data = 1;
  if (has_pvp_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pvp_data(), target);
  }

  // optional .PB.RoleTitleInfo title_info = 2;
  if (has_title_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->title_info(), target);
  }

  // optional .PB.RoleEndlessLandInfo endless_land_info = 3;
  if (has_endless_land_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->endless_land_info(), target);
  }

  // optional .PB.RoleGuildData guild_data = 4;
  if (has_guild_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->guild_data(), target);
  }

  // optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
  if (has_luxury_sign_in_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->luxury_sign_in_data(), target);
  }

  // optional .PB.PlayerGemInfo gem_info = 6;
  if (has_gem_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gem_info(), target);
  }

  // optional .PB.RoleItemInfo role_item_info = 7;
  if (has_role_item_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->role_item_info(), target);
  }

  // optional .PB.RoleEquipmentInfo role_equipment_info = 8;
  if (has_role_equipment_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->role_equipment_info(), target);
  }

  // optional .PB.RoleTreasureInfo role_treasure_info = 9;
  if (has_role_treasure_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->role_treasure_info(), target);
  }

  // optional .PB.RoleShopInfo role_shop_info = 10;
  if (has_role_shop_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->role_shop_info(), target);
  }

  // optional .PB.RoleSpiritInfo role_sprite_info = 11;
  if (has_role_sprite_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->role_sprite_info(), target);
  }

  // optional .PB.RoleRebelInfo role_rebel_info = 12;
  if (has_role_rebel_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->role_rebel_info(), target);
  }

  // optional .PB.RoleDuobaoInfo role_duobao_info = 13;
  if (has_role_duobao_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->role_duobao_info(), target);
  }

  // optional .PB.RoleFBInfo role_fb_info = 14;
  if (has_role_fb_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->role_fb_info(), target);
  }

  // optional .PB.RoleAchievemntInfo role_achievement_info = 15;
  if (has_role_achievement_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->role_achievement_info(), target);
  }

  // optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
  if (has_role_daily_mission_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->role_daily_mission_info(), target);
  }

  // optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
  if (has_role_guild_skill_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->role_guild_skill_info(), target);
  }

  // optional .PB.RoleSignInData role_sign_in_data = 18;
  if (has_role_sign_in_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->role_sign_in_data(), target);
  }

  // optional .PB.LoginRewardData login_reward_data = 19;
  if (has_login_reward_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->login_reward_data(), target);
  }

  // optional .PB.RoleKingMatchData king_match_data = 20;
  if (has_king_match_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->king_match_data(), target);
  }

  // optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
  if (has_team_dungeon_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->team_dungeon_data(), target);
  }

  // optional .PB.RoleZhanBuData role_zhanbu_data = 22;
  if (has_role_zhanbu_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->role_zhanbu_data(), target);
  }

  // optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
  if (has_role_world_level_task_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->role_world_level_task_info(), target);
  }

  // optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
  if (has_role_hang_up_drop_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->role_hang_up_drop_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSecondInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.RolePVPData pvp_data = 1;
    if (has_pvp_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp_data());
    }

    // optional .PB.RoleTitleInfo title_info = 2;
    if (has_title_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_info());
    }

    // optional .PB.RoleEndlessLandInfo endless_land_info = 3;
    if (has_endless_land_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endless_land_info());
    }

    // optional .PB.RoleGuildData guild_data = 4;
    if (has_guild_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guild_data());
    }

    // optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
    if (has_luxury_sign_in_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->luxury_sign_in_data());
    }

    // optional .PB.PlayerGemInfo gem_info = 6;
    if (has_gem_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gem_info());
    }

    // optional .PB.RoleItemInfo role_item_info = 7;
    if (has_role_item_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_item_info());
    }

    // optional .PB.RoleEquipmentInfo role_equipment_info = 8;
    if (has_role_equipment_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_equipment_info());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.RoleTreasureInfo role_treasure_info = 9;
    if (has_role_treasure_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_treasure_info());
    }

    // optional .PB.RoleShopInfo role_shop_info = 10;
    if (has_role_shop_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_shop_info());
    }

    // optional .PB.RoleSpiritInfo role_sprite_info = 11;
    if (has_role_sprite_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_sprite_info());
    }

    // optional .PB.RoleRebelInfo role_rebel_info = 12;
    if (has_role_rebel_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_rebel_info());
    }

    // optional .PB.RoleDuobaoInfo role_duobao_info = 13;
    if (has_role_duobao_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_duobao_info());
    }

    // optional .PB.RoleFBInfo role_fb_info = 14;
    if (has_role_fb_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_fb_info());
    }

    // optional .PB.RoleAchievemntInfo role_achievement_info = 15;
    if (has_role_achievement_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_achievement_info());
    }

    // optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
    if (has_role_daily_mission_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_daily_mission_info());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
    if (has_role_guild_skill_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_guild_skill_info());
    }

    // optional .PB.RoleSignInData role_sign_in_data = 18;
    if (has_role_sign_in_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_sign_in_data());
    }

    // optional .PB.LoginRewardData login_reward_data = 19;
    if (has_login_reward_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login_reward_data());
    }

    // optional .PB.RoleKingMatchData king_match_data = 20;
    if (has_king_match_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->king_match_data());
    }

    // optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
    if (has_team_dungeon_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team_dungeon_data());
    }

    // optional .PB.RoleZhanBuData role_zhanbu_data = 22;
    if (has_role_zhanbu_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_zhanbu_data());
    }

    // optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
    if (has_role_world_level_task_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_world_level_task_info());
    }

    // optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
    if (has_role_hang_up_drop_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_hang_up_drop_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSecondInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSecondInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSecondInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSecondInfo::MergeFrom(const RoleSecondInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pvp_data()) {
      mutable_pvp_data()->::PB::RolePVPData::MergeFrom(from.pvp_data());
    }
    if (from.has_title_info()) {
      mutable_title_info()->::PB::RoleTitleInfo::MergeFrom(from.title_info());
    }
    if (from.has_endless_land_info()) {
      mutable_endless_land_info()->::PB::RoleEndlessLandInfo::MergeFrom(from.endless_land_info());
    }
    if (from.has_guild_data()) {
      mutable_guild_data()->::PB::RoleGuildData::MergeFrom(from.guild_data());
    }
    if (from.has_luxury_sign_in_data()) {
      mutable_luxury_sign_in_data()->::PB::PlayerLuxurySignInData::MergeFrom(from.luxury_sign_in_data());
    }
    if (from.has_gem_info()) {
      mutable_gem_info()->::PB::PlayerGemInfo::MergeFrom(from.gem_info());
    }
    if (from.has_role_item_info()) {
      mutable_role_item_info()->::PB::RoleItemInfo::MergeFrom(from.role_item_info());
    }
    if (from.has_role_equipment_info()) {
      mutable_role_equipment_info()->::PB::RoleEquipmentInfo::MergeFrom(from.role_equipment_info());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_role_treasure_info()) {
      mutable_role_treasure_info()->::PB::RoleTreasureInfo::MergeFrom(from.role_treasure_info());
    }
    if (from.has_role_shop_info()) {
      mutable_role_shop_info()->::PB::RoleShopInfo::MergeFrom(from.role_shop_info());
    }
    if (from.has_role_sprite_info()) {
      mutable_role_sprite_info()->::PB::RoleSpiritInfo::MergeFrom(from.role_sprite_info());
    }
    if (from.has_role_rebel_info()) {
      mutable_role_rebel_info()->::PB::RoleRebelInfo::MergeFrom(from.role_rebel_info());
    }
    if (from.has_role_duobao_info()) {
      mutable_role_duobao_info()->::PB::RoleDuobaoInfo::MergeFrom(from.role_duobao_info());
    }
    if (from.has_role_fb_info()) {
      mutable_role_fb_info()->::PB::RoleFBInfo::MergeFrom(from.role_fb_info());
    }
    if (from.has_role_achievement_info()) {
      mutable_role_achievement_info()->::PB::RoleAchievemntInfo::MergeFrom(from.role_achievement_info());
    }
    if (from.has_role_daily_mission_info()) {
      mutable_role_daily_mission_info()->::PB::RoleDailyMissionInfo::MergeFrom(from.role_daily_mission_info());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_role_guild_skill_info()) {
      mutable_role_guild_skill_info()->::PB::RoleGuildSkillInfo::MergeFrom(from.role_guild_skill_info());
    }
    if (from.has_role_sign_in_data()) {
      mutable_role_sign_in_data()->::PB::RoleSignInData::MergeFrom(from.role_sign_in_data());
    }
    if (from.has_login_reward_data()) {
      mutable_login_reward_data()->::PB::LoginRewardData::MergeFrom(from.login_reward_data());
    }
    if (from.has_king_match_data()) {
      mutable_king_match_data()->::PB::RoleKingMatchData::MergeFrom(from.king_match_data());
    }
    if (from.has_team_dungeon_data()) {
      mutable_team_dungeon_data()->::PB::PlayerTeamDungeonData::MergeFrom(from.team_dungeon_data());
    }
    if (from.has_role_zhanbu_data()) {
      mutable_role_zhanbu_data()->::PB::RoleZhanBuData::MergeFrom(from.role_zhanbu_data());
    }
    if (from.has_role_world_level_task_info()) {
      mutable_role_world_level_task_info()->::PB::RoleWorldLevelTaskInfo::MergeFrom(from.role_world_level_task_info());
    }
    if (from.has_role_hang_up_drop_data()) {
      mutable_role_hang_up_drop_data()->::PB::RoleHangUpDropData::MergeFrom(from.role_hang_up_drop_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSecondInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSecondInfo::CopyFrom(const RoleSecondInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSecondInfo::IsInitialized() const {

  if (has_role_item_info()) {
    if (!this->role_item_info().IsInitialized()) return false;
  }
  if (has_role_equipment_info()) {
    if (!this->role_equipment_info().IsInitialized()) return false;
  }
  if (has_role_treasure_info()) {
    if (!this->role_treasure_info().IsInitialized()) return false;
  }
  if (has_role_shop_info()) {
    if (!this->role_shop_info().IsInitialized()) return false;
  }
  if (has_role_sprite_info()) {
    if (!this->role_sprite_info().IsInitialized()) return false;
  }
  if (has_role_rebel_info()) {
    if (!this->role_rebel_info().IsInitialized()) return false;
  }
  if (has_role_fb_info()) {
    if (!this->role_fb_info().IsInitialized()) return false;
  }
  if (has_role_achievement_info()) {
    if (!this->role_achievement_info().IsInitialized()) return false;
  }
  if (has_role_daily_mission_info()) {
    if (!this->role_daily_mission_info().IsInitialized()) return false;
  }
  if (has_role_guild_skill_info()) {
    if (!this->role_guild_skill_info().IsInitialized()) return false;
  }
  if (has_role_sign_in_data()) {
    if (!this->role_sign_in_data().IsInitialized()) return false;
  }
  if (has_role_zhanbu_data()) {
    if (!this->role_zhanbu_data().IsInitialized()) return false;
  }
  return true;
}

void RoleSecondInfo::Swap(RoleSecondInfo* other) {
  if (other != this) {
    std::swap(pvp_data_, other->pvp_data_);
    std::swap(title_info_, other->title_info_);
    std::swap(endless_land_info_, other->endless_land_info_);
    std::swap(guild_data_, other->guild_data_);
    std::swap(luxury_sign_in_data_, other->luxury_sign_in_data_);
    std::swap(gem_info_, other->gem_info_);
    std::swap(role_item_info_, other->role_item_info_);
    std::swap(role_equipment_info_, other->role_equipment_info_);
    std::swap(role_treasure_info_, other->role_treasure_info_);
    std::swap(role_shop_info_, other->role_shop_info_);
    std::swap(role_sprite_info_, other->role_sprite_info_);
    std::swap(role_rebel_info_, other->role_rebel_info_);
    std::swap(role_duobao_info_, other->role_duobao_info_);
    std::swap(role_fb_info_, other->role_fb_info_);
    std::swap(role_achievement_info_, other->role_achievement_info_);
    std::swap(role_daily_mission_info_, other->role_daily_mission_info_);
    std::swap(role_guild_skill_info_, other->role_guild_skill_info_);
    std::swap(role_sign_in_data_, other->role_sign_in_data_);
    std::swap(login_reward_data_, other->login_reward_data_);
    std::swap(king_match_data_, other->king_match_data_);
    std::swap(team_dungeon_data_, other->team_dungeon_data_);
    std::swap(role_zhanbu_data_, other->role_zhanbu_data_);
    std::swap(role_world_level_task_info_, other->role_world_level_task_info_);
    std::swap(role_hang_up_drop_data_, other->role_hang_up_drop_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSecondInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSecondInfo_descriptor_;
  metadata.reflection = RoleSecondInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardData::kUidFieldNumber;
const int RewardData::kInfoIdFieldNumber;
const int RewardData::kValue1FieldNumber;
const int RewardData::kValue2FieldNumber;
const int RewardData::kTimeFieldNumber;
const int RewardData::kTextFieldNumber;
#endif  // !_MSC_VER

RewardData::RewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardData::InitAsDefaultInstance() {
}

RewardData::RewardData(const RewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardData::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  info_id_ = 0u;
  value1_ = 0u;
  value2_ = 0u;
  time_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardData::~RewardData() {
  SharedDtor();
}

void RewardData::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void RewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardData_descriptor_;
}

const RewardData& RewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RewardData* RewardData::default_instance_ = NULL;

RewardData* RewardData::New() const {
  return new RewardData;
}

void RewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
    info_id_ = 0u;
    value1_ = 0u;
    value2_ = 0u;
    time_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // optional uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value1;
        break;
      }

      // optional uint32 value1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value1_)));
          set_has_value1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value2;
        break;
      }

      // optional uint32 value2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value2_)));
          set_has_value2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // required string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

  // optional uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // optional uint32 value1 = 3;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value1(), output);
  }

  // optional uint32 value2 = 4;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value2(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // required string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uid(), target);
  }

  // optional uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // optional uint32 value1 = 3;
  if (has_value1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value1(), target);
  }

  // optional uint32 value2 = 4;
  if (has_value2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value2(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // required string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // optional uint32 value1 = 3;
    if (has_value1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value1());
    }

    // optional uint32 value2 = 4;
    if (has_value2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value2());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardData::MergeFrom(const RewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_value1()) {
      set_value1(from.value1());
    }
    if (from.has_value2()) {
      set_value2(from.value2());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardData::CopyFrom(const RewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void RewardData::Swap(RewardData* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(info_id_, other->info_id_);
    std::swap(value1_, other->value1_);
    std::swap(value2_, other->value2_);
    std::swap(time_, other->time_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardData_descriptor_;
  metadata.reflection = RewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRewardData::kRewardListFieldNumber;
#endif  // !_MSC_VER

RoleRewardData::RoleRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRewardData::InitAsDefaultInstance() {
}

RoleRewardData::RoleRewardData(const RoleRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRewardData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRewardData::~RoleRewardData() {
  SharedDtor();
}

void RoleRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRewardData_descriptor_;
}

const RoleRewardData& RoleRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleRewardData* RoleRewardData::default_instance_ = NULL;

RoleRewardData* RoleRewardData::New() const {
  return new RoleRewardData;
}

void RoleRewardData::Clear() {
  reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.RewardData reward_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.RewardData reward_list = 1;
  for (int i = 0; i < this->reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.RewardData reward_list = 1;
  for (int i = 0; i < this->reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRewardData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.RewardData reward_list = 1;
  total_size += 1 * this->reward_list_size();
  for (int i = 0; i < this->reward_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRewardData::MergeFrom(const RoleRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_list_.MergeFrom(from.reward_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRewardData::CopyFrom(const RoleRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRewardData::IsInitialized() const {

  for (int i = 0; i < reward_list_size(); i++) {
    if (!this->reward_list(i).IsInitialized()) return false;
  }
  return true;
}

void RoleRewardData::Swap(RoleRewardData* other) {
  if (other != this) {
    reward_list_.Swap(&other->reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRewardData_descriptor_;
  metadata.reflection = RoleRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YCSData::kTodayGetTimesFieldNumber;
const int YCSData::kTotalGetTimesFieldNumber;
const int YCSData::kTotalRewardValueFieldNumber;
const int YCSData::kLastGetTimeFieldNumber;
#endif  // !_MSC_VER

YCSData::YCSData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YCSData::InitAsDefaultInstance() {
}

YCSData::YCSData(const YCSData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YCSData::SharedCtor() {
  _cached_size_ = 0;
  today_get_times_ = 0u;
  total_get_times_ = 0u;
  total_reward_value_ = 0u;
  last_get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YCSData::~YCSData() {
  SharedDtor();
}

void YCSData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YCSData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YCSData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YCSData_descriptor_;
}

const YCSData& YCSData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

YCSData* YCSData::default_instance_ = NULL;

YCSData* YCSData::New() const {
  return new YCSData;
}

void YCSData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    today_get_times_ = 0u;
    total_get_times_ = 0u;
    total_reward_value_ = 0u;
    last_get_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YCSData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 today_get_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_get_times_)));
          set_has_today_get_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_get_times;
        break;
      }

      // optional uint32 total_get_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_get_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_get_times_)));
          set_has_total_get_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_reward_value;
        break;
      }

      // optional uint32 total_reward_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_reward_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_reward_value_)));
          set_has_total_reward_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_get_time;
        break;
      }

      // optional uint32 last_get_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_get_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_time_)));
          set_has_last_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YCSData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 today_get_times = 1;
  if (has_today_get_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->today_get_times(), output);
  }

  // optional uint32 total_get_times = 2;
  if (has_total_get_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_get_times(), output);
  }

  // optional uint32 total_reward_value = 3;
  if (has_total_reward_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_reward_value(), output);
  }

  // optional uint32 last_get_time = 4;
  if (has_last_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_get_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YCSData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 today_get_times = 1;
  if (has_today_get_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->today_get_times(), target);
  }

  // optional uint32 total_get_times = 2;
  if (has_total_get_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_get_times(), target);
  }

  // optional uint32 total_reward_value = 3;
  if (has_total_reward_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_reward_value(), target);
  }

  // optional uint32 last_get_time = 4;
  if (has_last_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_get_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YCSData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 today_get_times = 1;
    if (has_today_get_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_get_times());
    }

    // optional uint32 total_get_times = 2;
    if (has_total_get_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_get_times());
    }

    // optional uint32 total_reward_value = 3;
    if (has_total_reward_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_reward_value());
    }

    // optional uint32 last_get_time = 4;
    if (has_last_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YCSData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YCSData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YCSData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YCSData::MergeFrom(const YCSData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_today_get_times()) {
      set_today_get_times(from.today_get_times());
    }
    if (from.has_total_get_times()) {
      set_total_get_times(from.total_get_times());
    }
    if (from.has_total_reward_value()) {
      set_total_reward_value(from.total_reward_value());
    }
    if (from.has_last_get_time()) {
      set_last_get_time(from.last_get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YCSData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YCSData::CopyFrom(const YCSData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YCSData::IsInitialized() const {

  return true;
}

void YCSData::Swap(YCSData* other) {
  if (other != this) {
    std::swap(today_get_times_, other->today_get_times_);
    std::swap(total_get_times_, other->total_get_times_);
    std::swap(total_reward_value_, other->total_reward_value_);
    std::swap(last_get_time_, other->last_get_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YCSData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YCSData_descriptor_;
  metadata.reflection = YCSData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TQTData::kLastGetTimeFieldNumber;
const int TQTData::kTakeRecordListFieldNumber;
#endif  // !_MSC_VER

TQTData::TQTData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TQTData::InitAsDefaultInstance() {
}

TQTData::TQTData(const TQTData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TQTData::SharedCtor() {
  _cached_size_ = 0;
  last_get_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TQTData::~TQTData() {
  SharedDtor();
}

void TQTData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TQTData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TQTData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TQTData_descriptor_;
}

const TQTData& TQTData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TQTData* TQTData::default_instance_ = NULL;

TQTData* TQTData::New() const {
  return new TQTData;
}

void TQTData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_get_time_ = 0u;
  }
  take_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TQTData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_get_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_get_time_)));
          set_has_last_get_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_record_list;
        break;
      }

      // repeated uint32 take_record_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_take_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_take_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TQTData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_get_time = 1;
  if (has_last_get_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_get_time(), output);
  }

  // repeated uint32 take_record_list = 2;
  for (int i = 0; i < this->take_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->take_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TQTData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_get_time = 1;
  if (has_last_get_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_get_time(), target);
  }

  // repeated uint32 take_record_list = 2;
  for (int i = 0; i < this->take_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->take_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TQTData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_get_time = 1;
    if (has_last_get_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_get_time());
    }

  }
  // repeated uint32 take_record_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->take_record_list(i));
    }
    total_size += 1 * this->take_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TQTData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TQTData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TQTData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TQTData::MergeFrom(const TQTData& from) {
  GOOGLE_CHECK_NE(&from, this);
  take_record_list_.MergeFrom(from.take_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_get_time()) {
      set_last_get_time(from.last_get_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TQTData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TQTData::CopyFrom(const TQTData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TQTData::IsInitialized() const {

  return true;
}

void TQTData::Swap(TQTData* other) {
  if (other != this) {
    std::swap(last_get_time_, other->last_get_time_);
    take_record_list_.Swap(&other->take_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TQTData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TQTData_descriptor_;
  metadata.reflection = TQTData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayTargetData::kTargetIdFieldNumber;
const int SevenDayTargetData::kValueFieldNumber;
const int SevenDayTargetData::kIsGetRewardFieldNumber;
#endif  // !_MSC_VER

SevenDayTargetData::SevenDayTargetData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayTargetData::InitAsDefaultInstance() {
}

SevenDayTargetData::SevenDayTargetData(const SevenDayTargetData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayTargetData::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  value_ = 0u;
  is_get_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayTargetData::~SevenDayTargetData() {
  SharedDtor();
}

void SevenDayTargetData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayTargetData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayTargetData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayTargetData_descriptor_;
}

const SevenDayTargetData& SevenDayTargetData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SevenDayTargetData* SevenDayTargetData::default_instance_ = NULL;

SevenDayTargetData* SevenDayTargetData::New() const {
  return new SevenDayTargetData;
}

void SevenDayTargetData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    value_ = 0u;
    is_get_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayTargetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_get_reward;
        break;
      }

      // optional uint32 is_get_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_get_reward_)));
          set_has_is_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayTargetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 is_get_reward = 3;
  if (has_is_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayTargetData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional uint32 is_get_reward = 3;
  if (has_is_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayTargetData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 is_get_reward = 3;
    if (has_is_get_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_get_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayTargetData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayTargetData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayTargetData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayTargetData::MergeFrom(const SevenDayTargetData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_is_get_reward()) {
      set_is_get_reward(from.is_get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayTargetData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayTargetData::CopyFrom(const SevenDayTargetData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayTargetData::IsInitialized() const {

  return true;
}

void SevenDayTargetData::Swap(SevenDayTargetData* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(value_, other->value_);
    std::swap(is_get_reward_, other->is_get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayTargetData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayTargetData_descriptor_;
  metadata.reflection = SevenDayTargetData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelShopActivityData::kLevelFieldNumber;
const int LevelShopActivityData::kActivateTimeFieldNumber;
#endif  // !_MSC_VER

LevelShopActivityData::LevelShopActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LevelShopActivityData::InitAsDefaultInstance() {
}

LevelShopActivityData::LevelShopActivityData(const LevelShopActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LevelShopActivityData::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  activate_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelShopActivityData::~LevelShopActivityData() {
  SharedDtor();
}

void LevelShopActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelShopActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelShopActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelShopActivityData_descriptor_;
}

const LevelShopActivityData& LevelShopActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LevelShopActivityData* LevelShopActivityData::default_instance_ = NULL;

LevelShopActivityData* LevelShopActivityData::New() const {
  return new LevelShopActivityData;
}

void LevelShopActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    activate_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelShopActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activate_time;
        break;
      }

      // optional uint32 activate_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activate_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activate_time_)));
          set_has_activate_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LevelShopActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 activate_time = 2;
  if (has_activate_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activate_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LevelShopActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 activate_time = 2;
  if (has_activate_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activate_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LevelShopActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 activate_time = 2;
    if (has_activate_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activate_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelShopActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelShopActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelShopActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelShopActivityData::MergeFrom(const LevelShopActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_activate_time()) {
      set_activate_time(from.activate_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelShopActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelShopActivityData::CopyFrom(const LevelShopActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelShopActivityData::IsInitialized() const {

  return true;
}

void LevelShopActivityData::Swap(LevelShopActivityData* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(activate_time_, other->activate_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelShopActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelShopActivityData_descriptor_;
  metadata.reflection = LevelShopActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gift::kIdFieldNumber;
const int Gift::kNumFieldNumber;
#endif  // !_MSC_VER

Gift::Gift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Gift::InitAsDefaultInstance() {
}

Gift::Gift(const Gift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Gift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gift::~Gift() {
  SharedDtor();
}

void Gift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gift_descriptor_;
}

const Gift& Gift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

Gift* Gift::default_instance_ = NULL;

Gift* Gift::New() const {
  return new Gift;
}

void Gift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Gift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Gift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Gift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Gift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Gift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gift::MergeFrom(const Gift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Gift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gift::CopyFrom(const Gift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gift::IsInitialized() const {

  return true;
}

void Gift::Swap(Gift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Gift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gift_descriptor_;
  metadata.reflection = Gift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipGiftData::kInitVipLevelFieldNumber;
const int VipGiftData::kVipLevelRewardRecordFieldNumber;
const int VipGiftData::kWeekGiftListFieldNumber;
const int VipGiftData::kTodayRecommendRechargeRewardIdFieldNumber;
const int VipGiftData::kTodayRecommendRechargeRewardStatusFieldNumber;
#endif  // !_MSC_VER

VipGiftData::VipGiftData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipGiftData::InitAsDefaultInstance() {
}

VipGiftData::VipGiftData(const VipGiftData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipGiftData::SharedCtor() {
  _cached_size_ = 0;
  init_vip_level_ = 0u;
  vip_level_reward_record_ = 0;
  today_recommend_recharge_reward_id_ = 0u;
  today_recommend_recharge_reward_status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipGiftData::~VipGiftData() {
  SharedDtor();
}

void VipGiftData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipGiftData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipGiftData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipGiftData_descriptor_;
}

const VipGiftData& VipGiftData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

VipGiftData* VipGiftData::default_instance_ = NULL;

VipGiftData* VipGiftData::New() const {
  return new VipGiftData;
}

void VipGiftData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    init_vip_level_ = 0u;
    vip_level_reward_record_ = 0;
    today_recommend_recharge_reward_id_ = 0u;
    today_recommend_recharge_reward_status_ = 0u;
  }
  week_gift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipGiftData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 init_vip_level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_vip_level_)));
          set_has_init_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_level_reward_record;
        break;
      }

      // optional int32 vip_level_reward_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_reward_record_)));
          set_has_vip_level_reward_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_week_gift_list;
        break;
      }

      // repeated .PB.Gift week_gift_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week_gift_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week_gift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_week_gift_list;
        if (input->ExpectTag(32)) goto parse_today_recommend_recharge_reward_id;
        break;
      }

      // optional uint32 today_recommend_recharge_reward_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_recommend_recharge_reward_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_recommend_recharge_reward_id_)));
          set_has_today_recommend_recharge_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_recommend_recharge_reward_status;
        break;
      }

      // optional uint32 today_recommend_recharge_reward_status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_recommend_recharge_reward_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_recommend_recharge_reward_status_)));
          set_has_today_recommend_recharge_reward_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipGiftData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 init_vip_level = 1;
  if (has_init_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->init_vip_level(), output);
  }

  // optional int32 vip_level_reward_record = 2;
  if (has_vip_level_reward_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_level_reward_record(), output);
  }

  // repeated .PB.Gift week_gift_list = 3;
  for (int i = 0; i < this->week_gift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->week_gift_list(i), output);
  }

  // optional uint32 today_recommend_recharge_reward_id = 4;
  if (has_today_recommend_recharge_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_recommend_recharge_reward_id(), output);
  }

  // optional uint32 today_recommend_recharge_reward_status = 5;
  if (has_today_recommend_recharge_reward_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_recommend_recharge_reward_status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipGiftData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 init_vip_level = 1;
  if (has_init_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->init_vip_level(), target);
  }

  // optional int32 vip_level_reward_record = 2;
  if (has_vip_level_reward_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_level_reward_record(), target);
  }

  // repeated .PB.Gift week_gift_list = 3;
  for (int i = 0; i < this->week_gift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->week_gift_list(i), target);
  }

  // optional uint32 today_recommend_recharge_reward_id = 4;
  if (has_today_recommend_recharge_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_recommend_recharge_reward_id(), target);
  }

  // optional uint32 today_recommend_recharge_reward_status = 5;
  if (has_today_recommend_recharge_reward_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_recommend_recharge_reward_status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipGiftData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 init_vip_level = 1;
    if (has_init_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_vip_level());
    }

    // optional int32 vip_level_reward_record = 2;
    if (has_vip_level_reward_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level_reward_record());
    }

    // optional uint32 today_recommend_recharge_reward_id = 4;
    if (has_today_recommend_recharge_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_recommend_recharge_reward_id());
    }

    // optional uint32 today_recommend_recharge_reward_status = 5;
    if (has_today_recommend_recharge_reward_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_recommend_recharge_reward_status());
    }

  }
  // repeated .PB.Gift week_gift_list = 3;
  total_size += 1 * this->week_gift_list_size();
  for (int i = 0; i < this->week_gift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week_gift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipGiftData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipGiftData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipGiftData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipGiftData::MergeFrom(const VipGiftData& from) {
  GOOGLE_CHECK_NE(&from, this);
  week_gift_list_.MergeFrom(from.week_gift_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_init_vip_level()) {
      set_init_vip_level(from.init_vip_level());
    }
    if (from.has_vip_level_reward_record()) {
      set_vip_level_reward_record(from.vip_level_reward_record());
    }
    if (from.has_today_recommend_recharge_reward_id()) {
      set_today_recommend_recharge_reward_id(from.today_recommend_recharge_reward_id());
    }
    if (from.has_today_recommend_recharge_reward_status()) {
      set_today_recommend_recharge_reward_status(from.today_recommend_recharge_reward_status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipGiftData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipGiftData::CopyFrom(const VipGiftData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipGiftData::IsInitialized() const {

  return true;
}

void VipGiftData::Swap(VipGiftData* other) {
  if (other != this) {
    std::swap(init_vip_level_, other->init_vip_level_);
    std::swap(vip_level_reward_record_, other->vip_level_reward_record_);
    week_gift_list_.Swap(&other->week_gift_list_);
    std::swap(today_recommend_recharge_reward_id_, other->today_recommend_recharge_reward_id_);
    std::swap(today_recommend_recharge_reward_status_, other->today_recommend_recharge_reward_status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipGiftData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipGiftData_descriptor_;
  metadata.reflection = VipGiftData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonRecharge::kIdFieldNumber;
const int CommonRecharge::kTimesFieldNumber;
#endif  // !_MSC_VER

CommonRecharge::CommonRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonRecharge::InitAsDefaultInstance() {
}

CommonRecharge::CommonRecharge(const CommonRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonRecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonRecharge::~CommonRecharge() {
  SharedDtor();
}

void CommonRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonRecharge_descriptor_;
}

const CommonRecharge& CommonRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

CommonRecharge* CommonRecharge::default_instance_ = NULL;

CommonRecharge* CommonRecharge::New() const {
  return new CommonRecharge;
}

void CommonRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional uint32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonRecharge::MergeFrom(const CommonRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonRecharge::CopyFrom(const CommonRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonRecharge::IsInitialized() const {

  return true;
}

void CommonRecharge::Swap(CommonRecharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonRecharge_descriptor_;
  metadata.reflection = CommonRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonthCardData::kCardIdFieldNumber;
const int MonthCardData::kBuyTimeFieldNumber;
const int MonthCardData::kLastTakeRewardTimeFieldNumber;
#endif  // !_MSC_VER

MonthCardData::MonthCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonthCardData::InitAsDefaultInstance() {
}

MonthCardData::MonthCardData(const MonthCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonthCardData::SharedCtor() {
  _cached_size_ = 0;
  card_id_ = 0u;
  buy_time_ = 0u;
  last_take_reward_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonthCardData::~MonthCardData() {
  SharedDtor();
}

void MonthCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonthCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonthCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonthCardData_descriptor_;
}

const MonthCardData& MonthCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MonthCardData* MonthCardData::default_instance_ = NULL;

MonthCardData* MonthCardData::New() const {
  return new MonthCardData;
}

void MonthCardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    card_id_ = 0u;
    buy_time_ = 0u;
    last_take_reward_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonthCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_id_)));
          set_has_card_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_time;
        break;
      }

      // optional uint32 buy_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_time_)));
          set_has_buy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_take_reward_time;
        break;
      }

      // optional uint32 last_take_reward_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_take_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_take_reward_time_)));
          set_has_last_take_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonthCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 card_id = 1;
  if (has_card_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->card_id(), output);
  }

  // optional uint32 buy_time = 2;
  if (has_buy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_time(), output);
  }

  // optional uint32 last_take_reward_time = 3;
  if (has_last_take_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_take_reward_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonthCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 card_id = 1;
  if (has_card_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->card_id(), target);
  }

  // optional uint32 buy_time = 2;
  if (has_buy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_time(), target);
  }

  // optional uint32 last_take_reward_time = 3;
  if (has_last_take_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_take_reward_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonthCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 card_id = 1;
    if (has_card_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_id());
    }

    // optional uint32 buy_time = 2;
    if (has_buy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_time());
    }

    // optional uint32 last_take_reward_time = 3;
    if (has_last_take_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_take_reward_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonthCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonthCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonthCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonthCardData::MergeFrom(const MonthCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_card_id()) {
      set_card_id(from.card_id());
    }
    if (from.has_buy_time()) {
      set_buy_time(from.buy_time());
    }
    if (from.has_last_take_reward_time()) {
      set_last_take_reward_time(from.last_take_reward_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonthCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonthCardData::CopyFrom(const MonthCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonthCardData::IsInitialized() const {

  return true;
}

void MonthCardData::Swap(MonthCardData* other) {
  if (other != this) {
    std::swap(card_id_, other->card_id_);
    std::swap(buy_time_, other->buy_time_);
    std::swap(last_take_reward_time_, other->last_take_reward_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonthCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonthCardData_descriptor_;
  metadata.reflection = MonthCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRechargeData::kRechargeListFieldNumber;
const int RoleRechargeData::kMonthCardListFieldNumber;
const int RoleRechargeData::kOrderRecordListFieldNumber;
const int RoleRechargeData::kTodayRechargeTimesFieldNumber;
#endif  // !_MSC_VER

RoleRechargeData::RoleRechargeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRechargeData::InitAsDefaultInstance() {
}

RoleRechargeData::RoleRechargeData(const RoleRechargeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRechargeData::SharedCtor() {
  _cached_size_ = 0;
  today_recharge_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRechargeData::~RoleRechargeData() {
  SharedDtor();
}

void RoleRechargeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRechargeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRechargeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRechargeData_descriptor_;
}

const RoleRechargeData& RoleRechargeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleRechargeData* RoleRechargeData::default_instance_ = NULL;

RoleRechargeData* RoleRechargeData::New() const {
  return new RoleRechargeData;
}

void RoleRechargeData::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    today_recharge_times_ = 0u;
  }
  recharge_list_.Clear();
  month_card_list_.Clear();
  order_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRechargeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.CommonRecharge recharge_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_recharge_list;
        if (input->ExpectTag(18)) goto parse_month_card_list;
        break;
      }

      // repeated .PB.MonthCardData month_card_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_month_card_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_month_card_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_month_card_list;
        if (input->ExpectTag(24)) goto parse_order_record_list;
        break;
      }

      // repeated uint32 order_record_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_order_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_order_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order_record_list;
        if (input->ExpectTag(32)) goto parse_today_recharge_times;
        break;
      }

      // optional uint32 today_recharge_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_recharge_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_recharge_times_)));
          set_has_today_recharge_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRechargeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.CommonRecharge recharge_list = 1;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recharge_list(i), output);
  }

  // repeated .PB.MonthCardData month_card_list = 2;
  for (int i = 0; i < this->month_card_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->month_card_list(i), output);
  }

  // repeated uint32 order_record_list = 3;
  for (int i = 0; i < this->order_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->order_record_list(i), output);
  }

  // optional uint32 today_recharge_times = 4;
  if (has_today_recharge_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_recharge_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRechargeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.CommonRecharge recharge_list = 1;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recharge_list(i), target);
  }

  // repeated .PB.MonthCardData month_card_list = 2;
  for (int i = 0; i < this->month_card_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->month_card_list(i), target);
  }

  // repeated uint32 order_record_list = 3;
  for (int i = 0; i < this->order_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->order_record_list(i), target);
  }

  // optional uint32 today_recharge_times = 4;
  if (has_today_recharge_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_recharge_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRechargeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 today_recharge_times = 4;
    if (has_today_recharge_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_recharge_times());
    }

  }
  // repeated .PB.CommonRecharge recharge_list = 1;
  total_size += 1 * this->recharge_list_size();
  for (int i = 0; i < this->recharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge_list(i));
  }

  // repeated .PB.MonthCardData month_card_list = 2;
  total_size += 1 * this->month_card_list_size();
  for (int i = 0; i < this->month_card_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->month_card_list(i));
  }

  // repeated uint32 order_record_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->order_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->order_record_list(i));
    }
    total_size += 1 * this->order_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRechargeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRechargeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRechargeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRechargeData::MergeFrom(const RoleRechargeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recharge_list_.MergeFrom(from.recharge_list_);
  month_card_list_.MergeFrom(from.month_card_list_);
  order_record_list_.MergeFrom(from.order_record_list_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_today_recharge_times()) {
      set_today_recharge_times(from.today_recharge_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRechargeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRechargeData::CopyFrom(const RoleRechargeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRechargeData::IsInitialized() const {

  return true;
}

void RoleRechargeData::Swap(RoleRechargeData* other) {
  if (other != this) {
    recharge_list_.Swap(&other->recharge_list_);
    month_card_list_.Swap(&other->month_card_list_);
    order_record_list_.Swap(&other->order_record_list_);
    std::swap(today_recharge_times_, other->today_recharge_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRechargeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRechargeData_descriptor_;
  metadata.reflection = RoleRechargeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenServerFundData::kIsAlreadyBuyFundFieldNumber;
const int OpenServerFundData::kFundRewardTakeRecordFieldNumber;
#endif  // !_MSC_VER

OpenServerFundData::OpenServerFundData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenServerFundData::InitAsDefaultInstance() {
}

OpenServerFundData::OpenServerFundData(const OpenServerFundData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenServerFundData::SharedCtor() {
  _cached_size_ = 0;
  is_already_buy_fund_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenServerFundData::~OpenServerFundData() {
  SharedDtor();
}

void OpenServerFundData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenServerFundData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenServerFundData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenServerFundData_descriptor_;
}

const OpenServerFundData& OpenServerFundData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

OpenServerFundData* OpenServerFundData::default_instance_ = NULL;

OpenServerFundData* OpenServerFundData::New() const {
  return new OpenServerFundData;
}

void OpenServerFundData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_already_buy_fund_ = 0u;
  }
  fund_reward_take_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenServerFundData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_already_buy_fund = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_buy_fund_)));
          set_has_is_already_buy_fund();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fund_reward_take_record;
        break;
      }

      // repeated uint32 fund_reward_take_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fund_reward_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_fund_reward_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fund_reward_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fund_reward_take_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenServerFundData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_already_buy_fund = 1;
  if (has_is_already_buy_fund()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_already_buy_fund(), output);
  }

  // repeated uint32 fund_reward_take_record = 2;
  for (int i = 0; i < this->fund_reward_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->fund_reward_take_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenServerFundData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_already_buy_fund = 1;
  if (has_is_already_buy_fund()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_already_buy_fund(), target);
  }

  // repeated uint32 fund_reward_take_record = 2;
  for (int i = 0; i < this->fund_reward_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->fund_reward_take_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenServerFundData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_already_buy_fund = 1;
    if (has_is_already_buy_fund()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_buy_fund());
    }

  }
  // repeated uint32 fund_reward_take_record = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fund_reward_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fund_reward_take_record(i));
    }
    total_size += 1 * this->fund_reward_take_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenServerFundData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenServerFundData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenServerFundData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenServerFundData::MergeFrom(const OpenServerFundData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fund_reward_take_record_.MergeFrom(from.fund_reward_take_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_already_buy_fund()) {
      set_is_already_buy_fund(from.is_already_buy_fund());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenServerFundData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenServerFundData::CopyFrom(const OpenServerFundData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenServerFundData::IsInitialized() const {

  return true;
}

void OpenServerFundData::Swap(OpenServerFundData* other) {
  if (other != this) {
    std::swap(is_already_buy_fund_, other->is_already_buy_fund_);
    fund_reward_take_record_.Swap(&other->fund_reward_take_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenServerFundData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenServerFundData_descriptor_;
  metadata.reflection = OpenServerFundData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllPeopleWelfareData::kWelfareTakeRecordFieldNumber;
#endif  // !_MSC_VER

AllPeopleWelfareData::AllPeopleWelfareData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllPeopleWelfareData::InitAsDefaultInstance() {
}

AllPeopleWelfareData::AllPeopleWelfareData(const AllPeopleWelfareData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllPeopleWelfareData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllPeopleWelfareData::~AllPeopleWelfareData() {
  SharedDtor();
}

void AllPeopleWelfareData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllPeopleWelfareData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllPeopleWelfareData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllPeopleWelfareData_descriptor_;
}

const AllPeopleWelfareData& AllPeopleWelfareData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AllPeopleWelfareData* AllPeopleWelfareData::default_instance_ = NULL;

AllPeopleWelfareData* AllPeopleWelfareData::New() const {
  return new AllPeopleWelfareData;
}

void AllPeopleWelfareData::Clear() {
  welfare_take_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllPeopleWelfareData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 welfare_take_record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_welfare_take_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_welfare_take_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_welfare_take_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_welfare_take_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllPeopleWelfareData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 welfare_take_record = 1;
  for (int i = 0; i < this->welfare_take_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->welfare_take_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllPeopleWelfareData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 welfare_take_record = 1;
  for (int i = 0; i < this->welfare_take_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->welfare_take_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllPeopleWelfareData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 welfare_take_record = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->welfare_take_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->welfare_take_record(i));
    }
    total_size += 1 * this->welfare_take_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllPeopleWelfareData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllPeopleWelfareData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllPeopleWelfareData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllPeopleWelfareData::MergeFrom(const AllPeopleWelfareData& from) {
  GOOGLE_CHECK_NE(&from, this);
  welfare_take_record_.MergeFrom(from.welfare_take_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllPeopleWelfareData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllPeopleWelfareData::CopyFrom(const AllPeopleWelfareData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllPeopleWelfareData::IsInitialized() const {

  return true;
}

void AllPeopleWelfareData::Swap(AllPeopleWelfareData* other) {
  if (other != this) {
    welfare_take_record_.Swap(&other->welfare_take_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllPeopleWelfareData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllPeopleWelfareData_descriptor_;
  metadata.reflection = AllPeopleWelfareData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitActivityData::kRecruitTimesFieldNumber;
const int LimitActivityData::kAccumulateRechargeFieldNumber;
const int LimitActivityData::kRecruitRewardRecordFieldNumber;
const int LimitActivityData::kAccumulateRechargeRewardRecordFieldNumber;
const int LimitActivityData::kSingleRechargeRewardRecordFieldNumber;
const int LimitActivityData::kFirstRechargeRewardRecordFieldNumber;
const int LimitActivityData::kTotalRechargeFieldNumber;
const int LimitActivityData::kLastSingleRechargeDataIdFieldNumber;
const int LimitActivityData::kLastAccumulateRechargeDataIdFieldNumber;
const int LimitActivityData::kRechargeListFieldNumber;
#endif  // !_MSC_VER

LimitActivityData::LimitActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitActivityData::InitAsDefaultInstance() {
}

LimitActivityData::LimitActivityData(const LimitActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitActivityData::SharedCtor() {
  _cached_size_ = 0;
  recruit_times_ = 0u;
  accumulate_recharge_ = 0u;
  total_recharge_ = 0u;
  last_single_recharge_data_id_ = 0u;
  last_accumulate_recharge_data_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitActivityData::~LimitActivityData() {
  SharedDtor();
}

void LimitActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitActivityData_descriptor_;
}

const LimitActivityData& LimitActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LimitActivityData* LimitActivityData::default_instance_ = NULL;

LimitActivityData* LimitActivityData::New() const {
  return new LimitActivityData;
}

void LimitActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recruit_times_ = 0u;
    accumulate_recharge_ = 0u;
    total_recharge_ = 0u;
    last_single_recharge_data_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_accumulate_recharge_data_id_ = 0u;
  }
  recruit_reward_record_.Clear();
  accumulate_recharge_reward_record_.Clear();
  single_recharge_reward_record_.Clear();
  first_recharge_reward_record_.Clear();
  recharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 recruit_times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recruit_times_)));
          set_has_recruit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accumulate_recharge;
        break;
      }

      // optional uint32 accumulate_recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulate_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accumulate_recharge_)));
          set_has_accumulate_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recruit_reward_record;
        break;
      }

      // repeated uint32 recruit_reward_record = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recruit_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_recruit_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recruit_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recruit_reward_record;
        if (input->ExpectTag(32)) goto parse_accumulate_recharge_reward_record;
        break;
      }

      // repeated uint32 accumulate_recharge_reward_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulate_recharge_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_accumulate_recharge_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_accumulate_recharge_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accumulate_recharge_reward_record;
        if (input->ExpectTag(42)) goto parse_single_recharge_reward_record;
        break;
      }

      // repeated .PB.RecordData single_recharge_reward_record = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single_recharge_reward_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single_recharge_reward_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_single_recharge_reward_record;
        if (input->ExpectTag(48)) goto parse_first_recharge_reward_record;
        break;
      }

      // repeated uint32 first_recharge_reward_record = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_recharge_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_first_recharge_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_recharge_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_first_recharge_reward_record;
        if (input->ExpectTag(56)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_single_recharge_data_id;
        break;
      }

      // optional uint32 last_single_recharge_data_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_single_recharge_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_single_recharge_data_id_)));
          set_has_last_single_recharge_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_accumulate_recharge_data_id;
        break;
      }

      // optional uint32 last_accumulate_recharge_data_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_accumulate_recharge_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_accumulate_recharge_data_id_)));
          set_has_last_accumulate_recharge_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_recharge_list;
        break;
      }

      // repeated .PB.CommonRecharge recharge_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_recharge_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 recruit_times = 1;
  if (has_recruit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recruit_times(), output);
  }

  // optional uint32 accumulate_recharge = 2;
  if (has_accumulate_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accumulate_recharge(), output);
  }

  // repeated uint32 recruit_reward_record = 3;
  for (int i = 0; i < this->recruit_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->recruit_reward_record(i), output);
  }

  // repeated uint32 accumulate_recharge_reward_record = 4;
  for (int i = 0; i < this->accumulate_recharge_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->accumulate_recharge_reward_record(i), output);
  }

  // repeated .PB.RecordData single_recharge_reward_record = 5;
  for (int i = 0; i < this->single_recharge_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->single_recharge_reward_record(i), output);
  }

  // repeated uint32 first_recharge_reward_record = 6;
  for (int i = 0; i < this->first_recharge_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->first_recharge_reward_record(i), output);
  }

  // optional uint32 total_recharge = 7;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->total_recharge(), output);
  }

  // optional uint32 last_single_recharge_data_id = 8;
  if (has_last_single_recharge_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_single_recharge_data_id(), output);
  }

  // optional uint32 last_accumulate_recharge_data_id = 9;
  if (has_last_accumulate_recharge_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_accumulate_recharge_data_id(), output);
  }

  // repeated .PB.CommonRecharge recharge_list = 10;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->recharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 recruit_times = 1;
  if (has_recruit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recruit_times(), target);
  }

  // optional uint32 accumulate_recharge = 2;
  if (has_accumulate_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accumulate_recharge(), target);
  }

  // repeated uint32 recruit_reward_record = 3;
  for (int i = 0; i < this->recruit_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->recruit_reward_record(i), target);
  }

  // repeated uint32 accumulate_recharge_reward_record = 4;
  for (int i = 0; i < this->accumulate_recharge_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->accumulate_recharge_reward_record(i), target);
  }

  // repeated .PB.RecordData single_recharge_reward_record = 5;
  for (int i = 0; i < this->single_recharge_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->single_recharge_reward_record(i), target);
  }

  // repeated uint32 first_recharge_reward_record = 6;
  for (int i = 0; i < this->first_recharge_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->first_recharge_reward_record(i), target);
  }

  // optional uint32 total_recharge = 7;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->total_recharge(), target);
  }

  // optional uint32 last_single_recharge_data_id = 8;
  if (has_last_single_recharge_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_single_recharge_data_id(), target);
  }

  // optional uint32 last_accumulate_recharge_data_id = 9;
  if (has_last_accumulate_recharge_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_accumulate_recharge_data_id(), target);
  }

  // repeated .PB.CommonRecharge recharge_list = 10;
  for (int i = 0; i < this->recharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->recharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 recruit_times = 1;
    if (has_recruit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recruit_times());
    }

    // optional uint32 accumulate_recharge = 2;
    if (has_accumulate_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accumulate_recharge());
    }

    // optional uint32 total_recharge = 7;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

    // optional uint32 last_single_recharge_data_id = 8;
    if (has_last_single_recharge_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_single_recharge_data_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_accumulate_recharge_data_id = 9;
    if (has_last_accumulate_recharge_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_accumulate_recharge_data_id());
    }

  }
  // repeated uint32 recruit_reward_record = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recruit_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recruit_reward_record(i));
    }
    total_size += 1 * this->recruit_reward_record_size() + data_size;
  }

  // repeated uint32 accumulate_recharge_reward_record = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->accumulate_recharge_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->accumulate_recharge_reward_record(i));
    }
    total_size += 1 * this->accumulate_recharge_reward_record_size() + data_size;
  }

  // repeated .PB.RecordData single_recharge_reward_record = 5;
  total_size += 1 * this->single_recharge_reward_record_size();
  for (int i = 0; i < this->single_recharge_reward_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single_recharge_reward_record(i));
  }

  // repeated uint32 first_recharge_reward_record = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_recharge_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->first_recharge_reward_record(i));
    }
    total_size += 1 * this->first_recharge_reward_record_size() + data_size;
  }

  // repeated .PB.CommonRecharge recharge_list = 10;
  total_size += 1 * this->recharge_list_size();
  for (int i = 0; i < this->recharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitActivityData::MergeFrom(const LimitActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recruit_reward_record_.MergeFrom(from.recruit_reward_record_);
  accumulate_recharge_reward_record_.MergeFrom(from.accumulate_recharge_reward_record_);
  single_recharge_reward_record_.MergeFrom(from.single_recharge_reward_record_);
  first_recharge_reward_record_.MergeFrom(from.first_recharge_reward_record_);
  recharge_list_.MergeFrom(from.recharge_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recruit_times()) {
      set_recruit_times(from.recruit_times());
    }
    if (from.has_accumulate_recharge()) {
      set_accumulate_recharge(from.accumulate_recharge());
    }
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
    if (from.has_last_single_recharge_data_id()) {
      set_last_single_recharge_data_id(from.last_single_recharge_data_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_accumulate_recharge_data_id()) {
      set_last_accumulate_recharge_data_id(from.last_accumulate_recharge_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitActivityData::CopyFrom(const LimitActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitActivityData::IsInitialized() const {

  return true;
}

void LimitActivityData::Swap(LimitActivityData* other) {
  if (other != this) {
    std::swap(recruit_times_, other->recruit_times_);
    std::swap(accumulate_recharge_, other->accumulate_recharge_);
    recruit_reward_record_.Swap(&other->recruit_reward_record_);
    accumulate_recharge_reward_record_.Swap(&other->accumulate_recharge_reward_record_);
    single_recharge_reward_record_.Swap(&other->single_recharge_reward_record_);
    first_recharge_reward_record_.Swap(&other->first_recharge_reward_record_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(last_single_recharge_data_id_, other->last_single_recharge_data_id_);
    std::swap(last_accumulate_recharge_data_id_, other->last_accumulate_recharge_data_id_);
    recharge_list_.Swap(&other->recharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitActivityData_descriptor_;
  metadata.reflection = LimitActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SuperDiscountData::kStatusFieldNumber;
const int SuperDiscountData::kTakeAccumulateRewardTimesFieldNumber;
const int SuperDiscountData::kCurBuyTimesFieldNumber;
const int SuperDiscountData::kLastActivityDataIdFieldNumber;
const int SuperDiscountData::kTookAccumulateRewardListFieldNumber;
#endif  // !_MSC_VER

SuperDiscountData::SuperDiscountData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SuperDiscountData::InitAsDefaultInstance() {
}

SuperDiscountData::SuperDiscountData(const SuperDiscountData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SuperDiscountData::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  take_accumulate_reward_times_ = 0u;
  cur_buy_times_ = 0u;
  last_activity_data_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SuperDiscountData::~SuperDiscountData() {
  SharedDtor();
}

void SuperDiscountData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SuperDiscountData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SuperDiscountData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SuperDiscountData_descriptor_;
}

const SuperDiscountData& SuperDiscountData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SuperDiscountData* SuperDiscountData::default_instance_ = NULL;

SuperDiscountData* SuperDiscountData::New() const {
  return new SuperDiscountData;
}

void SuperDiscountData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    take_accumulate_reward_times_ = 0u;
    cur_buy_times_ = 0u;
    last_activity_data_id_ = 0u;
  }
  took_accumulate_reward_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SuperDiscountData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_take_accumulate_reward_times;
        break;
      }

      // optional uint32 take_accumulate_reward_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_accumulate_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_accumulate_reward_times_)));
          set_has_take_accumulate_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_buy_times;
        break;
      }

      // optional uint32 cur_buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_buy_times_)));
          set_has_cur_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_activity_data_id;
        break;
      }

      // optional uint32 last_activity_data_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_data_id_)));
          set_has_last_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_took_accumulate_reward_list;
        break;
      }

      // repeated uint32 took_accumulate_reward_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_took_accumulate_reward_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_took_accumulate_reward_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_took_accumulate_reward_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_took_accumulate_reward_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SuperDiscountData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // optional uint32 take_accumulate_reward_times = 2;
  if (has_take_accumulate_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->take_accumulate_reward_times(), output);
  }

  // optional uint32 cur_buy_times = 3;
  if (has_cur_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cur_buy_times(), output);
  }

  // optional uint32 last_activity_data_id = 4;
  if (has_last_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->last_activity_data_id(), output);
  }

  // repeated uint32 took_accumulate_reward_list = 5;
  for (int i = 0; i < this->took_accumulate_reward_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->took_accumulate_reward_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SuperDiscountData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->status(), target);
  }

  // optional uint32 take_accumulate_reward_times = 2;
  if (has_take_accumulate_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->take_accumulate_reward_times(), target);
  }

  // optional uint32 cur_buy_times = 3;
  if (has_cur_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cur_buy_times(), target);
  }

  // optional uint32 last_activity_data_id = 4;
  if (has_last_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->last_activity_data_id(), target);
  }

  // repeated uint32 took_accumulate_reward_list = 5;
  for (int i = 0; i < this->took_accumulate_reward_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->took_accumulate_reward_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SuperDiscountData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 take_accumulate_reward_times = 2;
    if (has_take_accumulate_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->take_accumulate_reward_times());
    }

    // optional uint32 cur_buy_times = 3;
    if (has_cur_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_buy_times());
    }

    // optional uint32 last_activity_data_id = 4;
    if (has_last_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_data_id());
    }

  }
  // repeated uint32 took_accumulate_reward_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->took_accumulate_reward_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->took_accumulate_reward_list(i));
    }
    total_size += 1 * this->took_accumulate_reward_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SuperDiscountData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SuperDiscountData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SuperDiscountData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SuperDiscountData::MergeFrom(const SuperDiscountData& from) {
  GOOGLE_CHECK_NE(&from, this);
  took_accumulate_reward_list_.MergeFrom(from.took_accumulate_reward_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_take_accumulate_reward_times()) {
      set_take_accumulate_reward_times(from.take_accumulate_reward_times());
    }
    if (from.has_cur_buy_times()) {
      set_cur_buy_times(from.cur_buy_times());
    }
    if (from.has_last_activity_data_id()) {
      set_last_activity_data_id(from.last_activity_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SuperDiscountData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SuperDiscountData::CopyFrom(const SuperDiscountData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuperDiscountData::IsInitialized() const {

  return true;
}

void SuperDiscountData::Swap(SuperDiscountData* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(take_accumulate_reward_times_, other->take_accumulate_reward_times_);
    std::swap(cur_buy_times_, other->cur_buy_times_);
    std::swap(last_activity_data_id_, other->last_activity_data_id_);
    took_accumulate_reward_list_.Swap(&other->took_accumulate_reward_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SuperDiscountData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SuperDiscountData_descriptor_;
  metadata.reflection = SuperDiscountData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityTarget::kTargetIdFieldNumber;
const int ActivityTarget::kContextFieldNumber;
const int ActivityTarget::kTakeRewardTimesFieldNumber;
#endif  // !_MSC_VER

ActivityTarget::ActivityTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityTarget::InitAsDefaultInstance() {
}

ActivityTarget::ActivityTarget(const ActivityTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityTarget::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  context_ = 0u;
  take_reward_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityTarget::~ActivityTarget() {
  SharedDtor();
}

void ActivityTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityTarget_descriptor_;
}

const ActivityTarget& ActivityTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ActivityTarget* ActivityTarget::default_instance_ = NULL;

ActivityTarget* ActivityTarget::New() const {
  return new ActivityTarget;
}

void ActivityTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    context_ = 0u;
    take_reward_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_context;
        break;
      }

      // optional uint32 context = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_take_reward_times;
        break;
      }

      // optional uint32 take_reward_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_reward_times_)));
          set_has_take_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // optional uint32 context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->context(), output);
  }

  // optional uint32 take_reward_times = 3;
  if (has_take_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->take_reward_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // optional uint32 context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->context(), target);
  }

  // optional uint32 take_reward_times = 3;
  if (has_take_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->take_reward_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // optional uint32 context = 2;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

    // optional uint32 take_reward_times = 3;
    if (has_take_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->take_reward_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityTarget::MergeFrom(const ActivityTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_take_reward_times()) {
      set_take_reward_times(from.take_reward_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityTarget::CopyFrom(const ActivityTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityTarget::IsInitialized() const {

  return true;
}

void ActivityTarget::Swap(ActivityTarget* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(context_, other->context_);
    std::swap(take_reward_times_, other->take_reward_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityTarget_descriptor_;
  metadata.reflection = ActivityTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalActivity::kDataResetTimeFieldNumber;
const int FestivalActivity::kTargetListFieldNumber;
#endif  // !_MSC_VER

FestivalActivity::FestivalActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalActivity::InitAsDefaultInstance() {
}

FestivalActivity::FestivalActivity(const FestivalActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalActivity::SharedCtor() {
  _cached_size_ = 0;
  data_reset_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalActivity::~FestivalActivity() {
  SharedDtor();
}

void FestivalActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalActivity_descriptor_;
}

const FestivalActivity& FestivalActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FestivalActivity* FestivalActivity::default_instance_ = NULL;

FestivalActivity* FestivalActivity::New() const {
  return new FestivalActivity;
}

void FestivalActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_reset_time_ = 0u;
  }
  target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 data_reset_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_reset_time_)));
          set_has_data_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        break;
      }

      // repeated .PB.ActivityTarget target_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 data_reset_time = 1;
  if (has_data_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_reset_time(), output);
  }

  // repeated .PB.ActivityTarget target_list = 2;
  for (int i = 0; i < this->target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->target_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 data_reset_time = 1;
  if (has_data_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_reset_time(), target);
  }

  // repeated .PB.ActivityTarget target_list = 2;
  for (int i = 0; i < this->target_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->target_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 data_reset_time = 1;
    if (has_data_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_reset_time());
    }

  }
  // repeated .PB.ActivityTarget target_list = 2;
  total_size += 1 * this->target_list_size();
  for (int i = 0; i < this->target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->target_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalActivity::MergeFrom(const FestivalActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  target_list_.MergeFrom(from.target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_reset_time()) {
      set_data_reset_time(from.data_reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalActivity::CopyFrom(const FestivalActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalActivity::IsInitialized() const {

  return true;
}

void FestivalActivity::Swap(FestivalActivity* other) {
  if (other != this) {
    std::swap(data_reset_time_, other->data_reset_time_);
    target_list_.Swap(&other->target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalActivity_descriptor_;
  metadata.reflection = FestivalActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFestivalActivityInfo::kLoopOnceRechargeFieldNumber;
const int RoleFestivalActivityInfo::kLoopAccumulateRechargeFieldNumber;
const int RoleFestivalActivityInfo::kLimitRecruitFieldNumber;
const int RoleFestivalActivityInfo::kActivityOnceRechargeFieldNumber;
const int RoleFestivalActivityInfo::kActivityAccumulateRechargeFieldNumber;
const int RoleFestivalActivityInfo::kDiamondExchangeFieldNumber;
const int RoleFestivalActivityInfo::kActiveTargetFieldNumber;
const int RoleFestivalActivityInfo::kItemExchangeFieldNumber;
const int RoleFestivalActivityInfo::kFestivalLoginFieldNumber;
const int RoleFestivalActivityInfo::kOpenServerLoginFieldNumber;
const int RoleFestivalActivityInfo::kOpenSvrAccumulateRechargeFieldNumber;
const int RoleFestivalActivityInfo::kFestivalItemExchangeFieldNumber;
const int RoleFestivalActivityInfo::kFestivalDiscountSellFieldNumber;
const int RoleFestivalActivityInfo::kFestivalActiveTargetFieldNumber;
const int RoleFestivalActivityInfo::kOpenServerActiveTargetFieldNumber;
const int RoleFestivalActivityInfo::kFestivalActiveTarget2FieldNumber;
const int RoleFestivalActivityInfo::kActivityOnceRecharge2FieldNumber;
#endif  // !_MSC_VER

RoleFestivalActivityInfo::RoleFestivalActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFestivalActivityInfo::InitAsDefaultInstance() {
  loop_once_recharge_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  loop_accumulate_recharge_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  limit_recruit_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  activity_once_recharge_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  activity_accumulate_recharge_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  diamond_exchange_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  active_target_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  item_exchange_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  festival_login_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  open_server_login_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  open_svr_accumulate_recharge_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  festival_item_exchange_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  festival_discount_sell_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  festival_active_target_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  open_server_active_target_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  festival_active_target_2_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
  activity_once_recharge_2_ = const_cast< ::PB::FestivalActivity*>(&::PB::FestivalActivity::default_instance());
}

RoleFestivalActivityInfo::RoleFestivalActivityInfo(const RoleFestivalActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFestivalActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  loop_once_recharge_ = NULL;
  loop_accumulate_recharge_ = NULL;
  limit_recruit_ = NULL;
  activity_once_recharge_ = NULL;
  activity_accumulate_recharge_ = NULL;
  diamond_exchange_ = NULL;
  active_target_ = NULL;
  item_exchange_ = NULL;
  festival_login_ = NULL;
  open_server_login_ = NULL;
  open_svr_accumulate_recharge_ = NULL;
  festival_item_exchange_ = NULL;
  festival_discount_sell_ = NULL;
  festival_active_target_ = NULL;
  open_server_active_target_ = NULL;
  festival_active_target_2_ = NULL;
  activity_once_recharge_2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFestivalActivityInfo::~RoleFestivalActivityInfo() {
  SharedDtor();
}

void RoleFestivalActivityInfo::SharedDtor() {
  if (this != default_instance_) {
    delete loop_once_recharge_;
    delete loop_accumulate_recharge_;
    delete limit_recruit_;
    delete activity_once_recharge_;
    delete activity_accumulate_recharge_;
    delete diamond_exchange_;
    delete active_target_;
    delete item_exchange_;
    delete festival_login_;
    delete open_server_login_;
    delete open_svr_accumulate_recharge_;
    delete festival_item_exchange_;
    delete festival_discount_sell_;
    delete festival_active_target_;
    delete open_server_active_target_;
    delete festival_active_target_2_;
    delete activity_once_recharge_2_;
  }
}

void RoleFestivalActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFestivalActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFestivalActivityInfo_descriptor_;
}

const RoleFestivalActivityInfo& RoleFestivalActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleFestivalActivityInfo* RoleFestivalActivityInfo::default_instance_ = NULL;

RoleFestivalActivityInfo* RoleFestivalActivityInfo::New() const {
  return new RoleFestivalActivityInfo;
}

void RoleFestivalActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loop_once_recharge()) {
      if (loop_once_recharge_ != NULL) loop_once_recharge_->::PB::FestivalActivity::Clear();
    }
    if (has_loop_accumulate_recharge()) {
      if (loop_accumulate_recharge_ != NULL) loop_accumulate_recharge_->::PB::FestivalActivity::Clear();
    }
    if (has_limit_recruit()) {
      if (limit_recruit_ != NULL) limit_recruit_->::PB::FestivalActivity::Clear();
    }
    if (has_activity_once_recharge()) {
      if (activity_once_recharge_ != NULL) activity_once_recharge_->::PB::FestivalActivity::Clear();
    }
    if (has_activity_accumulate_recharge()) {
      if (activity_accumulate_recharge_ != NULL) activity_accumulate_recharge_->::PB::FestivalActivity::Clear();
    }
    if (has_diamond_exchange()) {
      if (diamond_exchange_ != NULL) diamond_exchange_->::PB::FestivalActivity::Clear();
    }
    if (has_active_target()) {
      if (active_target_ != NULL) active_target_->::PB::FestivalActivity::Clear();
    }
    if (has_item_exchange()) {
      if (item_exchange_ != NULL) item_exchange_->::PB::FestivalActivity::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_festival_login()) {
      if (festival_login_ != NULL) festival_login_->::PB::FestivalActivity::Clear();
    }
    if (has_open_server_login()) {
      if (open_server_login_ != NULL) open_server_login_->::PB::FestivalActivity::Clear();
    }
    if (has_open_svr_accumulate_recharge()) {
      if (open_svr_accumulate_recharge_ != NULL) open_svr_accumulate_recharge_->::PB::FestivalActivity::Clear();
    }
    if (has_festival_item_exchange()) {
      if (festival_item_exchange_ != NULL) festival_item_exchange_->::PB::FestivalActivity::Clear();
    }
    if (has_festival_discount_sell()) {
      if (festival_discount_sell_ != NULL) festival_discount_sell_->::PB::FestivalActivity::Clear();
    }
    if (has_festival_active_target()) {
      if (festival_active_target_ != NULL) festival_active_target_->::PB::FestivalActivity::Clear();
    }
    if (has_open_server_active_target()) {
      if (open_server_active_target_ != NULL) open_server_active_target_->::PB::FestivalActivity::Clear();
    }
    if (has_festival_active_target_2()) {
      if (festival_active_target_2_ != NULL) festival_active_target_2_->::PB::FestivalActivity::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_activity_once_recharge_2()) {
      if (activity_once_recharge_2_ != NULL) activity_once_recharge_2_->::PB::FestivalActivity::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFestivalActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.FestivalActivity loop_once_recharge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_once_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loop_accumulate_recharge;
        break;
      }

      // optional .PB.FestivalActivity loop_accumulate_recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loop_accumulate_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loop_accumulate_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_limit_recruit;
        break;
      }

      // optional .PB.FestivalActivity limit_recruit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_recruit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit_recruit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_activity_once_recharge;
        break;
      }

      // optional .PB.FestivalActivity activity_once_recharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_once_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_once_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_activity_accumulate_recharge;
        break;
      }

      // optional .PB.FestivalActivity activity_accumulate_recharge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_accumulate_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_accumulate_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_diamond_exchange;
        break;
      }

      // optional .PB.FestivalActivity diamond_exchange = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diamond_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_diamond_exchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_active_target;
        break;
      }

      // optional .PB.FestivalActivity active_target = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_item_exchange;
        break;
      }

      // optional .PB.FestivalActivity item_exchange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_exchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_festival_login;
        break;
      }

      // optional .PB.FestivalActivity festival_login = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festival_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festival_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_open_server_login;
        break;
      }

      // optional .PB.FestivalActivity open_server_login = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_server_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_server_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_open_svr_accumulate_recharge;
        break;
      }

      // optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_svr_accumulate_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_svr_accumulate_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_festival_item_exchange;
        break;
      }

      // optional .PB.FestivalActivity festival_item_exchange = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festival_item_exchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festival_item_exchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_festival_discount_sell;
        break;
      }

      // optional .PB.FestivalActivity festival_discount_sell = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festival_discount_sell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festival_discount_sell()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_festival_active_target;
        break;
      }

      // optional .PB.FestivalActivity festival_active_target = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festival_active_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festival_active_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_open_server_active_target;
        break;
      }

      // optional .PB.FestivalActivity open_server_active_target = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_server_active_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_server_active_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_festival_active_target_2;
        break;
      }

      // optional .PB.FestivalActivity festival_active_target_2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festival_active_target_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festival_active_target_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_activity_once_recharge_2;
        break;
      }

      // optional .PB.FestivalActivity activity_once_recharge_2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity_once_recharge_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity_once_recharge_2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFestivalActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.FestivalActivity loop_once_recharge = 1;
  if (has_loop_once_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->loop_once_recharge(), output);
  }

  // optional .PB.FestivalActivity loop_accumulate_recharge = 2;
  if (has_loop_accumulate_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->loop_accumulate_recharge(), output);
  }

  // optional .PB.FestivalActivity limit_recruit = 3;
  if (has_limit_recruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->limit_recruit(), output);
  }

  // optional .PB.FestivalActivity activity_once_recharge = 4;
  if (has_activity_once_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->activity_once_recharge(), output);
  }

  // optional .PB.FestivalActivity activity_accumulate_recharge = 5;
  if (has_activity_accumulate_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->activity_accumulate_recharge(), output);
  }

  // optional .PB.FestivalActivity diamond_exchange = 6;
  if (has_diamond_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->diamond_exchange(), output);
  }

  // optional .PB.FestivalActivity active_target = 7;
  if (has_active_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->active_target(), output);
  }

  // optional .PB.FestivalActivity item_exchange = 8;
  if (has_item_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->item_exchange(), output);
  }

  // optional .PB.FestivalActivity festival_login = 9;
  if (has_festival_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->festival_login(), output);
  }

  // optional .PB.FestivalActivity open_server_login = 10;
  if (has_open_server_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->open_server_login(), output);
  }

  // optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
  if (has_open_svr_accumulate_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->open_svr_accumulate_recharge(), output);
  }

  // optional .PB.FestivalActivity festival_item_exchange = 12;
  if (has_festival_item_exchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->festival_item_exchange(), output);
  }

  // optional .PB.FestivalActivity festival_discount_sell = 13;
  if (has_festival_discount_sell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->festival_discount_sell(), output);
  }

  // optional .PB.FestivalActivity festival_active_target = 14;
  if (has_festival_active_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->festival_active_target(), output);
  }

  // optional .PB.FestivalActivity open_server_active_target = 15;
  if (has_open_server_active_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->open_server_active_target(), output);
  }

  // optional .PB.FestivalActivity festival_active_target_2 = 16;
  if (has_festival_active_target_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->festival_active_target_2(), output);
  }

  // optional .PB.FestivalActivity activity_once_recharge_2 = 17;
  if (has_activity_once_recharge_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->activity_once_recharge_2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFestivalActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.FestivalActivity loop_once_recharge = 1;
  if (has_loop_once_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->loop_once_recharge(), target);
  }

  // optional .PB.FestivalActivity loop_accumulate_recharge = 2;
  if (has_loop_accumulate_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->loop_accumulate_recharge(), target);
  }

  // optional .PB.FestivalActivity limit_recruit = 3;
  if (has_limit_recruit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->limit_recruit(), target);
  }

  // optional .PB.FestivalActivity activity_once_recharge = 4;
  if (has_activity_once_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->activity_once_recharge(), target);
  }

  // optional .PB.FestivalActivity activity_accumulate_recharge = 5;
  if (has_activity_accumulate_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->activity_accumulate_recharge(), target);
  }

  // optional .PB.FestivalActivity diamond_exchange = 6;
  if (has_diamond_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->diamond_exchange(), target);
  }

  // optional .PB.FestivalActivity active_target = 7;
  if (has_active_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->active_target(), target);
  }

  // optional .PB.FestivalActivity item_exchange = 8;
  if (has_item_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->item_exchange(), target);
  }

  // optional .PB.FestivalActivity festival_login = 9;
  if (has_festival_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->festival_login(), target);
  }

  // optional .PB.FestivalActivity open_server_login = 10;
  if (has_open_server_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->open_server_login(), target);
  }

  // optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
  if (has_open_svr_accumulate_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->open_svr_accumulate_recharge(), target);
  }

  // optional .PB.FestivalActivity festival_item_exchange = 12;
  if (has_festival_item_exchange()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->festival_item_exchange(), target);
  }

  // optional .PB.FestivalActivity festival_discount_sell = 13;
  if (has_festival_discount_sell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->festival_discount_sell(), target);
  }

  // optional .PB.FestivalActivity festival_active_target = 14;
  if (has_festival_active_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->festival_active_target(), target);
  }

  // optional .PB.FestivalActivity open_server_active_target = 15;
  if (has_open_server_active_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->open_server_active_target(), target);
  }

  // optional .PB.FestivalActivity festival_active_target_2 = 16;
  if (has_festival_active_target_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->festival_active_target_2(), target);
  }

  // optional .PB.FestivalActivity activity_once_recharge_2 = 17;
  if (has_activity_once_recharge_2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->activity_once_recharge_2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFestivalActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.FestivalActivity loop_once_recharge = 1;
    if (has_loop_once_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loop_once_recharge());
    }

    // optional .PB.FestivalActivity loop_accumulate_recharge = 2;
    if (has_loop_accumulate_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loop_accumulate_recharge());
    }

    // optional .PB.FestivalActivity limit_recruit = 3;
    if (has_limit_recruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit_recruit());
    }

    // optional .PB.FestivalActivity activity_once_recharge = 4;
    if (has_activity_once_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_once_recharge());
    }

    // optional .PB.FestivalActivity activity_accumulate_recharge = 5;
    if (has_activity_accumulate_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_accumulate_recharge());
    }

    // optional .PB.FestivalActivity diamond_exchange = 6;
    if (has_diamond_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->diamond_exchange());
    }

    // optional .PB.FestivalActivity active_target = 7;
    if (has_active_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active_target());
    }

    // optional .PB.FestivalActivity item_exchange = 8;
    if (has_item_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_exchange());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.FestivalActivity festival_login = 9;
    if (has_festival_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festival_login());
    }

    // optional .PB.FestivalActivity open_server_login = 10;
    if (has_open_server_login()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_server_login());
    }

    // optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
    if (has_open_svr_accumulate_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_svr_accumulate_recharge());
    }

    // optional .PB.FestivalActivity festival_item_exchange = 12;
    if (has_festival_item_exchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festival_item_exchange());
    }

    // optional .PB.FestivalActivity festival_discount_sell = 13;
    if (has_festival_discount_sell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festival_discount_sell());
    }

    // optional .PB.FestivalActivity festival_active_target = 14;
    if (has_festival_active_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festival_active_target());
    }

    // optional .PB.FestivalActivity open_server_active_target = 15;
    if (has_open_server_active_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_server_active_target());
    }

    // optional .PB.FestivalActivity festival_active_target_2 = 16;
    if (has_festival_active_target_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festival_active_target_2());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PB.FestivalActivity activity_once_recharge_2 = 17;
    if (has_activity_once_recharge_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity_once_recharge_2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFestivalActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFestivalActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFestivalActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFestivalActivityInfo::MergeFrom(const RoleFestivalActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loop_once_recharge()) {
      mutable_loop_once_recharge()->::PB::FestivalActivity::MergeFrom(from.loop_once_recharge());
    }
    if (from.has_loop_accumulate_recharge()) {
      mutable_loop_accumulate_recharge()->::PB::FestivalActivity::MergeFrom(from.loop_accumulate_recharge());
    }
    if (from.has_limit_recruit()) {
      mutable_limit_recruit()->::PB::FestivalActivity::MergeFrom(from.limit_recruit());
    }
    if (from.has_activity_once_recharge()) {
      mutable_activity_once_recharge()->::PB::FestivalActivity::MergeFrom(from.activity_once_recharge());
    }
    if (from.has_activity_accumulate_recharge()) {
      mutable_activity_accumulate_recharge()->::PB::FestivalActivity::MergeFrom(from.activity_accumulate_recharge());
    }
    if (from.has_diamond_exchange()) {
      mutable_diamond_exchange()->::PB::FestivalActivity::MergeFrom(from.diamond_exchange());
    }
    if (from.has_active_target()) {
      mutable_active_target()->::PB::FestivalActivity::MergeFrom(from.active_target());
    }
    if (from.has_item_exchange()) {
      mutable_item_exchange()->::PB::FestivalActivity::MergeFrom(from.item_exchange());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_festival_login()) {
      mutable_festival_login()->::PB::FestivalActivity::MergeFrom(from.festival_login());
    }
    if (from.has_open_server_login()) {
      mutable_open_server_login()->::PB::FestivalActivity::MergeFrom(from.open_server_login());
    }
    if (from.has_open_svr_accumulate_recharge()) {
      mutable_open_svr_accumulate_recharge()->::PB::FestivalActivity::MergeFrom(from.open_svr_accumulate_recharge());
    }
    if (from.has_festival_item_exchange()) {
      mutable_festival_item_exchange()->::PB::FestivalActivity::MergeFrom(from.festival_item_exchange());
    }
    if (from.has_festival_discount_sell()) {
      mutable_festival_discount_sell()->::PB::FestivalActivity::MergeFrom(from.festival_discount_sell());
    }
    if (from.has_festival_active_target()) {
      mutable_festival_active_target()->::PB::FestivalActivity::MergeFrom(from.festival_active_target());
    }
    if (from.has_open_server_active_target()) {
      mutable_open_server_active_target()->::PB::FestivalActivity::MergeFrom(from.open_server_active_target());
    }
    if (from.has_festival_active_target_2()) {
      mutable_festival_active_target_2()->::PB::FestivalActivity::MergeFrom(from.festival_active_target_2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_activity_once_recharge_2()) {
      mutable_activity_once_recharge_2()->::PB::FestivalActivity::MergeFrom(from.activity_once_recharge_2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFestivalActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFestivalActivityInfo::CopyFrom(const RoleFestivalActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFestivalActivityInfo::IsInitialized() const {

  return true;
}

void RoleFestivalActivityInfo::Swap(RoleFestivalActivityInfo* other) {
  if (other != this) {
    std::swap(loop_once_recharge_, other->loop_once_recharge_);
    std::swap(loop_accumulate_recharge_, other->loop_accumulate_recharge_);
    std::swap(limit_recruit_, other->limit_recruit_);
    std::swap(activity_once_recharge_, other->activity_once_recharge_);
    std::swap(activity_accumulate_recharge_, other->activity_accumulate_recharge_);
    std::swap(diamond_exchange_, other->diamond_exchange_);
    std::swap(active_target_, other->active_target_);
    std::swap(item_exchange_, other->item_exchange_);
    std::swap(festival_login_, other->festival_login_);
    std::swap(open_server_login_, other->open_server_login_);
    std::swap(open_svr_accumulate_recharge_, other->open_svr_accumulate_recharge_);
    std::swap(festival_item_exchange_, other->festival_item_exchange_);
    std::swap(festival_discount_sell_, other->festival_discount_sell_);
    std::swap(festival_active_target_, other->festival_active_target_);
    std::swap(open_server_active_target_, other->open_server_active_target_);
    std::swap(festival_active_target_2_, other->festival_active_target_2_);
    std::swap(activity_once_recharge_2_, other->activity_once_recharge_2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFestivalActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFestivalActivityInfo_descriptor_;
  metadata.reflection = RoleFestivalActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AccurateRecommendGoods::kGoodsIdFieldNumber;
const int AccurateRecommendGoods::kBuyTimesFieldNumber;
const int AccurateRecommendGoods::kCanTakeTimesFieldNumber;
#endif  // !_MSC_VER

AccurateRecommendGoods::AccurateRecommendGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccurateRecommendGoods::InitAsDefaultInstance() {
}

AccurateRecommendGoods::AccurateRecommendGoods(const AccurateRecommendGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccurateRecommendGoods::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  buy_times_ = 0u;
  can_take_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccurateRecommendGoods::~AccurateRecommendGoods() {
  SharedDtor();
}

void AccurateRecommendGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AccurateRecommendGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccurateRecommendGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccurateRecommendGoods_descriptor_;
}

const AccurateRecommendGoods& AccurateRecommendGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AccurateRecommendGoods* AccurateRecommendGoods::default_instance_ = NULL;

AccurateRecommendGoods* AccurateRecommendGoods::New() const {
  return new AccurateRecommendGoods;
}

void AccurateRecommendGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    buy_times_ = 0u;
    can_take_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccurateRecommendGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_times;
        break;
      }

      // optional uint32 buy_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_can_take_times;
        break;
      }

      // optional uint32 can_take_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_take_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &can_take_times_)));
          set_has_can_take_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccurateRecommendGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // optional uint32 buy_times = 2;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_times(), output);
  }

  // optional uint32 can_take_times = 3;
  if (has_can_take_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->can_take_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccurateRecommendGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // optional uint32 buy_times = 2;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_times(), target);
  }

  // optional uint32 can_take_times = 3;
  if (has_can_take_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->can_take_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccurateRecommendGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // optional uint32 buy_times = 2;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_times());
    }

    // optional uint32 can_take_times = 3;
    if (has_can_take_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->can_take_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccurateRecommendGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccurateRecommendGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccurateRecommendGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccurateRecommendGoods::MergeFrom(const AccurateRecommendGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_can_take_times()) {
      set_can_take_times(from.can_take_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccurateRecommendGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccurateRecommendGoods::CopyFrom(const AccurateRecommendGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccurateRecommendGoods::IsInitialized() const {

  return true;
}

void AccurateRecommendGoods::Swap(AccurateRecommendGoods* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(can_take_times_, other->can_take_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccurateRecommendGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccurateRecommendGoods_descriptor_;
  metadata.reflection = AccurateRecommendGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleAccurateRecommendData::kGoodsListFieldNumber;
#endif  // !_MSC_VER

RoleAccurateRecommendData::RoleAccurateRecommendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleAccurateRecommendData::InitAsDefaultInstance() {
}

RoleAccurateRecommendData::RoleAccurateRecommendData(const RoleAccurateRecommendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleAccurateRecommendData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleAccurateRecommendData::~RoleAccurateRecommendData() {
  SharedDtor();
}

void RoleAccurateRecommendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleAccurateRecommendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleAccurateRecommendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleAccurateRecommendData_descriptor_;
}

const RoleAccurateRecommendData& RoleAccurateRecommendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleAccurateRecommendData* RoleAccurateRecommendData::default_instance_ = NULL;

RoleAccurateRecommendData* RoleAccurateRecommendData::New() const {
  return new RoleAccurateRecommendData;
}

void RoleAccurateRecommendData::Clear() {
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleAccurateRecommendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.AccurateRecommendGoods goods_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goods_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleAccurateRecommendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.AccurateRecommendGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goods_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleAccurateRecommendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.AccurateRecommendGoods goods_list = 1;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goods_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleAccurateRecommendData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.AccurateRecommendGoods goods_list = 1;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleAccurateRecommendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleAccurateRecommendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleAccurateRecommendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleAccurateRecommendData::MergeFrom(const RoleAccurateRecommendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleAccurateRecommendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleAccurateRecommendData::CopyFrom(const RoleAccurateRecommendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleAccurateRecommendData::IsInitialized() const {

  return true;
}

void RoleAccurateRecommendData::Swap(RoleAccurateRecommendData* other) {
  if (other != this) {
    goods_list_.Swap(&other->goods_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleAccurateRecommendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleAccurateRecommendData_descriptor_;
  metadata.reflection = RoleAccurateRecommendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleChristmasData::kTotalScoreFieldNumber;
const int RoleChristmasData::kCurScoreFieldNumber;
const int RoleChristmasData::kAlreadyTakeLowerBossRewardLevelFieldNumber;
const int RoleChristmasData::kAlreadyTakeHighBossRewardLevelFieldNumber;
const int RoleChristmasData::kLastResetDataTimeFieldNumber;
#endif  // !_MSC_VER

RoleChristmasData::RoleChristmasData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleChristmasData::InitAsDefaultInstance() {
}

RoleChristmasData::RoleChristmasData(const RoleChristmasData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleChristmasData::SharedCtor() {
  _cached_size_ = 0;
  total_score_ = 0u;
  cur_score_ = 0u;
  already_take_lower_boss_reward_level_ = 0u;
  already_take_high_boss_reward_level_ = 0u;
  last_reset_data_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleChristmasData::~RoleChristmasData() {
  SharedDtor();
}

void RoleChristmasData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleChristmasData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleChristmasData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleChristmasData_descriptor_;
}

const RoleChristmasData& RoleChristmasData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleChristmasData* RoleChristmasData::default_instance_ = NULL;

RoleChristmasData* RoleChristmasData::New() const {
  return new RoleChristmasData;
}

void RoleChristmasData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_score_ = 0u;
    cur_score_ = 0u;
    already_take_lower_boss_reward_level_ = 0u;
    already_take_high_boss_reward_level_ = 0u;
    last_reset_data_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleChristmasData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total_score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_score;
        break;
      }

      // optional uint32 cur_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_score_)));
          set_has_cur_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_already_take_lower_boss_reward_level;
        break;
      }

      // optional uint32 already_take_lower_boss_reward_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_take_lower_boss_reward_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &already_take_lower_boss_reward_level_)));
          set_has_already_take_lower_boss_reward_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_already_take_high_boss_reward_level;
        break;
      }

      // optional uint32 already_take_high_boss_reward_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_take_high_boss_reward_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &already_take_high_boss_reward_level_)));
          set_has_already_take_high_boss_reward_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_reset_data_time;
        break;
      }

      // optional uint32 last_reset_data_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_reset_data_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_reset_data_time_)));
          set_has_last_reset_data_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleChristmasData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total_score = 1;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_score(), output);
  }

  // optional uint32 cur_score = 2;
  if (has_cur_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_score(), output);
  }

  // optional uint32 already_take_lower_boss_reward_level = 3;
  if (has_already_take_lower_boss_reward_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->already_take_lower_boss_reward_level(), output);
  }

  // optional uint32 already_take_high_boss_reward_level = 4;
  if (has_already_take_high_boss_reward_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->already_take_high_boss_reward_level(), output);
  }

  // optional uint32 last_reset_data_time = 5;
  if (has_last_reset_data_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->last_reset_data_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleChristmasData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 total_score = 1;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_score(), target);
  }

  // optional uint32 cur_score = 2;
  if (has_cur_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_score(), target);
  }

  // optional uint32 already_take_lower_boss_reward_level = 3;
  if (has_already_take_lower_boss_reward_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->already_take_lower_boss_reward_level(), target);
  }

  // optional uint32 already_take_high_boss_reward_level = 4;
  if (has_already_take_high_boss_reward_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->already_take_high_boss_reward_level(), target);
  }

  // optional uint32 last_reset_data_time = 5;
  if (has_last_reset_data_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->last_reset_data_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleChristmasData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total_score = 1;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_score());
    }

    // optional uint32 cur_score = 2;
    if (has_cur_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_score());
    }

    // optional uint32 already_take_lower_boss_reward_level = 3;
    if (has_already_take_lower_boss_reward_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->already_take_lower_boss_reward_level());
    }

    // optional uint32 already_take_high_boss_reward_level = 4;
    if (has_already_take_high_boss_reward_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->already_take_high_boss_reward_level());
    }

    // optional uint32 last_reset_data_time = 5;
    if (has_last_reset_data_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_reset_data_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleChristmasData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleChristmasData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleChristmasData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleChristmasData::MergeFrom(const RoleChristmasData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
    if (from.has_cur_score()) {
      set_cur_score(from.cur_score());
    }
    if (from.has_already_take_lower_boss_reward_level()) {
      set_already_take_lower_boss_reward_level(from.already_take_lower_boss_reward_level());
    }
    if (from.has_already_take_high_boss_reward_level()) {
      set_already_take_high_boss_reward_level(from.already_take_high_boss_reward_level());
    }
    if (from.has_last_reset_data_time()) {
      set_last_reset_data_time(from.last_reset_data_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleChristmasData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleChristmasData::CopyFrom(const RoleChristmasData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChristmasData::IsInitialized() const {

  return true;
}

void RoleChristmasData::Swap(RoleChristmasData* other) {
  if (other != this) {
    std::swap(total_score_, other->total_score_);
    std::swap(cur_score_, other->cur_score_);
    std::swap(already_take_lower_boss_reward_level_, other->already_take_lower_boss_reward_level_);
    std::swap(already_take_high_boss_reward_level_, other->already_take_high_boss_reward_level_);
    std::swap(last_reset_data_time_, other->last_reset_data_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleChristmasData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleChristmasData_descriptor_;
  metadata.reflection = RoleChristmasData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewardRecord::kDaysFieldNumber;
const int OnlineRewardRecord::kFlagListFieldNumber;
#endif  // !_MSC_VER

OnlineRewardRecord::OnlineRewardRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineRewardRecord::InitAsDefaultInstance() {
}

OnlineRewardRecord::OnlineRewardRecord(const OnlineRewardRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineRewardRecord::SharedCtor() {
  _cached_size_ = 0;
  days_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewardRecord::~OnlineRewardRecord() {
  SharedDtor();
}

void OnlineRewardRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewardRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewardRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewardRecord_descriptor_;
}

const OnlineRewardRecord& OnlineRewardRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

OnlineRewardRecord* OnlineRewardRecord::default_instance_ = NULL;

OnlineRewardRecord* OnlineRewardRecord::New() const {
  return new OnlineRewardRecord;
}

void OnlineRewardRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    days_ = 0u;
  }
  flag_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 days = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &days_)));
          set_has_days();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag_list;
        break;
      }

      // repeated uint32 flag_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_flag_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_flag_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineRewardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 days = 1;
  if (has_days()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->days(), output);
  }

  // repeated uint32 flag_list = 2;
  for (int i = 0; i < this->flag_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->flag_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineRewardRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 days = 1;
  if (has_days()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->days(), target);
  }

  // repeated uint32 flag_list = 2;
  for (int i = 0; i < this->flag_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->flag_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineRewardRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 days = 1;
    if (has_days()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->days());
    }

  }
  // repeated uint32 flag_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->flag_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->flag_list(i));
    }
    total_size += 1 * this->flag_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewardRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewardRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewardRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewardRecord::MergeFrom(const OnlineRewardRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  flag_list_.MergeFrom(from.flag_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_days()) {
      set_days(from.days());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewardRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewardRecord::CopyFrom(const OnlineRewardRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewardRecord::IsInitialized() const {

  return true;
}

void OnlineRewardRecord::Swap(OnlineRewardRecord* other) {
  if (other != this) {
    std::swap(days_, other->days_);
    flag_list_.Swap(&other->flag_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewardRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewardRecord_descriptor_;
  metadata.reflection = OnlineRewardRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineRewardData::kOnlineTimeFieldNumber;
const int OnlineRewardData::kRewardRecordListFieldNumber;
#endif  // !_MSC_VER

OnlineRewardData::OnlineRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineRewardData::InitAsDefaultInstance() {
}

OnlineRewardData::OnlineRewardData(const OnlineRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineRewardData::SharedCtor() {
  _cached_size_ = 0;
  online_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineRewardData::~OnlineRewardData() {
  SharedDtor();
}

void OnlineRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineRewardData_descriptor_;
}

const OnlineRewardData& OnlineRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

OnlineRewardData* OnlineRewardData::default_instance_ = NULL;

OnlineRewardData* OnlineRewardData::New() const {
  return new OnlineRewardData;
}

void OnlineRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    online_time_ = 0u;
  }
  reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 online_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &online_time_)));
          set_has_online_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_record_list;
        break;
      }

      // repeated .PB.OnlineRewardRecord reward_record_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 online_time = 1;
  if (has_online_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->online_time(), output);
  }

  // repeated .PB.OnlineRewardRecord reward_record_list = 2;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 online_time = 1;
  if (has_online_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->online_time(), target);
  }

  // repeated .PB.OnlineRewardRecord reward_record_list = 2;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 online_time = 1;
    if (has_online_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->online_time());
    }

  }
  // repeated .PB.OnlineRewardRecord reward_record_list = 2;
  total_size += 1 * this->reward_record_list_size();
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineRewardData::MergeFrom(const OnlineRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_record_list_.MergeFrom(from.reward_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_online_time()) {
      set_online_time(from.online_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineRewardData::CopyFrom(const OnlineRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineRewardData::IsInitialized() const {

  return true;
}

void OnlineRewardData::Swap(OnlineRewardData* other) {
  if (other != this) {
    std::swap(online_time_, other->online_time_);
    reward_record_list_.Swap(&other->reward_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineRewardData_descriptor_;
  metadata.reflection = OnlineRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SevenDayLoginData::kDailyDataListFieldNumber;
#endif  // !_MSC_VER

SevenDayLoginData::SevenDayLoginData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SevenDayLoginData::InitAsDefaultInstance() {
}

SevenDayLoginData::SevenDayLoginData(const SevenDayLoginData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SevenDayLoginData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SevenDayLoginData::~SevenDayLoginData() {
  SharedDtor();
}

void SevenDayLoginData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SevenDayLoginData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SevenDayLoginData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SevenDayLoginData_descriptor_;
}

const SevenDayLoginData& SevenDayLoginData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SevenDayLoginData* SevenDayLoginData::default_instance_ = NULL;

SevenDayLoginData* SevenDayLoginData::New() const {
  return new SevenDayLoginData;
}

void SevenDayLoginData::Clear() {
  daily_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SevenDayLoginData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 daily_data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_data_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_daily_data_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daily_data_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_daily_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SevenDayLoginData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 daily_data_list = 1;
  for (int i = 0; i < this->daily_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->daily_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SevenDayLoginData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 daily_data_list = 1;
  for (int i = 0; i < this->daily_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->daily_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SevenDayLoginData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 daily_data_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_data_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->daily_data_list(i));
    }
    total_size += 1 * this->daily_data_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SevenDayLoginData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SevenDayLoginData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SevenDayLoginData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SevenDayLoginData::MergeFrom(const SevenDayLoginData& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_data_list_.MergeFrom(from.daily_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SevenDayLoginData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SevenDayLoginData::CopyFrom(const SevenDayLoginData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SevenDayLoginData::IsInitialized() const {

  return true;
}

void SevenDayLoginData::Swap(SevenDayLoginData* other) {
  if (other != this) {
    daily_data_list_.Swap(&other->daily_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SevenDayLoginData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SevenDayLoginData_descriptor_;
  metadata.reflection = SevenDayLoginData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecallFriendData::kFriendIdFieldNumber;
const int RecallFriendData::kSendTimeFieldNumber;
#endif  // !_MSC_VER

RecallFriendData::RecallFriendData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecallFriendData::InitAsDefaultInstance() {
}

RecallFriendData::RecallFriendData(const RecallFriendData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecallFriendData::SharedCtor() {
  _cached_size_ = 0;
  friend_id_ = 0u;
  send_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecallFriendData::~RecallFriendData() {
  SharedDtor();
}

void RecallFriendData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecallFriendData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecallFriendData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecallFriendData_descriptor_;
}

const RecallFriendData& RecallFriendData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RecallFriendData* RecallFriendData::default_instance_ = NULL;

RecallFriendData* RecallFriendData::New() const {
  return new RecallFriendData;
}

void RecallFriendData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friend_id_ = 0u;
    send_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecallFriendData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 friend_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
          set_has_friend_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_send_time;
        break;
      }

      // optional uint32 send_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &send_time_)));
          set_has_send_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecallFriendData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 friend_id = 1;
  if (has_friend_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->friend_id(), output);
  }

  // optional uint32 send_time = 2;
  if (has_send_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->send_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecallFriendData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 friend_id = 1;
  if (has_friend_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->friend_id(), target);
  }

  // optional uint32 send_time = 2;
  if (has_send_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->send_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecallFriendData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 friend_id = 1;
    if (has_friend_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional uint32 send_time = 2;
    if (has_send_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->send_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecallFriendData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecallFriendData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecallFriendData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecallFriendData::MergeFrom(const RecallFriendData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friend_id()) {
      set_friend_id(from.friend_id());
    }
    if (from.has_send_time()) {
      set_send_time(from.send_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecallFriendData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecallFriendData::CopyFrom(const RecallFriendData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecallFriendData::IsInitialized() const {

  return true;
}

void RecallFriendData::Swap(RecallFriendData* other) {
  if (other != this) {
    std::swap(friend_id_, other->friend_id_);
    std::swap(send_time_, other->send_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecallFriendData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecallFriendData_descriptor_;
  metadata.reflection = RecallFriendData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacebookActivityData::kIsAlreadyTakeAccountBingdingRewardFieldNumber;
const int FacebookActivityData::kReadyToShareTimeFieldNumber;
const int FacebookActivityData::kRecallSuccessFriendNumFieldNumber;
const int FacebookActivityData::kInviteSuccessFriendNumFieldNumber;
const int FacebookActivityData::kRecallRewardRecordListFieldNumber;
const int FacebookActivityData::kInviteRewardRecordListFieldNumber;
const int FacebookActivityData::kSendRecallFriendRecordFieldNumber;
const int FacebookActivityData::kSendInviteFriendRecordFieldNumber;
const int FacebookActivityData::kReadyToCommendTimeFieldNumber;
#endif  // !_MSC_VER

FacebookActivityData::FacebookActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacebookActivityData::InitAsDefaultInstance() {
}

FacebookActivityData::FacebookActivityData(const FacebookActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacebookActivityData::SharedCtor() {
  _cached_size_ = 0;
  is_already_take_account_bingding_reward_ = 0u;
  ready_to_share_time_ = 0u;
  recall_success_friend_num_ = 0u;
  invite_success_friend_num_ = 0u;
  ready_to_commend_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacebookActivityData::~FacebookActivityData() {
  SharedDtor();
}

void FacebookActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacebookActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacebookActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacebookActivityData_descriptor_;
}

const FacebookActivityData& FacebookActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

FacebookActivityData* FacebookActivityData::default_instance_ = NULL;

FacebookActivityData* FacebookActivityData::New() const {
  return new FacebookActivityData;
}

void FacebookActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_already_take_account_bingding_reward_ = 0u;
    ready_to_share_time_ = 0u;
    recall_success_friend_num_ = 0u;
    invite_success_friend_num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ready_to_commend_time_ = 0u;
  }
  recall_reward_record_list_.Clear();
  invite_reward_record_list_.Clear();
  send_recall_friend_record_.Clear();
  send_invite_friend_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacebookActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_already_take_account_bingding_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_already_take_account_bingding_reward_)));
          set_has_is_already_take_account_bingding_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ready_to_share_time;
        break;
      }

      // optional uint32 ready_to_share_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_to_share_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_to_share_time_)));
          set_has_ready_to_share_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recall_success_friend_num;
        break;
      }

      // optional uint32 recall_success_friend_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recall_success_friend_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recall_success_friend_num_)));
          set_has_recall_success_friend_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_invite_success_friend_num;
        break;
      }

      // optional uint32 invite_success_friend_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_success_friend_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invite_success_friend_num_)));
          set_has_invite_success_friend_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recall_reward_record_list;
        break;
      }

      // repeated uint32 recall_reward_record_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recall_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_recall_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_recall_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recall_reward_record_list;
        if (input->ExpectTag(48)) goto parse_invite_reward_record_list;
        break;
      }

      // repeated uint32 invite_reward_record_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invite_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_invite_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_invite_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_invite_reward_record_list;
        if (input->ExpectTag(58)) goto parse_send_recall_friend_record;
        break;
      }

      // repeated .PB.RecallFriendData send_recall_friend_record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_recall_friend_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send_recall_friend_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_send_recall_friend_record;
        if (input->ExpectTag(66)) goto parse_send_invite_friend_record;
        break;
      }

      // repeated string send_invite_friend_record = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send_invite_friend_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_send_invite_friend_record()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->send_invite_friend_record(this->send_invite_friend_record_size() - 1).data(),
            this->send_invite_friend_record(this->send_invite_friend_record_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_send_invite_friend_record;
        if (input->ExpectTag(72)) goto parse_ready_to_commend_time;
        break;
      }

      // optional uint32 ready_to_commend_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_to_commend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ready_to_commend_time_)));
          set_has_ready_to_commend_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacebookActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_already_take_account_bingding_reward = 1;
  if (has_is_already_take_account_bingding_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_already_take_account_bingding_reward(), output);
  }

  // optional uint32 ready_to_share_time = 2;
  if (has_ready_to_share_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ready_to_share_time(), output);
  }

  // optional uint32 recall_success_friend_num = 3;
  if (has_recall_success_friend_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recall_success_friend_num(), output);
  }

  // optional uint32 invite_success_friend_num = 4;
  if (has_invite_success_friend_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->invite_success_friend_num(), output);
  }

  // repeated uint32 recall_reward_record_list = 5;
  for (int i = 0; i < this->recall_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->recall_reward_record_list(i), output);
  }

  // repeated uint32 invite_reward_record_list = 6;
  for (int i = 0; i < this->invite_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->invite_reward_record_list(i), output);
  }

  // repeated .PB.RecallFriendData send_recall_friend_record = 7;
  for (int i = 0; i < this->send_recall_friend_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->send_recall_friend_record(i), output);
  }

  // repeated string send_invite_friend_record = 8;
  for (int i = 0; i < this->send_invite_friend_record_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->send_invite_friend_record(i).data(), this->send_invite_friend_record(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->send_invite_friend_record(i), output);
  }

  // optional uint32 ready_to_commend_time = 9;
  if (has_ready_to_commend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->ready_to_commend_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacebookActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_already_take_account_bingding_reward = 1;
  if (has_is_already_take_account_bingding_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_already_take_account_bingding_reward(), target);
  }

  // optional uint32 ready_to_share_time = 2;
  if (has_ready_to_share_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ready_to_share_time(), target);
  }

  // optional uint32 recall_success_friend_num = 3;
  if (has_recall_success_friend_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recall_success_friend_num(), target);
  }

  // optional uint32 invite_success_friend_num = 4;
  if (has_invite_success_friend_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->invite_success_friend_num(), target);
  }

  // repeated uint32 recall_reward_record_list = 5;
  for (int i = 0; i < this->recall_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->recall_reward_record_list(i), target);
  }

  // repeated uint32 invite_reward_record_list = 6;
  for (int i = 0; i < this->invite_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->invite_reward_record_list(i), target);
  }

  // repeated .PB.RecallFriendData send_recall_friend_record = 7;
  for (int i = 0; i < this->send_recall_friend_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->send_recall_friend_record(i), target);
  }

  // repeated string send_invite_friend_record = 8;
  for (int i = 0; i < this->send_invite_friend_record_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->send_invite_friend_record(i).data(), this->send_invite_friend_record(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->send_invite_friend_record(i), target);
  }

  // optional uint32 ready_to_commend_time = 9;
  if (has_ready_to_commend_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->ready_to_commend_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacebookActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_already_take_account_bingding_reward = 1;
    if (has_is_already_take_account_bingding_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_already_take_account_bingding_reward());
    }

    // optional uint32 ready_to_share_time = 2;
    if (has_ready_to_share_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ready_to_share_time());
    }

    // optional uint32 recall_success_friend_num = 3;
    if (has_recall_success_friend_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recall_success_friend_num());
    }

    // optional uint32 invite_success_friend_num = 4;
    if (has_invite_success_friend_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invite_success_friend_num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 ready_to_commend_time = 9;
    if (has_ready_to_commend_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ready_to_commend_time());
    }

  }
  // repeated uint32 recall_reward_record_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->recall_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->recall_reward_record_list(i));
    }
    total_size += 1 * this->recall_reward_record_list_size() + data_size;
  }

  // repeated uint32 invite_reward_record_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->invite_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->invite_reward_record_list(i));
    }
    total_size += 1 * this->invite_reward_record_list_size() + data_size;
  }

  // repeated .PB.RecallFriendData send_recall_friend_record = 7;
  total_size += 1 * this->send_recall_friend_record_size();
  for (int i = 0; i < this->send_recall_friend_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send_recall_friend_record(i));
  }

  // repeated string send_invite_friend_record = 8;
  total_size += 1 * this->send_invite_friend_record_size();
  for (int i = 0; i < this->send_invite_friend_record_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->send_invite_friend_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacebookActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacebookActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacebookActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacebookActivityData::MergeFrom(const FacebookActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recall_reward_record_list_.MergeFrom(from.recall_reward_record_list_);
  invite_reward_record_list_.MergeFrom(from.invite_reward_record_list_);
  send_recall_friend_record_.MergeFrom(from.send_recall_friend_record_);
  send_invite_friend_record_.MergeFrom(from.send_invite_friend_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_already_take_account_bingding_reward()) {
      set_is_already_take_account_bingding_reward(from.is_already_take_account_bingding_reward());
    }
    if (from.has_ready_to_share_time()) {
      set_ready_to_share_time(from.ready_to_share_time());
    }
    if (from.has_recall_success_friend_num()) {
      set_recall_success_friend_num(from.recall_success_friend_num());
    }
    if (from.has_invite_success_friend_num()) {
      set_invite_success_friend_num(from.invite_success_friend_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ready_to_commend_time()) {
      set_ready_to_commend_time(from.ready_to_commend_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacebookActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacebookActivityData::CopyFrom(const FacebookActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacebookActivityData::IsInitialized() const {

  return true;
}

void FacebookActivityData::Swap(FacebookActivityData* other) {
  if (other != this) {
    std::swap(is_already_take_account_bingding_reward_, other->is_already_take_account_bingding_reward_);
    std::swap(ready_to_share_time_, other->ready_to_share_time_);
    std::swap(recall_success_friend_num_, other->recall_success_friend_num_);
    std::swap(invite_success_friend_num_, other->invite_success_friend_num_);
    recall_reward_record_list_.Swap(&other->recall_reward_record_list_);
    invite_reward_record_list_.Swap(&other->invite_reward_record_list_);
    send_recall_friend_record_.Swap(&other->send_recall_friend_record_);
    send_invite_friend_record_.Swap(&other->send_invite_friend_record_);
    std::swap(ready_to_commend_time_, other->ready_to_commend_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacebookActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacebookActivityData_descriptor_;
  metadata.reflection = FacebookActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeRewardData::kIsTookExtraRewardFieldNumber;
const int RechargeRewardData::kDailyDataListFieldNumber;
const int RechargeRewardData::kLastActivityDataIdFieldNumber;
#endif  // !_MSC_VER

RechargeRewardData::RechargeRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeRewardData::InitAsDefaultInstance() {
}

RechargeRewardData::RechargeRewardData(const RechargeRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeRewardData::SharedCtor() {
  _cached_size_ = 0;
  is_took_extra_reward_ = 0u;
  last_activity_data_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeRewardData::~RechargeRewardData() {
  SharedDtor();
}

void RechargeRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeRewardData_descriptor_;
}

const RechargeRewardData& RechargeRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RechargeRewardData* RechargeRewardData::default_instance_ = NULL;

RechargeRewardData* RechargeRewardData::New() const {
  return new RechargeRewardData;
}

void RechargeRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_took_extra_reward_ = 0u;
    last_activity_data_id_ = 0u;
  }
  daily_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_took_extra_reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_took_extra_reward_)));
          set_has_is_took_extra_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_data_list;
        break;
      }

      // repeated uint32 daily_data_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_data_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_daily_data_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_daily_data_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_daily_data_list;
        if (input->ExpectTag(24)) goto parse_last_activity_data_id;
        break;
      }

      // optional uint32 last_activity_data_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_data_id_)));
          set_has_last_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_took_extra_reward = 1;
  if (has_is_took_extra_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_took_extra_reward(), output);
  }

  // repeated uint32 daily_data_list = 2;
  for (int i = 0; i < this->daily_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->daily_data_list(i), output);
  }

  // optional uint32 last_activity_data_id = 3;
  if (has_last_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_activity_data_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_took_extra_reward = 1;
  if (has_is_took_extra_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_took_extra_reward(), target);
  }

  // repeated uint32 daily_data_list = 2;
  for (int i = 0; i < this->daily_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->daily_data_list(i), target);
  }

  // optional uint32 last_activity_data_id = 3;
  if (has_last_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_activity_data_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_took_extra_reward = 1;
    if (has_is_took_extra_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_took_extra_reward());
    }

    // optional uint32 last_activity_data_id = 3;
    if (has_last_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_data_id());
    }

  }
  // repeated uint32 daily_data_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->daily_data_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->daily_data_list(i));
    }
    total_size += 1 * this->daily_data_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeRewardData::MergeFrom(const RechargeRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  daily_data_list_.MergeFrom(from.daily_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_took_extra_reward()) {
      set_is_took_extra_reward(from.is_took_extra_reward());
    }
    if (from.has_last_activity_data_id()) {
      set_last_activity_data_id(from.last_activity_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeRewardData::CopyFrom(const RechargeRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeRewardData::IsInitialized() const {

  return true;
}

void RechargeRewardData::Swap(RechargeRewardData* other) {
  if (other != this) {
    std::swap(is_took_extra_reward_, other->is_took_extra_reward_);
    daily_data_list_.Swap(&other->daily_data_list_);
    std::swap(last_activity_data_id_, other->last_activity_data_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeRewardData_descriptor_;
  metadata.reflection = RechargeRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalRechargeRewardData::kTotalAmountFieldNumber;
const int TotalRechargeRewardData::kRewardRecordListFieldNumber;
const int TotalRechargeRewardData::kLastActivityDataIdFieldNumber;
#endif  // !_MSC_VER

TotalRechargeRewardData::TotalRechargeRewardData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TotalRechargeRewardData::InitAsDefaultInstance() {
}

TotalRechargeRewardData::TotalRechargeRewardData(const TotalRechargeRewardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TotalRechargeRewardData::SharedCtor() {
  _cached_size_ = 0;
  total_amount_ = 0u;
  last_activity_data_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalRechargeRewardData::~TotalRechargeRewardData() {
  SharedDtor();
}

void TotalRechargeRewardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalRechargeRewardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalRechargeRewardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalRechargeRewardData_descriptor_;
}

const TotalRechargeRewardData& TotalRechargeRewardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TotalRechargeRewardData* TotalRechargeRewardData::default_instance_ = NULL;

TotalRechargeRewardData* TotalRechargeRewardData::New() const {
  return new TotalRechargeRewardData;
}

void TotalRechargeRewardData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    total_amount_ = 0u;
    last_activity_data_id_ = 0u;
  }
  reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalRechargeRewardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 total_amount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_amount_)));
          set_has_total_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_record_list;
        break;
      }

      // repeated uint32 reward_record_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward_record_list;
        if (input->ExpectTag(24)) goto parse_last_activity_data_id;
        break;
      }

      // optional uint32 last_activity_data_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_activity_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_data_id_)));
          set_has_last_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TotalRechargeRewardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 total_amount = 1;
  if (has_total_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_amount(), output);
  }

  // repeated uint32 reward_record_list = 2;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->reward_record_list(i), output);
  }

  // optional uint32 last_activity_data_id = 3;
  if (has_last_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->last_activity_data_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TotalRechargeRewardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 total_amount = 1;
  if (has_total_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_amount(), target);
  }

  // repeated uint32 reward_record_list = 2;
  for (int i = 0; i < this->reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->reward_record_list(i), target);
  }

  // optional uint32 last_activity_data_id = 3;
  if (has_last_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->last_activity_data_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TotalRechargeRewardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 total_amount = 1;
    if (has_total_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_amount());
    }

    // optional uint32 last_activity_data_id = 3;
    if (has_last_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_data_id());
    }

  }
  // repeated uint32 reward_record_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reward_record_list(i));
    }
    total_size += 1 * this->reward_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalRechargeRewardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalRechargeRewardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalRechargeRewardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalRechargeRewardData::MergeFrom(const TotalRechargeRewardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_record_list_.MergeFrom(from.reward_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_amount()) {
      set_total_amount(from.total_amount());
    }
    if (from.has_last_activity_data_id()) {
      set_last_activity_data_id(from.last_activity_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalRechargeRewardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalRechargeRewardData::CopyFrom(const TotalRechargeRewardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalRechargeRewardData::IsInitialized() const {

  return true;
}

void TotalRechargeRewardData::Swap(TotalRechargeRewardData* other) {
  if (other != this) {
    std::swap(total_amount_, other->total_amount_);
    reward_record_list_.Swap(&other->reward_record_list_);
    std::swap(last_activity_data_id_, other->last_activity_data_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalRechargeRewardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalRechargeRewardData_descriptor_;
  metadata.reflection = TotalRechargeRewardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HotSaleGoods::kGoodsIdFieldNumber;
const int HotSaleGoods::kCurDataIdxFieldNumber;
const int HotSaleGoods::kBuyTimesFieldNumber;
const int HotSaleGoods::kTakeTimesFieldNumber;
#endif  // !_MSC_VER

HotSaleGoods::HotSaleGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HotSaleGoods::InitAsDefaultInstance() {
}

HotSaleGoods::HotSaleGoods(const HotSaleGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HotSaleGoods::SharedCtor() {
  _cached_size_ = 0;
  goods_id_ = 0u;
  cur_data_idx_ = 0u;
  buy_times_ = 0u;
  take_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HotSaleGoods::~HotSaleGoods() {
  SharedDtor();
}

void HotSaleGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HotSaleGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HotSaleGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HotSaleGoods_descriptor_;
}

const HotSaleGoods& HotSaleGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

HotSaleGoods* HotSaleGoods::default_instance_ = NULL;

HotSaleGoods* HotSaleGoods::New() const {
  return new HotSaleGoods;
}

void HotSaleGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goods_id_ = 0u;
    cur_data_idx_ = 0u;
    buy_times_ = 0u;
    take_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HotSaleGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 goods_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goods_id_)));
          set_has_goods_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_data_idx;
        break;
      }

      // optional uint32 cur_data_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_data_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_data_idx_)));
          set_has_cur_data_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy_times;
        break;
      }

      // optional uint32 buy_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_times_)));
          set_has_buy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_take_times;
        break;
      }

      // optional uint32 take_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &take_times_)));
          set_has_take_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HotSaleGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 goods_id = 1;
  if (has_goods_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goods_id(), output);
  }

  // optional uint32 cur_data_idx = 2;
  if (has_cur_data_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_data_idx(), output);
  }

  // optional uint32 buy_times = 3;
  if (has_buy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buy_times(), output);
  }

  // optional uint32 take_times = 4;
  if (has_take_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->take_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HotSaleGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 goods_id = 1;
  if (has_goods_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goods_id(), target);
  }

  // optional uint32 cur_data_idx = 2;
  if (has_cur_data_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_data_idx(), target);
  }

  // optional uint32 buy_times = 3;
  if (has_buy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buy_times(), target);
  }

  // optional uint32 take_times = 4;
  if (has_take_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->take_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HotSaleGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 goods_id = 1;
    if (has_goods_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goods_id());
    }

    // optional uint32 cur_data_idx = 2;
    if (has_cur_data_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_data_idx());
    }

    // optional uint32 buy_times = 3;
    if (has_buy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_times());
    }

    // optional uint32 take_times = 4;
    if (has_take_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->take_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HotSaleGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HotSaleGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HotSaleGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HotSaleGoods::MergeFrom(const HotSaleGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goods_id()) {
      set_goods_id(from.goods_id());
    }
    if (from.has_cur_data_idx()) {
      set_cur_data_idx(from.cur_data_idx());
    }
    if (from.has_buy_times()) {
      set_buy_times(from.buy_times());
    }
    if (from.has_take_times()) {
      set_take_times(from.take_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HotSaleGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HotSaleGoods::CopyFrom(const HotSaleGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HotSaleGoods::IsInitialized() const {

  return true;
}

void HotSaleGoods::Swap(HotSaleGoods* other) {
  if (other != this) {
    std::swap(goods_id_, other->goods_id_);
    std::swap(cur_data_idx_, other->cur_data_idx_);
    std::swap(buy_times_, other->buy_times_);
    std::swap(take_times_, other->take_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HotSaleGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HotSaleGoods_descriptor_;
  metadata.reflection = HotSaleGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleHotSaleGoodsData::kLastActivityDataIdFieldNumber;
const int RoleHotSaleGoodsData::kGoodsListFieldNumber;
#endif  // !_MSC_VER

RoleHotSaleGoodsData::RoleHotSaleGoodsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleHotSaleGoodsData::InitAsDefaultInstance() {
}

RoleHotSaleGoodsData::RoleHotSaleGoodsData(const RoleHotSaleGoodsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleHotSaleGoodsData::SharedCtor() {
  _cached_size_ = 0;
  last_activity_data_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleHotSaleGoodsData::~RoleHotSaleGoodsData() {
  SharedDtor();
}

void RoleHotSaleGoodsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleHotSaleGoodsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleHotSaleGoodsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleHotSaleGoodsData_descriptor_;
}

const RoleHotSaleGoodsData& RoleHotSaleGoodsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleHotSaleGoodsData* RoleHotSaleGoodsData::default_instance_ = NULL;

RoleHotSaleGoodsData* RoleHotSaleGoodsData::New() const {
  return new RoleHotSaleGoodsData;
}

void RoleHotSaleGoodsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_activity_data_id_ = 0u;
  }
  goods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleHotSaleGoodsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_activity_data_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_data_id_)));
          set_has_last_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods_list;
        break;
      }

      // repeated .PB.HotSaleGoods goods_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goods_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleHotSaleGoodsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_activity_data_id = 1;
  if (has_last_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_activity_data_id(), output);
  }

  // repeated .PB.HotSaleGoods goods_list = 2;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goods_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleHotSaleGoodsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_activity_data_id = 1;
  if (has_last_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_activity_data_id(), target);
  }

  // repeated .PB.HotSaleGoods goods_list = 2;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goods_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleHotSaleGoodsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_activity_data_id = 1;
    if (has_last_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_data_id());
    }

  }
  // repeated .PB.HotSaleGoods goods_list = 2;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleHotSaleGoodsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleHotSaleGoodsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleHotSaleGoodsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleHotSaleGoodsData::MergeFrom(const RoleHotSaleGoodsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  goods_list_.MergeFrom(from.goods_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_activity_data_id()) {
      set_last_activity_data_id(from.last_activity_data_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleHotSaleGoodsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleHotSaleGoodsData::CopyFrom(const RoleHotSaleGoodsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleHotSaleGoodsData::IsInitialized() const {

  return true;
}

void RoleHotSaleGoodsData::Swap(RoleHotSaleGoodsData* other) {
  if (other != this) {
    std::swap(last_activity_data_id_, other->last_activity_data_id_);
    goods_list_.Swap(&other->goods_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleHotSaleGoodsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleHotSaleGoodsData_descriptor_;
  metadata.reflection = RoleHotSaleGoodsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleCampRecruitData::kCurDataIdFieldNumber;
const int RoleCampRecruitData::kTodayAlreadyRecruitTimesFieldNumber;
const int RoleCampRecruitData::kCampScoreListFieldNumber;
const int RoleCampRecruitData::kScoreTaskRewardRecordListFieldNumber;
#endif  // !_MSC_VER

RoleCampRecruitData::RoleCampRecruitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleCampRecruitData::InitAsDefaultInstance() {
}

RoleCampRecruitData::RoleCampRecruitData(const RoleCampRecruitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleCampRecruitData::SharedCtor() {
  _cached_size_ = 0;
  cur_data_id_ = 0u;
  today_already_recruit_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleCampRecruitData::~RoleCampRecruitData() {
  SharedDtor();
}

void RoleCampRecruitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleCampRecruitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleCampRecruitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleCampRecruitData_descriptor_;
}

const RoleCampRecruitData& RoleCampRecruitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleCampRecruitData* RoleCampRecruitData::default_instance_ = NULL;

RoleCampRecruitData* RoleCampRecruitData::New() const {
  return new RoleCampRecruitData;
}

void RoleCampRecruitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_data_id_ = 0u;
    today_already_recruit_times_ = 0u;
  }
  camp_score_list_.Clear();
  score_task_reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleCampRecruitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_data_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_data_id_)));
          set_has_cur_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_today_already_recruit_times;
        break;
      }

      // optional uint32 today_already_recruit_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_already_recruit_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_already_recruit_times_)));
          set_has_today_already_recruit_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camp_score_list;
        break;
      }

      // repeated uint32 camp_score_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp_score_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_camp_score_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_camp_score_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_camp_score_list;
        if (input->ExpectTag(32)) goto parse_score_task_reward_record_list;
        break;
      }

      // repeated uint32 score_task_reward_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_task_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_score_task_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_score_task_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_score_task_reward_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleCampRecruitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_data_id = 1;
  if (has_cur_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_data_id(), output);
  }

  // optional uint32 today_already_recruit_times = 2;
  if (has_today_already_recruit_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->today_already_recruit_times(), output);
  }

  // repeated uint32 camp_score_list = 3;
  for (int i = 0; i < this->camp_score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->camp_score_list(i), output);
  }

  // repeated uint32 score_task_reward_record_list = 4;
  for (int i = 0; i < this->score_task_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->score_task_reward_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleCampRecruitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_data_id = 1;
  if (has_cur_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_data_id(), target);
  }

  // optional uint32 today_already_recruit_times = 2;
  if (has_today_already_recruit_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->today_already_recruit_times(), target);
  }

  // repeated uint32 camp_score_list = 3;
  for (int i = 0; i < this->camp_score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->camp_score_list(i), target);
  }

  // repeated uint32 score_task_reward_record_list = 4;
  for (int i = 0; i < this->score_task_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->score_task_reward_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleCampRecruitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_data_id = 1;
    if (has_cur_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_data_id());
    }

    // optional uint32 today_already_recruit_times = 2;
    if (has_today_already_recruit_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_already_recruit_times());
    }

  }
  // repeated uint32 camp_score_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->camp_score_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->camp_score_list(i));
    }
    total_size += 1 * this->camp_score_list_size() + data_size;
  }

  // repeated uint32 score_task_reward_record_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->score_task_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->score_task_reward_record_list(i));
    }
    total_size += 1 * this->score_task_reward_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleCampRecruitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleCampRecruitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleCampRecruitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleCampRecruitData::MergeFrom(const RoleCampRecruitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  camp_score_list_.MergeFrom(from.camp_score_list_);
  score_task_reward_record_list_.MergeFrom(from.score_task_reward_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_data_id()) {
      set_cur_data_id(from.cur_data_id());
    }
    if (from.has_today_already_recruit_times()) {
      set_today_already_recruit_times(from.today_already_recruit_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleCampRecruitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleCampRecruitData::CopyFrom(const RoleCampRecruitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleCampRecruitData::IsInitialized() const {

  return true;
}

void RoleCampRecruitData::Swap(RoleCampRecruitData* other) {
  if (other != this) {
    std::swap(cur_data_id_, other->cur_data_id_);
    std::swap(today_already_recruit_times_, other->today_already_recruit_times_);
    camp_score_list_.Swap(&other->camp_score_list_);
    score_task_reward_record_list_.Swap(&other->score_task_reward_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleCampRecruitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleCampRecruitData_descriptor_;
  metadata.reflection = RoleCampRecruitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlockActivityData::kIsScoreForShopFieldNumber;
const int UnlockActivityData::kWatchingVideoTimesFieldNumber;
#endif  // !_MSC_VER

UnlockActivityData::UnlockActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlockActivityData::InitAsDefaultInstance() {
}

UnlockActivityData::UnlockActivityData(const UnlockActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlockActivityData::SharedCtor() {
  _cached_size_ = 0;
  is_score_for_shop_ = 0u;
  watching_video_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlockActivityData::~UnlockActivityData() {
  SharedDtor();
}

void UnlockActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlockActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlockActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlockActivityData_descriptor_;
}

const UnlockActivityData& UnlockActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

UnlockActivityData* UnlockActivityData::default_instance_ = NULL;

UnlockActivityData* UnlockActivityData::New() const {
  return new UnlockActivityData;
}

void UnlockActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_score_for_shop_ = 0u;
    watching_video_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlockActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 is_score_for_shop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_score_for_shop_)));
          set_has_is_score_for_shop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_watching_video_times;
        break;
      }

      // optional uint32 watching_video_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_watching_video_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &watching_video_times_)));
          set_has_watching_video_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlockActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 is_score_for_shop = 1;
  if (has_is_score_for_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->is_score_for_shop(), output);
  }

  // optional uint32 watching_video_times = 2;
  if (has_watching_video_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->watching_video_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlockActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 is_score_for_shop = 1;
  if (has_is_score_for_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->is_score_for_shop(), target);
  }

  // optional uint32 watching_video_times = 2;
  if (has_watching_video_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->watching_video_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlockActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 is_score_for_shop = 1;
    if (has_is_score_for_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_score_for_shop());
    }

    // optional uint32 watching_video_times = 2;
    if (has_watching_video_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->watching_video_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlockActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlockActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlockActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlockActivityData::MergeFrom(const UnlockActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_score_for_shop()) {
      set_is_score_for_shop(from.is_score_for_shop());
    }
    if (from.has_watching_video_times()) {
      set_watching_video_times(from.watching_video_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlockActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlockActivityData::CopyFrom(const UnlockActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlockActivityData::IsInitialized() const {

  return true;
}

void UnlockActivityData::Swap(UnlockActivityData* other) {
  if (other != this) {
    std::swap(is_score_for_shop_, other->is_score_for_shop_);
    std::swap(watching_video_times_, other->watching_video_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlockActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlockActivityData_descriptor_;
  metadata.reflection = UnlockActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeAndCostRankData::kLastActivityDataIdFieldNumber;
const int RechargeAndCostRankData::kCostDiamondFieldNumber;
const int RechargeAndCostRankData::kRechargeAmountFieldNumber;
#endif  // !_MSC_VER

RechargeAndCostRankData::RechargeAndCostRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeAndCostRankData::InitAsDefaultInstance() {
}

RechargeAndCostRankData::RechargeAndCostRankData(const RechargeAndCostRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeAndCostRankData::SharedCtor() {
  _cached_size_ = 0;
  last_activity_data_id_ = 0u;
  cost_diamond_ = 0u;
  recharge_amount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeAndCostRankData::~RechargeAndCostRankData() {
  SharedDtor();
}

void RechargeAndCostRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RechargeAndCostRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeAndCostRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeAndCostRankData_descriptor_;
}

const RechargeAndCostRankData& RechargeAndCostRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RechargeAndCostRankData* RechargeAndCostRankData::default_instance_ = NULL;

RechargeAndCostRankData* RechargeAndCostRankData::New() const {
  return new RechargeAndCostRankData;
}

void RechargeAndCostRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    last_activity_data_id_ = 0u;
    cost_diamond_ = 0u;
    recharge_amount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeAndCostRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 last_activity_data_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_activity_data_id_)));
          set_has_last_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost_diamond;
        break;
      }

      // optional uint32 cost_diamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_diamond_)));
          set_has_cost_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recharge_amount;
        break;
      }

      // optional uint32 recharge_amount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge_amount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_amount_)));
          set_has_recharge_amount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeAndCostRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 last_activity_data_id = 1;
  if (has_last_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->last_activity_data_id(), output);
  }

  // optional uint32 cost_diamond = 2;
  if (has_cost_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cost_diamond(), output);
  }

  // optional uint32 recharge_amount = 3;
  if (has_recharge_amount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->recharge_amount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeAndCostRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 last_activity_data_id = 1;
  if (has_last_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->last_activity_data_id(), target);
  }

  // optional uint32 cost_diamond = 2;
  if (has_cost_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cost_diamond(), target);
  }

  // optional uint32 recharge_amount = 3;
  if (has_recharge_amount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->recharge_amount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeAndCostRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 last_activity_data_id = 1;
    if (has_last_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_activity_data_id());
    }

    // optional uint32 cost_diamond = 2;
    if (has_cost_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_diamond());
    }

    // optional uint32 recharge_amount = 3;
    if (has_recharge_amount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge_amount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeAndCostRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeAndCostRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeAndCostRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeAndCostRankData::MergeFrom(const RechargeAndCostRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_last_activity_data_id()) {
      set_last_activity_data_id(from.last_activity_data_id());
    }
    if (from.has_cost_diamond()) {
      set_cost_diamond(from.cost_diamond());
    }
    if (from.has_recharge_amount()) {
      set_recharge_amount(from.recharge_amount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeAndCostRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeAndCostRankData::CopyFrom(const RechargeAndCostRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeAndCostRankData::IsInitialized() const {

  return true;
}

void RechargeAndCostRankData::Swap(RechargeAndCostRankData* other) {
  if (other != this) {
    std::swap(last_activity_data_id_, other->last_activity_data_id_);
    std::swap(cost_diamond_, other->cost_diamond_);
    std::swap(recharge_amount_, other->recharge_amount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeAndCostRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeAndCostRankData_descriptor_;
  metadata.reflection = RechargeAndCostRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleActivityData::kTqtDataFieldNumber;
const int RoleActivityData::kYcsDataFieldNumber;
const int RoleActivityData::kSevenDayTargetListFieldNumber;
const int RoleActivityData::kCompletionRewardRecordListFieldNumber;
const int RoleActivityData::kLevelShopActivityDataListFieldNumber;
const int RoleActivityData::kLevelGiftTakeRecordListFieldNumber;
const int RoleActivityData::kVipGiftDataFieldNumber;
const int RoleActivityData::kRechargeDataFieldNumber;
const int RoleActivityData::kOpenServerFundDataFieldNumber;
const int RoleActivityData::kAllPeopleWelfareDataFieldNumber;
const int RoleActivityData::kLimitActivityDataFieldNumber;
const int RoleActivityData::kIsTakeNextDayRewardFieldNumber;
const int RoleActivityData::kSuperDiscountDataFieldNumber;
const int RoleActivityData::kRoleFestivalActivityInfoFieldNumber;
const int RoleActivityData::kRoleAccurateRecommendDataFieldNumber;
const int RoleActivityData::kRoleChristmasDataFieldNumber;
const int RoleActivityData::kOnlineRewardDataFieldNumber;
const int RoleActivityData::kSevenDayLoginDataFieldNumber;
const int RoleActivityData::kFacebookActivityDataFieldNumber;
const int RoleActivityData::kRechargeRewardDataFieldNumber;
const int RoleActivityData::kTotalRechargeRewardDataFieldNumber;
const int RoleActivityData::kNewSuperDiscountDataFieldNumber;
const int RoleActivityData::kRoleHotSaleGoodsFieldNumber;
const int RoleActivityData::kRoleCampRecruitDataFieldNumber;
const int RoleActivityData::kRoleUnlockActivityDataFieldNumber;
const int RoleActivityData::kRoleRechargeAndCostRankDataFieldNumber;
#endif  // !_MSC_VER

RoleActivityData::RoleActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleActivityData::InitAsDefaultInstance() {
  tqt_data_ = const_cast< ::PB::TQTData*>(&::PB::TQTData::default_instance());
  ycs_data_ = const_cast< ::PB::YCSData*>(&::PB::YCSData::default_instance());
  vip_gift_data_ = const_cast< ::PB::VipGiftData*>(&::PB::VipGiftData::default_instance());
  recharge_data_ = const_cast< ::PB::RoleRechargeData*>(&::PB::RoleRechargeData::default_instance());
  open_server_fund_data_ = const_cast< ::PB::OpenServerFundData*>(&::PB::OpenServerFundData::default_instance());
  all_people_welfare_data_ = const_cast< ::PB::AllPeopleWelfareData*>(&::PB::AllPeopleWelfareData::default_instance());
  limit_activity_data_ = const_cast< ::PB::LimitActivityData*>(&::PB::LimitActivityData::default_instance());
  super_discount_data_ = const_cast< ::PB::SuperDiscountData*>(&::PB::SuperDiscountData::default_instance());
  role_festival_activity_info_ = const_cast< ::PB::RoleFestivalActivityInfo*>(&::PB::RoleFestivalActivityInfo::default_instance());
  role_accurate_recommend_data_ = const_cast< ::PB::RoleAccurateRecommendData*>(&::PB::RoleAccurateRecommendData::default_instance());
  role_christmas_data_ = const_cast< ::PB::RoleChristmasData*>(&::PB::RoleChristmasData::default_instance());
  online_reward_data_ = const_cast< ::PB::OnlineRewardData*>(&::PB::OnlineRewardData::default_instance());
  seven_day_login_data_ = const_cast< ::PB::SevenDayLoginData*>(&::PB::SevenDayLoginData::default_instance());
  facebook_activity_data_ = const_cast< ::PB::FacebookActivityData*>(&::PB::FacebookActivityData::default_instance());
  recharge_reward_data_ = const_cast< ::PB::RechargeRewardData*>(&::PB::RechargeRewardData::default_instance());
  total_recharge_reward_data_ = const_cast< ::PB::TotalRechargeRewardData*>(&::PB::TotalRechargeRewardData::default_instance());
  new_super_discount_data_ = const_cast< ::PB::SuperDiscountData*>(&::PB::SuperDiscountData::default_instance());
  role_hot_sale_goods_ = const_cast< ::PB::RoleHotSaleGoodsData*>(&::PB::RoleHotSaleGoodsData::default_instance());
  role_camp_recruit_data_ = const_cast< ::PB::RoleCampRecruitData*>(&::PB::RoleCampRecruitData::default_instance());
  role_unlock_activity_data_ = const_cast< ::PB::UnlockActivityData*>(&::PB::UnlockActivityData::default_instance());
  role_recharge_and_cost_rank_data_ = const_cast< ::PB::RechargeAndCostRankData*>(&::PB::RechargeAndCostRankData::default_instance());
}

RoleActivityData::RoleActivityData(const RoleActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleActivityData::SharedCtor() {
  _cached_size_ = 0;
  tqt_data_ = NULL;
  ycs_data_ = NULL;
  vip_gift_data_ = NULL;
  recharge_data_ = NULL;
  open_server_fund_data_ = NULL;
  all_people_welfare_data_ = NULL;
  limit_activity_data_ = NULL;
  is_take_next_day_reward_ = 0u;
  super_discount_data_ = NULL;
  role_festival_activity_info_ = NULL;
  role_accurate_recommend_data_ = NULL;
  role_christmas_data_ = NULL;
  online_reward_data_ = NULL;
  seven_day_login_data_ = NULL;
  facebook_activity_data_ = NULL;
  recharge_reward_data_ = NULL;
  total_recharge_reward_data_ = NULL;
  new_super_discount_data_ = NULL;
  role_hot_sale_goods_ = NULL;
  role_camp_recruit_data_ = NULL;
  role_unlock_activity_data_ = NULL;
  role_recharge_and_cost_rank_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleActivityData::~RoleActivityData() {
  SharedDtor();
}

void RoleActivityData::SharedDtor() {
  if (this != default_instance_) {
    delete tqt_data_;
    delete ycs_data_;
    delete vip_gift_data_;
    delete recharge_data_;
    delete open_server_fund_data_;
    delete all_people_welfare_data_;
    delete limit_activity_data_;
    delete super_discount_data_;
    delete role_festival_activity_info_;
    delete role_accurate_recommend_data_;
    delete role_christmas_data_;
    delete online_reward_data_;
    delete seven_day_login_data_;
    delete facebook_activity_data_;
    delete recharge_reward_data_;
    delete total_recharge_reward_data_;
    delete new_super_discount_data_;
    delete role_hot_sale_goods_;
    delete role_camp_recruit_data_;
    delete role_unlock_activity_data_;
    delete role_recharge_and_cost_rank_data_;
  }
}

void RoleActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleActivityData_descriptor_;
}

const RoleActivityData& RoleActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleActivityData* RoleActivityData::default_instance_ = NULL;

RoleActivityData* RoleActivityData::New() const {
  return new RoleActivityData;
}

void RoleActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tqt_data()) {
      if (tqt_data_ != NULL) tqt_data_->::PB::TQTData::Clear();
    }
    if (has_ycs_data()) {
      if (ycs_data_ != NULL) ycs_data_->::PB::YCSData::Clear();
    }
    if (has_vip_gift_data()) {
      if (vip_gift_data_ != NULL) vip_gift_data_->::PB::VipGiftData::Clear();
    }
    if (has_recharge_data()) {
      if (recharge_data_ != NULL) recharge_data_->::PB::RoleRechargeData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_open_server_fund_data()) {
      if (open_server_fund_data_ != NULL) open_server_fund_data_->::PB::OpenServerFundData::Clear();
    }
    if (has_all_people_welfare_data()) {
      if (all_people_welfare_data_ != NULL) all_people_welfare_data_->::PB::AllPeopleWelfareData::Clear();
    }
    if (has_limit_activity_data()) {
      if (limit_activity_data_ != NULL) limit_activity_data_->::PB::LimitActivityData::Clear();
    }
    is_take_next_day_reward_ = 0u;
    if (has_super_discount_data()) {
      if (super_discount_data_ != NULL) super_discount_data_->::PB::SuperDiscountData::Clear();
    }
    if (has_role_festival_activity_info()) {
      if (role_festival_activity_info_ != NULL) role_festival_activity_info_->::PB::RoleFestivalActivityInfo::Clear();
    }
    if (has_role_accurate_recommend_data()) {
      if (role_accurate_recommend_data_ != NULL) role_accurate_recommend_data_->::PB::RoleAccurateRecommendData::Clear();
    }
    if (has_role_christmas_data()) {
      if (role_christmas_data_ != NULL) role_christmas_data_->::PB::RoleChristmasData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_online_reward_data()) {
      if (online_reward_data_ != NULL) online_reward_data_->::PB::OnlineRewardData::Clear();
    }
    if (has_seven_day_login_data()) {
      if (seven_day_login_data_ != NULL) seven_day_login_data_->::PB::SevenDayLoginData::Clear();
    }
    if (has_facebook_activity_data()) {
      if (facebook_activity_data_ != NULL) facebook_activity_data_->::PB::FacebookActivityData::Clear();
    }
    if (has_recharge_reward_data()) {
      if (recharge_reward_data_ != NULL) recharge_reward_data_->::PB::RechargeRewardData::Clear();
    }
    if (has_total_recharge_reward_data()) {
      if (total_recharge_reward_data_ != NULL) total_recharge_reward_data_->::PB::TotalRechargeRewardData::Clear();
    }
    if (has_new_super_discount_data()) {
      if (new_super_discount_data_ != NULL) new_super_discount_data_->::PB::SuperDiscountData::Clear();
    }
    if (has_role_hot_sale_goods()) {
      if (role_hot_sale_goods_ != NULL) role_hot_sale_goods_->::PB::RoleHotSaleGoodsData::Clear();
    }
    if (has_role_camp_recruit_data()) {
      if (role_camp_recruit_data_ != NULL) role_camp_recruit_data_->::PB::RoleCampRecruitData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_role_unlock_activity_data()) {
      if (role_unlock_activity_data_ != NULL) role_unlock_activity_data_->::PB::UnlockActivityData::Clear();
    }
    if (has_role_recharge_and_cost_rank_data()) {
      if (role_recharge_and_cost_rank_data_ != NULL) role_recharge_and_cost_rank_data_->::PB::RechargeAndCostRankData::Clear();
    }
  }
  seven_day_target_list_.Clear();
  completion_reward_record_list_.Clear();
  level_shop_activity_data_list_.Clear();
  level_gift_take_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.TQTData tqt_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tqt_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ycs_data;
        break;
      }

      // optional .PB.YCSData ycs_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ycs_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ycs_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seven_day_target_list;
        break;
      }

      // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_day_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seven_day_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seven_day_target_list;
        if (input->ExpectTag(32)) goto parse_completion_reward_record_list;
        break;
      }

      // repeated uint32 completion_reward_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completion_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_completion_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_completion_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_completion_reward_record_list;
        if (input->ExpectTag(42)) goto parse_level_shop_activity_data_list;
        break;
      }

      // repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_level_shop_activity_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_level_shop_activity_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_level_shop_activity_data_list;
        if (input->ExpectTag(48)) goto parse_level_gift_take_record_list;
        break;
      }

      // repeated uint32 level_gift_take_record_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level_gift_take_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_level_gift_take_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_level_gift_take_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level_gift_take_record_list;
        if (input->ExpectTag(58)) goto parse_vip_gift_data;
        break;
      }

      // optional .PB.VipGiftData vip_gift_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip_gift_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip_gift_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_recharge_data;
        break;
      }

      // optional .PB.RoleRechargeData recharge_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_open_server_fund_data;
        break;
      }

      // optional .PB.OpenServerFundData open_server_fund_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_open_server_fund_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open_server_fund_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_all_people_welfare_data;
        break;
      }

      // optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_people_welfare_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_people_welfare_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_limit_activity_data;
        break;
      }

      // optional .PB.LimitActivityData limit_activity_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limit_activity_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limit_activity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_take_next_day_reward;
        break;
      }

      // optional uint32 is_take_next_day_reward = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_next_day_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_next_day_reward_)));
          set_has_is_take_next_day_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_super_discount_data;
        break;
      }

      // optional .PB.SuperDiscountData super_discount_data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_super_discount_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_super_discount_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_role_festival_activity_info;
        break;
      }

      // optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_festival_activity_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_festival_activity_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_role_accurate_recommend_data;
        break;
      }

      // optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_accurate_recommend_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_accurate_recommend_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_role_christmas_data;
        break;
      }

      // optional .PB.RoleChristmasData role_christmas_data = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_christmas_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_christmas_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_online_reward_data;
        break;
      }

      // optional .PB.OnlineRewardData online_reward_data = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_seven_day_login_data;
        break;
      }

      // optional .PB.SevenDayLoginData seven_day_login_data = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seven_day_login_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seven_day_login_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_facebook_activity_data;
        break;
      }

      // optional .PB.FacebookActivityData facebook_activity_data = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facebook_activity_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facebook_activity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_recharge_reward_data;
        break;
      }

      // optional .PB.RechargeRewardData recharge_reward_data = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recharge_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recharge_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_total_recharge_reward_data;
        break;
      }

      // optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_recharge_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_recharge_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_new_super_discount_data;
        break;
      }

      // optional .PB.SuperDiscountData new_super_discount_data = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_super_discount_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_super_discount_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_role_hot_sale_goods;
        break;
      }

      // optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_hot_sale_goods:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_hot_sale_goods()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_role_camp_recruit_data;
        break;
      }

      // optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_camp_recruit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_camp_recruit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_role_unlock_activity_data;
        break;
      }

      // optional .PB.UnlockActivityData role_unlock_activity_data = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_unlock_activity_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_unlock_activity_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_role_recharge_and_cost_rank_data;
        break;
      }

      // optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_recharge_and_cost_rank_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_recharge_and_cost_rank_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.TQTData tqt_data = 1;
  if (has_tqt_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tqt_data(), output);
  }

  // optional .PB.YCSData ycs_data = 2;
  if (has_ycs_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ycs_data(), output);
  }

  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->seven_day_target_list(i), output);
  }

  // repeated uint32 completion_reward_record_list = 4;
  for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->completion_reward_record_list(i), output);
  }

  // repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
  for (int i = 0; i < this->level_shop_activity_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->level_shop_activity_data_list(i), output);
  }

  // repeated uint32 level_gift_take_record_list = 6;
  for (int i = 0; i < this->level_gift_take_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->level_gift_take_record_list(i), output);
  }

  // optional .PB.VipGiftData vip_gift_data = 7;
  if (has_vip_gift_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->vip_gift_data(), output);
  }

  // optional .PB.RoleRechargeData recharge_data = 8;
  if (has_recharge_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->recharge_data(), output);
  }

  // optional .PB.OpenServerFundData open_server_fund_data = 9;
  if (has_open_server_fund_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->open_server_fund_data(), output);
  }

  // optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
  if (has_all_people_welfare_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->all_people_welfare_data(), output);
  }

  // optional .PB.LimitActivityData limit_activity_data = 11;
  if (has_limit_activity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->limit_activity_data(), output);
  }

  // optional uint32 is_take_next_day_reward = 12;
  if (has_is_take_next_day_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_take_next_day_reward(), output);
  }

  // optional .PB.SuperDiscountData super_discount_data = 13;
  if (has_super_discount_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->super_discount_data(), output);
  }

  // optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
  if (has_role_festival_activity_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->role_festival_activity_info(), output);
  }

  // optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
  if (has_role_accurate_recommend_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->role_accurate_recommend_data(), output);
  }

  // optional .PB.RoleChristmasData role_christmas_data = 16;
  if (has_role_christmas_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->role_christmas_data(), output);
  }

  // optional .PB.OnlineRewardData online_reward_data = 17;
  if (has_online_reward_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->online_reward_data(), output);
  }

  // optional .PB.SevenDayLoginData seven_day_login_data = 18;
  if (has_seven_day_login_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->seven_day_login_data(), output);
  }

  // optional .PB.FacebookActivityData facebook_activity_data = 19;
  if (has_facebook_activity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->facebook_activity_data(), output);
  }

  // optional .PB.RechargeRewardData recharge_reward_data = 20;
  if (has_recharge_reward_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->recharge_reward_data(), output);
  }

  // optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
  if (has_total_recharge_reward_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->total_recharge_reward_data(), output);
  }

  // optional .PB.SuperDiscountData new_super_discount_data = 22;
  if (has_new_super_discount_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->new_super_discount_data(), output);
  }

  // optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
  if (has_role_hot_sale_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->role_hot_sale_goods(), output);
  }

  // optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
  if (has_role_camp_recruit_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->role_camp_recruit_data(), output);
  }

  // optional .PB.UnlockActivityData role_unlock_activity_data = 25;
  if (has_role_unlock_activity_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->role_unlock_activity_data(), output);
  }

  // optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
  if (has_role_recharge_and_cost_rank_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->role_recharge_and_cost_rank_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.TQTData tqt_data = 1;
  if (has_tqt_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tqt_data(), target);
  }

  // optional .PB.YCSData ycs_data = 2;
  if (has_ycs_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ycs_data(), target);
  }

  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->seven_day_target_list(i), target);
  }

  // repeated uint32 completion_reward_record_list = 4;
  for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->completion_reward_record_list(i), target);
  }

  // repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
  for (int i = 0; i < this->level_shop_activity_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->level_shop_activity_data_list(i), target);
  }

  // repeated uint32 level_gift_take_record_list = 6;
  for (int i = 0; i < this->level_gift_take_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->level_gift_take_record_list(i), target);
  }

  // optional .PB.VipGiftData vip_gift_data = 7;
  if (has_vip_gift_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->vip_gift_data(), target);
  }

  // optional .PB.RoleRechargeData recharge_data = 8;
  if (has_recharge_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->recharge_data(), target);
  }

  // optional .PB.OpenServerFundData open_server_fund_data = 9;
  if (has_open_server_fund_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->open_server_fund_data(), target);
  }

  // optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
  if (has_all_people_welfare_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->all_people_welfare_data(), target);
  }

  // optional .PB.LimitActivityData limit_activity_data = 11;
  if (has_limit_activity_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->limit_activity_data(), target);
  }

  // optional uint32 is_take_next_day_reward = 12;
  if (has_is_take_next_day_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->is_take_next_day_reward(), target);
  }

  // optional .PB.SuperDiscountData super_discount_data = 13;
  if (has_super_discount_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->super_discount_data(), target);
  }

  // optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
  if (has_role_festival_activity_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->role_festival_activity_info(), target);
  }

  // optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
  if (has_role_accurate_recommend_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->role_accurate_recommend_data(), target);
  }

  // optional .PB.RoleChristmasData role_christmas_data = 16;
  if (has_role_christmas_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->role_christmas_data(), target);
  }

  // optional .PB.OnlineRewardData online_reward_data = 17;
  if (has_online_reward_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->online_reward_data(), target);
  }

  // optional .PB.SevenDayLoginData seven_day_login_data = 18;
  if (has_seven_day_login_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->seven_day_login_data(), target);
  }

  // optional .PB.FacebookActivityData facebook_activity_data = 19;
  if (has_facebook_activity_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->facebook_activity_data(), target);
  }

  // optional .PB.RechargeRewardData recharge_reward_data = 20;
  if (has_recharge_reward_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->recharge_reward_data(), target);
  }

  // optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
  if (has_total_recharge_reward_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->total_recharge_reward_data(), target);
  }

  // optional .PB.SuperDiscountData new_super_discount_data = 22;
  if (has_new_super_discount_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->new_super_discount_data(), target);
  }

  // optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
  if (has_role_hot_sale_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->role_hot_sale_goods(), target);
  }

  // optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
  if (has_role_camp_recruit_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->role_camp_recruit_data(), target);
  }

  // optional .PB.UnlockActivityData role_unlock_activity_data = 25;
  if (has_role_unlock_activity_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->role_unlock_activity_data(), target);
  }

  // optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
  if (has_role_recharge_and_cost_rank_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->role_recharge_and_cost_rank_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.TQTData tqt_data = 1;
    if (has_tqt_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tqt_data());
    }

    // optional .PB.YCSData ycs_data = 2;
    if (has_ycs_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ycs_data());
    }

    // optional .PB.VipGiftData vip_gift_data = 7;
    if (has_vip_gift_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip_gift_data());
    }

    // optional .PB.RoleRechargeData recharge_data = 8;
    if (has_recharge_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PB.OpenServerFundData open_server_fund_data = 9;
    if (has_open_server_fund_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open_server_fund_data());
    }

    // optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
    if (has_all_people_welfare_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_people_welfare_data());
    }

    // optional .PB.LimitActivityData limit_activity_data = 11;
    if (has_limit_activity_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limit_activity_data());
    }

    // optional uint32 is_take_next_day_reward = 12;
    if (has_is_take_next_day_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_next_day_reward());
    }

    // optional .PB.SuperDiscountData super_discount_data = 13;
    if (has_super_discount_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->super_discount_data());
    }

    // optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
    if (has_role_festival_activity_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_festival_activity_info());
    }

    // optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
    if (has_role_accurate_recommend_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_accurate_recommend_data());
    }

    // optional .PB.RoleChristmasData role_christmas_data = 16;
    if (has_role_christmas_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_christmas_data());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PB.OnlineRewardData online_reward_data = 17;
    if (has_online_reward_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online_reward_data());
    }

    // optional .PB.SevenDayLoginData seven_day_login_data = 18;
    if (has_seven_day_login_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seven_day_login_data());
    }

    // optional .PB.FacebookActivityData facebook_activity_data = 19;
    if (has_facebook_activity_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facebook_activity_data());
    }

    // optional .PB.RechargeRewardData recharge_reward_data = 20;
    if (has_recharge_reward_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recharge_reward_data());
    }

    // optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
    if (has_total_recharge_reward_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_recharge_reward_data());
    }

    // optional .PB.SuperDiscountData new_super_discount_data = 22;
    if (has_new_super_discount_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_super_discount_data());
    }

    // optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
    if (has_role_hot_sale_goods()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_hot_sale_goods());
    }

    // optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
    if (has_role_camp_recruit_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_camp_recruit_data());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PB.UnlockActivityData role_unlock_activity_data = 25;
    if (has_role_unlock_activity_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_unlock_activity_data());
    }

    // optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
    if (has_role_recharge_and_cost_rank_data()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_recharge_and_cost_rank_data());
    }

  }
  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  total_size += 1 * this->seven_day_target_list_size();
  for (int i = 0; i < this->seven_day_target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seven_day_target_list(i));
  }

  // repeated uint32 completion_reward_record_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->completion_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->completion_reward_record_list(i));
    }
    total_size += 1 * this->completion_reward_record_list_size() + data_size;
  }

  // repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
  total_size += 1 * this->level_shop_activity_data_list_size();
  for (int i = 0; i < this->level_shop_activity_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->level_shop_activity_data_list(i));
  }

  // repeated uint32 level_gift_take_record_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_gift_take_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->level_gift_take_record_list(i));
    }
    total_size += 1 * this->level_gift_take_record_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleActivityData::MergeFrom(const RoleActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  seven_day_target_list_.MergeFrom(from.seven_day_target_list_);
  completion_reward_record_list_.MergeFrom(from.completion_reward_record_list_);
  level_shop_activity_data_list_.MergeFrom(from.level_shop_activity_data_list_);
  level_gift_take_record_list_.MergeFrom(from.level_gift_take_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tqt_data()) {
      mutable_tqt_data()->::PB::TQTData::MergeFrom(from.tqt_data());
    }
    if (from.has_ycs_data()) {
      mutable_ycs_data()->::PB::YCSData::MergeFrom(from.ycs_data());
    }
    if (from.has_vip_gift_data()) {
      mutable_vip_gift_data()->::PB::VipGiftData::MergeFrom(from.vip_gift_data());
    }
    if (from.has_recharge_data()) {
      mutable_recharge_data()->::PB::RoleRechargeData::MergeFrom(from.recharge_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_open_server_fund_data()) {
      mutable_open_server_fund_data()->::PB::OpenServerFundData::MergeFrom(from.open_server_fund_data());
    }
    if (from.has_all_people_welfare_data()) {
      mutable_all_people_welfare_data()->::PB::AllPeopleWelfareData::MergeFrom(from.all_people_welfare_data());
    }
    if (from.has_limit_activity_data()) {
      mutable_limit_activity_data()->::PB::LimitActivityData::MergeFrom(from.limit_activity_data());
    }
    if (from.has_is_take_next_day_reward()) {
      set_is_take_next_day_reward(from.is_take_next_day_reward());
    }
    if (from.has_super_discount_data()) {
      mutable_super_discount_data()->::PB::SuperDiscountData::MergeFrom(from.super_discount_data());
    }
    if (from.has_role_festival_activity_info()) {
      mutable_role_festival_activity_info()->::PB::RoleFestivalActivityInfo::MergeFrom(from.role_festival_activity_info());
    }
    if (from.has_role_accurate_recommend_data()) {
      mutable_role_accurate_recommend_data()->::PB::RoleAccurateRecommendData::MergeFrom(from.role_accurate_recommend_data());
    }
    if (from.has_role_christmas_data()) {
      mutable_role_christmas_data()->::PB::RoleChristmasData::MergeFrom(from.role_christmas_data());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_online_reward_data()) {
      mutable_online_reward_data()->::PB::OnlineRewardData::MergeFrom(from.online_reward_data());
    }
    if (from.has_seven_day_login_data()) {
      mutable_seven_day_login_data()->::PB::SevenDayLoginData::MergeFrom(from.seven_day_login_data());
    }
    if (from.has_facebook_activity_data()) {
      mutable_facebook_activity_data()->::PB::FacebookActivityData::MergeFrom(from.facebook_activity_data());
    }
    if (from.has_recharge_reward_data()) {
      mutable_recharge_reward_data()->::PB::RechargeRewardData::MergeFrom(from.recharge_reward_data());
    }
    if (from.has_total_recharge_reward_data()) {
      mutable_total_recharge_reward_data()->::PB::TotalRechargeRewardData::MergeFrom(from.total_recharge_reward_data());
    }
    if (from.has_new_super_discount_data()) {
      mutable_new_super_discount_data()->::PB::SuperDiscountData::MergeFrom(from.new_super_discount_data());
    }
    if (from.has_role_hot_sale_goods()) {
      mutable_role_hot_sale_goods()->::PB::RoleHotSaleGoodsData::MergeFrom(from.role_hot_sale_goods());
    }
    if (from.has_role_camp_recruit_data()) {
      mutable_role_camp_recruit_data()->::PB::RoleCampRecruitData::MergeFrom(from.role_camp_recruit_data());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_role_unlock_activity_data()) {
      mutable_role_unlock_activity_data()->::PB::UnlockActivityData::MergeFrom(from.role_unlock_activity_data());
    }
    if (from.has_role_recharge_and_cost_rank_data()) {
      mutable_role_recharge_and_cost_rank_data()->::PB::RechargeAndCostRankData::MergeFrom(from.role_recharge_and_cost_rank_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleActivityData::CopyFrom(const RoleActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleActivityData::IsInitialized() const {

  return true;
}

void RoleActivityData::Swap(RoleActivityData* other) {
  if (other != this) {
    std::swap(tqt_data_, other->tqt_data_);
    std::swap(ycs_data_, other->ycs_data_);
    seven_day_target_list_.Swap(&other->seven_day_target_list_);
    completion_reward_record_list_.Swap(&other->completion_reward_record_list_);
    level_shop_activity_data_list_.Swap(&other->level_shop_activity_data_list_);
    level_gift_take_record_list_.Swap(&other->level_gift_take_record_list_);
    std::swap(vip_gift_data_, other->vip_gift_data_);
    std::swap(recharge_data_, other->recharge_data_);
    std::swap(open_server_fund_data_, other->open_server_fund_data_);
    std::swap(all_people_welfare_data_, other->all_people_welfare_data_);
    std::swap(limit_activity_data_, other->limit_activity_data_);
    std::swap(is_take_next_day_reward_, other->is_take_next_day_reward_);
    std::swap(super_discount_data_, other->super_discount_data_);
    std::swap(role_festival_activity_info_, other->role_festival_activity_info_);
    std::swap(role_accurate_recommend_data_, other->role_accurate_recommend_data_);
    std::swap(role_christmas_data_, other->role_christmas_data_);
    std::swap(online_reward_data_, other->online_reward_data_);
    std::swap(seven_day_login_data_, other->seven_day_login_data_);
    std::swap(facebook_activity_data_, other->facebook_activity_data_);
    std::swap(recharge_reward_data_, other->recharge_reward_data_);
    std::swap(total_recharge_reward_data_, other->total_recharge_reward_data_);
    std::swap(new_super_discount_data_, other->new_super_discount_data_);
    std::swap(role_hot_sale_goods_, other->role_hot_sale_goods_);
    std::swap(role_camp_recruit_data_, other->role_camp_recruit_data_);
    std::swap(role_unlock_activity_data_, other->role_unlock_activity_data_);
    std::swap(role_recharge_and_cost_rank_data_, other->role_recharge_and_cost_rank_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleActivityData_descriptor_;
  metadata.reflection = RoleActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandPatrolEvent::kEventIdFieldNumber;
const int LandPatrolEvent::kHappenTimeFieldNumber;
const int LandPatrolEvent::kIsDoubleRewardFieldNumber;
#endif  // !_MSC_VER

LandPatrolEvent::LandPatrolEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandPatrolEvent::InitAsDefaultInstance() {
}

LandPatrolEvent::LandPatrolEvent(const LandPatrolEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandPatrolEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  happen_time_ = 0u;
  is_double_reward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandPatrolEvent::~LandPatrolEvent() {
  SharedDtor();
}

void LandPatrolEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LandPatrolEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandPatrolEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandPatrolEvent_descriptor_;
}

const LandPatrolEvent& LandPatrolEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LandPatrolEvent* LandPatrolEvent::default_instance_ = NULL;

LandPatrolEvent* LandPatrolEvent::New() const {
  return new LandPatrolEvent;
}

void LandPatrolEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    happen_time_ = 0u;
    is_double_reward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandPatrolEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_happen_time;
        break;
      }

      // optional uint32 happen_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_happen_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &happen_time_)));
          set_has_happen_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_double_reward;
        break;
      }

      // optional uint32 is_double_reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_double_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_double_reward_)));
          set_has_is_double_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandPatrolEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional uint32 happen_time = 2;
  if (has_happen_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->happen_time(), output);
  }

  // optional uint32 is_double_reward = 3;
  if (has_is_double_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->is_double_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandPatrolEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional uint32 happen_time = 2;
  if (has_happen_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->happen_time(), target);
  }

  // optional uint32 is_double_reward = 3;
  if (has_is_double_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->is_double_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandPatrolEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 happen_time = 2;
    if (has_happen_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->happen_time());
    }

    // optional uint32 is_double_reward = 3;
    if (has_is_double_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_double_reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandPatrolEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandPatrolEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandPatrolEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandPatrolEvent::MergeFrom(const LandPatrolEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_happen_time()) {
      set_happen_time(from.happen_time());
    }
    if (from.has_is_double_reward()) {
      set_is_double_reward(from.is_double_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandPatrolEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandPatrolEvent::CopyFrom(const LandPatrolEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandPatrolEvent::IsInitialized() const {

  return true;
}

void LandPatrolEvent::Swap(LandPatrolEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(happen_time_, other->happen_time_);
    std::swap(is_double_reward_, other->is_double_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandPatrolEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandPatrolEvent_descriptor_;
  metadata.reflection = LandPatrolEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LandCityData::kCityIdFieldNumber;
const int LandCityData::kSkillLevelFieldNumber;
const int LandCityData::kPatrolHeroInfoIdFieldNumber;
const int LandCityData::kStartPatrolTimeFieldNumber;
const int LandCityData::kPatrolTypeFieldNumber;
const int LandCityData::kTimeTypeFieldNumber;
const int LandCityData::kIsRiotFieldNumber;
const int LandCityData::kIsTakeRewardFieldNumber;
const int LandCityData::kRewardItemNumFieldNumber;
const int LandCityData::kLastHappenEventTimeFieldNumber;
const int LandCityData::kIntervalTimeFieldNumber;
const int LandCityData::kPatrolEventListFieldNumber;
const int LandCityData::kRiotEventListFieldNumber;
#endif  // !_MSC_VER

LandCityData::LandCityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LandCityData::InitAsDefaultInstance() {
  patrol_event_list_ = const_cast< ::PB::LandPatrolEvent*>(&::PB::LandPatrolEvent::default_instance());
  riot_event_list_ = const_cast< ::PB::LandPatrolEvent*>(&::PB::LandPatrolEvent::default_instance());
}

LandCityData::LandCityData(const LandCityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LandCityData::SharedCtor() {
  _cached_size_ = 0;
  city_id_ = 0u;
  skill_level_ = 0u;
  patrol_hero_info_id_ = 0u;
  start_patrol_time_ = 0u;
  patrol_type_ = 0u;
  time_type_ = 0u;
  is_riot_ = 0u;
  is_take_reward_ = 0u;
  reward_item_num_ = 0u;
  last_happen_event_time_ = 0u;
  interval_time_ = 0u;
  patrol_event_list_ = NULL;
  riot_event_list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LandCityData::~LandCityData() {
  SharedDtor();
}

void LandCityData::SharedDtor() {
  if (this != default_instance_) {
    delete patrol_event_list_;
    delete riot_event_list_;
  }
}

void LandCityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LandCityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LandCityData_descriptor_;
}

const LandCityData& LandCityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

LandCityData* LandCityData::default_instance_ = NULL;

LandCityData* LandCityData::New() const {
  return new LandCityData;
}

void LandCityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    city_id_ = 0u;
    skill_level_ = 0u;
    patrol_hero_info_id_ = 0u;
    start_patrol_time_ = 0u;
    patrol_type_ = 0u;
    time_type_ = 0u;
    is_riot_ = 0u;
    is_take_reward_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    reward_item_num_ = 0u;
    last_happen_event_time_ = 0u;
    interval_time_ = 0u;
    if (has_patrol_event_list()) {
      if (patrol_event_list_ != NULL) patrol_event_list_->::PB::LandPatrolEvent::Clear();
    }
    if (has_riot_event_list()) {
      if (riot_event_list_ != NULL) riot_event_list_->::PB::LandPatrolEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LandCityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 city_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &city_id_)));
          set_has_city_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_level;
        break;
      }

      // optional uint32 skill_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
          set_has_skill_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_patrol_hero_info_id;
        break;
      }

      // optional uint32 patrol_hero_info_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patrol_hero_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrol_hero_info_id_)));
          set_has_patrol_hero_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_start_patrol_time;
        break;
      }

      // optional uint32 start_patrol_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_patrol_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_patrol_time_)));
          set_has_start_patrol_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_patrol_type;
        break;
      }

      // optional uint32 patrol_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patrol_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrol_type_)));
          set_has_patrol_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time_type;
        break;
      }

      // optional uint32 time_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_type_)));
          set_has_time_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_riot;
        break;
      }

      // optional uint32 is_riot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_riot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_riot_)));
          set_has_is_riot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_take_reward;
        break;
      }

      // optional uint32 is_take_reward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_take_reward_)));
          set_has_is_take_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_reward_item_num;
        break;
      }

      // optional uint32 reward_item_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_item_num_)));
          set_has_reward_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_last_happen_event_time;
        break;
      }

      // optional uint32 last_happen_event_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_happen_event_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_happen_event_time_)));
          set_has_last_happen_event_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_interval_time;
        break;
      }

      // optional uint32 interval_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_time_)));
          set_has_interval_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_patrol_event_list;
        break;
      }

      // optional .PB.LandPatrolEvent patrol_event_list = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patrol_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patrol_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_riot_event_list;
        break;
      }

      // optional .PB.LandPatrolEvent riot_event_list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_riot_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_riot_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LandCityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->city_id(), output);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_level(), output);
  }

  // optional uint32 patrol_hero_info_id = 3;
  if (has_patrol_hero_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->patrol_hero_info_id(), output);
  }

  // optional uint32 start_patrol_time = 4;
  if (has_start_patrol_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_patrol_time(), output);
  }

  // optional uint32 patrol_type = 5;
  if (has_patrol_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->patrol_type(), output);
  }

  // optional uint32 time_type = 6;
  if (has_time_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time_type(), output);
  }

  // optional uint32 is_riot = 7;
  if (has_is_riot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->is_riot(), output);
  }

  // optional uint32 is_take_reward = 8;
  if (has_is_take_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_take_reward(), output);
  }

  // optional uint32 reward_item_num = 9;
  if (has_reward_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->reward_item_num(), output);
  }

  // optional uint32 last_happen_event_time = 10;
  if (has_last_happen_event_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->last_happen_event_time(), output);
  }

  // optional uint32 interval_time = 11;
  if (has_interval_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->interval_time(), output);
  }

  // optional .PB.LandPatrolEvent patrol_event_list = 12;
  if (has_patrol_event_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->patrol_event_list(), output);
  }

  // optional .PB.LandPatrolEvent riot_event_list = 13;
  if (has_riot_event_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->riot_event_list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LandCityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 city_id = 1;
  if (has_city_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->city_id(), target);
  }

  // optional uint32 skill_level = 2;
  if (has_skill_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_level(), target);
  }

  // optional uint32 patrol_hero_info_id = 3;
  if (has_patrol_hero_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->patrol_hero_info_id(), target);
  }

  // optional uint32 start_patrol_time = 4;
  if (has_start_patrol_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_patrol_time(), target);
  }

  // optional uint32 patrol_type = 5;
  if (has_patrol_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->patrol_type(), target);
  }

  // optional uint32 time_type = 6;
  if (has_time_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time_type(), target);
  }

  // optional uint32 is_riot = 7;
  if (has_is_riot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->is_riot(), target);
  }

  // optional uint32 is_take_reward = 8;
  if (has_is_take_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_take_reward(), target);
  }

  // optional uint32 reward_item_num = 9;
  if (has_reward_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->reward_item_num(), target);
  }

  // optional uint32 last_happen_event_time = 10;
  if (has_last_happen_event_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->last_happen_event_time(), target);
  }

  // optional uint32 interval_time = 11;
  if (has_interval_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->interval_time(), target);
  }

  // optional .PB.LandPatrolEvent patrol_event_list = 12;
  if (has_patrol_event_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->patrol_event_list(), target);
  }

  // optional .PB.LandPatrolEvent riot_event_list = 13;
  if (has_riot_event_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->riot_event_list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LandCityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 city_id = 1;
    if (has_city_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->city_id());
    }

    // optional uint32 skill_level = 2;
    if (has_skill_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 patrol_hero_info_id = 3;
    if (has_patrol_hero_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrol_hero_info_id());
    }

    // optional uint32 start_patrol_time = 4;
    if (has_start_patrol_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_patrol_time());
    }

    // optional uint32 patrol_type = 5;
    if (has_patrol_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrol_type());
    }

    // optional uint32 time_type = 6;
    if (has_time_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_type());
    }

    // optional uint32 is_riot = 7;
    if (has_is_riot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_riot());
    }

    // optional uint32 is_take_reward = 8;
    if (has_is_take_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_take_reward());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 reward_item_num = 9;
    if (has_reward_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_item_num());
    }

    // optional uint32 last_happen_event_time = 10;
    if (has_last_happen_event_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_happen_event_time());
    }

    // optional uint32 interval_time = 11;
    if (has_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval_time());
    }

    // optional .PB.LandPatrolEvent patrol_event_list = 12;
    if (has_patrol_event_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patrol_event_list());
    }

    // optional .PB.LandPatrolEvent riot_event_list = 13;
    if (has_riot_event_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->riot_event_list());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LandCityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LandCityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LandCityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LandCityData::MergeFrom(const LandCityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_city_id()) {
      set_city_id(from.city_id());
    }
    if (from.has_skill_level()) {
      set_skill_level(from.skill_level());
    }
    if (from.has_patrol_hero_info_id()) {
      set_patrol_hero_info_id(from.patrol_hero_info_id());
    }
    if (from.has_start_patrol_time()) {
      set_start_patrol_time(from.start_patrol_time());
    }
    if (from.has_patrol_type()) {
      set_patrol_type(from.patrol_type());
    }
    if (from.has_time_type()) {
      set_time_type(from.time_type());
    }
    if (from.has_is_riot()) {
      set_is_riot(from.is_riot());
    }
    if (from.has_is_take_reward()) {
      set_is_take_reward(from.is_take_reward());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reward_item_num()) {
      set_reward_item_num(from.reward_item_num());
    }
    if (from.has_last_happen_event_time()) {
      set_last_happen_event_time(from.last_happen_event_time());
    }
    if (from.has_interval_time()) {
      set_interval_time(from.interval_time());
    }
    if (from.has_patrol_event_list()) {
      mutable_patrol_event_list()->::PB::LandPatrolEvent::MergeFrom(from.patrol_event_list());
    }
    if (from.has_riot_event_list()) {
      mutable_riot_event_list()->::PB::LandPatrolEvent::MergeFrom(from.riot_event_list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LandCityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LandCityData::CopyFrom(const LandCityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LandCityData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LandCityData::Swap(LandCityData* other) {
  if (other != this) {
    std::swap(city_id_, other->city_id_);
    std::swap(skill_level_, other->skill_level_);
    std::swap(patrol_hero_info_id_, other->patrol_hero_info_id_);
    std::swap(start_patrol_time_, other->start_patrol_time_);
    std::swap(patrol_type_, other->patrol_type_);
    std::swap(time_type_, other->time_type_);
    std::swap(is_riot_, other->is_riot_);
    std::swap(is_take_reward_, other->is_take_reward_);
    std::swap(reward_item_num_, other->reward_item_num_);
    std::swap(last_happen_event_time_, other->last_happen_event_time_);
    std::swap(interval_time_, other->interval_time_);
    std::swap(patrol_event_list_, other->patrol_event_list_);
    std::swap(riot_event_list_, other->riot_event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LandCityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LandCityData_descriptor_;
  metadata.reflection = LandCityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBaseData::kGuildIdFieldNumber;
const int GuildBaseData::kServerIdFieldNumber;
const int GuildBaseData::kGuildNameFieldNumber;
const int GuildBaseData::kIconIdFieldNumber;
const int GuildBaseData::kCreateTimeFieldNumber;
const int GuildBaseData::kLevelFieldNumber;
const int GuildBaseData::kExpFieldNumber;
const int GuildBaseData::kQsFieldNumber;
const int GuildBaseData::kQyTimesFieldNumber;
const int GuildBaseData::kNoticeFieldNumber;
const int GuildBaseData::kDeclarationFieldNumber;
const int GuildBaseData::kCurPassChapterFieldNumber;
const int GuildBaseData::kTodayStartChapterFieldNumber;
const int GuildBaseData::kHistoryChapterRecordFieldNumber;
const int GuildBaseData::kIsFromHistoryChapterFieldNumber;
const int GuildBaseData::kActiveFieldNumber;
#endif  // !_MSC_VER

GuildBaseData::GuildBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildBaseData::InitAsDefaultInstance() {
}

GuildBaseData::GuildBaseData(const GuildBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildBaseData::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  server_id_ = 0u;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_id_ = 0u;
  create_time_ = 0u;
  level_ = 0u;
  exp_ = 0u;
  qs_ = 0u;
  qy_times_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cur_pass_chapter_ = 0u;
  today_start_chapter_ = 0u;
  history_chapter_record_ = 0u;
  is_from_history_chapter_ = 0u;
  active_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBaseData::~GuildBaseData() {
  SharedDtor();
}

void GuildBaseData::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void GuildBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBaseData_descriptor_;
}

const GuildBaseData& GuildBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildBaseData* GuildBaseData::default_instance_ = NULL;

GuildBaseData* GuildBaseData::New() const {
  return new GuildBaseData;
}

void GuildBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    server_id_ = 0u;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    icon_id_ = 0u;
    create_time_ = 0u;
    level_ = 0u;
    exp_ = 0u;
    qs_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    qy_times_ = 0u;
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    cur_pass_chapter_ = 0u;
    today_start_chapter_ = 0u;
    history_chapter_record_ = 0u;
    is_from_history_chapter_ = 0u;
    active_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon_id;
        break;
      }

      // optional uint32 icon_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_id_)));
          set_has_icon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_qs;
        break;
      }

      // optional uint32 qs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qs_)));
          set_has_qs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_qy_times;
        break;
      }

      // optional uint32 qy_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qy_times_)));
          set_has_qy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_notice;
        break;
      }

      // optional string notice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_declaration;
        break;
      }

      // optional string declaration = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cur_pass_chapter;
        break;
      }

      // optional uint32 cur_pass_chapter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_pass_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_pass_chapter_)));
          set_has_cur_pass_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_today_start_chapter;
        break;
      }

      // optional uint32 today_start_chapter = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_start_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_start_chapter_)));
          set_has_today_start_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_history_chapter_record;
        break;
      }

      // optional uint32 history_chapter_record = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_history_chapter_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &history_chapter_record_)));
          set_has_history_chapter_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_from_history_chapter;
        break;
      }

      // optional uint32 is_from_history_chapter = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_from_history_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_from_history_chapter_)));
          set_has_is_from_history_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_active;
        break;
      }

      // optional uint32 active = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guild_name(), output);
  }

  // optional uint32 icon_id = 4;
  if (has_icon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->icon_id(), output);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->create_time(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // optional uint32 qs = 8;
  if (has_qs()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->qs(), output);
  }

  // optional uint32 qy_times = 9;
  if (has_qy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->qy_times(), output);
  }

  // optional string notice = 10;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->notice(), output);
  }

  // optional string declaration = 11;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->declaration(), output);
  }

  // optional uint32 cur_pass_chapter = 12;
  if (has_cur_pass_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cur_pass_chapter(), output);
  }

  // optional uint32 today_start_chapter = 13;
  if (has_today_start_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->today_start_chapter(), output);
  }

  // optional uint32 history_chapter_record = 14;
  if (has_history_chapter_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->history_chapter_record(), output);
  }

  // optional uint32 is_from_history_chapter = 15;
  if (has_is_from_history_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->is_from_history_chapter(), output);
  }

  // optional uint32 active = 16;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional string guild_name = 3;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guild_name(), target);
  }

  // optional uint32 icon_id = 4;
  if (has_icon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->icon_id(), target);
  }

  // optional uint32 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->create_time(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->exp(), target);
  }

  // optional uint32 qs = 8;
  if (has_qs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->qs(), target);
  }

  // optional uint32 qy_times = 9;
  if (has_qy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->qy_times(), target);
  }

  // optional string notice = 10;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->notice(), target);
  }

  // optional string declaration = 11;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->declaration(), target);
  }

  // optional uint32 cur_pass_chapter = 12;
  if (has_cur_pass_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cur_pass_chapter(), target);
  }

  // optional uint32 today_start_chapter = 13;
  if (has_today_start_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->today_start_chapter(), target);
  }

  // optional uint32 history_chapter_record = 14;
  if (has_history_chapter_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->history_chapter_record(), target);
  }

  // optional uint32 is_from_history_chapter = 15;
  if (has_is_from_history_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->is_from_history_chapter(), target);
  }

  // optional uint32 active = 16;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string guild_name = 3;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional uint32 icon_id = 4;
    if (has_icon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon_id());
    }

    // optional uint32 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 qs = 8;
    if (has_qs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qs());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 qy_times = 9;
    if (has_qy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qy_times());
    }

    // optional string notice = 10;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional string declaration = 11;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // optional uint32 cur_pass_chapter = 12;
    if (has_cur_pass_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_pass_chapter());
    }

    // optional uint32 today_start_chapter = 13;
    if (has_today_start_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_start_chapter());
    }

    // optional uint32 history_chapter_record = 14;
    if (has_history_chapter_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->history_chapter_record());
    }

    // optional uint32 is_from_history_chapter = 15;
    if (has_is_from_history_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_from_history_chapter());
    }

    // optional uint32 active = 16;
    if (has_active()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBaseData::MergeFrom(const GuildBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_icon_id()) {
      set_icon_id(from.icon_id());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_qs()) {
      set_qs(from.qs());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_qy_times()) {
      set_qy_times(from.qy_times());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_cur_pass_chapter()) {
      set_cur_pass_chapter(from.cur_pass_chapter());
    }
    if (from.has_today_start_chapter()) {
      set_today_start_chapter(from.today_start_chapter());
    }
    if (from.has_history_chapter_record()) {
      set_history_chapter_record(from.history_chapter_record());
    }
    if (from.has_is_from_history_chapter()) {
      set_is_from_history_chapter(from.is_from_history_chapter());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBaseData::CopyFrom(const GuildBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildBaseData::Swap(GuildBaseData* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(icon_id_, other->icon_id_);
    std::swap(create_time_, other->create_time_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(qs_, other->qs_);
    std::swap(qy_times_, other->qy_times_);
    std::swap(notice_, other->notice_);
    std::swap(declaration_, other->declaration_);
    std::swap(cur_pass_chapter_, other->cur_pass_chapter_);
    std::swap(today_start_chapter_, other->today_start_chapter_);
    std::swap(history_chapter_record_, other->history_chapter_record_);
    std::swap(is_from_history_chapter_, other->is_from_history_chapter_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBaseData_descriptor_;
  metadata.reflection = GuildBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMember::kRoleIdFieldNumber;
const int GuildMember::kPositionFieldNumber;
const int GuildMember::kTotalContributionFieldNumber;
const int GuildMember::kCurContributionFieldNumber;
const int GuildMember::kTodayContributionFieldNumber;
const int GuildMember::kLastLogoutTimeFieldNumber;
const int GuildMember::kQyTypeFieldNumber;
const int GuildMember::kBattleFbTimesFieldNumber;
const int GuildMember::kBuyBattleFbTimesFieldNumber;
const int GuildMember::kQsRewardRecordListFieldNumber;
const int GuildMember::kBattleTimesLastRecoverTimeFieldNumber;
const int GuildMember::kTakeChapterRewardRecordFieldNumber;
#endif  // !_MSC_VER

GuildMember::GuildMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMember::InitAsDefaultInstance() {
}

GuildMember::GuildMember(const GuildMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMember::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  position_ = 0u;
  total_contribution_ = 0u;
  cur_contribution_ = 0u;
  today_contribution_ = 0u;
  last_logout_time_ = 0u;
  qy_type_ = 0u;
  battle_fb_times_ = 0u;
  buy_battle_fb_times_ = 0u;
  battle_times_last_recover_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMember::~GuildMember() {
  SharedDtor();
}

void GuildMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMember_descriptor_;
}

const GuildMember& GuildMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildMember* GuildMember::default_instance_ = NULL;

GuildMember* GuildMember::New() const {
  return new GuildMember;
}

void GuildMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    position_ = 0u;
    total_contribution_ = 0u;
    cur_contribution_ = 0u;
    today_contribution_ = 0u;
    last_logout_time_ = 0u;
    qy_type_ = 0u;
    battle_fb_times_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    buy_battle_fb_times_ = 0u;
    battle_times_last_recover_time_ = 0u;
  }
  qs_reward_record_list_.Clear();
  take_chapter_reward_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_contribution;
        break;
      }

      // optional uint32 total_contribution = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contribution_)));
          set_has_total_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_contribution;
        break;
      }

      // optional uint32 cur_contribution = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_contribution_)));
          set_has_cur_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_contribution;
        break;
      }

      // optional uint32 today_contribution = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_contribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_contribution_)));
          set_has_today_contribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_logout_time;
        break;
      }

      // optional uint32 last_logout_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_logout_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_logout_time_)));
          set_has_last_logout_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_qy_type;
        break;
      }

      // optional uint32 qy_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qy_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &qy_type_)));
          set_has_qy_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battle_fb_times;
        break;
      }

      // optional uint32 battle_fb_times = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_fb_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_fb_times_)));
          set_has_battle_fb_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_buy_battle_fb_times;
        break;
      }

      // optional uint32 buy_battle_fb_times = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_battle_fb_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_battle_fb_times_)));
          set_has_buy_battle_fb_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_qs_reward_record_list;
        break;
      }

      // repeated uint32 qs_reward_record_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qs_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_qs_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_qs_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_qs_reward_record_list;
        if (input->ExpectTag(88)) goto parse_battle_times_last_recover_time;
        break;
      }

      // optional uint32 battle_times_last_recover_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times_last_recover_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_last_recover_time_)));
          set_has_battle_times_last_recover_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_take_chapter_reward_record;
        break;
      }

      // repeated uint32 take_chapter_reward_record = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_chapter_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 96, input, this->mutable_take_chapter_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_take_chapter_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_take_chapter_reward_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // optional uint32 total_contribution = 3;
  if (has_total_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_contribution(), output);
  }

  // optional uint32 cur_contribution = 4;
  if (has_cur_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_contribution(), output);
  }

  // optional uint32 today_contribution = 5;
  if (has_today_contribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_contribution(), output);
  }

  // optional uint32 last_logout_time = 6;
  if (has_last_logout_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->last_logout_time(), output);
  }

  // optional uint32 qy_type = 7;
  if (has_qy_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->qy_type(), output);
  }

  // optional uint32 battle_fb_times = 8;
  if (has_battle_fb_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battle_fb_times(), output);
  }

  // optional uint32 buy_battle_fb_times = 9;
  if (has_buy_battle_fb_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->buy_battle_fb_times(), output);
  }

  // repeated uint32 qs_reward_record_list = 10;
  for (int i = 0; i < this->qs_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->qs_reward_record_list(i), output);
  }

  // optional uint32 battle_times_last_recover_time = 11;
  if (has_battle_times_last_recover_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->battle_times_last_recover_time(), output);
  }

  // repeated uint32 take_chapter_reward_record = 12;
  for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      12, this->take_chapter_reward_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // optional uint32 total_contribution = 3;
  if (has_total_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_contribution(), target);
  }

  // optional uint32 cur_contribution = 4;
  if (has_cur_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_contribution(), target);
  }

  // optional uint32 today_contribution = 5;
  if (has_today_contribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_contribution(), target);
  }

  // optional uint32 last_logout_time = 6;
  if (has_last_logout_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->last_logout_time(), target);
  }

  // optional uint32 qy_type = 7;
  if (has_qy_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->qy_type(), target);
  }

  // optional uint32 battle_fb_times = 8;
  if (has_battle_fb_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->battle_fb_times(), target);
  }

  // optional uint32 buy_battle_fb_times = 9;
  if (has_buy_battle_fb_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->buy_battle_fb_times(), target);
  }

  // repeated uint32 qs_reward_record_list = 10;
  for (int i = 0; i < this->qs_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(10, this->qs_reward_record_list(i), target);
  }

  // optional uint32 battle_times_last_recover_time = 11;
  if (has_battle_times_last_recover_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->battle_times_last_recover_time(), target);
  }

  // repeated uint32 take_chapter_reward_record = 12;
  for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(12, this->take_chapter_reward_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional uint32 total_contribution = 3;
    if (has_total_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contribution());
    }

    // optional uint32 cur_contribution = 4;
    if (has_cur_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_contribution());
    }

    // optional uint32 today_contribution = 5;
    if (has_today_contribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_contribution());
    }

    // optional uint32 last_logout_time = 6;
    if (has_last_logout_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_logout_time());
    }

    // optional uint32 qy_type = 7;
    if (has_qy_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->qy_type());
    }

    // optional uint32 battle_fb_times = 8;
    if (has_battle_fb_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_fb_times());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 buy_battle_fb_times = 9;
    if (has_buy_battle_fb_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_battle_fb_times());
    }

    // optional uint32 battle_times_last_recover_time = 11;
    if (has_battle_times_last_recover_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times_last_recover_time());
    }

  }
  // repeated uint32 qs_reward_record_list = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->qs_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->qs_reward_record_list(i));
    }
    total_size += 1 * this->qs_reward_record_list_size() + data_size;
  }

  // repeated uint32 take_chapter_reward_record = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_chapter_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->take_chapter_reward_record(i));
    }
    total_size += 1 * this->take_chapter_reward_record_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMember::MergeFrom(const GuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  qs_reward_record_list_.MergeFrom(from.qs_reward_record_list_);
  take_chapter_reward_record_.MergeFrom(from.take_chapter_reward_record_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_total_contribution()) {
      set_total_contribution(from.total_contribution());
    }
    if (from.has_cur_contribution()) {
      set_cur_contribution(from.cur_contribution());
    }
    if (from.has_today_contribution()) {
      set_today_contribution(from.today_contribution());
    }
    if (from.has_last_logout_time()) {
      set_last_logout_time(from.last_logout_time());
    }
    if (from.has_qy_type()) {
      set_qy_type(from.qy_type());
    }
    if (from.has_battle_fb_times()) {
      set_battle_fb_times(from.battle_fb_times());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buy_battle_fb_times()) {
      set_buy_battle_fb_times(from.buy_battle_fb_times());
    }
    if (from.has_battle_times_last_recover_time()) {
      set_battle_times_last_recover_time(from.battle_times_last_recover_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMember::CopyFrom(const GuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildMember::Swap(GuildMember* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(position_, other->position_);
    std::swap(total_contribution_, other->total_contribution_);
    std::swap(cur_contribution_, other->cur_contribution_);
    std::swap(today_contribution_, other->today_contribution_);
    std::swap(last_logout_time_, other->last_logout_time_);
    std::swap(qy_type_, other->qy_type_);
    std::swap(battle_fb_times_, other->battle_fb_times_);
    std::swap(buy_battle_fb_times_, other->buy_battle_fb_times_);
    qs_reward_record_list_.Swap(&other->qs_reward_record_list_);
    std::swap(battle_times_last_recover_time_, other->battle_times_last_recover_time_);
    take_chapter_reward_record_.Swap(&other->take_chapter_reward_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMember_descriptor_;
  metadata.reflection = GuildMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildEvent::kEventIdFieldNumber;
const int GuildEvent::kTargetNameFieldNumber;
const int GuildEvent::kValueFieldNumber;
const int GuildEvent::kTimeFieldNumber;
#endif  // !_MSC_VER

GuildEvent::GuildEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildEvent::InitAsDefaultInstance() {
}

GuildEvent::GuildEvent(const GuildEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildEvent::SharedCtor() {
  _cached_size_ = 0;
  event_id_ = 0u;
  target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildEvent::~GuildEvent() {
  SharedDtor();
}

void GuildEvent::SharedDtor() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildEvent_descriptor_;
}

const GuildEvent& GuildEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildEvent* GuildEvent::default_instance_ = NULL;

GuildEvent* GuildEvent::New() const {
  return new GuildEvent;
}

void GuildEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_id_ = 0u;
    if (has_target_name()) {
      if (target_name_ != &::google::protobuf::internal::kEmptyString) {
        target_name_->clear();
      }
    }
    value_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 event_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
          set_has_event_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_target_name;
        break;
      }

      // optional string target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_name().data(), this->target_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->event_id(), output);
  }

  // optional string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->target_name(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 event_id = 1;
  if (has_event_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->event_id(), target);
  }

  // optional string target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_name().data(), this->target_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->target_name(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 event_id = 1;
    if (has_event_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional string target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_name());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildEvent::MergeFrom(const GuildEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_id()) {
      set_event_id(from.event_id());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildEvent::CopyFrom(const GuildEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GuildEvent::Swap(GuildEvent* other) {
  if (other != this) {
    std::swap(event_id_, other->event_id_);
    std::swap(target_name_, other->target_name_);
    std::swap(value_, other->value_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildEvent_descriptor_;
  metadata.reflection = GuildEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildLeaveMessage::kTimeFieldNumber;
const int GuildLeaveMessage::kNameFieldNumber;
const int GuildLeaveMessage::kPositionFieldNumber;
const int GuildLeaveMessage::kTextFieldNumber;
#endif  // !_MSC_VER

GuildLeaveMessage::GuildLeaveMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildLeaveMessage::InitAsDefaultInstance() {
}

GuildLeaveMessage::GuildLeaveMessage(const GuildLeaveMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildLeaveMessage::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildLeaveMessage::~GuildLeaveMessage() {
  SharedDtor();
}

void GuildLeaveMessage::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void GuildLeaveMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildLeaveMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildLeaveMessage_descriptor_;
}

const GuildLeaveMessage& GuildLeaveMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildLeaveMessage* GuildLeaveMessage::default_instance_ = NULL;

GuildLeaveMessage* GuildLeaveMessage::New() const {
  return new GuildLeaveMessage;
}

void GuildLeaveMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    position_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildLeaveMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // optional uint32 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // optional string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildLeaveMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->position(), output);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildLeaveMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->position(), target);
  }

  // optional string text = 4;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildLeaveMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildLeaveMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildLeaveMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildLeaveMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildLeaveMessage::MergeFrom(const GuildLeaveMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildLeaveMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildLeaveMessage::CopyFrom(const GuildLeaveMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildLeaveMessage::IsInitialized() const {

  return true;
}

void GuildLeaveMessage::Swap(GuildLeaveMessage* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(position_, other->position_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildLeaveMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildLeaveMessage_descriptor_;
  metadata.reflection = GuildLeaveMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRecord::kRoleIdFieldNumber;
const int ChatRecord::kHeadImgIdFieldNumber;
const int ChatRecord::kRoleVipLevelFieldNumber;
const int ChatRecord::kRoleNameFieldNumber;
const int ChatRecord::kChatTextFieldNumber;
const int ChatRecord::kTimeFieldNumber;
const int ChatRecord::kRoleUseTitleIdFieldNumber;
#endif  // !_MSC_VER

ChatRecord::ChatRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatRecord::InitAsDefaultInstance() {
}

ChatRecord::ChatRecord(const ChatRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatRecord::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  head_img_id_ = 0u;
  role_vip_level_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  role_use_title_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRecord::~ChatRecord() {
  SharedDtor();
}

void ChatRecord::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (chat_text_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_text_;
  }
  if (this != default_instance_) {
  }
}

void ChatRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRecord_descriptor_;
}

const ChatRecord& ChatRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ChatRecord* ChatRecord::default_instance_ = NULL;

ChatRecord* ChatRecord::New() const {
  return new ChatRecord;
}

void ChatRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    head_img_id_ = 0u;
    role_vip_level_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    if (has_chat_text()) {
      if (chat_text_ != &::google::protobuf::internal::kEmptyString) {
        chat_text_->clear();
      }
    }
    time_ = 0u;
    role_use_title_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_head_img_id;
        break;
      }

      // optional uint32 head_img_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_img_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_img_id_)));
          set_has_head_img_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_vip_level;
        break;
      }

      // optional uint32 role_vip_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_vip_level_)));
          set_has_role_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_name;
        break;
      }

      // optional string role_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_chat_text;
        break;
      }

      // optional string chat_text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chat_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->chat_text().data(), this->chat_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_role_use_title_id;
        break;
      }

      // optional uint32 role_use_title_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_use_title_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_use_title_id_)));
          set_has_role_use_title_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 head_img_id = 2;
  if (has_head_img_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->head_img_id(), output);
  }

  // optional uint32 role_vip_level = 3;
  if (has_role_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_vip_level(), output);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->role_name(), output);
  }

  // optional string chat_text = 5;
  if (has_chat_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_text().data(), this->chat_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->chat_text(), output);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 role_use_title_id = 7;
  if (has_role_use_title_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->role_use_title_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 head_img_id = 2;
  if (has_head_img_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->head_img_id(), target);
  }

  // optional uint32 role_vip_level = 3;
  if (has_role_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_vip_level(), target);
  }

  // optional string role_name = 4;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->role_name(), target);
  }

  // optional string chat_text = 5;
  if (has_chat_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->chat_text().data(), this->chat_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->chat_text(), target);
  }

  // optional uint32 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 role_use_title_id = 7;
  if (has_role_use_title_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->role_use_title_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 head_img_id = 2;
    if (has_head_img_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_img_id());
    }

    // optional uint32 role_vip_level = 3;
    if (has_role_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_vip_level());
    }

    // optional string role_name = 4;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional string chat_text = 5;
    if (has_chat_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chat_text());
    }

    // optional uint32 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 role_use_title_id = 7;
    if (has_role_use_title_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_use_title_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRecord::MergeFrom(const ChatRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_head_img_id()) {
      set_head_img_id(from.head_img_id());
    }
    if (from.has_role_vip_level()) {
      set_role_vip_level(from.role_vip_level());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_chat_text()) {
      set_chat_text(from.chat_text());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_role_use_title_id()) {
      set_role_use_title_id(from.role_use_title_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRecord::CopyFrom(const ChatRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRecord::IsInitialized() const {

  return true;
}

void ChatRecord::Swap(ChatRecord* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(head_img_id_, other->head_img_id_);
    std::swap(role_vip_level_, other->role_vip_level_);
    std::swap(role_name_, other->role_name_);
    std::swap(chat_text_, other->chat_text_);
    std::swap(time_, other->time_);
    std::swap(role_use_title_id_, other->role_use_title_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRecord_descriptor_;
  metadata.reflection = ChatRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCampMonster::kCampFieldNumber;
const int GuildCampMonster::kKillerNameFieldNumber;
const int GuildCampMonster::kMonsterListFieldNumber;
#endif  // !_MSC_VER

GuildCampMonster::GuildCampMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCampMonster::InitAsDefaultInstance() {
}

GuildCampMonster::GuildCampMonster(const GuildCampMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCampMonster::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0u;
  killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCampMonster::~GuildCampMonster() {
  SharedDtor();
}

void GuildCampMonster::SharedDtor() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildCampMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCampMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCampMonster_descriptor_;
}

const GuildCampMonster& GuildCampMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildCampMonster* GuildCampMonster::default_instance_ = NULL;

GuildCampMonster* GuildCampMonster::New() const {
  return new GuildCampMonster;
}

void GuildCampMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0u;
    if (has_killer_name()) {
      if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
        killer_name_->clear();
      }
    }
  }
  monster_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCampMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_killer_name;
        break;
      }

      // optional string killer_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer_name().data(), this->killer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster_list;
        break;
      }

      // repeated .PB.MonsterData monster_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_monster_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCampMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp(), output);
  }

  // optional string killer_name = 2;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->killer_name(), output);
  }

  // repeated .PB.MonsterData monster_list = 3;
  for (int i = 0; i < this->monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->monster_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCampMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp(), target);
  }

  // optional string killer_name = 2;
  if (has_killer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer_name().data(), this->killer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->killer_name(), target);
  }

  // repeated .PB.MonsterData monster_list = 3;
  for (int i = 0; i < this->monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->monster_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCampMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

    // optional string killer_name = 2;
    if (has_killer_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer_name());
    }

  }
  // repeated .PB.MonsterData monster_list = 3;
  total_size += 1 * this->monster_list_size();
  for (int i = 0; i < this->monster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCampMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCampMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCampMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCampMonster::MergeFrom(const GuildCampMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_list_.MergeFrom(from.monster_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_killer_name()) {
      set_killer_name(from.killer_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCampMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCampMonster::CopyFrom(const GuildCampMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCampMonster::IsInitialized() const {

  for (int i = 0; i < monster_list_size(); i++) {
    if (!this->monster_list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildCampMonster::Swap(GuildCampMonster* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    std::swap(killer_name_, other->killer_name_);
    monster_list_.Swap(&other->monster_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCampMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCampMonster_descriptor_;
  metadata.reflection = GuildCampMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildFBBox::kBoxIdxFieldNumber;
const int GuildFBBox::kBoxRewardIdxFieldNumber;
const int GuildFBBox::kRoleNameFieldNumber;
#endif  // !_MSC_VER

GuildFBBox::GuildFBBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildFBBox::InitAsDefaultInstance() {
}

GuildFBBox::GuildFBBox(const GuildFBBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildFBBox::SharedCtor() {
  _cached_size_ = 0;
  box_idx_ = 0u;
  box_reward_idx_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildFBBox::~GuildFBBox() {
  SharedDtor();
}

void GuildFBBox::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void GuildFBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildFBBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildFBBox_descriptor_;
}

const GuildFBBox& GuildFBBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildFBBox* GuildFBBox::default_instance_ = NULL;

GuildFBBox* GuildFBBox::New() const {
  return new GuildFBBox;
}

void GuildFBBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    box_idx_ = 0u;
    box_reward_idx_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildFBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 box_idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_idx_)));
          set_has_box_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_box_reward_idx;
        break;
      }

      // optional uint32 box_reward_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_box_reward_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &box_reward_idx_)));
          set_has_box_reward_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_role_name;
        break;
      }

      // optional string role_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildFBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 box_idx = 1;
  if (has_box_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->box_idx(), output);
  }

  // optional uint32 box_reward_idx = 2;
  if (has_box_reward_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->box_reward_idx(), output);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->role_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildFBBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 box_idx = 1;
  if (has_box_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->box_idx(), target);
  }

  // optional uint32 box_reward_idx = 2;
  if (has_box_reward_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->box_reward_idx(), target);
  }

  // optional string role_name = 3;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->role_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildFBBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 box_idx = 1;
    if (has_box_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->box_idx());
    }

    // optional uint32 box_reward_idx = 2;
    if (has_box_reward_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->box_reward_idx());
    }

    // optional string role_name = 3;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildFBBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildFBBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildFBBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildFBBox::MergeFrom(const GuildFBBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_box_idx()) {
      set_box_idx(from.box_idx());
    }
    if (from.has_box_reward_idx()) {
      set_box_reward_idx(from.box_reward_idx());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildFBBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildFBBox::CopyFrom(const GuildFBBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildFBBox::IsInitialized() const {

  return true;
}

void GuildFBBox::Swap(GuildFBBox* other) {
  if (other != this) {
    std::swap(box_idx_, other->box_idx_);
    std::swap(box_reward_idx_, other->box_reward_idx_);
    std::swap(role_name_, other->role_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildFBBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildFBBox_descriptor_;
  metadata.reflection = GuildFBBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCampBox::kCampFieldNumber;
const int GuildCampBox::kTakeBoxRecordListFieldNumber;
const int GuildCampBox::kTakeRewardPlayerListFieldNumber;
#endif  // !_MSC_VER

GuildCampBox::GuildCampBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildCampBox::InitAsDefaultInstance() {
}

GuildCampBox::GuildCampBox(const GuildCampBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildCampBox::SharedCtor() {
  _cached_size_ = 0;
  camp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCampBox::~GuildCampBox() {
  SharedDtor();
}

void GuildCampBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildCampBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCampBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCampBox_descriptor_;
}

const GuildCampBox& GuildCampBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildCampBox* GuildCampBox::default_instance_ = NULL;

GuildCampBox* GuildCampBox::New() const {
  return new GuildCampBox;
}

void GuildCampBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    camp_ = 0u;
  }
  take_box_record_list_.Clear();
  take_reward_player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCampBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_take_box_record_list;
        break;
      }

      // repeated .PB.GuildFBBox take_box_record_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_take_box_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_take_box_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_take_box_record_list;
        if (input->ExpectTag(24)) goto parse_take_reward_player_list;
        break;
      }

      // repeated uint32 take_reward_player_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_take_reward_player_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_take_reward_player_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_take_reward_player_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_take_reward_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildCampBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 camp = 1;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camp(), output);
  }

  // repeated .PB.GuildFBBox take_box_record_list = 2;
  for (int i = 0; i < this->take_box_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->take_box_record_list(i), output);
  }

  // repeated uint32 take_reward_player_list = 3;
  for (int i = 0; i < this->take_reward_player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->take_reward_player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildCampBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 camp = 1;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camp(), target);
  }

  // repeated .PB.GuildFBBox take_box_record_list = 2;
  for (int i = 0; i < this->take_box_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->take_box_record_list(i), target);
  }

  // repeated uint32 take_reward_player_list = 3;
  for (int i = 0; i < this->take_reward_player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->take_reward_player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildCampBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 camp = 1;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

  }
  // repeated .PB.GuildFBBox take_box_record_list = 2;
  total_size += 1 * this->take_box_record_list_size();
  for (int i = 0; i < this->take_box_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->take_box_record_list(i));
  }

  // repeated uint32 take_reward_player_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->take_reward_player_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->take_reward_player_list(i));
    }
    total_size += 1 * this->take_reward_player_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCampBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCampBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCampBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCampBox::MergeFrom(const GuildCampBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  take_box_record_list_.MergeFrom(from.take_box_record_list_);
  take_reward_player_list_.MergeFrom(from.take_reward_player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_camp()) {
      set_camp(from.camp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCampBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCampBox::CopyFrom(const GuildCampBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCampBox::IsInitialized() const {

  return true;
}

void GuildCampBox::Swap(GuildCampBox* other) {
  if (other != this) {
    std::swap(camp_, other->camp_);
    take_box_record_list_.Swap(&other->take_box_record_list_);
    take_reward_player_list_.Swap(&other->take_reward_player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCampBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCampBox_descriptor_;
  metadata.reflection = GuildCampBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMapRewardRecord::kChapterFieldNumber;
const int GuildMapRewardRecord::kCampBoxListFieldNumber;
#endif  // !_MSC_VER

GuildMapRewardRecord::GuildMapRewardRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMapRewardRecord::InitAsDefaultInstance() {
}

GuildMapRewardRecord::GuildMapRewardRecord(const GuildMapRewardRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMapRewardRecord::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMapRewardRecord::~GuildMapRewardRecord() {
  SharedDtor();
}

void GuildMapRewardRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMapRewardRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMapRewardRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMapRewardRecord_descriptor_;
}

const GuildMapRewardRecord& GuildMapRewardRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildMapRewardRecord* GuildMapRewardRecord::default_instance_ = NULL;

GuildMapRewardRecord* GuildMapRewardRecord::New() const {
  return new GuildMapRewardRecord;
}

void GuildMapRewardRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0u;
  }
  camp_box_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMapRewardRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camp_box_list;
        break;
      }

      // repeated .PB.GuildCampBox camp_box_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_box_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_box_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_camp_box_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMapRewardRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter(), output);
  }

  // repeated .PB.GuildCampBox camp_box_list = 2;
  for (int i = 0; i < this->camp_box_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->camp_box_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMapRewardRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter(), target);
  }

  // repeated .PB.GuildCampBox camp_box_list = 2;
  for (int i = 0; i < this->camp_box_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->camp_box_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMapRewardRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter());
    }

  }
  // repeated .PB.GuildCampBox camp_box_list = 2;
  total_size += 1 * this->camp_box_list_size();
  for (int i = 0; i < this->camp_box_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_box_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMapRewardRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMapRewardRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMapRewardRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMapRewardRecord::MergeFrom(const GuildMapRewardRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  camp_box_list_.MergeFrom(from.camp_box_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMapRewardRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMapRewardRecord::CopyFrom(const GuildMapRewardRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMapRewardRecord::IsInitialized() const {

  return true;
}

void GuildMapRewardRecord::Swap(GuildMapRewardRecord* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    camp_box_list_.Swap(&other->camp_box_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMapRewardRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMapRewardRecord_descriptor_;
  metadata.reflection = GuildMapRewardRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMonsterDamageRecord::kRoleIdFieldNumber;
const int GuildMonsterDamageRecord::kDamageFieldNumber;
#endif  // !_MSC_VER

GuildMonsterDamageRecord::GuildMonsterDamageRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildMonsterDamageRecord::InitAsDefaultInstance() {
}

GuildMonsterDamageRecord::GuildMonsterDamageRecord(const GuildMonsterDamageRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildMonsterDamageRecord::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMonsterDamageRecord::~GuildMonsterDamageRecord() {
  SharedDtor();
}

void GuildMonsterDamageRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMonsterDamageRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMonsterDamageRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMonsterDamageRecord_descriptor_;
}

const GuildMonsterDamageRecord& GuildMonsterDamageRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildMonsterDamageRecord* GuildMonsterDamageRecord::default_instance_ = NULL;

GuildMonsterDamageRecord* GuildMonsterDamageRecord::New() const {
  return new GuildMonsterDamageRecord;
}

void GuildMonsterDamageRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMonsterDamageRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildMonsterDamageRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildMonsterDamageRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildMonsterDamageRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMonsterDamageRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMonsterDamageRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMonsterDamageRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMonsterDamageRecord::MergeFrom(const GuildMonsterDamageRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMonsterDamageRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMonsterDamageRecord::CopyFrom(const GuildMonsterDamageRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMonsterDamageRecord::IsInitialized() const {

  return true;
}

void GuildMonsterDamageRecord::Swap(GuildMonsterDamageRecord* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMonsterDamageRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMonsterDamageRecord_descriptor_;
  metadata.reflection = GuildMonsterDamageRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kBaseDataFieldNumber;
const int GuildInfo::kMemberListFieldNumber;
const int GuildInfo::kLeaveMessageListFieldNumber;
const int GuildInfo::kEventListFieldNumber;
const int GuildInfo::kSkillListFieldNumber;
const int GuildInfo::kApplyListFieldNumber;
const int GuildInfo::kGoodsListFieldNumber;
const int GuildInfo::kChatRecordListFieldNumber;
const int GuildInfo::kDamageRecordListFieldNumber;
const int GuildInfo::kCampMonsterListFieldNumber;
const int GuildInfo::kMapRewardRecordListFieldNumber;
const int GuildInfo::kCreateMonsterTimeFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildInfo::InitAsDefaultInstance() {
  base_data_ = const_cast< ::PB::GuildBaseData*>(&::PB::GuildBaseData::default_instance());
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildInfo::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  create_monster_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (this != default_instance_) {
    delete base_data_;
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::PB::GuildBaseData::Clear();
    }
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    create_monster_time_ = 0u;
  }
  member_list_.Clear();
  leave_message_list_.Clear();
  event_list_.Clear();
  skill_list_.Clear();
  apply_list_.Clear();
  goods_list_.Clear();
  chat_record_list_.Clear();
  damage_record_list_.Clear();
  camp_monster_list_.Clear();
  map_reward_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PB.GuildBaseData base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        break;
      }

      // repeated .PB.GuildMember member_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member_list;
        if (input->ExpectTag(26)) goto parse_leave_message_list;
        break;
      }

      // repeated .PB.GuildLeaveMessage leave_message_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leave_message_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leave_message_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_leave_message_list;
        if (input->ExpectTag(34)) goto parse_event_list;
        break;
      }

      // repeated .PB.GuildEvent event_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_event_list;
        if (input->ExpectTag(42)) goto parse_skill_list;
        break;
      }

      // repeated .PB.SkillData skill_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skill_list;
        if (input->ExpectTag(48)) goto parse_apply_list;
        break;
      }

      // repeated uint32 apply_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_apply_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_apply_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_list;
        if (input->ExpectTag(58)) goto parse_goods_list;
        break;
      }

      // repeated .PB.ShopGoods goods_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goods_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_goods_list;
        if (input->ExpectTag(66)) goto parse_chat_record_list;
        break;
      }

      // repeated .PB.ChatRecord chat_record_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chat_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_chat_record_list;
        if (input->ExpectTag(74)) goto parse_damage_record_list;
        break;
      }

      // repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damage_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damage_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_damage_record_list;
        if (input->ExpectTag(82)) goto parse_camp_monster_list;
        break;
      }

      // repeated .PB.GuildCampMonster camp_monster_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_camp_monster_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_camp_monster_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_camp_monster_list;
        if (input->ExpectTag(90)) goto parse_map_reward_record_list;
        break;
      }

      // repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_reward_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_map_reward_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_map_reward_record_list;
        if (input->ExpectTag(96)) goto parse_create_monster_time;
        break;
      }

      // optional uint32 create_monster_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_monster_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_monster_time_)));
          set_has_create_monster_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PB.GuildBaseData base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // repeated .PB.GuildMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member_list(i), output);
  }

  // repeated .PB.GuildLeaveMessage leave_message_list = 3;
  for (int i = 0; i < this->leave_message_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leave_message_list(i), output);
  }

  // repeated .PB.GuildEvent event_list = 4;
  for (int i = 0; i < this->event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->event_list(i), output);
  }

  // repeated .PB.SkillData skill_list = 5;
  for (int i = 0; i < this->skill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skill_list(i), output);
  }

  // repeated uint32 apply_list = 6;
  for (int i = 0; i < this->apply_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->apply_list(i), output);
  }

  // repeated .PB.ShopGoods goods_list = 7;
  for (int i = 0; i < this->goods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->goods_list(i), output);
  }

  // repeated .PB.ChatRecord chat_record_list = 8;
  for (int i = 0; i < this->chat_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->chat_record_list(i), output);
  }

  // repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
  for (int i = 0; i < this->damage_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->damage_record_list(i), output);
  }

  // repeated .PB.GuildCampMonster camp_monster_list = 10;
  for (int i = 0; i < this->camp_monster_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->camp_monster_list(i), output);
  }

  // repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
  for (int i = 0; i < this->map_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->map_reward_record_list(i), output);
  }

  // optional uint32 create_monster_time = 12;
  if (has_create_monster_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->create_monster_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PB.GuildBaseData base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // repeated .PB.GuildMember member_list = 2;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member_list(i), target);
  }

  // repeated .PB.GuildLeaveMessage leave_message_list = 3;
  for (int i = 0; i < this->leave_message_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leave_message_list(i), target);
  }

  // repeated .PB.GuildEvent event_list = 4;
  for (int i = 0; i < this->event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->event_list(i), target);
  }

  // repeated .PB.SkillData skill_list = 5;
  for (int i = 0; i < this->skill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skill_list(i), target);
  }

  // repeated uint32 apply_list = 6;
  for (int i = 0; i < this->apply_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->apply_list(i), target);
  }

  // repeated .PB.ShopGoods goods_list = 7;
  for (int i = 0; i < this->goods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->goods_list(i), target);
  }

  // repeated .PB.ChatRecord chat_record_list = 8;
  for (int i = 0; i < this->chat_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->chat_record_list(i), target);
  }

  // repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
  for (int i = 0; i < this->damage_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->damage_record_list(i), target);
  }

  // repeated .PB.GuildCampMonster camp_monster_list = 10;
  for (int i = 0; i < this->camp_monster_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->camp_monster_list(i), target);
  }

  // repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
  for (int i = 0; i < this->map_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->map_reward_record_list(i), target);
  }

  // optional uint32 create_monster_time = 12;
  if (has_create_monster_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->create_monster_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PB.GuildBaseData base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 create_monster_time = 12;
    if (has_create_monster_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_monster_time());
    }

  }
  // repeated .PB.GuildMember member_list = 2;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  // repeated .PB.GuildLeaveMessage leave_message_list = 3;
  total_size += 1 * this->leave_message_list_size();
  for (int i = 0; i < this->leave_message_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leave_message_list(i));
  }

  // repeated .PB.GuildEvent event_list = 4;
  total_size += 1 * this->event_list_size();
  for (int i = 0; i < this->event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_list(i));
  }

  // repeated .PB.SkillData skill_list = 5;
  total_size += 1 * this->skill_list_size();
  for (int i = 0; i < this->skill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_list(i));
  }

  // repeated uint32 apply_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->apply_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->apply_list(i));
    }
    total_size += 1 * this->apply_list_size() + data_size;
  }

  // repeated .PB.ShopGoods goods_list = 7;
  total_size += 1 * this->goods_list_size();
  for (int i = 0; i < this->goods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goods_list(i));
  }

  // repeated .PB.ChatRecord chat_record_list = 8;
  total_size += 1 * this->chat_record_list_size();
  for (int i = 0; i < this->chat_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chat_record_list(i));
  }

  // repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
  total_size += 1 * this->damage_record_list_size();
  for (int i = 0; i < this->damage_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damage_record_list(i));
  }

  // repeated .PB.GuildCampMonster camp_monster_list = 10;
  total_size += 1 * this->camp_monster_list_size();
  for (int i = 0; i < this->camp_monster_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->camp_monster_list(i));
  }

  // repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
  total_size += 1 * this->map_reward_record_list_size();
  for (int i = 0; i < this->map_reward_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->map_reward_record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  leave_message_list_.MergeFrom(from.leave_message_list_);
  event_list_.MergeFrom(from.event_list_);
  skill_list_.MergeFrom(from.skill_list_);
  apply_list_.MergeFrom(from.apply_list_);
  goods_list_.MergeFrom(from.goods_list_);
  chat_record_list_.MergeFrom(from.chat_record_list_);
  damage_record_list_.MergeFrom(from.damage_record_list_);
  camp_monster_list_.MergeFrom(from.camp_monster_list_);
  map_reward_record_list_.MergeFrom(from.map_reward_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::PB::GuildBaseData::MergeFrom(from.base_data());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_create_monster_time()) {
      set_create_monster_time(from.create_monster_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {

  if (has_base_data()) {
    if (!this->base_data().IsInitialized()) return false;
  }
  for (int i = 0; i < member_list_size(); i++) {
    if (!this->member_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < event_list_size(); i++) {
    if (!this->event_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < skill_list_size(); i++) {
    if (!this->skill_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < goods_list_size(); i++) {
    if (!this->goods_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < camp_monster_list_size(); i++) {
    if (!this->camp_monster_list(i).IsInitialized()) return false;
  }
  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    member_list_.Swap(&other->member_list_);
    leave_message_list_.Swap(&other->leave_message_list_);
    event_list_.Swap(&other->event_list_);
    skill_list_.Swap(&other->skill_list_);
    apply_list_.Swap(&other->apply_list_);
    goods_list_.Swap(&other->goods_list_);
    chat_record_list_.Swap(&other->chat_record_list_);
    damage_record_list_.Swap(&other->damage_record_list_);
    camp_monster_list_.Swap(&other->camp_monster_list_);
    map_reward_record_list_.Swap(&other->map_reward_record_list_);
    std::swap(create_monster_time_, other->create_monster_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapComment::kRoleIdFieldNumber;
const int MapComment::kCommentIdFieldNumber;
const int MapComment::kTextFieldNumber;
const int MapComment::kTimeFieldNumber;
const int MapComment::kLikeTimesFieldNumber;
const int MapComment::kLikePlayerListFieldNumber;
#endif  // !_MSC_VER

MapComment::MapComment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapComment::InitAsDefaultInstance() {
}

MapComment::MapComment(const MapComment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapComment::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  comment_id_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  like_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapComment::~MapComment() {
  SharedDtor();
}

void MapComment::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void MapComment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapComment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapComment_descriptor_;
}

const MapComment& MapComment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MapComment* MapComment::default_instance_ = NULL;

MapComment* MapComment::New() const {
  return new MapComment;
}

void MapComment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    comment_id_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    time_ = 0u;
    like_times_ = 0u;
  }
  like_player_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapComment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_comment_id;
        break;
      }

      // optional uint32 comment_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comment_id_)));
          set_has_comment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_like_times;
        break;
      }

      // optional uint32 like_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &like_times_)));
          set_has_like_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_like_player_list;
        break;
      }

      // repeated uint32 like_player_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_like_player_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_like_player_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_like_player_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_like_player_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapComment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 comment_id = 2;
  if (has_comment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->comment_id(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional uint32 like_times = 5;
  if (has_like_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->like_times(), output);
  }

  // repeated uint32 like_player_list = 6;
  for (int i = 0; i < this->like_player_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->like_player_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapComment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 comment_id = 2;
  if (has_comment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->comment_id(), target);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  // optional uint32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional uint32 like_times = 5;
  if (has_like_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->like_times(), target);
  }

  // repeated uint32 like_player_list = 6;
  for (int i = 0; i < this->like_player_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->like_player_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapComment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 comment_id = 2;
    if (has_comment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comment_id());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 like_times = 5;
    if (has_like_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->like_times());
    }

  }
  // repeated uint32 like_player_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->like_player_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->like_player_list(i));
    }
    total_size += 1 * this->like_player_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapComment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapComment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapComment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapComment::MergeFrom(const MapComment& from) {
  GOOGLE_CHECK_NE(&from, this);
  like_player_list_.MergeFrom(from.like_player_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_comment_id()) {
      set_comment_id(from.comment_id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_like_times()) {
      set_like_times(from.like_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapComment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapComment::CopyFrom(const MapComment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapComment::IsInitialized() const {

  return true;
}

void MapComment::Swap(MapComment* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(comment_id_, other->comment_id_);
    std::swap(text_, other->text_);
    std::swap(time_, other->time_);
    std::swap(like_times_, other->like_times_);
    like_player_list_.Swap(&other->like_player_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapComment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapComment_descriptor_;
  metadata.reflection = MapComment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapComments::kMapIdFieldNumber;
const int MapComments::kCommentListFieldNumber;
#endif  // !_MSC_VER

MapComments::MapComments()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapComments::InitAsDefaultInstance() {
}

MapComments::MapComments(const MapComments& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapComments::SharedCtor() {
  _cached_size_ = 0;
  map_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapComments::~MapComments() {
  SharedDtor();
}

void MapComments::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapComments::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapComments::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapComments_descriptor_;
}

const MapComments& MapComments::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

MapComments* MapComments::default_instance_ = NULL;

MapComments* MapComments::New() const {
  return new MapComments;
}

void MapComments::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    map_id_ = 0u;
  }
  comment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapComments::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 map_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &map_id_)));
          set_has_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment_list;
        break;
      }

      // repeated .PB.MapComment comment_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comment_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapComments::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->map_id(), output);
  }

  // repeated .PB.MapComment comment_list = 2;
  for (int i = 0; i < this->comment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->comment_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapComments::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 map_id = 1;
  if (has_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->map_id(), target);
  }

  // repeated .PB.MapComment comment_list = 2;
  for (int i = 0; i < this->comment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->comment_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapComments::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 map_id = 1;
    if (has_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->map_id());
    }

  }
  // repeated .PB.MapComment comment_list = 2;
  total_size += 1 * this->comment_list_size();
  for (int i = 0; i < this->comment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapComments::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapComments* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapComments*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapComments::MergeFrom(const MapComments& from) {
  GOOGLE_CHECK_NE(&from, this);
  comment_list_.MergeFrom(from.comment_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_map_id()) {
      set_map_id(from.map_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapComments::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapComments::CopyFrom(const MapComments& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapComments::IsInitialized() const {

  return true;
}

void MapComments::Swap(MapComments* other) {
  if (other != this) {
    std::swap(map_id_, other->map_id_);
    comment_list_.Swap(&other->comment_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapComments::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapComments_descriptor_;
  metadata.reflection = MapComments_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTempData::kTypeFieldNumber;
const int RoleTempData::kTextFieldNumber;
const int RoleTempData::kParamListFieldNumber;
#endif  // !_MSC_VER

RoleTempData::RoleTempData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleTempData::InitAsDefaultInstance() {
}

RoleTempData::RoleTempData(const RoleTempData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleTempData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTempData::~RoleTempData() {
  SharedDtor();
}

void RoleTempData::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void RoleTempData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTempData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTempData_descriptor_;
}

const RoleTempData& RoleTempData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleTempData* RoleTempData::default_instance_ = NULL;

RoleTempData* RoleTempData::New() const {
  return new RoleTempData;
}

void RoleTempData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  param_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTempData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }

      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param_list;
        break;
      }

      // repeated uint32 param_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_param_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleTempData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }

  // repeated uint32 param_list = 3;
  for (int i = 0; i < this->param_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->param_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleTempData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // repeated uint32 param_list = 3;
  for (int i = 0; i < this->param_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->param_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleTempData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  // repeated uint32 param_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param_list(i));
    }
    total_size += 1 * this->param_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTempData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTempData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTempData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTempData::MergeFrom(const RoleTempData& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_list_.MergeFrom(from.param_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTempData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTempData::CopyFrom(const RoleTempData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTempData::IsInitialized() const {

  return true;
}

void RoleTempData::Swap(RoleTempData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(text_, other->text_);
    param_list_.Swap(&other->param_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTempData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTempData_descriptor_;
  metadata.reflection = RoleTempData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleTempDatas::kTempDataListFieldNumber;
#endif  // !_MSC_VER

RoleTempDatas::RoleTempDatas()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleTempDatas::InitAsDefaultInstance() {
}

RoleTempDatas::RoleTempDatas(const RoleTempDatas& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleTempDatas::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleTempDatas::~RoleTempDatas() {
  SharedDtor();
}

void RoleTempDatas::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleTempDatas::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleTempDatas::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleTempDatas_descriptor_;
}

const RoleTempDatas& RoleTempDatas::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleTempDatas* RoleTempDatas::default_instance_ = NULL;

RoleTempDatas* RoleTempDatas::New() const {
  return new RoleTempDatas;
}

void RoleTempDatas::Clear() {
  temp_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleTempDatas::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.RoleTempData temp_data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_temp_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_temp_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_temp_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleTempDatas::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.RoleTempData temp_data_list = 1;
  for (int i = 0; i < this->temp_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->temp_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleTempDatas::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.RoleTempData temp_data_list = 1;
  for (int i = 0; i < this->temp_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->temp_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleTempDatas::ByteSize() const {
  int total_size = 0;

  // repeated .PB.RoleTempData temp_data_list = 1;
  total_size += 1 * this->temp_data_list_size();
  for (int i = 0; i < this->temp_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->temp_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleTempDatas::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleTempDatas* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleTempDatas*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleTempDatas::MergeFrom(const RoleTempDatas& from) {
  GOOGLE_CHECK_NE(&from, this);
  temp_data_list_.MergeFrom(from.temp_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleTempDatas::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleTempDatas::CopyFrom(const RoleTempDatas& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleTempDatas::IsInitialized() const {

  return true;
}

void RoleTempDatas::Swap(RoleTempDatas* other) {
  if (other != this) {
    temp_data_list_.Swap(&other->temp_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleTempDatas::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleTempDatas_descriptor_;
  metadata.reflection = RoleTempDatas_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingMatchBattleTarget::kRoleIdFieldNumber;
const int KingMatchBattleTarget::kServerIdFieldNumber;
const int KingMatchBattleTarget::kStarFieldNumber;
const int KingMatchBattleTarget::kBattleTimesFieldNumber;
const int KingMatchBattleTarget::kStageLevelFieldNumber;
#endif  // !_MSC_VER

KingMatchBattleTarget::KingMatchBattleTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingMatchBattleTarget::InitAsDefaultInstance() {
}

KingMatchBattleTarget::KingMatchBattleTarget(const KingMatchBattleTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingMatchBattleTarget::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  server_id_ = 0u;
  star_ = 0u;
  battle_times_ = 0u;
  stage_level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingMatchBattleTarget::~KingMatchBattleTarget() {
  SharedDtor();
}

void KingMatchBattleTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingMatchBattleTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingMatchBattleTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingMatchBattleTarget_descriptor_;
}

const KingMatchBattleTarget& KingMatchBattleTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

KingMatchBattleTarget* KingMatchBattleTarget::default_instance_ = NULL;

KingMatchBattleTarget* KingMatchBattleTarget::New() const {
  return new KingMatchBattleTarget;
}

void KingMatchBattleTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    server_id_ = 0u;
    star_ = 0u;
    battle_times_ = 0u;
    stage_level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingMatchBattleTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional uint32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_battle_times;
        break;
      }

      // optional uint32 battle_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stage_level;
        break;
      }

      // optional uint32 stage_level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_level_)));
          set_has_stage_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingMatchBattleTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 battle_times = 4;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battle_times(), output);
  }

  // optional uint32 stage_level = 5;
  if (has_stage_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stage_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingMatchBattleTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  // optional uint32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 battle_times = 4;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battle_times(), target);
  }

  // optional uint32 stage_level = 5;
  if (has_stage_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stage_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingMatchBattleTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 battle_times = 4;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // optional uint32 stage_level = 5;
    if (has_stage_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingMatchBattleTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingMatchBattleTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingMatchBattleTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingMatchBattleTarget::MergeFrom(const KingMatchBattleTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_stage_level()) {
      set_stage_level(from.stage_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingMatchBattleTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingMatchBattleTarget::CopyFrom(const KingMatchBattleTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingMatchBattleTarget::IsInitialized() const {

  return true;
}

void KingMatchBattleTarget::Swap(KingMatchBattleTarget* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(star_, other->star_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(stage_level_, other->stage_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingMatchBattleTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingMatchBattleTarget_descriptor_;
  metadata.reflection = KingMatchBattleTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingMatchStage::kStageFieldNumber;
const int KingMatchStage::kBattleTargetListFieldNumber;
#endif  // !_MSC_VER

KingMatchStage::KingMatchStage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingMatchStage::InitAsDefaultInstance() {
}

KingMatchStage::KingMatchStage(const KingMatchStage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingMatchStage::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingMatchStage::~KingMatchStage() {
  SharedDtor();
}

void KingMatchStage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingMatchStage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingMatchStage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingMatchStage_descriptor_;
}

const KingMatchStage& KingMatchStage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

KingMatchStage* KingMatchStage::default_instance_ = NULL;

KingMatchStage* KingMatchStage::New() const {
  return new KingMatchStage;
}

void KingMatchStage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0u;
  }
  battle_target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingMatchStage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_target_list;
        break;
      }

      // repeated .PB.KingMatchBattleTarget battle_target_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_battle_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingMatchStage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stage(), output);
  }

  // repeated .PB.KingMatchBattleTarget battle_target_list = 2;
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battle_target_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingMatchStage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stage(), target);
  }

  // repeated .PB.KingMatchBattleTarget battle_target_list = 2;
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battle_target_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingMatchStage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

  }
  // repeated .PB.KingMatchBattleTarget battle_target_list = 2;
  total_size += 1 * this->battle_target_list_size();
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_target_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingMatchStage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingMatchStage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingMatchStage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingMatchStage::MergeFrom(const KingMatchStage& from) {
  GOOGLE_CHECK_NE(&from, this);
  battle_target_list_.MergeFrom(from.battle_target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingMatchStage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingMatchStage::CopyFrom(const KingMatchStage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingMatchStage::IsInitialized() const {

  return true;
}

void KingMatchStage::Swap(KingMatchStage* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    battle_target_list_.Swap(&other->battle_target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingMatchStage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingMatchStage_descriptor_;
  metadata.reflection = KingMatchStage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSeasonRank::kRoleIdFieldNumber;
const int RoleSeasonRank::kServerIdFieldNumber;
#endif  // !_MSC_VER

RoleSeasonRank::RoleSeasonRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSeasonRank::InitAsDefaultInstance() {
}

RoleSeasonRank::RoleSeasonRank(const RoleSeasonRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSeasonRank::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  server_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSeasonRank::~RoleSeasonRank() {
  SharedDtor();
}

void RoleSeasonRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSeasonRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSeasonRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSeasonRank_descriptor_;
}

const RoleSeasonRank& RoleSeasonRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleSeasonRank* RoleSeasonRank::default_instance_ = NULL;

RoleSeasonRank* RoleSeasonRank::New() const {
  return new RoleSeasonRank;
}

void RoleSeasonRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    server_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSeasonRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_server_id;
        break;
      }

      // optional uint32 server_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSeasonRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSeasonRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 server_id = 2;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSeasonRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 server_id = 2;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSeasonRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSeasonRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSeasonRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSeasonRank::MergeFrom(const RoleSeasonRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSeasonRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSeasonRank::CopyFrom(const RoleSeasonRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSeasonRank::IsInitialized() const {

  return true;
}

void RoleSeasonRank::Swap(RoleSeasonRank* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSeasonRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSeasonRank_descriptor_;
  metadata.reflection = RoleSeasonRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeasonRankData::kSeasonFieldNumber;
const int SeasonRankData::kRankListFieldNumber;
#endif  // !_MSC_VER

SeasonRankData::SeasonRankData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeasonRankData::InitAsDefaultInstance() {
}

SeasonRankData::SeasonRankData(const SeasonRankData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeasonRankData::SharedCtor() {
  _cached_size_ = 0;
  season_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeasonRankData::~SeasonRankData() {
  SharedDtor();
}

void SeasonRankData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SeasonRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeasonRankData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeasonRankData_descriptor_;
}

const SeasonRankData& SeasonRankData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

SeasonRankData* SeasonRankData::default_instance_ = NULL;

SeasonRankData* SeasonRankData::New() const {
  return new SeasonRankData;
}

void SeasonRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    season_ = 0u;
  }
  rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeasonRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 season = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_)));
          set_has_season();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        break;
      }

      // repeated .PB.RoleSeasonRank rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeasonRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 season = 1;
  if (has_season()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->season(), output);
  }

  // repeated .PB.RoleSeasonRank rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeasonRankData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 season = 1;
  if (has_season()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->season(), target);
  }

  // repeated .PB.RoleSeasonRank rank_list = 2;
  for (int i = 0; i < this->rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeasonRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 season = 1;
    if (has_season()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season());
    }

  }
  // repeated .PB.RoleSeasonRank rank_list = 2;
  total_size += 1 * this->rank_list_size();
  for (int i = 0; i < this->rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeasonRankData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeasonRankData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeasonRankData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeasonRankData::MergeFrom(const SeasonRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_list_.MergeFrom(from.rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_season()) {
      set_season(from.season());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeasonRankData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeasonRankData::CopyFrom(const SeasonRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeasonRankData::IsInitialized() const {

  return true;
}

void SeasonRankData::Swap(SeasonRankData* other) {
  if (other != this) {
    std::swap(season_, other->season_);
    rank_list_.Swap(&other->rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeasonRankData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeasonRankData_descriptor_;
  metadata.reflection = SeasonRankData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingMatchData::kStageListFieldNumber;
const int KingMatchData::kLastSeasonRankListFieldNumber;
#endif  // !_MSC_VER

KingMatchData::KingMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingMatchData::InitAsDefaultInstance() {
}

KingMatchData::KingMatchData(const KingMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingMatchData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingMatchData::~KingMatchData() {
  SharedDtor();
}

void KingMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KingMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingMatchData_descriptor_;
}

const KingMatchData& KingMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

KingMatchData* KingMatchData::default_instance_ = NULL;

KingMatchData* KingMatchData::New() const {
  return new KingMatchData;
}

void KingMatchData::Clear() {
  stage_list_.Clear();
  last_season_rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.KingMatchStage stage_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stage_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stage_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stage_list;
        if (input->ExpectTag(18)) goto parse_last_season_rank_list;
        break;
      }

      // repeated .PB.SeasonRankData last_season_rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_last_season_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_last_season_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_last_season_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.KingMatchStage stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stage_list(i), output);
  }

  // repeated .PB.SeasonRankData last_season_rank_list = 2;
  for (int i = 0; i < this->last_season_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->last_season_rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.KingMatchStage stage_list = 1;
  for (int i = 0; i < this->stage_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stage_list(i), target);
  }

  // repeated .PB.SeasonRankData last_season_rank_list = 2;
  for (int i = 0; i < this->last_season_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->last_season_rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingMatchData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.KingMatchStage stage_list = 1;
  total_size += 1 * this->stage_list_size();
  for (int i = 0; i < this->stage_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stage_list(i));
  }

  // repeated .PB.SeasonRankData last_season_rank_list = 2;
  total_size += 1 * this->last_season_rank_list_size();
  for (int i = 0; i < this->last_season_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->last_season_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingMatchData::MergeFrom(const KingMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stage_list_.MergeFrom(from.stage_list_);
  last_season_rank_list_.MergeFrom(from.last_season_rank_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingMatchData::CopyFrom(const KingMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingMatchData::IsInitialized() const {

  return true;
}

void KingMatchData::Swap(KingMatchData* other) {
  if (other != this) {
    stage_list_.Swap(&other->stage_list_);
    last_season_rank_list_.Swap(&other->last_season_rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingMatchData_descriptor_;
  metadata.reflection = KingMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonMember::kServerIdFieldNumber;
const int TeamDungeonMember::kRoleNameFieldNumber;
const int TeamDungeonMember::kRoleIdFieldNumber;
#endif  // !_MSC_VER

TeamDungeonMember::TeamDungeonMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonMember::InitAsDefaultInstance() {
}

TeamDungeonMember::TeamDungeonMember(const TeamDungeonMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonMember::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonMember::~TeamDungeonMember() {
  SharedDtor();
}

void TeamDungeonMember::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void TeamDungeonMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonMember_descriptor_;
}

const TeamDungeonMember& TeamDungeonMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonMember* TeamDungeonMember::default_instance_ = NULL;

TeamDungeonMember* TeamDungeonMember::New() const {
  return new TeamDungeonMember;
}

void TeamDungeonMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    role_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role_id;
        break;
      }

      // optional uint32 role_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->role_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 role_id = 3;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->role_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 role_id = 3;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonMember::MergeFrom(const TeamDungeonMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonMember::CopyFrom(const TeamDungeonMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonMember::IsInitialized() const {

  return true;
}

void TeamDungeonMember::Swap(TeamDungeonMember* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(role_id_, other->role_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonMember_descriptor_;
  metadata.reflection = TeamDungeonMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonRoleRank::kRankFieldNumber;
const int TeamDungeonRoleRank::kUseTimeFieldNumber;
const int TeamDungeonRoleRank::kFinishTimeFieldNumber;
const int TeamDungeonRoleRank::kCaptainHeadImgIdFieldNumber;
const int TeamDungeonRoleRank::kMemberListFieldNumber;
#endif  // !_MSC_VER

TeamDungeonRoleRank::TeamDungeonRoleRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonRoleRank::InitAsDefaultInstance() {
}

TeamDungeonRoleRank::TeamDungeonRoleRank(const TeamDungeonRoleRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonRoleRank::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  use_time_ = 0u;
  finish_time_ = 0u;
  captain_head_img_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonRoleRank::~TeamDungeonRoleRank() {
  SharedDtor();
}

void TeamDungeonRoleRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDungeonRoleRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonRoleRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonRoleRank_descriptor_;
}

const TeamDungeonRoleRank& TeamDungeonRoleRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonRoleRank* TeamDungeonRoleRank::default_instance_ = NULL;

TeamDungeonRoleRank* TeamDungeonRoleRank::New() const {
  return new TeamDungeonRoleRank;
}

void TeamDungeonRoleRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    use_time_ = 0u;
    finish_time_ = 0u;
    captain_head_img_id_ = 0u;
  }
  member_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonRoleRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_time;
        break;
      }

      // optional uint32 use_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_time_)));
          set_has_use_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish_time;
        break;
      }

      // optional uint32 finish_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finish_time_)));
          set_has_finish_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_captain_head_img_id;
        break;
      }

      // optional uint32 captain_head_img_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captain_head_img_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &captain_head_img_id_)));
          set_has_captain_head_img_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_member_list;
        break;
      }

      // repeated .PB.TeamDungeonMember member_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_member_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonRoleRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_time(), output);
  }

  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finish_time(), output);
  }

  // optional uint32 captain_head_img_id = 4;
  if (has_captain_head_img_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->captain_head_img_id(), output);
  }

  // repeated .PB.TeamDungeonMember member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->member_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonRoleRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 use_time = 2;
  if (has_use_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_time(), target);
  }

  // optional uint32 finish_time = 3;
  if (has_finish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finish_time(), target);
  }

  // optional uint32 captain_head_img_id = 4;
  if (has_captain_head_img_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->captain_head_img_id(), target);
  }

  // repeated .PB.TeamDungeonMember member_list = 5;
  for (int i = 0; i < this->member_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->member_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonRoleRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 use_time = 2;
    if (has_use_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_time());
    }

    // optional uint32 finish_time = 3;
    if (has_finish_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finish_time());
    }

    // optional uint32 captain_head_img_id = 4;
    if (has_captain_head_img_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->captain_head_img_id());
    }

  }
  // repeated .PB.TeamDungeonMember member_list = 5;
  total_size += 1 * this->member_list_size();
  for (int i = 0; i < this->member_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonRoleRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonRoleRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonRoleRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonRoleRank::MergeFrom(const TeamDungeonRoleRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_list_.MergeFrom(from.member_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_use_time()) {
      set_use_time(from.use_time());
    }
    if (from.has_finish_time()) {
      set_finish_time(from.finish_time());
    }
    if (from.has_captain_head_img_id()) {
      set_captain_head_img_id(from.captain_head_img_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonRoleRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonRoleRank::CopyFrom(const TeamDungeonRoleRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonRoleRank::IsInitialized() const {

  return true;
}

void TeamDungeonRoleRank::Swap(TeamDungeonRoleRank* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(use_time_, other->use_time_);
    std::swap(finish_time_, other->finish_time_);
    std::swap(captain_head_img_id_, other->captain_head_img_id_);
    member_list_.Swap(&other->member_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonRoleRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonRoleRank_descriptor_;
  metadata.reflection = TeamDungeonRoleRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonRank::kDungeonIdFieldNumber;
const int TeamDungeonRank::kRoleRankListFieldNumber;
#endif  // !_MSC_VER

TeamDungeonRank::TeamDungeonRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonRank::InitAsDefaultInstance() {
}

TeamDungeonRank::TeamDungeonRank(const TeamDungeonRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonRank::SharedCtor() {
  _cached_size_ = 0;
  dungeon_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonRank::~TeamDungeonRank() {
  SharedDtor();
}

void TeamDungeonRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDungeonRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonRank_descriptor_;
}

const TeamDungeonRank& TeamDungeonRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonRank* TeamDungeonRank::default_instance_ = NULL;

TeamDungeonRank* TeamDungeonRank::New() const {
  return new TeamDungeonRank;
}

void TeamDungeonRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dungeon_id_ = 0u;
  }
  role_rank_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dungeon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dungeon_id_)));
          set_has_dungeon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_rank_list;
        break;
      }

      // repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_rank_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dungeon_id = 1;
  if (has_dungeon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dungeon_id(), output);
  }

  // repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
  for (int i = 0; i < this->role_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_rank_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dungeon_id = 1;
  if (has_dungeon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dungeon_id(), target);
  }

  // repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
  for (int i = 0; i < this->role_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_rank_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dungeon_id = 1;
    if (has_dungeon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dungeon_id());
    }

  }
  // repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
  total_size += 1 * this->role_rank_list_size();
  for (int i = 0; i < this->role_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_rank_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonRank::MergeFrom(const TeamDungeonRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_rank_list_.MergeFrom(from.role_rank_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dungeon_id()) {
      set_dungeon_id(from.dungeon_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonRank::CopyFrom(const TeamDungeonRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonRank::IsInitialized() const {

  return true;
}

void TeamDungeonRank::Swap(TeamDungeonRank* other) {
  if (other != this) {
    std::swap(dungeon_id_, other->dungeon_id_);
    role_rank_list_.Swap(&other->role_rank_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonRank_descriptor_;
  metadata.reflection = TeamDungeonRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonLotteryRecord::kServerIdFieldNumber;
const int TeamDungeonLotteryRecord::kRoleNameFieldNumber;
const int TeamDungeonLotteryRecord::kItemIdFieldNumber;
const int TeamDungeonLotteryRecord::kItemNumFieldNumber;
const int TeamDungeonLotteryRecord::kRecordTimeFieldNumber;
#endif  // !_MSC_VER

TeamDungeonLotteryRecord::TeamDungeonLotteryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonLotteryRecord::InitAsDefaultInstance() {
}

TeamDungeonLotteryRecord::TeamDungeonLotteryRecord(const TeamDungeonLotteryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonLotteryRecord::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_id_ = 0u;
  item_num_ = 0u;
  record_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonLotteryRecord::~TeamDungeonLotteryRecord() {
  SharedDtor();
}

void TeamDungeonLotteryRecord::SharedDtor() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (this != default_instance_) {
  }
}

void TeamDungeonLotteryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonLotteryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonLotteryRecord_descriptor_;
}

const TeamDungeonLotteryRecord& TeamDungeonLotteryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonLotteryRecord* TeamDungeonLotteryRecord::default_instance_ = NULL;

TeamDungeonLotteryRecord* TeamDungeonLotteryRecord::New() const {
  return new TeamDungeonLotteryRecord;
}

void TeamDungeonLotteryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    if (has_role_name()) {
      if (role_name_ != &::google::protobuf::internal::kEmptyString) {
        role_name_->clear();
      }
    }
    item_id_ = 0u;
    item_num_ = 0u;
    record_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonLotteryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_name;
        break;
      }

      // optional string role_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->role_name().data(), this->role_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_id;
        break;
      }

      // optional uint32 item_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_num;
        break;
      }

      // optional uint32 item_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_record_time;
        break;
      }

      // optional uint32 record_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_time_)));
          set_has_record_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonLotteryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->role_name(), output);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_id(), output);
  }

  // optional uint32 item_num = 4;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->item_num(), output);
  }

  // optional uint32 record_time = 5;
  if (has_record_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->record_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonLotteryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional string role_name = 2;
  if (has_role_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->role_name().data(), this->role_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_name(), target);
  }

  // optional uint32 item_id = 3;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_id(), target);
  }

  // optional uint32 item_num = 4;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->item_num(), target);
  }

  // optional uint32 record_time = 5;
  if (has_record_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->record_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonLotteryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional string role_name = 2;
    if (has_role_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->role_name());
    }

    // optional uint32 item_id = 3;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_id());
    }

    // optional uint32 item_num = 4;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_num());
    }

    // optional uint32 record_time = 5;
    if (has_record_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonLotteryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonLotteryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonLotteryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonLotteryRecord::MergeFrom(const TeamDungeonLotteryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_role_name()) {
      set_role_name(from.role_name());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_record_time()) {
      set_record_time(from.record_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonLotteryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonLotteryRecord::CopyFrom(const TeamDungeonLotteryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonLotteryRecord::IsInitialized() const {

  return true;
}

void TeamDungeonLotteryRecord::Swap(TeamDungeonLotteryRecord* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(role_name_, other->role_name_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(record_time_, other->record_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonLotteryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonLotteryRecord_descriptor_;
  metadata.reflection = TeamDungeonLotteryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamDungeonData::kDungeonRankListFieldNumber;
const int TeamDungeonData::kLotteryRecordFieldNumber;
#endif  // !_MSC_VER

TeamDungeonData::TeamDungeonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamDungeonData::InitAsDefaultInstance() {
}

TeamDungeonData::TeamDungeonData(const TeamDungeonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamDungeonData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamDungeonData::~TeamDungeonData() {
  SharedDtor();
}

void TeamDungeonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamDungeonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamDungeonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamDungeonData_descriptor_;
}

const TeamDungeonData& TeamDungeonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TeamDungeonData* TeamDungeonData::default_instance_ = NULL;

TeamDungeonData* TeamDungeonData::New() const {
  return new TeamDungeonData;
}

void TeamDungeonData::Clear() {
  dungeon_rank_list_.Clear();
  lottery_record_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamDungeonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dungeon_rank_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dungeon_rank_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dungeon_rank_list;
        if (input->ExpectTag(18)) goto parse_lottery_record;
        break;
      }

      // repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lottery_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lottery_record;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamDungeonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
  for (int i = 0; i < this->dungeon_rank_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dungeon_rank_list(i), output);
  }

  // repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
  for (int i = 0; i < this->lottery_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lottery_record(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamDungeonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
  for (int i = 0; i < this->dungeon_rank_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dungeon_rank_list(i), target);
  }

  // repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
  for (int i = 0; i < this->lottery_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lottery_record(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamDungeonData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
  total_size += 1 * this->dungeon_rank_list_size();
  for (int i = 0; i < this->dungeon_rank_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dungeon_rank_list(i));
  }

  // repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
  total_size += 1 * this->lottery_record_size();
  for (int i = 0; i < this->lottery_record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lottery_record(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamDungeonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamDungeonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamDungeonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamDungeonData::MergeFrom(const TeamDungeonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  dungeon_rank_list_.MergeFrom(from.dungeon_rank_list_);
  lottery_record_.MergeFrom(from.lottery_record_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamDungeonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamDungeonData::CopyFrom(const TeamDungeonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamDungeonData::IsInitialized() const {

  return true;
}

void TeamDungeonData::Swap(TeamDungeonData* other) {
  if (other != this) {
    dungeon_rank_list_.Swap(&other->dungeon_rank_list_);
    lottery_record_.Swap(&other->lottery_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamDungeonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamDungeonData_descriptor_;
  metadata.reflection = TeamDungeonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableLotteryRecord::kRoleIdFieldNumber;
const int TurntableLotteryRecord::kTimeFieldNumber;
const int TurntableLotteryRecord::kIndexFieldNumber;
const int TurntableLotteryRecord::kContextFieldNumber;
#endif  // !_MSC_VER

TurntableLotteryRecord::TurntableLotteryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableLotteryRecord::InitAsDefaultInstance() {
}

TurntableLotteryRecord::TurntableLotteryRecord(const TurntableLotteryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableLotteryRecord::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  time_ = 0u;
  index_ = 0u;
  context_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableLotteryRecord::~TurntableLotteryRecord() {
  SharedDtor();
}

void TurntableLotteryRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableLotteryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableLotteryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableLotteryRecord_descriptor_;
}

const TurntableLotteryRecord& TurntableLotteryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TurntableLotteryRecord* TurntableLotteryRecord::default_instance_ = NULL;

TurntableLotteryRecord* TurntableLotteryRecord::New() const {
  return new TurntableLotteryRecord;
}

void TurntableLotteryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    time_ = 0u;
    index_ = 0u;
    context_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableLotteryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional uint32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_context;
        break;
      }

      // optional uint32 context = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableLotteryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  // optional uint32 context = 4;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->context(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableLotteryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  // optional uint32 context = 4;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->context(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableLotteryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 context = 4;
    if (has_context()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->context());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableLotteryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableLotteryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableLotteryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableLotteryRecord::MergeFrom(const TurntableLotteryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableLotteryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableLotteryRecord::CopyFrom(const TurntableLotteryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableLotteryRecord::IsInitialized() const {

  return true;
}

void TurntableLotteryRecord::Swap(TurntableLotteryRecord* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(time_, other->time_);
    std::swap(index_, other->index_);
    std::swap(context_, other->context_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableLotteryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableLotteryRecord_descriptor_;
  metadata.reflection = TurntableLotteryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TurntableData::kServerIdFieldNumber;
const int TurntableData::kCurActivityDataIdFieldNumber;
const int TurntableData::kDiamondFieldNumber;
const int TurntableData::kLotteryRecordListFieldNumber;
#endif  // !_MSC_VER

TurntableData::TurntableData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TurntableData::InitAsDefaultInstance() {
}

TurntableData::TurntableData(const TurntableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TurntableData::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0u;
  cur_activity_data_id_ = 0u;
  diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TurntableData::~TurntableData() {
  SharedDtor();
}

void TurntableData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TurntableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TurntableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TurntableData_descriptor_;
}

const TurntableData& TurntableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

TurntableData* TurntableData::default_instance_ = NULL;

TurntableData* TurntableData::New() const {
  return new TurntableData;
}

void TurntableData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0u;
    cur_activity_data_id_ = 0u;
    diamond_ = 0u;
  }
  lottery_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TurntableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_activity_data_id;
        break;
      }

      // optional uint32 cur_activity_data_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_activity_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_activity_data_id_)));
          set_has_cur_activity_data_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lottery_record_list;
        break;
      }

      // repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lottery_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lottery_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lottery_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TurntableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_id(), output);
  }

  // optional uint32 cur_activity_data_id = 2;
  if (has_cur_activity_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cur_activity_data_id(), output);
  }

  // optional uint32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamond(), output);
  }

  // repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
  for (int i = 0; i < this->lottery_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->lottery_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TurntableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_id(), target);
  }

  // optional uint32 cur_activity_data_id = 2;
  if (has_cur_activity_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cur_activity_data_id(), target);
  }

  // optional uint32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamond(), target);
  }

  // repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
  for (int i = 0; i < this->lottery_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->lottery_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TurntableData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->server_id());
    }

    // optional uint32 cur_activity_data_id = 2;
    if (has_cur_activity_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_activity_data_id());
    }

    // optional uint32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  // repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
  total_size += 1 * this->lottery_record_list_size();
  for (int i = 0; i < this->lottery_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lottery_record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TurntableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TurntableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TurntableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TurntableData::MergeFrom(const TurntableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  lottery_record_list_.MergeFrom(from.lottery_record_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
    if (from.has_cur_activity_data_id()) {
      set_cur_activity_data_id(from.cur_activity_data_id());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TurntableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TurntableData::CopyFrom(const TurntableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TurntableData::IsInitialized() const {

  return true;
}

void TurntableData::Swap(TurntableData* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(cur_activity_data_id_, other->cur_activity_data_id_);
    std::swap(diamond_, other->diamond_);
    lottery_record_list_.Swap(&other->lottery_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TurntableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TurntableData_descriptor_;
  metadata.reflection = TurntableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllServerTurntableData::kTurntableDataListFieldNumber;
#endif  // !_MSC_VER

AllServerTurntableData::AllServerTurntableData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllServerTurntableData::InitAsDefaultInstance() {
}

AllServerTurntableData::AllServerTurntableData(const AllServerTurntableData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllServerTurntableData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllServerTurntableData::~AllServerTurntableData() {
  SharedDtor();
}

void AllServerTurntableData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllServerTurntableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllServerTurntableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllServerTurntableData_descriptor_;
}

const AllServerTurntableData& AllServerTurntableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

AllServerTurntableData* AllServerTurntableData::default_instance_ = NULL;

AllServerTurntableData* AllServerTurntableData::New() const {
  return new AllServerTurntableData;
}

void AllServerTurntableData::Clear() {
  turntable_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllServerTurntableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.TurntableData turntable_data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_turntable_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_turntable_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllServerTurntableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.TurntableData turntable_data_list = 1;
  for (int i = 0; i < this->turntable_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->turntable_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllServerTurntableData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.TurntableData turntable_data_list = 1;
  for (int i = 0; i < this->turntable_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->turntable_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllServerTurntableData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.TurntableData turntable_data_list = 1;
  total_size += 1 * this->turntable_data_list_size();
  for (int i = 0; i < this->turntable_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->turntable_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllServerTurntableData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllServerTurntableData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllServerTurntableData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllServerTurntableData::MergeFrom(const AllServerTurntableData& from) {
  GOOGLE_CHECK_NE(&from, this);
  turntable_data_list_.MergeFrom(from.turntable_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllServerTurntableData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllServerTurntableData::CopyFrom(const AllServerTurntableData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllServerTurntableData::IsInitialized() const {

  return true;
}

void AllServerTurntableData::Swap(AllServerTurntableData* other) {
  if (other != this) {
    turntable_data_list_.Swap(&other->turntable_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllServerTurntableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllServerTurntableData_descriptor_;
  metadata.reflection = AllServerTurntableData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreMatchTarget::kTargetIdFieldNumber;
const int ScoreMatchTarget::kStatusFieldNumber;
#endif  // !_MSC_VER

ScoreMatchTarget::ScoreMatchTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreMatchTarget::InitAsDefaultInstance() {
}

ScoreMatchTarget::ScoreMatchTarget(const ScoreMatchTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreMatchTarget::SharedCtor() {
  _cached_size_ = 0;
  target_id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreMatchTarget::~ScoreMatchTarget() {
  SharedDtor();
}

void ScoreMatchTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreMatchTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMatchTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreMatchTarget_descriptor_;
}

const ScoreMatchTarget& ScoreMatchTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ScoreMatchTarget* ScoreMatchTarget::default_instance_ = NULL;

ScoreMatchTarget* ScoreMatchTarget::New() const {
  return new ScoreMatchTarget;
}

void ScoreMatchTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    target_id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreMatchTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 target_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_id_)));
          set_has_target_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreMatchTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->target_id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreMatchTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 target_id = 1;
  if (has_target_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->target_id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreMatchTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 target_id = 1;
    if (has_target_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMatchTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreMatchTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreMatchTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreMatchTarget::MergeFrom(const ScoreMatchTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_target_id()) {
      set_target_id(from.target_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreMatchTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMatchTarget::CopyFrom(const ScoreMatchTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMatchTarget::IsInitialized() const {

  return true;
}

void ScoreMatchTarget::Swap(ScoreMatchTarget* other) {
  if (other != this) {
    std::swap(target_id_, other->target_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreMatchTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreMatchTarget_descriptor_;
  metadata.reflection = ScoreMatchTarget_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleScoreMatchData::kRoleIdFieldNumber;
const int RoleScoreMatchData::kBattleTimesFieldNumber;
const int RoleScoreMatchData::kRefreshTimesFieldNumber;
const int RoleScoreMatchData::kBuyBattleTimesFieldNumber;
const int RoleScoreMatchData::kCampFieldNumber;
const int RoleScoreMatchData::kWinTimesFieldNumber;
const int RoleScoreMatchData::kTaskRewardRecordFieldNumber;
const int RoleScoreMatchData::kBattleTargetListFieldNumber;
#endif  // !_MSC_VER

RoleScoreMatchData::RoleScoreMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleScoreMatchData::InitAsDefaultInstance() {
}

RoleScoreMatchData::RoleScoreMatchData(const RoleScoreMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleScoreMatchData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  battle_times_ = 0u;
  refresh_times_ = 0u;
  buy_battle_times_ = 0u;
  camp_ = 0u;
  win_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleScoreMatchData::~RoleScoreMatchData() {
  SharedDtor();
}

void RoleScoreMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleScoreMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleScoreMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleScoreMatchData_descriptor_;
}

const RoleScoreMatchData& RoleScoreMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleScoreMatchData* RoleScoreMatchData::default_instance_ = NULL;

RoleScoreMatchData* RoleScoreMatchData::New() const {
  return new RoleScoreMatchData;
}

void RoleScoreMatchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    battle_times_ = 0u;
    refresh_times_ = 0u;
    buy_battle_times_ = 0u;
    camp_ = 0u;
    win_times_ = 0u;
  }
  task_reward_record_.Clear();
  battle_target_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleScoreMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battle_times;
        break;
      }

      // optional uint32 battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_times_)));
          set_has_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_refresh_times;
        break;
      }

      // optional uint32 refresh_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refresh_times_)));
          set_has_refresh_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buy_battle_times;
        break;
      }

      // optional uint32 buy_battle_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_battle_times_)));
          set_has_buy_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // optional uint32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_times;
        break;
      }

      // optional uint32 win_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_times_)));
          set_has_win_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_task_reward_record;
        break;
      }

      // repeated uint32 task_reward_record = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_reward_record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_task_reward_record())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_task_reward_record())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_task_reward_record;
        if (input->ExpectTag(66)) goto parse_battle_target_list;
        break;
      }

      // repeated .PB.ScoreMatchTarget battle_target_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_target_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_target_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_battle_target_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleScoreMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 battle_times = 2;
  if (has_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battle_times(), output);
  }

  // optional uint32 refresh_times = 3;
  if (has_refresh_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->refresh_times(), output);
  }

  // optional uint32 buy_battle_times = 4;
  if (has_buy_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buy_battle_times(), output);
  }

  // optional uint32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->camp(), output);
  }

  // optional uint32 win_times = 6;
  if (has_win_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_times(), output);
  }

  // repeated uint32 task_reward_record = 7;
  for (int i = 0; i < this->task_reward_record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->task_reward_record(i), output);
  }

  // repeated .PB.ScoreMatchTarget battle_target_list = 8;
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->battle_target_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleScoreMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 battle_times = 2;
  if (has_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battle_times(), target);
  }

  // optional uint32 refresh_times = 3;
  if (has_refresh_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->refresh_times(), target);
  }

  // optional uint32 buy_battle_times = 4;
  if (has_buy_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buy_battle_times(), target);
  }

  // optional uint32 camp = 5;
  if (has_camp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->camp(), target);
  }

  // optional uint32 win_times = 6;
  if (has_win_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_times(), target);
  }

  // repeated uint32 task_reward_record = 7;
  for (int i = 0; i < this->task_reward_record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->task_reward_record(i), target);
  }

  // repeated .PB.ScoreMatchTarget battle_target_list = 8;
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->battle_target_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleScoreMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 battle_times = 2;
    if (has_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_times());
    }

    // optional uint32 refresh_times = 3;
    if (has_refresh_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refresh_times());
    }

    // optional uint32 buy_battle_times = 4;
    if (has_buy_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_battle_times());
    }

    // optional uint32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

    // optional uint32 win_times = 6;
    if (has_win_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_times());
    }

  }
  // repeated uint32 task_reward_record = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->task_reward_record_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->task_reward_record(i));
    }
    total_size += 1 * this->task_reward_record_size() + data_size;
  }

  // repeated .PB.ScoreMatchTarget battle_target_list = 8;
  total_size += 1 * this->battle_target_list_size();
  for (int i = 0; i < this->battle_target_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_target_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleScoreMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleScoreMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleScoreMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleScoreMatchData::MergeFrom(const RoleScoreMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_reward_record_.MergeFrom(from.task_reward_record_);
  battle_target_list_.MergeFrom(from.battle_target_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_battle_times()) {
      set_battle_times(from.battle_times());
    }
    if (from.has_refresh_times()) {
      set_refresh_times(from.refresh_times());
    }
    if (from.has_buy_battle_times()) {
      set_buy_battle_times(from.buy_battle_times());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_win_times()) {
      set_win_times(from.win_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleScoreMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleScoreMatchData::CopyFrom(const RoleScoreMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleScoreMatchData::IsInitialized() const {

  return true;
}

void RoleScoreMatchData::Swap(RoleScoreMatchData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(battle_times_, other->battle_times_);
    std::swap(refresh_times_, other->refresh_times_);
    std::swap(buy_battle_times_, other->buy_battle_times_);
    std::swap(camp_, other->camp_);
    std::swap(win_times_, other->win_times_);
    task_reward_record_.Swap(&other->task_reward_record_);
    battle_target_list_.Swap(&other->battle_target_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleScoreMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleScoreMatchData_descriptor_;
  metadata.reflection = RoleScoreMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreMatchData::kCurActivityIndexFieldNumber;
const int ScoreMatchData::kActivityStatusFieldNumber;
const int ScoreMatchData::kActivityOverTimeFieldNumber;
const int ScoreMatchData::kRoleScoreMatchDataListFieldNumber;
#endif  // !_MSC_VER

ScoreMatchData::ScoreMatchData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreMatchData::InitAsDefaultInstance() {
}

ScoreMatchData::ScoreMatchData(const ScoreMatchData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreMatchData::SharedCtor() {
  _cached_size_ = 0;
  cur_activity_index_ = 0u;
  activity_status_ = 0u;
  activity_over_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreMatchData::~ScoreMatchData() {
  SharedDtor();
}

void ScoreMatchData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreMatchData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreMatchData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreMatchData_descriptor_;
}

const ScoreMatchData& ScoreMatchData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ScoreMatchData* ScoreMatchData::default_instance_ = NULL;

ScoreMatchData* ScoreMatchData::New() const {
  return new ScoreMatchData;
}

void ScoreMatchData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_activity_index_ = 0u;
    activity_status_ = 0u;
    activity_over_time_ = 0u;
  }
  role_score_match_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreMatchData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 cur_activity_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_activity_index_)));
          set_has_cur_activity_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity_status;
        break;
      }

      // optional uint32 activity_status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_status_)));
          set_has_activity_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_activity_over_time;
        break;
      }

      // optional uint32 activity_over_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activity_over_time_)));
          set_has_activity_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_score_match_data_list;
        break;
      }

      // repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_score_match_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_score_match_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_role_score_match_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreMatchData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 cur_activity_index = 1;
  if (has_cur_activity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cur_activity_index(), output);
  }

  // optional uint32 activity_status = 2;
  if (has_activity_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activity_status(), output);
  }

  // optional uint32 activity_over_time = 3;
  if (has_activity_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->activity_over_time(), output);
  }

  // repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
  for (int i = 0; i < this->role_score_match_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->role_score_match_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreMatchData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 cur_activity_index = 1;
  if (has_cur_activity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cur_activity_index(), target);
  }

  // optional uint32 activity_status = 2;
  if (has_activity_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activity_status(), target);
  }

  // optional uint32 activity_over_time = 3;
  if (has_activity_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->activity_over_time(), target);
  }

  // repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
  for (int i = 0; i < this->role_score_match_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->role_score_match_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreMatchData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 cur_activity_index = 1;
    if (has_cur_activity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_activity_index());
    }

    // optional uint32 activity_status = 2;
    if (has_activity_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_status());
    }

    // optional uint32 activity_over_time = 3;
    if (has_activity_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activity_over_time());
    }

  }
  // repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
  total_size += 1 * this->role_score_match_data_list_size();
  for (int i = 0; i < this->role_score_match_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_score_match_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreMatchData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreMatchData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreMatchData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreMatchData::MergeFrom(const ScoreMatchData& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_score_match_data_list_.MergeFrom(from.role_score_match_data_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_activity_index()) {
      set_cur_activity_index(from.cur_activity_index());
    }
    if (from.has_activity_status()) {
      set_activity_status(from.activity_status());
    }
    if (from.has_activity_over_time()) {
      set_activity_over_time(from.activity_over_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreMatchData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreMatchData::CopyFrom(const ScoreMatchData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreMatchData::IsInitialized() const {

  return true;
}

void ScoreMatchData::Swap(ScoreMatchData* other) {
  if (other != this) {
    std::swap(cur_activity_index_, other->cur_activity_index_);
    std::swap(activity_status_, other->activity_status_);
    std::swap(activity_over_time_, other->activity_over_time_);
    role_score_match_data_list_.Swap(&other->role_score_match_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreMatchData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreMatchData_descriptor_;
  metadata.reflection = ScoreMatchData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleResourceWarData::kRoleIdFieldNumber;
const int RoleResourceWarData::kTechnologyLevelFieldNumber;
const int RoleResourceWarData::kTotalAccupyTimeFieldNumber;
const int RoleResourceWarData::kRewardResourceWarScoreFieldNumber;
#endif  // !_MSC_VER

RoleResourceWarData::RoleResourceWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleResourceWarData::InitAsDefaultInstance() {
}

RoleResourceWarData::RoleResourceWarData(const RoleResourceWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleResourceWarData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  technology_level_ = 0u;
  total_accupy_time_ = 0u;
  reward_resource_war_score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleResourceWarData::~RoleResourceWarData() {
  SharedDtor();
}

void RoleResourceWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleResourceWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleResourceWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleResourceWarData_descriptor_;
}

const RoleResourceWarData& RoleResourceWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleResourceWarData* RoleResourceWarData::default_instance_ = NULL;

RoleResourceWarData* RoleResourceWarData::New() const {
  return new RoleResourceWarData;
}

void RoleResourceWarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    technology_level_ = 0u;
    total_accupy_time_ = 0u;
    reward_resource_war_score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleResourceWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_technology_level;
        break;
      }

      // optional uint32 technology_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_technology_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &technology_level_)));
          set_has_technology_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_accupy_time;
        break;
      }

      // optional uint32 total_accupy_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_accupy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_accupy_time_)));
          set_has_total_accupy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward_resource_war_score;
        break;
      }

      // optional uint32 reward_resource_war_score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_resource_war_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_resource_war_score_)));
          set_has_reward_resource_war_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleResourceWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 technology_level = 2;
  if (has_technology_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->technology_level(), output);
  }

  // optional uint32 total_accupy_time = 3;
  if (has_total_accupy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_accupy_time(), output);
  }

  // optional uint32 reward_resource_war_score = 4;
  if (has_reward_resource_war_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward_resource_war_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleResourceWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 technology_level = 2;
  if (has_technology_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->technology_level(), target);
  }

  // optional uint32 total_accupy_time = 3;
  if (has_total_accupy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_accupy_time(), target);
  }

  // optional uint32 reward_resource_war_score = 4;
  if (has_reward_resource_war_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward_resource_war_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleResourceWarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 technology_level = 2;
    if (has_technology_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->technology_level());
    }

    // optional uint32 total_accupy_time = 3;
    if (has_total_accupy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_accupy_time());
    }

    // optional uint32 reward_resource_war_score = 4;
    if (has_reward_resource_war_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_resource_war_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleResourceWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleResourceWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleResourceWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleResourceWarData::MergeFrom(const RoleResourceWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_technology_level()) {
      set_technology_level(from.technology_level());
    }
    if (from.has_total_accupy_time()) {
      set_total_accupy_time(from.total_accupy_time());
    }
    if (from.has_reward_resource_war_score()) {
      set_reward_resource_war_score(from.reward_resource_war_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleResourceWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleResourceWarData::CopyFrom(const RoleResourceWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleResourceWarData::IsInitialized() const {

  return true;
}

void RoleResourceWarData::Swap(RoleResourceWarData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(technology_level_, other->technology_level_);
    std::swap(total_accupy_time_, other->total_accupy_time_);
    std::swap(reward_resource_war_score_, other->reward_resource_war_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleResourceWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleResourceWarData_descriptor_;
  metadata.reflection = RoleResourceWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceWarEnemy::kRoleIdFieldNumber;
const int ResourceWarEnemy::kBeAttackTimesFieldNumber;
const int ResourceWarEnemy::kEnemyIdFieldNumber;
#endif  // !_MSC_VER

ResourceWarEnemy::ResourceWarEnemy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceWarEnemy::InitAsDefaultInstance() {
}

ResourceWarEnemy::ResourceWarEnemy(const ResourceWarEnemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceWarEnemy::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  be_attack_times_ = 0u;
  enemy_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceWarEnemy::~ResourceWarEnemy() {
  SharedDtor();
}

void ResourceWarEnemy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceWarEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceWarEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceWarEnemy_descriptor_;
}

const ResourceWarEnemy& ResourceWarEnemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ResourceWarEnemy* ResourceWarEnemy::default_instance_ = NULL;

ResourceWarEnemy* ResourceWarEnemy::New() const {
  return new ResourceWarEnemy;
}

void ResourceWarEnemy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    be_attack_times_ = 0u;
    enemy_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceWarEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_be_attack_times;
        break;
      }

      // optional uint32 be_attack_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_attack_times_)));
          set_has_be_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enemy_id;
        break;
      }

      // optional uint32 enemy_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemy_id_)));
          set_has_enemy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceWarEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 be_attack_times = 2;
  if (has_be_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->be_attack_times(), output);
  }

  // optional uint32 enemy_id = 3;
  if (has_enemy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->enemy_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceWarEnemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 be_attack_times = 2;
  if (has_be_attack_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->be_attack_times(), target);
  }

  // optional uint32 enemy_id = 3;
  if (has_enemy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->enemy_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceWarEnemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 be_attack_times = 2;
    if (has_be_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->be_attack_times());
    }

    // optional uint32 enemy_id = 3;
    if (has_enemy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemy_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceWarEnemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceWarEnemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceWarEnemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceWarEnemy::MergeFrom(const ResourceWarEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_be_attack_times()) {
      set_be_attack_times(from.be_attack_times());
    }
    if (from.has_enemy_id()) {
      set_enemy_id(from.enemy_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceWarEnemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWarEnemy::CopyFrom(const ResourceWarEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWarEnemy::IsInitialized() const {

  return true;
}

void ResourceWarEnemy::Swap(ResourceWarEnemy* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(be_attack_times_, other->be_attack_times_);
    std::swap(enemy_id_, other->enemy_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceWarEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceWarEnemy_descriptor_;
  metadata.reflection = ResourceWarEnemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceWarBattleRecord::kAttackerIdFieldNumber;
const int ResourceWarBattleRecord::kDefenderIdFieldNumber;
const int ResourceWarBattleRecord::kBattleTimeFieldNumber;
const int ResourceWarBattleRecord::kChapterFieldNumber;
const int ResourceWarBattleRecord::kResourceIdFieldNumber;
#endif  // !_MSC_VER

ResourceWarBattleRecord::ResourceWarBattleRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceWarBattleRecord::InitAsDefaultInstance() {
}

ResourceWarBattleRecord::ResourceWarBattleRecord(const ResourceWarBattleRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceWarBattleRecord::SharedCtor() {
  _cached_size_ = 0;
  attacker_id_ = 0u;
  defender_id_ = 0u;
  battle_time_ = 0u;
  chapter_ = 0u;
  resource_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceWarBattleRecord::~ResourceWarBattleRecord() {
  SharedDtor();
}

void ResourceWarBattleRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceWarBattleRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceWarBattleRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceWarBattleRecord_descriptor_;
}

const ResourceWarBattleRecord& ResourceWarBattleRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ResourceWarBattleRecord* ResourceWarBattleRecord::default_instance_ = NULL;

ResourceWarBattleRecord* ResourceWarBattleRecord::New() const {
  return new ResourceWarBattleRecord;
}

void ResourceWarBattleRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_id_ = 0u;
    defender_id_ = 0u;
    battle_time_ = 0u;
    chapter_ = 0u;
    resource_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceWarBattleRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attacker_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_id_)));
          set_has_attacker_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defender_id;
        break;
      }

      // optional uint32 defender_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defender_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defender_id_)));
          set_has_defender_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle_time;
        break;
      }

      // optional uint32 battle_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_time_)));
          set_has_battle_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_chapter;
        break;
      }

      // optional uint32 chapter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chapter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resource_id;
        break;
      }

      // optional uint32 resource_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceWarBattleRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attacker_id = 1;
  if (has_attacker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attacker_id(), output);
  }

  // optional uint32 defender_id = 2;
  if (has_defender_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defender_id(), output);
  }

  // optional uint32 battle_time = 3;
  if (has_battle_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle_time(), output);
  }

  // optional uint32 chapter = 4;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->chapter(), output);
  }

  // optional uint32 resource_id = 5;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resource_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceWarBattleRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attacker_id = 1;
  if (has_attacker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attacker_id(), target);
  }

  // optional uint32 defender_id = 2;
  if (has_defender_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defender_id(), target);
  }

  // optional uint32 battle_time = 3;
  if (has_battle_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle_time(), target);
  }

  // optional uint32 chapter = 4;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->chapter(), target);
  }

  // optional uint32 resource_id = 5;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resource_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceWarBattleRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attacker_id = 1;
    if (has_attacker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_id());
    }

    // optional uint32 defender_id = 2;
    if (has_defender_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defender_id());
    }

    // optional uint32 battle_time = 3;
    if (has_battle_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_time());
    }

    // optional uint32 chapter = 4;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter());
    }

    // optional uint32 resource_id = 5;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceWarBattleRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceWarBattleRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceWarBattleRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceWarBattleRecord::MergeFrom(const ResourceWarBattleRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker_id()) {
      set_attacker_id(from.attacker_id());
    }
    if (from.has_defender_id()) {
      set_defender_id(from.defender_id());
    }
    if (from.has_battle_time()) {
      set_battle_time(from.battle_time());
    }
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceWarBattleRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWarBattleRecord::CopyFrom(const ResourceWarBattleRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWarBattleRecord::IsInitialized() const {

  return true;
}

void ResourceWarBattleRecord::Swap(ResourceWarBattleRecord* other) {
  if (other != this) {
    std::swap(attacker_id_, other->attacker_id_);
    std::swap(defender_id_, other->defender_id_);
    std::swap(battle_time_, other->battle_time_);
    std::swap(chapter_, other->chapter_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceWarBattleRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceWarBattleRecord_descriptor_;
  metadata.reflection = ResourceWarBattleRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceWarResourceData::kChapterFieldNumber;
const int ResourceWarResourceData::kResourceIdFieldNumber;
const int ResourceWarResourceData::kResourceTypeFieldNumber;
const int ResourceWarResourceData::kOccupyStartTimeFieldNumber;
const int ResourceWarResourceData::kOccupyOverTimeFieldNumber;
const int ResourceWarResourceData::kOwnerIdFieldNumber;
const int ResourceWarResourceData::kKeepOccupyTimesFieldNumber;
const int ResourceWarResourceData::kLastBaseRewardTimeFieldNumber;
const int ResourceWarResourceData::kLastExtraRewardTimeFieldNumber;
const int ResourceWarResourceData::kBaseRewardIntervalTimeFieldNumber;
const int ResourceWarResourceData::kCurExtraRewardNeedTimeFieldNumber;
const int ResourceWarResourceData::kAlreadySendBaseRewardTimesFieldNumber;
const int ResourceWarResourceData::kAlreadySendExtraRewardTimesFieldNumber;
#endif  // !_MSC_VER

ResourceWarResourceData::ResourceWarResourceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceWarResourceData::InitAsDefaultInstance() {
}

ResourceWarResourceData::ResourceWarResourceData(const ResourceWarResourceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceWarResourceData::SharedCtor() {
  _cached_size_ = 0;
  chapter_ = 0u;
  resource_id_ = 0u;
  resource_type_ = 0u;
  occupy_start_time_ = 0u;
  occupy_over_time_ = 0u;
  owner_id_ = 0u;
  keep_occupy_times_ = 0u;
  last_base_reward_time_ = 0u;
  last_extra_reward_time_ = 0u;
  base_reward_interval_time_ = 0u;
  cur_extra_reward_need_time_ = 0u;
  already_send_base_reward_times_ = 0u;
  already_send_extra_reward_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceWarResourceData::~ResourceWarResourceData() {
  SharedDtor();
}

void ResourceWarResourceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceWarResourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceWarResourceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceWarResourceData_descriptor_;
}

const ResourceWarResourceData& ResourceWarResourceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ResourceWarResourceData* ResourceWarResourceData::default_instance_ = NULL;

ResourceWarResourceData* ResourceWarResourceData::New() const {
  return new ResourceWarResourceData;
}

void ResourceWarResourceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chapter_ = 0u;
    resource_id_ = 0u;
    resource_type_ = 0u;
    occupy_start_time_ = 0u;
    occupy_over_time_ = 0u;
    owner_id_ = 0u;
    keep_occupy_times_ = 0u;
    last_base_reward_time_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_extra_reward_time_ = 0u;
    base_reward_interval_time_ = 0u;
    cur_extra_reward_need_time_ = 0u;
    already_send_base_reward_times_ = 0u;
    already_send_extra_reward_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceWarResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 chapter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chapter_)));
          set_has_chapter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resource_id;
        break;
      }

      // optional uint32 resource_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_id_)));
          set_has_resource_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resource_type;
        break;
      }

      // optional uint32 resource_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resource_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resource_type_)));
          set_has_resource_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_occupy_start_time;
        break;
      }

      // optional uint32 occupy_start_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_start_time_)));
          set_has_occupy_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_occupy_over_time;
        break;
      }

      // optional uint32 occupy_over_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupy_over_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &occupy_over_time_)));
          set_has_occupy_over_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_keep_occupy_times;
        break;
      }

      // optional uint32 keep_occupy_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_keep_occupy_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &keep_occupy_times_)));
          set_has_keep_occupy_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_last_base_reward_time;
        break;
      }

      // optional uint32 last_base_reward_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_base_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_base_reward_time_)));
          set_has_last_base_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_last_extra_reward_time;
        break;
      }

      // optional uint32 last_extra_reward_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_extra_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_extra_reward_time_)));
          set_has_last_extra_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_base_reward_interval_time;
        break;
      }

      // optional uint32 base_reward_interval_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_base_reward_interval_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_reward_interval_time_)));
          set_has_base_reward_interval_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_extra_reward_need_time;
        break;
      }

      // optional uint32 cur_extra_reward_need_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_extra_reward_need_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_extra_reward_need_time_)));
          set_has_cur_extra_reward_need_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_already_send_base_reward_times;
        break;
      }

      // optional uint32 already_send_base_reward_times = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_send_base_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &already_send_base_reward_times_)));
          set_has_already_send_base_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_already_send_extra_reward_times;
        break;
      }

      // optional uint32 already_send_extra_reward_times = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_send_extra_reward_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &already_send_extra_reward_times_)));
          set_has_already_send_extra_reward_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceWarResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chapter(), output);
  }

  // optional uint32 resource_id = 2;
  if (has_resource_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resource_id(), output);
  }

  // optional uint32 resource_type = 3;
  if (has_resource_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resource_type(), output);
  }

  // optional uint32 occupy_start_time = 4;
  if (has_occupy_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->occupy_start_time(), output);
  }

  // optional uint32 occupy_over_time = 5;
  if (has_occupy_over_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->occupy_over_time(), output);
  }

  // optional uint32 owner_id = 6;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->owner_id(), output);
  }

  // optional uint32 keep_occupy_times = 7;
  if (has_keep_occupy_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->keep_occupy_times(), output);
  }

  // optional uint32 last_base_reward_time = 8;
  if (has_last_base_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->last_base_reward_time(), output);
  }

  // optional uint32 last_extra_reward_time = 9;
  if (has_last_extra_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_extra_reward_time(), output);
  }

  // optional uint32 base_reward_interval_time = 10;
  if (has_base_reward_interval_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->base_reward_interval_time(), output);
  }

  // optional uint32 cur_extra_reward_need_time = 11;
  if (has_cur_extra_reward_need_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cur_extra_reward_need_time(), output);
  }

  // optional uint32 already_send_base_reward_times = 12;
  if (has_already_send_base_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->already_send_base_reward_times(), output);
  }

  // optional uint32 already_send_extra_reward_times = 13;
  if (has_already_send_extra_reward_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->already_send_extra_reward_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceWarResourceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 chapter = 1;
  if (has_chapter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chapter(), target);
  }

  // optional uint32 resource_id = 2;
  if (has_resource_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resource_id(), target);
  }

  // optional uint32 resource_type = 3;
  if (has_resource_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resource_type(), target);
  }

  // optional uint32 occupy_start_time = 4;
  if (has_occupy_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->occupy_start_time(), target);
  }

  // optional uint32 occupy_over_time = 5;
  if (has_occupy_over_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->occupy_over_time(), target);
  }

  // optional uint32 owner_id = 6;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->owner_id(), target);
  }

  // optional uint32 keep_occupy_times = 7;
  if (has_keep_occupy_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->keep_occupy_times(), target);
  }

  // optional uint32 last_base_reward_time = 8;
  if (has_last_base_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->last_base_reward_time(), target);
  }

  // optional uint32 last_extra_reward_time = 9;
  if (has_last_extra_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_extra_reward_time(), target);
  }

  // optional uint32 base_reward_interval_time = 10;
  if (has_base_reward_interval_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->base_reward_interval_time(), target);
  }

  // optional uint32 cur_extra_reward_need_time = 11;
  if (has_cur_extra_reward_need_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cur_extra_reward_need_time(), target);
  }

  // optional uint32 already_send_base_reward_times = 12;
  if (has_already_send_base_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->already_send_base_reward_times(), target);
  }

  // optional uint32 already_send_extra_reward_times = 13;
  if (has_already_send_extra_reward_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->already_send_extra_reward_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceWarResourceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 chapter = 1;
    if (has_chapter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chapter());
    }

    // optional uint32 resource_id = 2;
    if (has_resource_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_id());
    }

    // optional uint32 resource_type = 3;
    if (has_resource_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resource_type());
    }

    // optional uint32 occupy_start_time = 4;
    if (has_occupy_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy_start_time());
    }

    // optional uint32 occupy_over_time = 5;
    if (has_occupy_over_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->occupy_over_time());
    }

    // optional uint32 owner_id = 6;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 keep_occupy_times = 7;
    if (has_keep_occupy_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->keep_occupy_times());
    }

    // optional uint32 last_base_reward_time = 8;
    if (has_last_base_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_base_reward_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_extra_reward_time = 9;
    if (has_last_extra_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_extra_reward_time());
    }

    // optional uint32 base_reward_interval_time = 10;
    if (has_base_reward_interval_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_reward_interval_time());
    }

    // optional uint32 cur_extra_reward_need_time = 11;
    if (has_cur_extra_reward_need_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_extra_reward_need_time());
    }

    // optional uint32 already_send_base_reward_times = 12;
    if (has_already_send_base_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->already_send_base_reward_times());
    }

    // optional uint32 already_send_extra_reward_times = 13;
    if (has_already_send_extra_reward_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->already_send_extra_reward_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceWarResourceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceWarResourceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceWarResourceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceWarResourceData::MergeFrom(const ResourceWarResourceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chapter()) {
      set_chapter(from.chapter());
    }
    if (from.has_resource_id()) {
      set_resource_id(from.resource_id());
    }
    if (from.has_resource_type()) {
      set_resource_type(from.resource_type());
    }
    if (from.has_occupy_start_time()) {
      set_occupy_start_time(from.occupy_start_time());
    }
    if (from.has_occupy_over_time()) {
      set_occupy_over_time(from.occupy_over_time());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_keep_occupy_times()) {
      set_keep_occupy_times(from.keep_occupy_times());
    }
    if (from.has_last_base_reward_time()) {
      set_last_base_reward_time(from.last_base_reward_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_extra_reward_time()) {
      set_last_extra_reward_time(from.last_extra_reward_time());
    }
    if (from.has_base_reward_interval_time()) {
      set_base_reward_interval_time(from.base_reward_interval_time());
    }
    if (from.has_cur_extra_reward_need_time()) {
      set_cur_extra_reward_need_time(from.cur_extra_reward_need_time());
    }
    if (from.has_already_send_base_reward_times()) {
      set_already_send_base_reward_times(from.already_send_base_reward_times());
    }
    if (from.has_already_send_extra_reward_times()) {
      set_already_send_extra_reward_times(from.already_send_extra_reward_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceWarResourceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWarResourceData::CopyFrom(const ResourceWarResourceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWarResourceData::IsInitialized() const {

  return true;
}

void ResourceWarResourceData::Swap(ResourceWarResourceData* other) {
  if (other != this) {
    std::swap(chapter_, other->chapter_);
    std::swap(resource_id_, other->resource_id_);
    std::swap(resource_type_, other->resource_type_);
    std::swap(occupy_start_time_, other->occupy_start_time_);
    std::swap(occupy_over_time_, other->occupy_over_time_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(keep_occupy_times_, other->keep_occupy_times_);
    std::swap(last_base_reward_time_, other->last_base_reward_time_);
    std::swap(last_extra_reward_time_, other->last_extra_reward_time_);
    std::swap(base_reward_interval_time_, other->base_reward_interval_time_);
    std::swap(cur_extra_reward_need_time_, other->cur_extra_reward_need_time_);
    std::swap(already_send_base_reward_times_, other->already_send_base_reward_times_);
    std::swap(already_send_extra_reward_times_, other->already_send_extra_reward_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceWarResourceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceWarResourceData_descriptor_;
  metadata.reflection = ResourceWarResourceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceWarData::kResourceDataListFieldNumber;
const int ResourceWarData::kRoleResourceWarDataListFieldNumber;
const int ResourceWarData::kEnemyListFieldNumber;
const int ResourceWarData::kBattleRecordListFieldNumber;
#endif  // !_MSC_VER

ResourceWarData::ResourceWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceWarData::InitAsDefaultInstance() {
}

ResourceWarData::ResourceWarData(const ResourceWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceWarData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceWarData::~ResourceWarData() {
  SharedDtor();
}

void ResourceWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceWarData_descriptor_;
}

const ResourceWarData& ResourceWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

ResourceWarData* ResourceWarData::default_instance_ = NULL;

ResourceWarData* ResourceWarData::New() const {
  return new ResourceWarData;
}

void ResourceWarData::Clear() {
  resource_data_list_.Clear();
  role_resource_war_data_list_.Clear();
  enemy_list_.Clear();
  battle_record_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.ResourceWarResourceData resource_data_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_resource_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_resource_data_list;
        if (input->ExpectTag(18)) goto parse_role_resource_war_data_list;
        break;
      }

      // repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_resource_war_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_resource_war_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_resource_war_data_list;
        if (input->ExpectTag(26)) goto parse_enemy_list;
        break;
      }

      // repeated .PB.ResourceWarEnemy enemy_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemy_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemy_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_enemy_list;
        if (input->ExpectTag(34)) goto parse_battle_record_list;
        break;
      }

      // repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_record_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_battle_record_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.ResourceWarResourceData resource_data_list = 1;
  for (int i = 0; i < this->resource_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->resource_data_list(i), output);
  }

  // repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
  for (int i = 0; i < this->role_resource_war_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_resource_war_data_list(i), output);
  }

  // repeated .PB.ResourceWarEnemy enemy_list = 3;
  for (int i = 0; i < this->enemy_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->enemy_list(i), output);
  }

  // repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
  for (int i = 0; i < this->battle_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->battle_record_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.ResourceWarResourceData resource_data_list = 1;
  for (int i = 0; i < this->resource_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->resource_data_list(i), target);
  }

  // repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
  for (int i = 0; i < this->role_resource_war_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_resource_war_data_list(i), target);
  }

  // repeated .PB.ResourceWarEnemy enemy_list = 3;
  for (int i = 0; i < this->enemy_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->enemy_list(i), target);
  }

  // repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
  for (int i = 0; i < this->battle_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->battle_record_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceWarData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.ResourceWarResourceData resource_data_list = 1;
  total_size += 1 * this->resource_data_list_size();
  for (int i = 0; i < this->resource_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->resource_data_list(i));
  }

  // repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
  total_size += 1 * this->role_resource_war_data_list_size();
  for (int i = 0; i < this->role_resource_war_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_resource_war_data_list(i));
  }

  // repeated .PB.ResourceWarEnemy enemy_list = 3;
  total_size += 1 * this->enemy_list_size();
  for (int i = 0; i < this->enemy_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemy_list(i));
  }

  // repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
  total_size += 1 * this->battle_record_list_size();
  for (int i = 0; i < this->battle_record_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_record_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceWarData::MergeFrom(const ResourceWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  resource_data_list_.MergeFrom(from.resource_data_list_);
  role_resource_war_data_list_.MergeFrom(from.role_resource_war_data_list_);
  enemy_list_.MergeFrom(from.enemy_list_);
  battle_record_list_.MergeFrom(from.battle_record_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceWarData::CopyFrom(const ResourceWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceWarData::IsInitialized() const {

  return true;
}

void ResourceWarData::Swap(ResourceWarData* other) {
  if (other != this) {
    resource_data_list_.Swap(&other->resource_data_list_);
    role_resource_war_data_list_.Swap(&other->role_resource_war_data_list_);
    enemy_list_.Swap(&other->enemy_list_);
    battle_record_list_.Swap(&other->battle_record_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceWarData_descriptor_;
  metadata.reflection = ResourceWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarDefenderInfo::kRoleIdFieldNumber;
const int StarDefenderInfo::kBeAttackTimesFieldNumber;
#endif  // !_MSC_VER

StarDefenderInfo::StarDefenderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarDefenderInfo::InitAsDefaultInstance() {
}

StarDefenderInfo::StarDefenderInfo(const StarDefenderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarDefenderInfo::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  be_attack_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarDefenderInfo::~StarDefenderInfo() {
  SharedDtor();
}

void StarDefenderInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarDefenderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarDefenderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarDefenderInfo_descriptor_;
}

const StarDefenderInfo& StarDefenderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

StarDefenderInfo* StarDefenderInfo::default_instance_ = NULL;

StarDefenderInfo* StarDefenderInfo::New() const {
  return new StarDefenderInfo;
}

void StarDefenderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    be_attack_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarDefenderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_be_attack_times;
        break;
      }

      // optional uint32 be_attack_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_be_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &be_attack_times_)));
          set_has_be_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarDefenderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 be_attack_times = 2;
  if (has_be_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->be_attack_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarDefenderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 be_attack_times = 2;
  if (has_be_attack_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->be_attack_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarDefenderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 be_attack_times = 2;
    if (has_be_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->be_attack_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarDefenderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarDefenderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarDefenderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarDefenderInfo::MergeFrom(const StarDefenderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_be_attack_times()) {
      set_be_attack_times(from.be_attack_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarDefenderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarDefenderInfo::CopyFrom(const StarDefenderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarDefenderInfo::IsInitialized() const {

  return true;
}

void StarDefenderInfo::Swap(StarDefenderInfo* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(be_attack_times_, other->be_attack_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarDefenderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarDefenderInfo_descriptor_;
  metadata.reflection = StarDefenderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarTowerInfo::kTowerIdFieldNumber;
const int StarTowerInfo::kDurabilityFieldNumber;
const int StarTowerInfo::kMonsterBeAttackTimesFieldNumber;
const int StarTowerInfo::kDefenderListFieldNumber;
#endif  // !_MSC_VER

StarTowerInfo::StarTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarTowerInfo::InitAsDefaultInstance() {
}

StarTowerInfo::StarTowerInfo(const StarTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  tower_id_ = 0u;
  durability_ = 0u;
  monster_be_attack_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarTowerInfo::~StarTowerInfo() {
  SharedDtor();
}

void StarTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarTowerInfo_descriptor_;
}

const StarTowerInfo& StarTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

StarTowerInfo* StarTowerInfo::default_instance_ = NULL;

StarTowerInfo* StarTowerInfo::New() const {
  return new StarTowerInfo;
}

void StarTowerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tower_id_ = 0u;
    durability_ = 0u;
    monster_be_attack_times_ = 0u;
  }
  defender_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tower_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tower_id_)));
          set_has_tower_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_durability;
        break;
      }

      // optional uint32 durability = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monster_be_attack_times;
        break;
      }

      // optional uint32 monster_be_attack_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monster_be_attack_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monster_be_attack_times_)));
          set_has_monster_be_attack_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defender_list;
        break;
      }

      // repeated .PB.StarDefenderInfo defender_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defender_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defender_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_defender_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tower_id = 1;
  if (has_tower_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tower_id(), output);
  }

  // optional uint32 durability = 2;
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->durability(), output);
  }

  // optional uint32 monster_be_attack_times = 3;
  if (has_monster_be_attack_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monster_be_attack_times(), output);
  }

  // repeated .PB.StarDefenderInfo defender_list = 4;
  for (int i = 0; i < this->defender_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->defender_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tower_id = 1;
  if (has_tower_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tower_id(), target);
  }

  // optional uint32 durability = 2;
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->durability(), target);
  }

  // optional uint32 monster_be_attack_times = 3;
  if (has_monster_be_attack_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->monster_be_attack_times(), target);
  }

  // repeated .PB.StarDefenderInfo defender_list = 4;
  for (int i = 0; i < this->defender_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->defender_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tower_id = 1;
    if (has_tower_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tower_id());
    }

    // optional uint32 durability = 2;
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durability());
    }

    // optional uint32 monster_be_attack_times = 3;
    if (has_monster_be_attack_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monster_be_attack_times());
    }

  }
  // repeated .PB.StarDefenderInfo defender_list = 4;
  total_size += 1 * this->defender_list_size();
  for (int i = 0; i < this->defender_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defender_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarTowerInfo::MergeFrom(const StarTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  defender_list_.MergeFrom(from.defender_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tower_id()) {
      set_tower_id(from.tower_id());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_monster_be_attack_times()) {
      set_monster_be_attack_times(from.monster_be_attack_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarTowerInfo::CopyFrom(const StarTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarTowerInfo::IsInitialized() const {

  return true;
}

void StarTowerInfo::Swap(StarTowerInfo* other) {
  if (other != this) {
    std::swap(tower_id_, other->tower_id_);
    std::swap(durability_, other->durability_);
    std::swap(monster_be_attack_times_, other->monster_be_attack_times_);
    defender_list_.Swap(&other->defender_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarTowerInfo_descriptor_;
  metadata.reflection = StarTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarScore::kGuildIdFieldNumber;
const int GuildWarScore::kScoreFieldNumber;
#endif  // !_MSC_VER

GuildWarScore::GuildWarScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarScore::InitAsDefaultInstance() {
}

GuildWarScore::GuildWarScore(const GuildWarScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarScore::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarScore::~GuildWarScore() {
  SharedDtor();
}

void GuildWarScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarScore_descriptor_;
}

const GuildWarScore& GuildWarScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildWarScore* GuildWarScore::default_instance_ = NULL;

GuildWarScore* GuildWarScore::New() const {
  return new GuildWarScore;
}

void GuildWarScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarScore::MergeFrom(const GuildWarScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarScore::CopyFrom(const GuildWarScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarScore::IsInitialized() const {

  return true;
}

void GuildWarScore::Swap(GuildWarScore* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarScore_descriptor_;
  metadata.reflection = GuildWarScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StarInfo::kRegionIdFieldNumber;
const int StarInfo::kInfoIdFieldNumber;
const int StarInfo::kBelongGuildIdFieldNumber;
const int StarInfo::kAttackGuildIdFieldNumber;
const int StarInfo::kTookRewardRecordListFieldNumber;
const int StarInfo::kDeclareWarListFieldNumber;
const int StarInfo::kScoreListFieldNumber;
const int StarInfo::kTowerListFieldNumber;
const int StarInfo::kLastBelongGuildIdFieldNumber;
#endif  // !_MSC_VER

StarInfo::StarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StarInfo::InitAsDefaultInstance() {
}

StarInfo::StarInfo(const StarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StarInfo::SharedCtor() {
  _cached_size_ = 0;
  region_id_ = 0u;
  info_id_ = 0u;
  belong_guild_id_ = 0u;
  attack_guild_id_ = 0u;
  last_belong_guild_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StarInfo::~StarInfo() {
  SharedDtor();
}

void StarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StarInfo_descriptor_;
}

const StarInfo& StarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

StarInfo* StarInfo::default_instance_ = NULL;

StarInfo* StarInfo::New() const {
  return new StarInfo;
}

void StarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    region_id_ = 0u;
    info_id_ = 0u;
    belong_guild_id_ = 0u;
    attack_guild_id_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    last_belong_guild_id_ = 0u;
  }
  took_reward_record_list_.Clear();
  declare_war_list_.Clear();
  score_list_.Clear();
  tower_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 region_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_id_)));
          set_has_region_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_info_id;
        break;
      }

      // optional uint32 info_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &info_id_)));
          set_has_info_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_belong_guild_id;
        break;
      }

      // optional uint32 belong_guild_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belong_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &belong_guild_id_)));
          set_has_belong_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack_guild_id;
        break;
      }

      // optional uint32 attack_guild_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_guild_id_)));
          set_has_attack_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_took_reward_record_list;
        break;
      }

      // repeated uint32 took_reward_record_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_took_reward_record_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_took_reward_record_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_took_reward_record_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_took_reward_record_list;
        if (input->ExpectTag(48)) goto parse_declare_war_list;
        break;
      }

      // repeated uint32 declare_war_list = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_declare_war_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_declare_war_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_declare_war_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_declare_war_list;
        if (input->ExpectTag(58)) goto parse_score_list;
        break;
      }

      // repeated .PB.GuildWarScore score_list = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_score_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_score_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_score_list;
        if (input->ExpectTag(66)) goto parse_tower_list;
        break;
      }

      // repeated .PB.StarTowerInfo tower_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tower_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tower_list;
        if (input->ExpectTag(72)) goto parse_last_belong_guild_id;
        break;
      }

      // optional uint32 last_belong_guild_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_belong_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &last_belong_guild_id_)));
          set_has_last_belong_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->region_id(), output);
  }

  // optional uint32 info_id = 2;
  if (has_info_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->info_id(), output);
  }

  // optional uint32 belong_guild_id = 3;
  if (has_belong_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->belong_guild_id(), output);
  }

  // optional uint32 attack_guild_id = 4;
  if (has_attack_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attack_guild_id(), output);
  }

  // repeated uint32 took_reward_record_list = 5;
  for (int i = 0; i < this->took_reward_record_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->took_reward_record_list(i), output);
  }

  // repeated uint32 declare_war_list = 6;
  for (int i = 0; i < this->declare_war_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->declare_war_list(i), output);
  }

  // repeated .PB.GuildWarScore score_list = 7;
  for (int i = 0; i < this->score_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->score_list(i), output);
  }

  // repeated .PB.StarTowerInfo tower_list = 8;
  for (int i = 0; i < this->tower_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->tower_list(i), output);
  }

  // optional uint32 last_belong_guild_id = 9;
  if (has_last_belong_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->last_belong_guild_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 region_id = 1;
  if (has_region_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->region_id(), target);
  }

  // optional uint32 info_id = 2;
  if (has_info_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->info_id(), target);
  }

  // optional uint32 belong_guild_id = 3;
  if (has_belong_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->belong_guild_id(), target);
  }

  // optional uint32 attack_guild_id = 4;
  if (has_attack_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attack_guild_id(), target);
  }

  // repeated uint32 took_reward_record_list = 5;
  for (int i = 0; i < this->took_reward_record_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->took_reward_record_list(i), target);
  }

  // repeated uint32 declare_war_list = 6;
  for (int i = 0; i < this->declare_war_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->declare_war_list(i), target);
  }

  // repeated .PB.GuildWarScore score_list = 7;
  for (int i = 0; i < this->score_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->score_list(i), target);
  }

  // repeated .PB.StarTowerInfo tower_list = 8;
  for (int i = 0; i < this->tower_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->tower_list(i), target);
  }

  // optional uint32 last_belong_guild_id = 9;
  if (has_last_belong_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->last_belong_guild_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 region_id = 1;
    if (has_region_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->region_id());
    }

    // optional uint32 info_id = 2;
    if (has_info_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->info_id());
    }

    // optional uint32 belong_guild_id = 3;
    if (has_belong_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->belong_guild_id());
    }

    // optional uint32 attack_guild_id = 4;
    if (has_attack_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack_guild_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 last_belong_guild_id = 9;
    if (has_last_belong_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->last_belong_guild_id());
    }

  }
  // repeated uint32 took_reward_record_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->took_reward_record_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->took_reward_record_list(i));
    }
    total_size += 1 * this->took_reward_record_list_size() + data_size;
  }

  // repeated uint32 declare_war_list = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->declare_war_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->declare_war_list(i));
    }
    total_size += 1 * this->declare_war_list_size() + data_size;
  }

  // repeated .PB.GuildWarScore score_list = 7;
  total_size += 1 * this->score_list_size();
  for (int i = 0; i < this->score_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->score_list(i));
  }

  // repeated .PB.StarTowerInfo tower_list = 8;
  total_size += 1 * this->tower_list_size();
  for (int i = 0; i < this->tower_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tower_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StarInfo::MergeFrom(const StarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  took_reward_record_list_.MergeFrom(from.took_reward_record_list_);
  declare_war_list_.MergeFrom(from.declare_war_list_);
  score_list_.MergeFrom(from.score_list_);
  tower_list_.MergeFrom(from.tower_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_region_id()) {
      set_region_id(from.region_id());
    }
    if (from.has_info_id()) {
      set_info_id(from.info_id());
    }
    if (from.has_belong_guild_id()) {
      set_belong_guild_id(from.belong_guild_id());
    }
    if (from.has_attack_guild_id()) {
      set_attack_guild_id(from.attack_guild_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_last_belong_guild_id()) {
      set_last_belong_guild_id(from.last_belong_guild_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StarInfo::CopyFrom(const StarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StarInfo::IsInitialized() const {

  return true;
}

void StarInfo::Swap(StarInfo* other) {
  if (other != this) {
    std::swap(region_id_, other->region_id_);
    std::swap(info_id_, other->info_id_);
    std::swap(belong_guild_id_, other->belong_guild_id_);
    std::swap(attack_guild_id_, other->attack_guild_id_);
    took_reward_record_list_.Swap(&other->took_reward_record_list_);
    declare_war_list_.Swap(&other->declare_war_list_);
    score_list_.Swap(&other->score_list_);
    tower_list_.Swap(&other->tower_list_);
    std::swap(last_belong_guild_id_, other->last_belong_guild_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StarInfo_descriptor_;
  metadata.reflection = StarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleGuildWarData::kRoleIdFieldNumber;
const int RoleGuildWarData::kBuyHighStarBattleTimesFieldNumber;
const int RoleGuildWarData::kUsedLowStarBattleTimesFieldNumber;
const int RoleGuildWarData::kUsedHighStarBattleTimesFieldNumber;
#endif  // !_MSC_VER

RoleGuildWarData::RoleGuildWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleGuildWarData::InitAsDefaultInstance() {
}

RoleGuildWarData::RoleGuildWarData(const RoleGuildWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleGuildWarData::SharedCtor() {
  _cached_size_ = 0;
  role_id_ = 0u;
  buy_high_star_battle_times_ = 0u;
  used_low_star_battle_times_ = 0u;
  used_high_star_battle_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleGuildWarData::~RoleGuildWarData() {
  SharedDtor();
}

void RoleGuildWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleGuildWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleGuildWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleGuildWarData_descriptor_;
}

const RoleGuildWarData& RoleGuildWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

RoleGuildWarData* RoleGuildWarData::default_instance_ = NULL;

RoleGuildWarData* RoleGuildWarData::New() const {
  return new RoleGuildWarData;
}

void RoleGuildWarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    role_id_ = 0u;
    buy_high_star_battle_times_ = 0u;
    used_low_star_battle_times_ = 0u;
    used_high_star_battle_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleGuildWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 role_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy_high_star_battle_times;
        break;
      }

      // optional uint32 buy_high_star_battle_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_high_star_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buy_high_star_battle_times_)));
          set_has_buy_high_star_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_used_low_star_battle_times;
        break;
      }

      // optional uint32 used_low_star_battle_times = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_low_star_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_low_star_battle_times_)));
          set_has_used_low_star_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_used_high_star_battle_times;
        break;
      }

      // optional uint32 used_high_star_battle_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_used_high_star_battle_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &used_high_star_battle_times_)));
          set_has_used_high_star_battle_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleGuildWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->role_id(), output);
  }

  // optional uint32 buy_high_star_battle_times = 2;
  if (has_buy_high_star_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buy_high_star_battle_times(), output);
  }

  // optional uint32 used_low_star_battle_times = 3;
  if (has_used_low_star_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->used_low_star_battle_times(), output);
  }

  // optional uint32 used_high_star_battle_times = 4;
  if (has_used_high_star_battle_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->used_high_star_battle_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleGuildWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 role_id = 1;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->role_id(), target);
  }

  // optional uint32 buy_high_star_battle_times = 2;
  if (has_buy_high_star_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buy_high_star_battle_times(), target);
  }

  // optional uint32 used_low_star_battle_times = 3;
  if (has_used_low_star_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->used_low_star_battle_times(), target);
  }

  // optional uint32 used_high_star_battle_times = 4;
  if (has_used_high_star_battle_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->used_high_star_battle_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleGuildWarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 role_id = 1;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->role_id());
    }

    // optional uint32 buy_high_star_battle_times = 2;
    if (has_buy_high_star_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buy_high_star_battle_times());
    }

    // optional uint32 used_low_star_battle_times = 3;
    if (has_used_low_star_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_low_star_battle_times());
    }

    // optional uint32 used_high_star_battle_times = 4;
    if (has_used_high_star_battle_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->used_high_star_battle_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleGuildWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleGuildWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleGuildWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleGuildWarData::MergeFrom(const RoleGuildWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_buy_high_star_battle_times()) {
      set_buy_high_star_battle_times(from.buy_high_star_battle_times());
    }
    if (from.has_used_low_star_battle_times()) {
      set_used_low_star_battle_times(from.used_low_star_battle_times());
    }
    if (from.has_used_high_star_battle_times()) {
      set_used_high_star_battle_times(from.used_high_star_battle_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleGuildWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleGuildWarData::CopyFrom(const RoleGuildWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleGuildWarData::IsInitialized() const {

  return true;
}

void RoleGuildWarData::Swap(RoleGuildWarData* other) {
  if (other != this) {
    std::swap(role_id_, other->role_id_);
    std::swap(buy_high_star_battle_times_, other->buy_high_star_battle_times_);
    std::swap(used_low_star_battle_times_, other->used_low_star_battle_times_);
    std::swap(used_high_star_battle_times_, other->used_high_star_battle_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleGuildWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleGuildWarData_descriptor_;
  metadata.reflection = RoleGuildWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildWarData::kStarListFieldNumber;
const int GuildWarData::kRoleGuildWarDataListFieldNumber;
#endif  // !_MSC_VER

GuildWarData::GuildWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuildWarData::InitAsDefaultInstance() {
}

GuildWarData::GuildWarData(const GuildWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuildWarData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildWarData::~GuildWarData() {
  SharedDtor();
}

void GuildWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildWarData_descriptor_;
}

const GuildWarData& GuildWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_5fdefine_2eproto();
  return *default_instance_;
}

GuildWarData* GuildWarData::default_instance_ = NULL;

GuildWarData* GuildWarData::New() const {
  return new GuildWarData;
}

void GuildWarData::Clear() {
  star_list_.Clear();
  role_guild_war_data_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB.StarInfo star_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_star_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_star_list;
        if (input->ExpectTag(18)) goto parse_role_guild_war_data_list;
        break;
      }

      // repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_guild_war_data_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_guild_war_data_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_role_guild_war_data_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB.StarInfo star_list = 1;
  for (int i = 0; i < this->star_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->star_list(i), output);
  }

  // repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
  for (int i = 0; i < this->role_guild_war_data_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->role_guild_war_data_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuildWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB.StarInfo star_list = 1;
  for (int i = 0; i < this->star_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->star_list(i), target);
  }

  // repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
  for (int i = 0; i < this->role_guild_war_data_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->role_guild_war_data_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuildWarData::ByteSize() const {
  int total_size = 0;

  // repeated .PB.StarInfo star_list = 1;
  total_size += 1 * this->star_list_size();
  for (int i = 0; i < this->star_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->star_list(i));
  }

  // repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
  total_size += 1 * this->role_guild_war_data_list_size();
  for (int i = 0; i < this->role_guild_war_data_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_guild_war_data_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildWarData::MergeFrom(const GuildWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  star_list_.MergeFrom(from.star_list_);
  role_guild_war_data_list_.MergeFrom(from.role_guild_war_data_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildWarData::CopyFrom(const GuildWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildWarData::IsInitialized() const {

  return true;
}

void GuildWarData::Swap(GuildWarData* other) {
  if (other != this) {
    star_list_.Swap(&other->star_list_);
    role_guild_war_data_list_.Swap(&other->role_guild_war_data_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildWarData_descriptor_;
  metadata.reflection = GuildWarData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

// @@protoc_insertion_point(global_scope)
