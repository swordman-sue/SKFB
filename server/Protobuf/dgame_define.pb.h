// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgame_define.proto

#ifndef PROTOBUF_dgame_5fdefine_2eproto__INCLUDED
#define PROTOBUF_dgame_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace dgame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dgame_5fdefine_2eproto();
void protobuf_AssignDesc_dgame_5fdefine_2eproto();
void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

class OpenedSystemItem;
class EquipmentData;
class PartsData;
class ProductData;
class ProductDetailInfo;
class SouvenirDate;
class OrderItem;
class OrderInfo;
class ProductSketchInfo;
class PointSourceInfo;
class OriginalProductInfo;
class BindBankAccountInfo;
class OriginalProductProfitInfo;
class DayOriginalProductProfit;
class OriginalProductProfitBaseInfo;
class DayOriginalProductProfitBase;
class ProfitData;
class CouponData;
class OriginalProductPartInfo;
class OriginalProductDetail;
class TradeInfo;
class ProductSpaceCategoryInfo;
class ProductSpaceProductInfo;
class CooperationProductInfo;

enum SYSTEM_STATUS {
  FINISHED = 0,
  UNFINISHED = 1
};
bool SYSTEM_STATUS_IsValid(int value);
const SYSTEM_STATUS SYSTEM_STATUS_MIN = FINISHED;
const SYSTEM_STATUS SYSTEM_STATUS_MAX = UNFINISHED;
const int SYSTEM_STATUS_ARRAYSIZE = SYSTEM_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* SYSTEM_STATUS_descriptor();
inline const ::std::string& SYSTEM_STATUS_Name(SYSTEM_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    SYSTEM_STATUS_descriptor(), value);
}
inline bool SYSTEM_STATUS_Parse(
    const ::std::string& name, SYSTEM_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SYSTEM_STATUS>(
    SYSTEM_STATUS_descriptor(), name, value);
}
enum ELogin_Type {
  E_Login_Normal = 1,
  E_Login_Register = 2,
  E_Login_Modify = 3
};
bool ELogin_Type_IsValid(int value);
const ELogin_Type ELogin_Type_MIN = E_Login_Normal;
const ELogin_Type ELogin_Type_MAX = E_Login_Modify;
const int ELogin_Type_ARRAYSIZE = ELogin_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELogin_Type_descriptor();
inline const ::std::string& ELogin_Type_Name(ELogin_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELogin_Type_descriptor(), value);
}
inline bool ELogin_Type_Parse(
    const ::std::string& name, ELogin_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELogin_Type>(
    ELogin_Type_descriptor(), name, value);
}
enum EGM_Type {
  E_GM_Set_Age = 1
};
bool EGM_Type_IsValid(int value);
const EGM_Type EGM_Type_MIN = E_GM_Set_Age;
const EGM_Type EGM_Type_MAX = E_GM_Set_Age;
const int EGM_Type_ARRAYSIZE = EGM_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGM_Type_descriptor();
inline const ::std::string& EGM_Type_Name(EGM_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGM_Type_descriptor(), value);
}
inline bool EGM_Type_Parse(
    const ::std::string& name, EGM_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGM_Type>(
    EGM_Type_descriptor(), name, value);
}
enum EChat_Type {
  E_Chat_P2P = 1,
  E_Chat_World = 2
};
bool EChat_Type_IsValid(int value);
const EChat_Type EChat_Type_MIN = E_Chat_P2P;
const EChat_Type EChat_Type_MAX = E_Chat_World;
const int EChat_Type_ARRAYSIZE = EChat_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EChat_Type_descriptor();
inline const ::std::string& EChat_Type_Name(EChat_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EChat_Type_descriptor(), value);
}
inline bool EChat_Type_Parse(
    const ::std::string& name, EChat_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EChat_Type>(
    EChat_Type_descriptor(), name, value);
}
enum EOrder_Type {
  E_Order_Type_Payment = 1,
  E_Order_Type_Receive = 2,
  E_Order_Type_Ivaluate = 3,
  E_Order_Type_All = 4
};
bool EOrder_Type_IsValid(int value);
const EOrder_Type EOrder_Type_MIN = E_Order_Type_Payment;
const EOrder_Type EOrder_Type_MAX = E_Order_Type_All;
const int EOrder_Type_ARRAYSIZE = EOrder_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOrder_Type_descriptor();
inline const ::std::string& EOrder_Type_Name(EOrder_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOrder_Type_descriptor(), value);
}
inline bool EOrder_Type_Parse(
    const ::std::string& name, EOrder_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOrder_Type>(
    EOrder_Type_descriptor(), name, value);
}
enum EDesigner_Type {
  E_Designer_Normal = 0,
  E_Designer_Lover = 1,
  E_Designer_Professional = 2
};
bool EDesigner_Type_IsValid(int value);
const EDesigner_Type EDesigner_Type_MIN = E_Designer_Normal;
const EDesigner_Type EDesigner_Type_MAX = E_Designer_Professional;
const int EDesigner_Type_ARRAYSIZE = EDesigner_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDesigner_Type_descriptor();
inline const ::std::string& EDesigner_Type_Name(EDesigner_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDesigner_Type_descriptor(), value);
}
inline bool EDesigner_Type_Parse(
    const ::std::string& name, EDesigner_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDesigner_Type>(
    EDesigner_Type_descriptor(), name, value);
}
enum EDesigner_Check_Status {
  Designer_Status_None = 0,
  Designer_Status_Check = 1,
  Designer_Status_Fail = 2,
  Designer_Status_Pass = 3
};
bool EDesigner_Check_Status_IsValid(int value);
const EDesigner_Check_Status EDesigner_Check_Status_MIN = Designer_Status_None;
const EDesigner_Check_Status EDesigner_Check_Status_MAX = Designer_Status_Pass;
const int EDesigner_Check_Status_ARRAYSIZE = EDesigner_Check_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDesigner_Check_Status_descriptor();
inline const ::std::string& EDesigner_Check_Status_Name(EDesigner_Check_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDesigner_Check_Status_descriptor(), value);
}
inline bool EDesigner_Check_Status_Parse(
    const ::std::string& name, EDesigner_Check_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDesigner_Check_Status>(
    EDesigner_Check_Status_descriptor(), name, value);
}
enum Error_Code {
  Error_Code_Unknow = 0,
  Error_Code_OK = 200,
  Error_Code_Account_Invalid = 2,
  Error_Code_Kickout = 3,
  Error_Code_Account_In_Use = 4,
  Error_Code_PhoneNumber_Not_Register = 5,
  Error_Code_Mobile_Validate_Fail = 6,
  Error_Code_Mobile_Validate_Server_Invalid = 7,
  Error_Code_Chat_Target_Invalid = 100,
  Error_Code_Feedback_Desc_Invalid = 300,
  Error_Code_Exchange_Gold_Not_Enough = 400,
  Error_Code_Balance_Not_Enough = 1000
};
bool Error_Code_IsValid(int value);
const Error_Code Error_Code_MIN = Error_Code_Unknow;
const Error_Code Error_Code_MAX = Error_Code_Balance_Not_Enough;
const int Error_Code_ARRAYSIZE = Error_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor();
inline const ::std::string& Error_Code_Name(Error_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_Code_descriptor(), value);
}
inline bool Error_Code_Parse(
    const ::std::string& name, Error_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_Code>(
    Error_Code_descriptor(), name, value);
}
enum OrderStatus {
  PENDING_PAYMENT = 0,
  PENDING_REVIEW = 1,
  PENDING_SHIPMENT = 2,
  SHIPPED = 3,
  RECEIVED = 4,
  COMPLETED = 5,
  FAILED = 6,
  CANCELED = 7,
  DENIED = 8,
  PRODUCING = 9,
  WAIT_OVER_PAYED = 10
};
bool OrderStatus_IsValid(int value);
const OrderStatus OrderStatus_MIN = PENDING_PAYMENT;
const OrderStatus OrderStatus_MAX = WAIT_OVER_PAYED;
const int OrderStatus_ARRAYSIZE = OrderStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor();
inline const ::std::string& OrderStatus_Name(OrderStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderStatus_descriptor(), value);
}
inline bool OrderStatus_Parse(
    const ::std::string& name, OrderStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderStatus>(
    OrderStatus_descriptor(), name, value);
}
enum ECoDesigner_Status {
  Codesigner_Status_None = 0,
  Codesigner_Status_Send = 1,
  Codesigner_Status_Co = 2,
  Codesigner_Status_Check = 3,
  Codesigner_Status_NoCheck = 4
};
bool ECoDesigner_Status_IsValid(int value);
const ECoDesigner_Status ECoDesigner_Status_MIN = Codesigner_Status_None;
const ECoDesigner_Status ECoDesigner_Status_MAX = Codesigner_Status_NoCheck;
const int ECoDesigner_Status_ARRAYSIZE = ECoDesigner_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECoDesigner_Status_descriptor();
inline const ::std::string& ECoDesigner_Status_Name(ECoDesigner_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECoDesigner_Status_descriptor(), value);
}
inline bool ECoDesigner_Status_Parse(
    const ::std::string& name, ECoDesigner_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECoDesigner_Status>(
    ECoDesigner_Status_descriptor(), name, value);
}
enum OrderCancelReason {
  Not_Want_Buy = 1,
  Buy_Again = 2,
  Design_Again = 3,
  Out_Of_Stock = 4,
  Else = 5
};
bool OrderCancelReason_IsValid(int value);
const OrderCancelReason OrderCancelReason_MIN = Not_Want_Buy;
const OrderCancelReason OrderCancelReason_MAX = Else;
const int OrderCancelReason_ARRAYSIZE = OrderCancelReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderCancelReason_descriptor();
inline const ::std::string& OrderCancelReason_Name(OrderCancelReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderCancelReason_descriptor(), value);
}
inline bool OrderCancelReason_Parse(
    const ::std::string& name, OrderCancelReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderCancelReason>(
    OrderCancelReason_descriptor(), name, value);
}
// ===================================================================

class OpenedSystemItem : public ::google::protobuf::Message {
 public:
  OpenedSystemItem();
  virtual ~OpenedSystemItem();

  OpenedSystemItem(const OpenedSystemItem& from);

  inline OpenedSystemItem& operator=(const OpenedSystemItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenedSystemItem& default_instance();

  void Swap(OpenedSystemItem* other);

  // implements Message ----------------------------------------------

  OpenedSystemItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenedSystemItem& from);
  void MergeFrom(const OpenedSystemItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 system_id = 1;
  inline bool has_system_id() const;
  inline void clear_system_id();
  static const int kSystemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 system_id() const;
  inline void set_system_id(::google::protobuf::uint32 value);

  // optional .dgame.SYSTEM_STATUS status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::dgame::SYSTEM_STATUS status() const;
  inline void set_status(::dgame::SYSTEM_STATUS value);

  // @@protoc_insertion_point(class_scope:dgame.OpenedSystemItem)
 private:
  inline void set_has_system_id();
  inline void clear_has_system_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 system_id_;
  int status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OpenedSystemItem* default_instance_;
};
// -------------------------------------------------------------------

class EquipmentData : public ::google::protobuf::Message {
 public:
  EquipmentData();
  virtual ~EquipmentData();

  EquipmentData(const EquipmentData& from);

  inline EquipmentData& operator=(const EquipmentData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipmentData& default_instance();

  void Swap(EquipmentData* other);

  // implements Message ----------------------------------------------

  EquipmentData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipmentData& from);
  void MergeFrom(const EquipmentData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.EquipmentData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EquipmentData* default_instance_;
};
// -------------------------------------------------------------------

class PartsData : public ::google::protobuf::Message {
 public:
  PartsData();
  virtual ~PartsData();

  PartsData(const PartsData& from);

  inline PartsData& operator=(const PartsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartsData& default_instance();

  void Swap(PartsData* other);

  // implements Message ----------------------------------------------

  PartsData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PartsData& from);
  void MergeFrom(const PartsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.PartsData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PartsData* default_instance_;
};
// -------------------------------------------------------------------

class ProductData : public ::google::protobuf::Message {
 public:
  ProductData();
  virtual ~ProductData();

  ProductData(const ProductData& from);

  inline ProductData& operator=(const ProductData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductData& default_instance();

  void Swap(ProductData* other);

  // implements Message ----------------------------------------------

  ProductData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductData& from);
  void MergeFrom(const ProductData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 src_id = 2;
  inline bool has_src_id() const;
  inline void clear_src_id();
  static const int kSrcIdFieldNumber = 2;
  inline ::google::protobuf::uint32 src_id() const;
  inline void set_src_id(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 material = 4;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline ::google::protobuf::uint32 material() const;
  inline void set_material(::google::protobuf::uint32 value);

  // optional uint32 design = 5;
  inline bool has_design() const;
  inline void clear_design();
  static const int kDesignFieldNumber = 5;
  inline ::google::protobuf::uint32 design() const;
  inline void set_design(::google::protobuf::uint32 value);

  // optional uint32 lining = 6;
  inline bool has_lining() const;
  inline void clear_lining();
  static const int kLiningFieldNumber = 6;
  inline ::google::protobuf::uint32 lining() const;
  inline void set_lining(::google::protobuf::uint32 value);

  // optional string picture_url = 7;
  inline bool has_picture_url() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 7;
  inline const ::std::string& picture_url() const;
  inline void set_picture_url(const ::std::string& value);
  inline void set_picture_url(const char* value);
  inline void set_picture_url(const char* value, size_t size);
  inline ::std::string* mutable_picture_url();
  inline ::std::string* release_picture_url();
  inline void set_allocated_picture_url(::std::string* picture_url);

  // repeated .dgame.PartsData parts_list = 8;
  inline int parts_list_size() const;
  inline void clear_parts_list();
  static const int kPartsListFieldNumber = 8;
  inline const ::dgame::PartsData& parts_list(int index) const;
  inline ::dgame::PartsData* mutable_parts_list(int index);
  inline ::dgame::PartsData* add_parts_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::PartsData >&
      parts_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::PartsData >*
      mutable_parts_list();

  // @@protoc_insertion_point(class_scope:dgame.ProductData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_src_id();
  inline void clear_has_src_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_design();
  inline void clear_has_design();
  inline void set_has_lining();
  inline void clear_has_lining();
  inline void set_has_picture_url();
  inline void clear_has_picture_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 src_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 material_;
  ::google::protobuf::uint32 design_;
  ::std::string* picture_url_;
  ::google::protobuf::RepeatedPtrField< ::dgame::PartsData > parts_list_;
  ::google::protobuf::uint32 lining_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProductData* default_instance_;
};
// -------------------------------------------------------------------

class ProductDetailInfo : public ::google::protobuf::Message {
 public:
  ProductDetailInfo();
  virtual ~ProductDetailInfo();

  ProductDetailInfo(const ProductDetailInfo& from);

  inline ProductDetailInfo& operator=(const ProductDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductDetailInfo& default_instance();

  void Swap(ProductDetailInfo* other);

  // implements Message ----------------------------------------------

  ProductDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductDetailInfo& from);
  void MergeFrom(const ProductDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dgame.ProductData base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::dgame::ProductData& base_data() const;
  inline ::dgame::ProductData* mutable_base_data();
  inline ::dgame::ProductData* release_base_data();
  inline void set_allocated_base_data(::dgame::ProductData* base_data);

  // optional string shape_belong_to = 2;
  inline bool has_shape_belong_to() const;
  inline void clear_shape_belong_to();
  static const int kShapeBelongToFieldNumber = 2;
  inline const ::std::string& shape_belong_to() const;
  inline void set_shape_belong_to(const ::std::string& value);
  inline void set_shape_belong_to(const char* value);
  inline void set_shape_belong_to(const char* value, size_t size);
  inline ::std::string* mutable_shape_belong_to();
  inline ::std::string* release_shape_belong_to();
  inline void set_allocated_shape_belong_to(::std::string* shape_belong_to);

  // optional uint32 collar = 3;
  inline bool has_collar() const;
  inline void clear_collar();
  static const int kCollarFieldNumber = 3;
  inline ::google::protobuf::uint32 collar() const;
  inline void set_collar(::google::protobuf::uint32 value);

  // optional string sign = 4;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 4;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 font = 5;
  inline bool has_font() const;
  inline void clear_font();
  static const int kFontFieldNumber = 5;
  inline ::google::protobuf::uint32 font() const;
  inline void set_font(::google::protobuf::uint32 value);

  // optional uint32 color = 6;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 6;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional string design_partner = 7;
  inline bool has_design_partner() const;
  inline void clear_design_partner();
  static const int kDesignPartnerFieldNumber = 7;
  inline const ::std::string& design_partner() const;
  inline void set_design_partner(const ::std::string& value);
  inline void set_design_partner(const char* value);
  inline void set_design_partner(const char* value, size_t size);
  inline ::std::string* mutable_design_partner();
  inline ::std::string* release_design_partner();
  inline void set_allocated_design_partner(::std::string* design_partner);

  // @@protoc_insertion_point(class_scope:dgame.ProductDetailInfo)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_shape_belong_to();
  inline void clear_has_shape_belong_to();
  inline void set_has_collar();
  inline void clear_has_collar();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_font();
  inline void clear_has_font();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_design_partner();
  inline void clear_has_design_partner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dgame::ProductData* base_data_;
  ::std::string* shape_belong_to_;
  ::std::string* sign_;
  ::google::protobuf::uint32 collar_;
  ::google::protobuf::uint32 font_;
  ::std::string* design_partner_;
  ::google::protobuf::uint32 color_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProductDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class SouvenirDate : public ::google::protobuf::Message {
 public:
  SouvenirDate();
  virtual ~SouvenirDate();

  SouvenirDate(const SouvenirDate& from);

  inline SouvenirDate& operator=(const SouvenirDate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SouvenirDate& default_instance();

  void Swap(SouvenirDate* other);

  // implements Message ----------------------------------------------

  SouvenirDate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SouvenirDate& from);
  void MergeFrom(const SouvenirDate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 date = 2;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 2;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // required string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:dgame.SouvenirDate)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 date_;
  ::std::string* desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SouvenirDate* default_instance_;
};
// -------------------------------------------------------------------

class OrderItem : public ::google::protobuf::Message {
 public:
  OrderItem();
  virtual ~OrderItem();

  OrderItem(const OrderItem& from);

  inline OrderItem& operator=(const OrderItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderItem& default_instance();

  void Swap(OrderItem* other);

  // implements Message ----------------------------------------------

  OrderItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderItem& from);
  void MergeFrom(const OrderItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.OrderItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OrderItem* default_instance_;
};
// -------------------------------------------------------------------

class OrderInfo : public ::google::protobuf::Message {
 public:
  OrderInfo();
  virtual ~OrderInfo();

  OrderInfo(const OrderInfo& from);

  inline OrderInfo& operator=(const OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderInfo& default_instance();

  void Swap(OrderInfo* other);

  // implements Message ----------------------------------------------

  OrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderInfo& from);
  void MergeFrom(const OrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 order_id = 1;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 1;
  inline ::google::protobuf::uint32 order_id() const;
  inline void set_order_id(::google::protobuf::uint32 value);

  // optional uint32 owner_id = 2;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // optional uint32 order_status = 3;
  inline bool has_order_status() const;
  inline void clear_order_status();
  static const int kOrderStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 order_status() const;
  inline void set_order_status(::google::protobuf::uint32 value);

  // optional uint32 create_time = 4;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional string address = 5;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 5;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional uint32 is_invoice = 6;
  inline bool has_is_invoice() const;
  inline void clear_is_invoice();
  static const int kIsInvoiceFieldNumber = 6;
  inline ::google::protobuf::uint32 is_invoice() const;
  inline void set_is_invoice(::google::protobuf::uint32 value);

  // optional string invoice_title = 7;
  inline bool has_invoice_title() const;
  inline void clear_invoice_title();
  static const int kInvoiceTitleFieldNumber = 7;
  inline const ::std::string& invoice_title() const;
  inline void set_invoice_title(const ::std::string& value);
  inline void set_invoice_title(const char* value);
  inline void set_invoice_title(const char* value, size_t size);
  inline ::std::string* mutable_invoice_title();
  inline ::std::string* release_invoice_title();
  inline void set_allocated_invoice_title(::std::string* invoice_title);

  // optional string tephone = 8;
  inline bool has_tephone() const;
  inline void clear_tephone();
  static const int kTephoneFieldNumber = 8;
  inline const ::std::string& tephone() const;
  inline void set_tephone(const ::std::string& value);
  inline void set_tephone(const char* value);
  inline void set_tephone(const char* value, size_t size);
  inline ::std::string* mutable_tephone();
  inline ::std::string* release_tephone();
  inline void set_allocated_tephone(::std::string* tephone);

  // optional string receive_name = 9;
  inline bool has_receive_name() const;
  inline void clear_receive_name();
  static const int kReceiveNameFieldNumber = 9;
  inline const ::std::string& receive_name() const;
  inline void set_receive_name(const ::std::string& value);
  inline void set_receive_name(const char* value);
  inline void set_receive_name(const char* value, size_t size);
  inline ::std::string* mutable_receive_name();
  inline ::std::string* release_receive_name();
  inline void set_allocated_receive_name(::std::string* receive_name);

  // repeated .dgame.OrderItem item_list = 10;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 10;
  inline const ::dgame::OrderItem& item_list(int index) const;
  inline ::dgame::OrderItem* mutable_item_list(int index);
  inline ::dgame::OrderItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:dgame.OrderInfo)
 private:
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_order_status();
  inline void clear_has_order_status();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_is_invoice();
  inline void clear_has_is_invoice();
  inline void set_has_invoice_title();
  inline void clear_has_invoice_title();
  inline void set_has_tephone();
  inline void clear_has_tephone();
  inline void set_has_receive_name();
  inline void clear_has_receive_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 order_id_;
  ::google::protobuf::uint32 owner_id_;
  ::google::protobuf::uint32 order_status_;
  ::google::protobuf::uint32 create_time_;
  ::std::string* address_;
  ::std::string* invoice_title_;
  ::std::string* tephone_;
  ::std::string* receive_name_;
  ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem > item_list_;
  ::google::protobuf::uint32 is_invoice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProductSketchInfo : public ::google::protobuf::Message {
 public:
  ProductSketchInfo();
  virtual ~ProductSketchInfo();

  ProductSketchInfo(const ProductSketchInfo& from);

  inline ProductSketchInfo& operator=(const ProductSketchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductSketchInfo& default_instance();

  void Swap(ProductSketchInfo* other);

  // implements Message ----------------------------------------------

  ProductSketchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductSketchInfo& from);
  void MergeFrom(const ProductSketchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string front_url = 3;
  inline bool has_front_url() const;
  inline void clear_front_url();
  static const int kFrontUrlFieldNumber = 3;
  inline const ::std::string& front_url() const;
  inline void set_front_url(const ::std::string& value);
  inline void set_front_url(const char* value);
  inline void set_front_url(const char* value, size_t size);
  inline ::std::string* mutable_front_url();
  inline ::std::string* release_front_url();
  inline void set_allocated_front_url(::std::string* front_url);

  // optional string back_url = 4;
  inline bool has_back_url() const;
  inline void clear_back_url();
  static const int kBackUrlFieldNumber = 4;
  inline const ::std::string& back_url() const;
  inline void set_back_url(const ::std::string& value);
  inline void set_back_url(const char* value);
  inline void set_back_url(const char* value, size_t size);
  inline ::std::string* mutable_back_url();
  inline ::std::string* release_back_url();
  inline void set_allocated_back_url(::std::string* back_url);

  // @@protoc_insertion_point(class_scope:dgame.ProductSketchInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_front_url();
  inline void clear_has_front_url();
  inline void set_has_back_url();
  inline void clear_has_back_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::std::string* front_url_;
  ::std::string* back_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProductSketchInfo* default_instance_;
};
// -------------------------------------------------------------------

class PointSourceInfo : public ::google::protobuf::Message {
 public:
  PointSourceInfo();
  virtual ~PointSourceInfo();

  PointSourceInfo(const PointSourceInfo& from);

  inline PointSourceInfo& operator=(const PointSourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PointSourceInfo& default_instance();

  void Swap(PointSourceInfo* other);

  // implements Message ----------------------------------------------

  PointSourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PointSourceInfo& from);
  void MergeFrom(const PointSourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 point = 4;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 4;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.PointSourceInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PointSourceInfo* default_instance_;
};
// -------------------------------------------------------------------

class OriginalProductInfo : public ::google::protobuf::Message {
 public:
  OriginalProductInfo();
  virtual ~OriginalProductInfo();

  OriginalProductInfo(const OriginalProductInfo& from);

  inline OriginalProductInfo& operator=(const OriginalProductInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginalProductInfo& default_instance();

  void Swap(OriginalProductInfo* other);

  // implements Message ----------------------------------------------

  OriginalProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginalProductInfo& from);
  void MergeFrom(const OriginalProductInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string img_url = 4;
  inline bool has_img_url() const;
  inline void clear_img_url();
  static const int kImgUrlFieldNumber = 4;
  inline const ::std::string& img_url() const;
  inline void set_img_url(const ::std::string& value);
  inline void set_img_url(const char* value);
  inline void set_img_url(const char* value, size_t size);
  inline ::std::string* mutable_img_url();
  inline ::std::string* release_img_url();
  inline void set_allocated_img_url(::std::string* img_url);

  // optional uint32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 click_liked_times = 6;
  inline bool has_click_liked_times() const;
  inline void clear_click_liked_times();
  static const int kClickLikedTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 click_liked_times() const;
  inline void set_click_liked_times(::google::protobuf::uint32 value);

  // optional uint32 comment_times = 7;
  inline bool has_comment_times() const;
  inline void clear_comment_times();
  static const int kCommentTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 comment_times() const;
  inline void set_comment_times(::google::protobuf::uint32 value);

  // optional uint32 is_init = 8;
  inline bool has_is_init() const;
  inline void clear_is_init();
  static const int kIsInitFieldNumber = 8;
  inline ::google::protobuf::uint32 is_init() const;
  inline void set_is_init(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.OriginalProductInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_img_url();
  inline void clear_has_img_url();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_click_liked_times();
  inline void clear_has_click_liked_times();
  inline void set_has_comment_times();
  inline void clear_has_comment_times();
  inline void set_has_is_init();
  inline void clear_has_is_init();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::std::string* img_url_;
  ::google::protobuf::uint32 click_liked_times_;
  ::google::protobuf::uint32 comment_times_;
  ::google::protobuf::uint32 is_init_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OriginalProductInfo* default_instance_;
};
// -------------------------------------------------------------------

class BindBankAccountInfo : public ::google::protobuf::Message {
 public:
  BindBankAccountInfo();
  virtual ~BindBankAccountInfo();

  BindBankAccountInfo(const BindBankAccountInfo& from);

  inline BindBankAccountInfo& operator=(const BindBankAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BindBankAccountInfo& default_instance();

  void Swap(BindBankAccountInfo* other);

  // implements Message ----------------------------------------------

  BindBankAccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BindBankAccountInfo& from);
  void MergeFrom(const BindBankAccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_name = 1;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // required string card_number = 2;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 2;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // required uint32 bind_time = 3;
  inline bool has_bind_time() const;
  inline void clear_bind_time();
  static const int kBindTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 bind_time() const;
  inline void set_bind_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.BindBankAccountInfo)
 private:
  inline void set_has_account_name();
  inline void clear_has_account_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();
  inline void set_has_bind_time();
  inline void clear_has_bind_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;
  ::std::string* card_number_;
  ::google::protobuf::uint32 bind_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static BindBankAccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class OriginalProductProfitInfo : public ::google::protobuf::Message {
 public:
  OriginalProductProfitInfo();
  virtual ~OriginalProductProfitInfo();

  OriginalProductProfitInfo(const OriginalProductProfitInfo& from);

  inline OriginalProductProfitInfo& operator=(const OriginalProductProfitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginalProductProfitInfo& default_instance();

  void Swap(OriginalProductProfitInfo* other);

  // implements Message ----------------------------------------------

  OriginalProductProfitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginalProductProfitInfo& from);
  void MergeFrom(const OriginalProductProfitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float profit = 2;
  inline bool has_profit() const;
  inline void clear_profit();
  static const int kProfitFieldNumber = 2;
  inline float profit() const;
  inline void set_profit(float value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.OriginalProductProfitInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profit();
  inline void clear_has_profit();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  float profit_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OriginalProductProfitInfo* default_instance_;
};
// -------------------------------------------------------------------

class DayOriginalProductProfit : public ::google::protobuf::Message {
 public:
  DayOriginalProductProfit();
  virtual ~DayOriginalProductProfit();

  DayOriginalProductProfit(const DayOriginalProductProfit& from);

  inline DayOriginalProductProfit& operator=(const DayOriginalProductProfit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayOriginalProductProfit& default_instance();

  void Swap(DayOriginalProductProfit* other);

  // implements Message ----------------------------------------------

  DayOriginalProductProfit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayOriginalProductProfit& from);
  void MergeFrom(const DayOriginalProductProfit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 date_time = 1;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 date_time() const;
  inline void set_date_time(::google::protobuf::uint32 value);

  // repeated .dgame.OriginalProductProfitInfo profit_list = 2;
  inline int profit_list_size() const;
  inline void clear_profit_list();
  static const int kProfitListFieldNumber = 2;
  inline const ::dgame::OriginalProductProfitInfo& profit_list(int index) const;
  inline ::dgame::OriginalProductProfitInfo* mutable_profit_list(int index);
  inline ::dgame::OriginalProductProfitInfo* add_profit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitInfo >&
      profit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitInfo >*
      mutable_profit_list();

  // @@protoc_insertion_point(class_scope:dgame.DayOriginalProductProfit)
 private:
  inline void set_has_date_time();
  inline void clear_has_date_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitInfo > profit_list_;
  ::google::protobuf::uint32 date_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DayOriginalProductProfit* default_instance_;
};
// -------------------------------------------------------------------

class OriginalProductProfitBaseInfo : public ::google::protobuf::Message {
 public:
  OriginalProductProfitBaseInfo();
  virtual ~OriginalProductProfitBaseInfo();

  OriginalProductProfitBaseInfo(const OriginalProductProfitBaseInfo& from);

  inline OriginalProductProfitBaseInfo& operator=(const OriginalProductProfitBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginalProductProfitBaseInfo& default_instance();

  void Swap(OriginalProductProfitBaseInfo* other);

  // implements Message ----------------------------------------------

  OriginalProductProfitBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginalProductProfitBaseInfo& from);
  void MergeFrom(const OriginalProductProfitBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float total_profit = 2;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 2;
  inline float total_profit() const;
  inline void set_total_profit(float value);

  // optional uint32 total_count = 3;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 3;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);

  // optional float yesterday_total_profit = 4;
  inline bool has_yesterday_total_profit() const;
  inline void clear_yesterday_total_profit();
  static const int kYesterdayTotalProfitFieldNumber = 4;
  inline float yesterday_total_profit() const;
  inline void set_yesterday_total_profit(float value);

  // optional uint32 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.OriginalProductProfitBaseInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_yesterday_total_profit();
  inline void clear_has_yesterday_total_profit();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  float total_profit_;
  ::google::protobuf::uint32 total_count_;
  float yesterday_total_profit_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OriginalProductProfitBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class DayOriginalProductProfitBase : public ::google::protobuf::Message {
 public:
  DayOriginalProductProfitBase();
  virtual ~DayOriginalProductProfitBase();

  DayOriginalProductProfitBase(const DayOriginalProductProfitBase& from);

  inline DayOriginalProductProfitBase& operator=(const DayOriginalProductProfitBase& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayOriginalProductProfitBase& default_instance();

  void Swap(DayOriginalProductProfitBase* other);

  // implements Message ----------------------------------------------

  DayOriginalProductProfitBase* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayOriginalProductProfitBase& from);
  void MergeFrom(const DayOriginalProductProfitBase& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 date_time = 1;
  inline bool has_date_time() const;
  inline void clear_date_time();
  static const int kDateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 date_time() const;
  inline void set_date_time(::google::protobuf::uint32 value);

  // optional float total_profit = 2;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 2;
  inline float total_profit() const;
  inline void set_total_profit(float value);

  // optional uint32 total_count = 3;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 3;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.DayOriginalProductProfitBase)
 private:
  inline void set_has_date_time();
  inline void clear_has_date_time();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_count();
  inline void clear_has_total_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 date_time_;
  float total_profit_;
  ::google::protobuf::uint32 total_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DayOriginalProductProfitBase* default_instance_;
};
// -------------------------------------------------------------------

class ProfitData : public ::google::protobuf::Message {
 public:
  ProfitData();
  virtual ~ProfitData();

  ProfitData(const ProfitData& from);

  inline ProfitData& operator=(const ProfitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProfitData& default_instance();

  void Swap(ProfitData* other);

  // implements Message ----------------------------------------------

  ProfitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProfitData& from);
  void MergeFrom(const ProfitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required float money = 2;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 2;
  inline float money() const;
  inline void set_money(float value);

  // required uint32 profit_type = 3;
  inline bool has_profit_type() const;
  inline void clear_profit_type();
  static const int kProfitTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 profit_type() const;
  inline void set_profit_type(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 profit_source = 5;
  inline bool has_profit_source() const;
  inline void clear_profit_source();
  static const int kProfitSourceFieldNumber = 5;
  inline ::google::protobuf::uint32 profit_source() const;
  inline void set_profit_source(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.ProfitData)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_profit_type();
  inline void clear_has_profit_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profit_source();
  inline void clear_has_profit_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  float money_;
  ::std::string* name_;
  ::google::protobuf::uint32 profit_type_;
  ::google::protobuf::uint32 profit_source_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProfitData* default_instance_;
};
// -------------------------------------------------------------------

class CouponData : public ::google::protobuf::Message {
 public:
  CouponData();
  virtual ~CouponData();

  CouponData(const CouponData& from);

  inline CouponData& operator=(const CouponData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CouponData& default_instance();

  void Swap(CouponData* other);

  // implements Message ----------------------------------------------

  CouponData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CouponData& from);
  void MergeFrom(const CouponData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 coupon_id = 1;
  inline bool has_coupon_id() const;
  inline void clear_coupon_id();
  static const int kCouponIdFieldNumber = 1;
  inline ::google::protobuf::uint32 coupon_id() const;
  inline void set_coupon_id(::google::protobuf::uint32 value);

  // required uint32 is_use = 2;
  inline bool has_is_use() const;
  inline void clear_is_use();
  static const int kIsUseFieldNumber = 2;
  inline ::google::protobuf::uint32 is_use() const;
  inline void set_is_use(::google::protobuf::uint32 value);

  // required uint32 begin_time = 3;
  inline bool has_begin_time() const;
  inline void clear_begin_time();
  static const int kBeginTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 begin_time() const;
  inline void set_begin_time(::google::protobuf::uint32 value);

  // required uint32 end_time = 4;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // required uint32 coupon_value = 5;
  inline bool has_coupon_value() const;
  inline void clear_coupon_value();
  static const int kCouponValueFieldNumber = 5;
  inline ::google::protobuf::uint32 coupon_value() const;
  inline void set_coupon_value(::google::protobuf::uint32 value);

  // required uint32 need_cost = 6;
  inline bool has_need_cost() const;
  inline void clear_need_cost();
  static const int kNeedCostFieldNumber = 6;
  inline ::google::protobuf::uint32 need_cost() const;
  inline void set_need_cost(::google::protobuf::uint32 value);

  // required uint32 use_type = 7;
  inline bool has_use_type() const;
  inline void clear_use_type();
  static const int kUseTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 use_type() const;
  inline void set_use_type(::google::protobuf::uint32 value);

  // required uint32 create_time = 8;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.CouponData)
 private:
  inline void set_has_coupon_id();
  inline void clear_has_coupon_id();
  inline void set_has_is_use();
  inline void clear_has_is_use();
  inline void set_has_begin_time();
  inline void clear_has_begin_time();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_coupon_value();
  inline void clear_has_coupon_value();
  inline void set_has_need_cost();
  inline void clear_has_need_cost();
  inline void set_has_use_type();
  inline void clear_has_use_type();
  inline void set_has_create_time();
  inline void clear_has_create_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 coupon_id_;
  ::google::protobuf::uint32 is_use_;
  ::google::protobuf::uint32 begin_time_;
  ::google::protobuf::uint32 end_time_;
  ::google::protobuf::uint32 coupon_value_;
  ::google::protobuf::uint32 need_cost_;
  ::google::protobuf::uint32 use_type_;
  ::google::protobuf::uint32 create_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CouponData* default_instance_;
};
// -------------------------------------------------------------------

class OriginalProductPartInfo : public ::google::protobuf::Message {
 public:
  OriginalProductPartInfo();
  virtual ~OriginalProductPartInfo();

  OriginalProductPartInfo(const OriginalProductPartInfo& from);

  inline OriginalProductPartInfo& operator=(const OriginalProductPartInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginalProductPartInfo& default_instance();

  void Swap(OriginalProductPartInfo* other);

  // implements Message ----------------------------------------------

  OriginalProductPartInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginalProductPartInfo& from);
  void MergeFrom(const OriginalProductPartInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 part_id = 1;
  inline bool has_part_id() const;
  inline void clear_part_id();
  static const int kPartIdFieldNumber = 1;
  inline ::google::protobuf::uint32 part_id() const;
  inline void set_part_id(::google::protobuf::uint32 value);

  // repeated uint32 materials_list = 2;
  inline int materials_list_size() const;
  inline void clear_materials_list();
  static const int kMaterialsListFieldNumber = 2;
  inline ::google::protobuf::uint32 materials_list(int index) const;
  inline void set_materials_list(int index, ::google::protobuf::uint32 value);
  inline void add_materials_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      materials_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_materials_list();

  // @@protoc_insertion_point(class_scope:dgame.OriginalProductPartInfo)
 private:
  inline void set_has_part_id();
  inline void clear_has_part_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > materials_list_;
  ::google::protobuf::uint32 part_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OriginalProductPartInfo* default_instance_;
};
// -------------------------------------------------------------------

class OriginalProductDetail : public ::google::protobuf::Message {
 public:
  OriginalProductDetail();
  virtual ~OriginalProductDetail();

  OriginalProductDetail(const OriginalProductDetail& from);

  inline OriginalProductDetail& operator=(const OriginalProductDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OriginalProductDetail& default_instance();

  void Swap(OriginalProductDetail* other);

  // implements Message ----------------------------------------------

  OriginalProductDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OriginalProductDetail& from);
  void MergeFrom(const OriginalProductDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string url = 3;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 3;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional string desc = 4;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 4;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // repeated uint32 style_list = 5;
  inline int style_list_size() const;
  inline void clear_style_list();
  static const int kStyleListFieldNumber = 5;
  inline ::google::protobuf::uint32 style_list(int index) const;
  inline void set_style_list(int index, ::google::protobuf::uint32 value);
  inline void add_style_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      style_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_style_list();

  // optional uint32 color = 6;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 6;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional uint32 materials = 7;
  inline bool has_materials() const;
  inline void clear_materials();
  static const int kMaterialsFieldNumber = 7;
  inline ::google::protobuf::uint32 materials() const;
  inline void set_materials(::google::protobuf::uint32 value);

  // optional uint32 model = 8;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 8;
  inline ::google::protobuf::uint32 model() const;
  inline void set_model(::google::protobuf::uint32 value);

  // repeated uint32 season_list = 9;
  inline int season_list_size() const;
  inline void clear_season_list();
  static const int kSeasonListFieldNumber = 9;
  inline ::google::protobuf::uint32 season_list(int index) const;
  inline void set_season_list(int index, ::google::protobuf::uint32 value);
  inline void add_season_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      season_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_season_list();

  // optional uint32 type = 10;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 10;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .dgame.OriginalProductPartInfo part_list = 11;
  inline int part_list_size() const;
  inline void clear_part_list();
  static const int kPartListFieldNumber = 11;
  inline const ::dgame::OriginalProductPartInfo& part_list(int index) const;
  inline ::dgame::OriginalProductPartInfo* mutable_part_list(int index);
  inline ::dgame::OriginalProductPartInfo* add_part_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductPartInfo >&
      part_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductPartInfo >*
      mutable_part_list();

  // optional uint32 is_can_modify_lining = 12;
  inline bool has_is_can_modify_lining() const;
  inline void clear_is_can_modify_lining();
  static const int kIsCanModifyLiningFieldNumber = 12;
  inline ::google::protobuf::uint32 is_can_modify_lining() const;
  inline void set_is_can_modify_lining(::google::protobuf::uint32 value);

  // optional string sketch_front_url = 13;
  inline bool has_sketch_front_url() const;
  inline void clear_sketch_front_url();
  static const int kSketchFrontUrlFieldNumber = 13;
  inline const ::std::string& sketch_front_url() const;
  inline void set_sketch_front_url(const ::std::string& value);
  inline void set_sketch_front_url(const char* value);
  inline void set_sketch_front_url(const char* value, size_t size);
  inline ::std::string* mutable_sketch_front_url();
  inline ::std::string* release_sketch_front_url();
  inline void set_allocated_sketch_front_url(::std::string* sketch_front_url);

  // optional string sketch_back_url = 14;
  inline bool has_sketch_back_url() const;
  inline void clear_sketch_back_url();
  static const int kSketchBackUrlFieldNumber = 14;
  inline const ::std::string& sketch_back_url() const;
  inline void set_sketch_back_url(const ::std::string& value);
  inline void set_sketch_back_url(const char* value);
  inline void set_sketch_back_url(const char* value, size_t size);
  inline ::std::string* mutable_sketch_back_url();
  inline ::std::string* release_sketch_back_url();
  inline void set_allocated_sketch_back_url(::std::string* sketch_back_url);

  // optional string sketch_desc = 15;
  inline bool has_sketch_desc() const;
  inline void clear_sketch_desc();
  static const int kSketchDescFieldNumber = 15;
  inline const ::std::string& sketch_desc() const;
  inline void set_sketch_desc(const ::std::string& value);
  inline void set_sketch_desc(const char* value);
  inline void set_sketch_desc(const char* value, size_t size);
  inline ::std::string* mutable_sketch_desc();
  inline ::std::string* release_sketch_desc();
  inline void set_allocated_sketch_desc(::std::string* sketch_desc);

  // @@protoc_insertion_point(class_scope:dgame.OriginalProductDetail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_materials();
  inline void clear_has_materials();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_is_can_modify_lining();
  inline void clear_has_is_can_modify_lining();
  inline void set_has_sketch_front_url();
  inline void clear_has_sketch_front_url();
  inline void set_has_sketch_back_url();
  inline void clear_has_sketch_back_url();
  inline void set_has_sketch_desc();
  inline void clear_has_sketch_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* url_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 color_;
  ::std::string* desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > style_list_;
  ::google::protobuf::uint32 materials_;
  ::google::protobuf::uint32 model_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > season_list_;
  ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductPartInfo > part_list_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 is_can_modify_lining_;
  ::std::string* sketch_front_url_;
  ::std::string* sketch_back_url_;
  ::std::string* sketch_desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OriginalProductDetail* default_instance_;
};
// -------------------------------------------------------------------

class TradeInfo : public ::google::protobuf::Message {
 public:
  TradeInfo();
  virtual ~TradeInfo();

  TradeInfo(const TradeInfo& from);

  inline TradeInfo& operator=(const TradeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeInfo& default_instance();

  void Swap(TradeInfo* other);

  // implements Message ----------------------------------------------

  TradeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeInfo& from);
  void MergeFrom(const TradeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dgame.TradeInfo)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TradeInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProductSpaceCategoryInfo : public ::google::protobuf::Message {
 public:
  ProductSpaceCategoryInfo();
  virtual ~ProductSpaceCategoryInfo();

  ProductSpaceCategoryInfo(const ProductSpaceCategoryInfo& from);

  inline ProductSpaceCategoryInfo& operator=(const ProductSpaceCategoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductSpaceCategoryInfo& default_instance();

  void Swap(ProductSpaceCategoryInfo* other);

  // implements Message ----------------------------------------------

  ProductSpaceCategoryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductSpaceCategoryInfo& from);
  void MergeFrom(const ProductSpaceCategoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 category_id = 1;
  inline bool has_category_id() const;
  inline void clear_category_id();
  static const int kCategoryIdFieldNumber = 1;
  inline ::google::protobuf::uint32 category_id() const;
  inline void set_category_id(::google::protobuf::uint32 value);

  // repeated uint32 category_child_list = 2;
  inline int category_child_list_size() const;
  inline void clear_category_child_list();
  static const int kCategoryChildListFieldNumber = 2;
  inline ::google::protobuf::uint32 category_child_list(int index) const;
  inline void set_category_child_list(int index, ::google::protobuf::uint32 value);
  inline void add_category_child_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      category_child_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_category_child_list();

  // @@protoc_insertion_point(class_scope:dgame.ProductSpaceCategoryInfo)
 private:
  inline void set_has_category_id();
  inline void clear_has_category_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > category_child_list_;
  ::google::protobuf::uint32 category_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProductSpaceCategoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class ProductSpaceProductInfo : public ::google::protobuf::Message {
 public:
  ProductSpaceProductInfo();
  virtual ~ProductSpaceProductInfo();

  ProductSpaceProductInfo(const ProductSpaceProductInfo& from);

  inline ProductSpaceProductInfo& operator=(const ProductSpaceProductInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProductSpaceProductInfo& default_instance();

  void Swap(ProductSpaceProductInfo* other);

  // implements Message ----------------------------------------------

  ProductSpaceProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProductSpaceProductInfo& from);
  void MergeFrom(const ProductSpaceProductInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pname = 1;
  inline bool has_pname() const;
  inline void clear_pname();
  static const int kPnameFieldNumber = 1;
  inline const ::std::string& pname() const;
  inline void set_pname(const ::std::string& value);
  inline void set_pname(const char* value);
  inline void set_pname(const char* value, size_t size);
  inline ::std::string* mutable_pname();
  inline ::std::string* release_pname();
  inline void set_allocated_pname(::std::string* pname);

  // optional string pdesc = 2;
  inline bool has_pdesc() const;
  inline void clear_pdesc();
  static const int kPdescFieldNumber = 2;
  inline const ::std::string& pdesc() const;
  inline void set_pdesc(const ::std::string& value);
  inline void set_pdesc(const char* value);
  inline void set_pdesc(const char* value, size_t size);
  inline ::std::string* mutable_pdesc();
  inline ::std::string* release_pdesc();
  inline void set_allocated_pdesc(::std::string* pdesc);

  // optional string pauthor = 3;
  inline bool has_pauthor() const;
  inline void clear_pauthor();
  static const int kPauthorFieldNumber = 3;
  inline const ::std::string& pauthor() const;
  inline void set_pauthor(const ::std::string& value);
  inline void set_pauthor(const char* value);
  inline void set_pauthor(const char* value, size_t size);
  inline ::std::string* mutable_pauthor();
  inline ::std::string* release_pauthor();
  inline void set_allocated_pauthor(::std::string* pauthor);

  // optional string picture_url = 4;
  inline bool has_picture_url() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 4;
  inline const ::std::string& picture_url() const;
  inline void set_picture_url(const ::std::string& value);
  inline void set_picture_url(const char* value);
  inline void set_picture_url(const char* value, size_t size);
  inline ::std::string* mutable_picture_url();
  inline ::std::string* release_picture_url();
  inline void set_allocated_picture_url(::std::string* picture_url);

  // @@protoc_insertion_point(class_scope:dgame.ProductSpaceProductInfo)
 private:
  inline void set_has_pname();
  inline void clear_has_pname();
  inline void set_has_pdesc();
  inline void clear_has_pdesc();
  inline void set_has_pauthor();
  inline void clear_has_pauthor();
  inline void set_has_picture_url();
  inline void clear_has_picture_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pname_;
  ::std::string* pdesc_;
  ::std::string* pauthor_;
  ::std::string* picture_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ProductSpaceProductInfo* default_instance_;
};
// -------------------------------------------------------------------

class CooperationProductInfo : public ::google::protobuf::Message {
 public:
  CooperationProductInfo();
  virtual ~CooperationProductInfo();

  CooperationProductInfo(const CooperationProductInfo& from);

  inline CooperationProductInfo& operator=(const CooperationProductInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CooperationProductInfo& default_instance();

  void Swap(CooperationProductInfo* other);

  // implements Message ----------------------------------------------

  CooperationProductInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CooperationProductInfo& from);
  void MergeFrom(const CooperationProductInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string pname = 1;
  inline bool has_pname() const;
  inline void clear_pname();
  static const int kPnameFieldNumber = 1;
  inline const ::std::string& pname() const;
  inline void set_pname(const ::std::string& value);
  inline void set_pname(const char* value);
  inline void set_pname(const char* value, size_t size);
  inline ::std::string* mutable_pname();
  inline ::std::string* release_pname();
  inline void set_allocated_pname(::std::string* pname);

  // optional string pdesc = 2;
  inline bool has_pdesc() const;
  inline void clear_pdesc();
  static const int kPdescFieldNumber = 2;
  inline const ::std::string& pdesc() const;
  inline void set_pdesc(const ::std::string& value);
  inline void set_pdesc(const char* value);
  inline void set_pdesc(const char* value, size_t size);
  inline ::std::string* mutable_pdesc();
  inline ::std::string* release_pdesc();
  inline void set_allocated_pdesc(::std::string* pdesc);

  // required uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // repeated uint32 codesign_status_list = 4;
  inline int codesign_status_list_size() const;
  inline void clear_codesign_status_list();
  static const int kCodesignStatusListFieldNumber = 4;
  inline ::google::protobuf::uint32 codesign_status_list(int index) const;
  inline void set_codesign_status_list(int index, ::google::protobuf::uint32 value);
  inline void add_codesign_status_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      codesign_status_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_codesign_status_list();

  // required uint32 codesign_finistatus = 5;
  inline bool has_codesign_finistatus() const;
  inline void clear_codesign_finistatus();
  static const int kCodesignFinistatusFieldNumber = 5;
  inline ::google::protobuf::uint32 codesign_finistatus() const;
  inline void set_codesign_finistatus(::google::protobuf::uint32 value);

  // optional string pauthor = 6;
  inline bool has_pauthor() const;
  inline void clear_pauthor();
  static const int kPauthorFieldNumber = 6;
  inline const ::std::string& pauthor() const;
  inline void set_pauthor(const ::std::string& value);
  inline void set_pauthor(const char* value);
  inline void set_pauthor(const char* value, size_t size);
  inline ::std::string* mutable_pauthor();
  inline ::std::string* release_pauthor();
  inline void set_allocated_pauthor(::std::string* pauthor);

  // optional string picture_url = 7;
  inline bool has_picture_url() const;
  inline void clear_picture_url();
  static const int kPictureUrlFieldNumber = 7;
  inline const ::std::string& picture_url() const;
  inline void set_picture_url(const ::std::string& value);
  inline void set_picture_url(const char* value);
  inline void set_picture_url(const char* value, size_t size);
  inline ::std::string* mutable_picture_url();
  inline ::std::string* release_picture_url();
  inline void set_allocated_picture_url(::std::string* picture_url);

  // @@protoc_insertion_point(class_scope:dgame.CooperationProductInfo)
 private:
  inline void set_has_pname();
  inline void clear_has_pname();
  inline void set_has_pdesc();
  inline void clear_has_pdesc();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_codesign_finistatus();
  inline void clear_has_codesign_finistatus();
  inline void set_has_pauthor();
  inline void clear_has_pauthor();
  inline void set_has_picture_url();
  inline void clear_has_picture_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* pname_;
  ::std::string* pdesc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > codesign_status_list_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 codesign_finistatus_;
  ::std::string* pauthor_;
  ::std::string* picture_url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_dgame_5fdefine_2eproto();
  friend void protobuf_AssignDesc_dgame_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_dgame_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CooperationProductInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// OpenedSystemItem

// optional uint32 system_id = 1;
inline bool OpenedSystemItem::has_system_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenedSystemItem::set_has_system_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenedSystemItem::clear_has_system_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenedSystemItem::clear_system_id() {
  system_id_ = 0u;
  clear_has_system_id();
}
inline ::google::protobuf::uint32 OpenedSystemItem::system_id() const {
  return system_id_;
}
inline void OpenedSystemItem::set_system_id(::google::protobuf::uint32 value) {
  set_has_system_id();
  system_id_ = value;
}

// optional .dgame.SYSTEM_STATUS status = 2;
inline bool OpenedSystemItem::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenedSystemItem::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenedSystemItem::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenedSystemItem::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::dgame::SYSTEM_STATUS OpenedSystemItem::status() const {
  return static_cast< ::dgame::SYSTEM_STATUS >(status_);
}
inline void OpenedSystemItem::set_status(::dgame::SYSTEM_STATUS value) {
  assert(::dgame::SYSTEM_STATUS_IsValid(value));
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// EquipmentData

// required uint32 type = 1;
inline bool EquipmentData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EquipmentData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EquipmentData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EquipmentData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EquipmentData::type() const {
  return type_;
}
inline void EquipmentData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 id = 2;
inline bool EquipmentData::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EquipmentData::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EquipmentData::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EquipmentData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EquipmentData::id() const {
  return id_;
}
inline void EquipmentData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PartsData

// required uint32 id = 1;
inline bool PartsData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartsData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartsData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartsData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 PartsData::id() const {
  return id_;
}
inline void PartsData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 value = 2;
inline bool PartsData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartsData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartsData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartsData::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 PartsData::value() const {
  return value_;
}
inline void PartsData::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProductData

// optional uint32 id = 1;
inline bool ProductData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ProductData::id() const {
  return id_;
}
inline void ProductData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 src_id = 2;
inline bool ProductData::has_src_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductData::set_has_src_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProductData::clear_has_src_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProductData::clear_src_id() {
  src_id_ = 0u;
  clear_has_src_id();
}
inline ::google::protobuf::uint32 ProductData::src_id() const {
  return src_id_;
}
inline void ProductData::set_src_id(::google::protobuf::uint32 value) {
  set_has_src_id();
  src_id_ = value;
}

// optional string name = 3;
inline bool ProductData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProductData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProductData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProductData::name() const {
  return *name_;
}
inline void ProductData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProductData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProductData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProductData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 material = 4;
inline bool ProductData::has_material() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProductData::set_has_material() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProductData::clear_has_material() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProductData::clear_material() {
  material_ = 0u;
  clear_has_material();
}
inline ::google::protobuf::uint32 ProductData::material() const {
  return material_;
}
inline void ProductData::set_material(::google::protobuf::uint32 value) {
  set_has_material();
  material_ = value;
}

// optional uint32 design = 5;
inline bool ProductData::has_design() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProductData::set_has_design() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProductData::clear_has_design() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProductData::clear_design() {
  design_ = 0u;
  clear_has_design();
}
inline ::google::protobuf::uint32 ProductData::design() const {
  return design_;
}
inline void ProductData::set_design(::google::protobuf::uint32 value) {
  set_has_design();
  design_ = value;
}

// optional uint32 lining = 6;
inline bool ProductData::has_lining() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProductData::set_has_lining() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProductData::clear_has_lining() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProductData::clear_lining() {
  lining_ = 0u;
  clear_has_lining();
}
inline ::google::protobuf::uint32 ProductData::lining() const {
  return lining_;
}
inline void ProductData::set_lining(::google::protobuf::uint32 value) {
  set_has_lining();
  lining_ = value;
}

// optional string picture_url = 7;
inline bool ProductData::has_picture_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProductData::set_has_picture_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProductData::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProductData::clear_picture_url() {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    picture_url_->clear();
  }
  clear_has_picture_url();
}
inline const ::std::string& ProductData::picture_url() const {
  return *picture_url_;
}
inline void ProductData::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ProductData::set_picture_url(const char* value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ProductData::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductData::mutable_picture_url() {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  return picture_url_;
}
inline ::std::string* ProductData::release_picture_url() {
  clear_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_url_;
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductData::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (picture_url) {
    set_has_picture_url();
    picture_url_ = picture_url;
  } else {
    clear_has_picture_url();
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dgame.PartsData parts_list = 8;
inline int ProductData::parts_list_size() const {
  return parts_list_.size();
}
inline void ProductData::clear_parts_list() {
  parts_list_.Clear();
}
inline const ::dgame::PartsData& ProductData::parts_list(int index) const {
  return parts_list_.Get(index);
}
inline ::dgame::PartsData* ProductData::mutable_parts_list(int index) {
  return parts_list_.Mutable(index);
}
inline ::dgame::PartsData* ProductData::add_parts_list() {
  return parts_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::PartsData >&
ProductData::parts_list() const {
  return parts_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::PartsData >*
ProductData::mutable_parts_list() {
  return &parts_list_;
}

// -------------------------------------------------------------------

// ProductDetailInfo

// optional .dgame.ProductData base_data = 1;
inline bool ProductDetailInfo::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductDetailInfo::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductDetailInfo::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductDetailInfo::clear_base_data() {
  if (base_data_ != NULL) base_data_->::dgame::ProductData::Clear();
  clear_has_base_data();
}
inline const ::dgame::ProductData& ProductDetailInfo::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::dgame::ProductData* ProductDetailInfo::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::dgame::ProductData;
  return base_data_;
}
inline ::dgame::ProductData* ProductDetailInfo::release_base_data() {
  clear_has_base_data();
  ::dgame::ProductData* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void ProductDetailInfo::set_allocated_base_data(::dgame::ProductData* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// optional string shape_belong_to = 2;
inline bool ProductDetailInfo::has_shape_belong_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductDetailInfo::set_has_shape_belong_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProductDetailInfo::clear_has_shape_belong_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProductDetailInfo::clear_shape_belong_to() {
  if (shape_belong_to_ != &::google::protobuf::internal::kEmptyString) {
    shape_belong_to_->clear();
  }
  clear_has_shape_belong_to();
}
inline const ::std::string& ProductDetailInfo::shape_belong_to() const {
  return *shape_belong_to_;
}
inline void ProductDetailInfo::set_shape_belong_to(const ::std::string& value) {
  set_has_shape_belong_to();
  if (shape_belong_to_ == &::google::protobuf::internal::kEmptyString) {
    shape_belong_to_ = new ::std::string;
  }
  shape_belong_to_->assign(value);
}
inline void ProductDetailInfo::set_shape_belong_to(const char* value) {
  set_has_shape_belong_to();
  if (shape_belong_to_ == &::google::protobuf::internal::kEmptyString) {
    shape_belong_to_ = new ::std::string;
  }
  shape_belong_to_->assign(value);
}
inline void ProductDetailInfo::set_shape_belong_to(const char* value, size_t size) {
  set_has_shape_belong_to();
  if (shape_belong_to_ == &::google::protobuf::internal::kEmptyString) {
    shape_belong_to_ = new ::std::string;
  }
  shape_belong_to_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductDetailInfo::mutable_shape_belong_to() {
  set_has_shape_belong_to();
  if (shape_belong_to_ == &::google::protobuf::internal::kEmptyString) {
    shape_belong_to_ = new ::std::string;
  }
  return shape_belong_to_;
}
inline ::std::string* ProductDetailInfo::release_shape_belong_to() {
  clear_has_shape_belong_to();
  if (shape_belong_to_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shape_belong_to_;
    shape_belong_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductDetailInfo::set_allocated_shape_belong_to(::std::string* shape_belong_to) {
  if (shape_belong_to_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_belong_to_;
  }
  if (shape_belong_to) {
    set_has_shape_belong_to();
    shape_belong_to_ = shape_belong_to;
  } else {
    clear_has_shape_belong_to();
    shape_belong_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 collar = 3;
inline bool ProductDetailInfo::has_collar() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductDetailInfo::set_has_collar() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProductDetailInfo::clear_has_collar() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProductDetailInfo::clear_collar() {
  collar_ = 0u;
  clear_has_collar();
}
inline ::google::protobuf::uint32 ProductDetailInfo::collar() const {
  return collar_;
}
inline void ProductDetailInfo::set_collar(::google::protobuf::uint32 value) {
  set_has_collar();
  collar_ = value;
}

// optional string sign = 4;
inline bool ProductDetailInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProductDetailInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProductDetailInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProductDetailInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ProductDetailInfo::sign() const {
  return *sign_;
}
inline void ProductDetailInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void ProductDetailInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void ProductDetailInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductDetailInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* ProductDetailInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductDetailInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 font = 5;
inline bool ProductDetailInfo::has_font() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProductDetailInfo::set_has_font() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProductDetailInfo::clear_has_font() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProductDetailInfo::clear_font() {
  font_ = 0u;
  clear_has_font();
}
inline ::google::protobuf::uint32 ProductDetailInfo::font() const {
  return font_;
}
inline void ProductDetailInfo::set_font(::google::protobuf::uint32 value) {
  set_has_font();
  font_ = value;
}

// optional uint32 color = 6;
inline bool ProductDetailInfo::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProductDetailInfo::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProductDetailInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProductDetailInfo::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 ProductDetailInfo::color() const {
  return color_;
}
inline void ProductDetailInfo::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional string design_partner = 7;
inline bool ProductDetailInfo::has_design_partner() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ProductDetailInfo::set_has_design_partner() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ProductDetailInfo::clear_has_design_partner() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ProductDetailInfo::clear_design_partner() {
  if (design_partner_ != &::google::protobuf::internal::kEmptyString) {
    design_partner_->clear();
  }
  clear_has_design_partner();
}
inline const ::std::string& ProductDetailInfo::design_partner() const {
  return *design_partner_;
}
inline void ProductDetailInfo::set_design_partner(const ::std::string& value) {
  set_has_design_partner();
  if (design_partner_ == &::google::protobuf::internal::kEmptyString) {
    design_partner_ = new ::std::string;
  }
  design_partner_->assign(value);
}
inline void ProductDetailInfo::set_design_partner(const char* value) {
  set_has_design_partner();
  if (design_partner_ == &::google::protobuf::internal::kEmptyString) {
    design_partner_ = new ::std::string;
  }
  design_partner_->assign(value);
}
inline void ProductDetailInfo::set_design_partner(const char* value, size_t size) {
  set_has_design_partner();
  if (design_partner_ == &::google::protobuf::internal::kEmptyString) {
    design_partner_ = new ::std::string;
  }
  design_partner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductDetailInfo::mutable_design_partner() {
  set_has_design_partner();
  if (design_partner_ == &::google::protobuf::internal::kEmptyString) {
    design_partner_ = new ::std::string;
  }
  return design_partner_;
}
inline ::std::string* ProductDetailInfo::release_design_partner() {
  clear_has_design_partner();
  if (design_partner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = design_partner_;
    design_partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductDetailInfo::set_allocated_design_partner(::std::string* design_partner) {
  if (design_partner_ != &::google::protobuf::internal::kEmptyString) {
    delete design_partner_;
  }
  if (design_partner) {
    set_has_design_partner();
    design_partner_ = design_partner;
  } else {
    clear_has_design_partner();
    design_partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SouvenirDate

// required uint32 id = 1;
inline bool SouvenirDate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SouvenirDate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SouvenirDate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SouvenirDate::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SouvenirDate::id() const {
  return id_;
}
inline void SouvenirDate::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 date = 2;
inline bool SouvenirDate::has_date() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SouvenirDate::set_has_date() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SouvenirDate::clear_has_date() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SouvenirDate::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 SouvenirDate::date() const {
  return date_;
}
inline void SouvenirDate::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
}

// required string desc = 3;
inline bool SouvenirDate::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SouvenirDate::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SouvenirDate::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SouvenirDate::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& SouvenirDate::desc() const {
  return *desc_;
}
inline void SouvenirDate::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void SouvenirDate::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void SouvenirDate::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SouvenirDate::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* SouvenirDate::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SouvenirDate::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OrderItem

// optional uint32 type = 1;
inline bool OrderItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderItem::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 OrderItem::type() const {
  return type_;
}
inline void OrderItem::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 id = 2;
inline bool OrderItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OrderItem::id() const {
  return id_;
}
inline void OrderItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// OrderInfo

// optional uint32 order_id = 1;
inline bool OrderInfo::has_order_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderInfo::set_has_order_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderInfo::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderInfo::clear_order_id() {
  order_id_ = 0u;
  clear_has_order_id();
}
inline ::google::protobuf::uint32 OrderInfo::order_id() const {
  return order_id_;
}
inline void OrderInfo::set_order_id(::google::protobuf::uint32 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional uint32 owner_id = 2;
inline bool OrderInfo::has_owner_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderInfo::set_has_owner_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderInfo::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderInfo::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 OrderInfo::owner_id() const {
  return owner_id_;
}
inline void OrderInfo::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional uint32 order_status = 3;
inline bool OrderInfo::has_order_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderInfo::set_has_order_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderInfo::clear_has_order_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderInfo::clear_order_status() {
  order_status_ = 0u;
  clear_has_order_status();
}
inline ::google::protobuf::uint32 OrderInfo::order_status() const {
  return order_status_;
}
inline void OrderInfo::set_order_status(::google::protobuf::uint32 value) {
  set_has_order_status();
  order_status_ = value;
}

// optional uint32 create_time = 4;
inline bool OrderInfo::has_create_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderInfo::set_has_create_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderInfo::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderInfo::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 OrderInfo::create_time() const {
  return create_time_;
}
inline void OrderInfo::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional string address = 5;
inline bool OrderInfo::has_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderInfo::set_has_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderInfo::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& OrderInfo::address() const {
  return *address_;
}
inline void OrderInfo::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void OrderInfo::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void OrderInfo::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInfo::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* OrderInfo::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInfo::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 is_invoice = 6;
inline bool OrderInfo::has_is_invoice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderInfo::set_has_is_invoice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderInfo::clear_has_is_invoice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderInfo::clear_is_invoice() {
  is_invoice_ = 0u;
  clear_has_is_invoice();
}
inline ::google::protobuf::uint32 OrderInfo::is_invoice() const {
  return is_invoice_;
}
inline void OrderInfo::set_is_invoice(::google::protobuf::uint32 value) {
  set_has_is_invoice();
  is_invoice_ = value;
}

// optional string invoice_title = 7;
inline bool OrderInfo::has_invoice_title() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderInfo::set_has_invoice_title() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderInfo::clear_has_invoice_title() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderInfo::clear_invoice_title() {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    invoice_title_->clear();
  }
  clear_has_invoice_title();
}
inline const ::std::string& OrderInfo::invoice_title() const {
  return *invoice_title_;
}
inline void OrderInfo::set_invoice_title(const ::std::string& value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void OrderInfo::set_invoice_title(const char* value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void OrderInfo::set_invoice_title(const char* value, size_t size) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInfo::mutable_invoice_title() {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  return invoice_title_;
}
inline ::std::string* OrderInfo::release_invoice_title() {
  clear_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invoice_title_;
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInfo::set_allocated_invoice_title(::std::string* invoice_title) {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_title_;
  }
  if (invoice_title) {
    set_has_invoice_title();
    invoice_title_ = invoice_title;
  } else {
    clear_has_invoice_title();
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tephone = 8;
inline bool OrderInfo::has_tephone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderInfo::set_has_tephone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderInfo::clear_has_tephone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderInfo::clear_tephone() {
  if (tephone_ != &::google::protobuf::internal::kEmptyString) {
    tephone_->clear();
  }
  clear_has_tephone();
}
inline const ::std::string& OrderInfo::tephone() const {
  return *tephone_;
}
inline void OrderInfo::set_tephone(const ::std::string& value) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(value);
}
inline void OrderInfo::set_tephone(const char* value) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(value);
}
inline void OrderInfo::set_tephone(const char* value, size_t size) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInfo::mutable_tephone() {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  return tephone_;
}
inline ::std::string* OrderInfo::release_tephone() {
  clear_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tephone_;
    tephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInfo::set_allocated_tephone(::std::string* tephone) {
  if (tephone_ != &::google::protobuf::internal::kEmptyString) {
    delete tephone_;
  }
  if (tephone) {
    set_has_tephone();
    tephone_ = tephone;
  } else {
    clear_has_tephone();
    tephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receive_name = 9;
inline bool OrderInfo::has_receive_name() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderInfo::set_has_receive_name() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderInfo::clear_has_receive_name() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderInfo::clear_receive_name() {
  if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
    receive_name_->clear();
  }
  clear_has_receive_name();
}
inline const ::std::string& OrderInfo::receive_name() const {
  return *receive_name_;
}
inline void OrderInfo::set_receive_name(const ::std::string& value) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(value);
}
inline void OrderInfo::set_receive_name(const char* value) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(value);
}
inline void OrderInfo::set_receive_name(const char* value, size_t size) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInfo::mutable_receive_name() {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  return receive_name_;
}
inline ::std::string* OrderInfo::release_receive_name() {
  clear_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receive_name_;
    receive_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInfo::set_allocated_receive_name(::std::string* receive_name) {
  if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receive_name_;
  }
  if (receive_name) {
    set_has_receive_name();
    receive_name_ = receive_name;
  } else {
    clear_has_receive_name();
    receive_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .dgame.OrderItem item_list = 10;
inline int OrderInfo::item_list_size() const {
  return item_list_.size();
}
inline void OrderInfo::clear_item_list() {
  item_list_.Clear();
}
inline const ::dgame::OrderItem& OrderInfo::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::dgame::OrderItem* OrderInfo::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::dgame::OrderItem* OrderInfo::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >&
OrderInfo::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >*
OrderInfo::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// ProductSketchInfo

// optional string name = 1;
inline bool ProductSketchInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductSketchInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductSketchInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductSketchInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProductSketchInfo::name() const {
  return *name_;
}
inline void ProductSketchInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProductSketchInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProductSketchInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSketchInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProductSketchInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSketchInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 2;
inline bool ProductSketchInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductSketchInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProductSketchInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProductSketchInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& ProductSketchInfo::desc() const {
  return *desc_;
}
inline void ProductSketchInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ProductSketchInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void ProductSketchInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSketchInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* ProductSketchInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSketchInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string front_url = 3;
inline bool ProductSketchInfo::has_front_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductSketchInfo::set_has_front_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProductSketchInfo::clear_has_front_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProductSketchInfo::clear_front_url() {
  if (front_url_ != &::google::protobuf::internal::kEmptyString) {
    front_url_->clear();
  }
  clear_has_front_url();
}
inline const ::std::string& ProductSketchInfo::front_url() const {
  return *front_url_;
}
inline void ProductSketchInfo::set_front_url(const ::std::string& value) {
  set_has_front_url();
  if (front_url_ == &::google::protobuf::internal::kEmptyString) {
    front_url_ = new ::std::string;
  }
  front_url_->assign(value);
}
inline void ProductSketchInfo::set_front_url(const char* value) {
  set_has_front_url();
  if (front_url_ == &::google::protobuf::internal::kEmptyString) {
    front_url_ = new ::std::string;
  }
  front_url_->assign(value);
}
inline void ProductSketchInfo::set_front_url(const char* value, size_t size) {
  set_has_front_url();
  if (front_url_ == &::google::protobuf::internal::kEmptyString) {
    front_url_ = new ::std::string;
  }
  front_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSketchInfo::mutable_front_url() {
  set_has_front_url();
  if (front_url_ == &::google::protobuf::internal::kEmptyString) {
    front_url_ = new ::std::string;
  }
  return front_url_;
}
inline ::std::string* ProductSketchInfo::release_front_url() {
  clear_has_front_url();
  if (front_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = front_url_;
    front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSketchInfo::set_allocated_front_url(::std::string* front_url) {
  if (front_url_ != &::google::protobuf::internal::kEmptyString) {
    delete front_url_;
  }
  if (front_url) {
    set_has_front_url();
    front_url_ = front_url;
  } else {
    clear_has_front_url();
    front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string back_url = 4;
inline bool ProductSketchInfo::has_back_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProductSketchInfo::set_has_back_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProductSketchInfo::clear_has_back_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProductSketchInfo::clear_back_url() {
  if (back_url_ != &::google::protobuf::internal::kEmptyString) {
    back_url_->clear();
  }
  clear_has_back_url();
}
inline const ::std::string& ProductSketchInfo::back_url() const {
  return *back_url_;
}
inline void ProductSketchInfo::set_back_url(const ::std::string& value) {
  set_has_back_url();
  if (back_url_ == &::google::protobuf::internal::kEmptyString) {
    back_url_ = new ::std::string;
  }
  back_url_->assign(value);
}
inline void ProductSketchInfo::set_back_url(const char* value) {
  set_has_back_url();
  if (back_url_ == &::google::protobuf::internal::kEmptyString) {
    back_url_ = new ::std::string;
  }
  back_url_->assign(value);
}
inline void ProductSketchInfo::set_back_url(const char* value, size_t size) {
  set_has_back_url();
  if (back_url_ == &::google::protobuf::internal::kEmptyString) {
    back_url_ = new ::std::string;
  }
  back_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSketchInfo::mutable_back_url() {
  set_has_back_url();
  if (back_url_ == &::google::protobuf::internal::kEmptyString) {
    back_url_ = new ::std::string;
  }
  return back_url_;
}
inline ::std::string* ProductSketchInfo::release_back_url() {
  clear_has_back_url();
  if (back_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = back_url_;
    back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSketchInfo::set_allocated_back_url(::std::string* back_url) {
  if (back_url_ != &::google::protobuf::internal::kEmptyString) {
    delete back_url_;
  }
  if (back_url) {
    set_has_back_url();
    back_url_ = back_url;
  } else {
    clear_has_back_url();
    back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PointSourceInfo

// optional string name = 1;
inline bool PointSourceInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PointSourceInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PointSourceInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PointSourceInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PointSourceInfo::name() const {
  return *name_;
}
inline void PointSourceInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PointSourceInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PointSourceInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PointSourceInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PointSourceInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PointSourceInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 type = 2;
inline bool PointSourceInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PointSourceInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PointSourceInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PointSourceInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PointSourceInfo::type() const {
  return type_;
}
inline void PointSourceInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 time = 3;
inline bool PointSourceInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PointSourceInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PointSourceInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PointSourceInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 PointSourceInfo::time() const {
  return time_;
}
inline void PointSourceInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 point = 4;
inline bool PointSourceInfo::has_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PointSourceInfo::set_has_point() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PointSourceInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PointSourceInfo::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 PointSourceInfo::point() const {
  return point_;
}
inline void PointSourceInfo::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}

// -------------------------------------------------------------------

// OriginalProductInfo

// optional uint32 id = 1;
inline bool OriginalProductInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginalProductInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginalProductInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginalProductInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OriginalProductInfo::id() const {
  return id_;
}
inline void OriginalProductInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool OriginalProductInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginalProductInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OriginalProductInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OriginalProductInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OriginalProductInfo::name() const {
  return *name_;
}
inline void OriginalProductInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OriginalProductInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 3;
inline bool OriginalProductInfo::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginalProductInfo::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OriginalProductInfo::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OriginalProductInfo::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& OriginalProductInfo::desc() const {
  return *desc_;
}
inline void OriginalProductInfo::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void OriginalProductInfo::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void OriginalProductInfo::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductInfo::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* OriginalProductInfo::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductInfo::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string img_url = 4;
inline bool OriginalProductInfo::has_img_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OriginalProductInfo::set_has_img_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OriginalProductInfo::clear_has_img_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OriginalProductInfo::clear_img_url() {
  if (img_url_ != &::google::protobuf::internal::kEmptyString) {
    img_url_->clear();
  }
  clear_has_img_url();
}
inline const ::std::string& OriginalProductInfo::img_url() const {
  return *img_url_;
}
inline void OriginalProductInfo::set_img_url(const ::std::string& value) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::kEmptyString) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(value);
}
inline void OriginalProductInfo::set_img_url(const char* value) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::kEmptyString) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(value);
}
inline void OriginalProductInfo::set_img_url(const char* value, size_t size) {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::kEmptyString) {
    img_url_ = new ::std::string;
  }
  img_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductInfo::mutable_img_url() {
  set_has_img_url();
  if (img_url_ == &::google::protobuf::internal::kEmptyString) {
    img_url_ = new ::std::string;
  }
  return img_url_;
}
inline ::std::string* OriginalProductInfo::release_img_url() {
  clear_has_img_url();
  if (img_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = img_url_;
    img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductInfo::set_allocated_img_url(::std::string* img_url) {
  if (img_url_ != &::google::protobuf::internal::kEmptyString) {
    delete img_url_;
  }
  if (img_url) {
    set_has_img_url();
    img_url_ = img_url;
  } else {
    clear_has_img_url();
    img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 status = 5;
inline bool OriginalProductInfo::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OriginalProductInfo::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OriginalProductInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OriginalProductInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 OriginalProductInfo::status() const {
  return status_;
}
inline void OriginalProductInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 click_liked_times = 6;
inline bool OriginalProductInfo::has_click_liked_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OriginalProductInfo::set_has_click_liked_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OriginalProductInfo::clear_has_click_liked_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OriginalProductInfo::clear_click_liked_times() {
  click_liked_times_ = 0u;
  clear_has_click_liked_times();
}
inline ::google::protobuf::uint32 OriginalProductInfo::click_liked_times() const {
  return click_liked_times_;
}
inline void OriginalProductInfo::set_click_liked_times(::google::protobuf::uint32 value) {
  set_has_click_liked_times();
  click_liked_times_ = value;
}

// optional uint32 comment_times = 7;
inline bool OriginalProductInfo::has_comment_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OriginalProductInfo::set_has_comment_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OriginalProductInfo::clear_has_comment_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OriginalProductInfo::clear_comment_times() {
  comment_times_ = 0u;
  clear_has_comment_times();
}
inline ::google::protobuf::uint32 OriginalProductInfo::comment_times() const {
  return comment_times_;
}
inline void OriginalProductInfo::set_comment_times(::google::protobuf::uint32 value) {
  set_has_comment_times();
  comment_times_ = value;
}

// optional uint32 is_init = 8;
inline bool OriginalProductInfo::has_is_init() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OriginalProductInfo::set_has_is_init() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OriginalProductInfo::clear_has_is_init() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OriginalProductInfo::clear_is_init() {
  is_init_ = 0u;
  clear_has_is_init();
}
inline ::google::protobuf::uint32 OriginalProductInfo::is_init() const {
  return is_init_;
}
inline void OriginalProductInfo::set_is_init(::google::protobuf::uint32 value) {
  set_has_is_init();
  is_init_ = value;
}

// -------------------------------------------------------------------

// BindBankAccountInfo

// required string account_name = 1;
inline bool BindBankAccountInfo::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BindBankAccountInfo::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BindBankAccountInfo::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BindBankAccountInfo::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& BindBankAccountInfo::account_name() const {
  return *account_name_;
}
inline void BindBankAccountInfo::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void BindBankAccountInfo::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void BindBankAccountInfo::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BindBankAccountInfo::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* BindBankAccountInfo::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BindBankAccountInfo::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string card_number = 2;
inline bool BindBankAccountInfo::has_card_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BindBankAccountInfo::set_has_card_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BindBankAccountInfo::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BindBankAccountInfo::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& BindBankAccountInfo::card_number() const {
  return *card_number_;
}
inline void BindBankAccountInfo::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void BindBankAccountInfo::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void BindBankAccountInfo::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BindBankAccountInfo::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* BindBankAccountInfo::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BindBankAccountInfo::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 bind_time = 3;
inline bool BindBankAccountInfo::has_bind_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BindBankAccountInfo::set_has_bind_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BindBankAccountInfo::clear_has_bind_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BindBankAccountInfo::clear_bind_time() {
  bind_time_ = 0u;
  clear_has_bind_time();
}
inline ::google::protobuf::uint32 BindBankAccountInfo::bind_time() const {
  return bind_time_;
}
inline void BindBankAccountInfo::set_bind_time(::google::protobuf::uint32 value) {
  set_has_bind_time();
  bind_time_ = value;
}

// -------------------------------------------------------------------

// OriginalProductProfitInfo

// optional string name = 1;
inline bool OriginalProductProfitInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginalProductProfitInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginalProductProfitInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginalProductProfitInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OriginalProductProfitInfo::name() const {
  return *name_;
}
inline void OriginalProductProfitInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductProfitInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductProfitInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductProfitInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OriginalProductProfitInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductProfitInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float profit = 2;
inline bool OriginalProductProfitInfo::has_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginalProductProfitInfo::set_has_profit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OriginalProductProfitInfo::clear_has_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OriginalProductProfitInfo::clear_profit() {
  profit_ = 0;
  clear_has_profit();
}
inline float OriginalProductProfitInfo::profit() const {
  return profit_;
}
inline void OriginalProductProfitInfo::set_profit(float value) {
  set_has_profit();
  profit_ = value;
}

// optional uint32 count = 3;
inline bool OriginalProductProfitInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginalProductProfitInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OriginalProductProfitInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OriginalProductProfitInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 OriginalProductProfitInfo::count() const {
  return count_;
}
inline void OriginalProductProfitInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 id = 4;
inline bool OriginalProductProfitInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OriginalProductProfitInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OriginalProductProfitInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OriginalProductProfitInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OriginalProductProfitInfo::id() const {
  return id_;
}
inline void OriginalProductProfitInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DayOriginalProductProfit

// required uint32 date_time = 1;
inline bool DayOriginalProductProfit::has_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DayOriginalProductProfit::set_has_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DayOriginalProductProfit::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DayOriginalProductProfit::clear_date_time() {
  date_time_ = 0u;
  clear_has_date_time();
}
inline ::google::protobuf::uint32 DayOriginalProductProfit::date_time() const {
  return date_time_;
}
inline void DayOriginalProductProfit::set_date_time(::google::protobuf::uint32 value) {
  set_has_date_time();
  date_time_ = value;
}

// repeated .dgame.OriginalProductProfitInfo profit_list = 2;
inline int DayOriginalProductProfit::profit_list_size() const {
  return profit_list_.size();
}
inline void DayOriginalProductProfit::clear_profit_list() {
  profit_list_.Clear();
}
inline const ::dgame::OriginalProductProfitInfo& DayOriginalProductProfit::profit_list(int index) const {
  return profit_list_.Get(index);
}
inline ::dgame::OriginalProductProfitInfo* DayOriginalProductProfit::mutable_profit_list(int index) {
  return profit_list_.Mutable(index);
}
inline ::dgame::OriginalProductProfitInfo* DayOriginalProductProfit::add_profit_list() {
  return profit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitInfo >&
DayOriginalProductProfit::profit_list() const {
  return profit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitInfo >*
DayOriginalProductProfit::mutable_profit_list() {
  return &profit_list_;
}

// -------------------------------------------------------------------

// OriginalProductProfitBaseInfo

// optional string name = 1;
inline bool OriginalProductProfitBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginalProductProfitBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginalProductProfitBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginalProductProfitBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OriginalProductProfitBaseInfo::name() const {
  return *name_;
}
inline void OriginalProductProfitBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductProfitBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductProfitBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductProfitBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OriginalProductProfitBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductProfitBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float total_profit = 2;
inline bool OriginalProductProfitBaseInfo::has_total_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginalProductProfitBaseInfo::set_has_total_profit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OriginalProductProfitBaseInfo::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OriginalProductProfitBaseInfo::clear_total_profit() {
  total_profit_ = 0;
  clear_has_total_profit();
}
inline float OriginalProductProfitBaseInfo::total_profit() const {
  return total_profit_;
}
inline void OriginalProductProfitBaseInfo::set_total_profit(float value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional uint32 total_count = 3;
inline bool OriginalProductProfitBaseInfo::has_total_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginalProductProfitBaseInfo::set_has_total_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OriginalProductProfitBaseInfo::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OriginalProductProfitBaseInfo::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 OriginalProductProfitBaseInfo::total_count() const {
  return total_count_;
}
inline void OriginalProductProfitBaseInfo::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// optional float yesterday_total_profit = 4;
inline bool OriginalProductProfitBaseInfo::has_yesterday_total_profit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OriginalProductProfitBaseInfo::set_has_yesterday_total_profit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OriginalProductProfitBaseInfo::clear_has_yesterday_total_profit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OriginalProductProfitBaseInfo::clear_yesterday_total_profit() {
  yesterday_total_profit_ = 0;
  clear_has_yesterday_total_profit();
}
inline float OriginalProductProfitBaseInfo::yesterday_total_profit() const {
  return yesterday_total_profit_;
}
inline void OriginalProductProfitBaseInfo::set_yesterday_total_profit(float value) {
  set_has_yesterday_total_profit();
  yesterday_total_profit_ = value;
}

// optional uint32 id = 5;
inline bool OriginalProductProfitBaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OriginalProductProfitBaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OriginalProductProfitBaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OriginalProductProfitBaseInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OriginalProductProfitBaseInfo::id() const {
  return id_;
}
inline void OriginalProductProfitBaseInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// DayOriginalProductProfitBase

// required uint32 date_time = 1;
inline bool DayOriginalProductProfitBase::has_date_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DayOriginalProductProfitBase::set_has_date_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DayOriginalProductProfitBase::clear_has_date_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DayOriginalProductProfitBase::clear_date_time() {
  date_time_ = 0u;
  clear_has_date_time();
}
inline ::google::protobuf::uint32 DayOriginalProductProfitBase::date_time() const {
  return date_time_;
}
inline void DayOriginalProductProfitBase::set_date_time(::google::protobuf::uint32 value) {
  set_has_date_time();
  date_time_ = value;
}

// optional float total_profit = 2;
inline bool DayOriginalProductProfitBase::has_total_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DayOriginalProductProfitBase::set_has_total_profit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DayOriginalProductProfitBase::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DayOriginalProductProfitBase::clear_total_profit() {
  total_profit_ = 0;
  clear_has_total_profit();
}
inline float DayOriginalProductProfitBase::total_profit() const {
  return total_profit_;
}
inline void DayOriginalProductProfitBase::set_total_profit(float value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional uint32 total_count = 3;
inline bool DayOriginalProductProfitBase::has_total_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DayOriginalProductProfitBase::set_has_total_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DayOriginalProductProfitBase::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DayOriginalProductProfitBase::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 DayOriginalProductProfitBase::total_count() const {
  return total_count_;
}
inline void DayOriginalProductProfitBase::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// -------------------------------------------------------------------

// ProfitData

// required uint32 time = 1;
inline bool ProfitData::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProfitData::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProfitData::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProfitData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ProfitData::time() const {
  return time_;
}
inline void ProfitData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required float money = 2;
inline bool ProfitData::has_money() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProfitData::set_has_money() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProfitData::clear_has_money() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProfitData::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline float ProfitData::money() const {
  return money_;
}
inline void ProfitData::set_money(float value) {
  set_has_money();
  money_ = value;
}

// required uint32 profit_type = 3;
inline bool ProfitData::has_profit_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProfitData::set_has_profit_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProfitData::clear_has_profit_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProfitData::clear_profit_type() {
  profit_type_ = 0u;
  clear_has_profit_type();
}
inline ::google::protobuf::uint32 ProfitData::profit_type() const {
  return profit_type_;
}
inline void ProfitData::set_profit_type(::google::protobuf::uint32 value) {
  set_has_profit_type();
  profit_type_ = value;
}

// optional string name = 4;
inline bool ProfitData::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProfitData::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProfitData::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProfitData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ProfitData::name() const {
  return *name_;
}
inline void ProfitData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProfitData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ProfitData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProfitData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ProfitData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProfitData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 profit_source = 5;
inline bool ProfitData::has_profit_source() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProfitData::set_has_profit_source() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProfitData::clear_has_profit_source() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProfitData::clear_profit_source() {
  profit_source_ = 0u;
  clear_has_profit_source();
}
inline ::google::protobuf::uint32 ProfitData::profit_source() const {
  return profit_source_;
}
inline void ProfitData::set_profit_source(::google::protobuf::uint32 value) {
  set_has_profit_source();
  profit_source_ = value;
}

// -------------------------------------------------------------------

// CouponData

// required uint32 coupon_id = 1;
inline bool CouponData::has_coupon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CouponData::set_has_coupon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CouponData::clear_has_coupon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CouponData::clear_coupon_id() {
  coupon_id_ = 0u;
  clear_has_coupon_id();
}
inline ::google::protobuf::uint32 CouponData::coupon_id() const {
  return coupon_id_;
}
inline void CouponData::set_coupon_id(::google::protobuf::uint32 value) {
  set_has_coupon_id();
  coupon_id_ = value;
}

// required uint32 is_use = 2;
inline bool CouponData::has_is_use() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CouponData::set_has_is_use() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CouponData::clear_has_is_use() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CouponData::clear_is_use() {
  is_use_ = 0u;
  clear_has_is_use();
}
inline ::google::protobuf::uint32 CouponData::is_use() const {
  return is_use_;
}
inline void CouponData::set_is_use(::google::protobuf::uint32 value) {
  set_has_is_use();
  is_use_ = value;
}

// required uint32 begin_time = 3;
inline bool CouponData::has_begin_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CouponData::set_has_begin_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CouponData::clear_has_begin_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CouponData::clear_begin_time() {
  begin_time_ = 0u;
  clear_has_begin_time();
}
inline ::google::protobuf::uint32 CouponData::begin_time() const {
  return begin_time_;
}
inline void CouponData::set_begin_time(::google::protobuf::uint32 value) {
  set_has_begin_time();
  begin_time_ = value;
}

// required uint32 end_time = 4;
inline bool CouponData::has_end_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CouponData::set_has_end_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CouponData::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CouponData::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 CouponData::end_time() const {
  return end_time_;
}
inline void CouponData::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
}

// required uint32 coupon_value = 5;
inline bool CouponData::has_coupon_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CouponData::set_has_coupon_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CouponData::clear_has_coupon_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CouponData::clear_coupon_value() {
  coupon_value_ = 0u;
  clear_has_coupon_value();
}
inline ::google::protobuf::uint32 CouponData::coupon_value() const {
  return coupon_value_;
}
inline void CouponData::set_coupon_value(::google::protobuf::uint32 value) {
  set_has_coupon_value();
  coupon_value_ = value;
}

// required uint32 need_cost = 6;
inline bool CouponData::has_need_cost() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CouponData::set_has_need_cost() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CouponData::clear_has_need_cost() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CouponData::clear_need_cost() {
  need_cost_ = 0u;
  clear_has_need_cost();
}
inline ::google::protobuf::uint32 CouponData::need_cost() const {
  return need_cost_;
}
inline void CouponData::set_need_cost(::google::protobuf::uint32 value) {
  set_has_need_cost();
  need_cost_ = value;
}

// required uint32 use_type = 7;
inline bool CouponData::has_use_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CouponData::set_has_use_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CouponData::clear_has_use_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CouponData::clear_use_type() {
  use_type_ = 0u;
  clear_has_use_type();
}
inline ::google::protobuf::uint32 CouponData::use_type() const {
  return use_type_;
}
inline void CouponData::set_use_type(::google::protobuf::uint32 value) {
  set_has_use_type();
  use_type_ = value;
}

// required uint32 create_time = 8;
inline bool CouponData::has_create_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CouponData::set_has_create_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CouponData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CouponData::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 CouponData::create_time() const {
  return create_time_;
}
inline void CouponData::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// -------------------------------------------------------------------

// OriginalProductPartInfo

// optional uint32 part_id = 1;
inline bool OriginalProductPartInfo::has_part_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginalProductPartInfo::set_has_part_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginalProductPartInfo::clear_has_part_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginalProductPartInfo::clear_part_id() {
  part_id_ = 0u;
  clear_has_part_id();
}
inline ::google::protobuf::uint32 OriginalProductPartInfo::part_id() const {
  return part_id_;
}
inline void OriginalProductPartInfo::set_part_id(::google::protobuf::uint32 value) {
  set_has_part_id();
  part_id_ = value;
}

// repeated uint32 materials_list = 2;
inline int OriginalProductPartInfo::materials_list_size() const {
  return materials_list_.size();
}
inline void OriginalProductPartInfo::clear_materials_list() {
  materials_list_.Clear();
}
inline ::google::protobuf::uint32 OriginalProductPartInfo::materials_list(int index) const {
  return materials_list_.Get(index);
}
inline void OriginalProductPartInfo::set_materials_list(int index, ::google::protobuf::uint32 value) {
  materials_list_.Set(index, value);
}
inline void OriginalProductPartInfo::add_materials_list(::google::protobuf::uint32 value) {
  materials_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OriginalProductPartInfo::materials_list() const {
  return materials_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OriginalProductPartInfo::mutable_materials_list() {
  return &materials_list_;
}

// -------------------------------------------------------------------

// OriginalProductDetail

// optional uint32 id = 1;
inline bool OriginalProductDetail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OriginalProductDetail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OriginalProductDetail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OriginalProductDetail::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OriginalProductDetail::id() const {
  return id_;
}
inline void OriginalProductDetail::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool OriginalProductDetail::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OriginalProductDetail::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OriginalProductDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OriginalProductDetail::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OriginalProductDetail::name() const {
  return *name_;
}
inline void OriginalProductDetail::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductDetail::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OriginalProductDetail::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OriginalProductDetail::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 3;
inline bool OriginalProductDetail::has_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OriginalProductDetail::set_has_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OriginalProductDetail::clear_has_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OriginalProductDetail::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& OriginalProductDetail::url() const {
  return *url_;
}
inline void OriginalProductDetail::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OriginalProductDetail::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void OriginalProductDetail::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* OriginalProductDetail::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string desc = 4;
inline bool OriginalProductDetail::has_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OriginalProductDetail::set_has_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OriginalProductDetail::clear_has_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OriginalProductDetail::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& OriginalProductDetail::desc() const {
  return *desc_;
}
inline void OriginalProductDetail::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void OriginalProductDetail::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void OriginalProductDetail::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* OriginalProductDetail::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 style_list = 5;
inline int OriginalProductDetail::style_list_size() const {
  return style_list_.size();
}
inline void OriginalProductDetail::clear_style_list() {
  style_list_.Clear();
}
inline ::google::protobuf::uint32 OriginalProductDetail::style_list(int index) const {
  return style_list_.Get(index);
}
inline void OriginalProductDetail::set_style_list(int index, ::google::protobuf::uint32 value) {
  style_list_.Set(index, value);
}
inline void OriginalProductDetail::add_style_list(::google::protobuf::uint32 value) {
  style_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OriginalProductDetail::style_list() const {
  return style_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OriginalProductDetail::mutable_style_list() {
  return &style_list_;
}

// optional uint32 color = 6;
inline bool OriginalProductDetail::has_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OriginalProductDetail::set_has_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OriginalProductDetail::clear_has_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OriginalProductDetail::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 OriginalProductDetail::color() const {
  return color_;
}
inline void OriginalProductDetail::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional uint32 materials = 7;
inline bool OriginalProductDetail::has_materials() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OriginalProductDetail::set_has_materials() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OriginalProductDetail::clear_has_materials() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OriginalProductDetail::clear_materials() {
  materials_ = 0u;
  clear_has_materials();
}
inline ::google::protobuf::uint32 OriginalProductDetail::materials() const {
  return materials_;
}
inline void OriginalProductDetail::set_materials(::google::protobuf::uint32 value) {
  set_has_materials();
  materials_ = value;
}

// optional uint32 model = 8;
inline bool OriginalProductDetail::has_model() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OriginalProductDetail::set_has_model() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OriginalProductDetail::clear_has_model() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OriginalProductDetail::clear_model() {
  model_ = 0u;
  clear_has_model();
}
inline ::google::protobuf::uint32 OriginalProductDetail::model() const {
  return model_;
}
inline void OriginalProductDetail::set_model(::google::protobuf::uint32 value) {
  set_has_model();
  model_ = value;
}

// repeated uint32 season_list = 9;
inline int OriginalProductDetail::season_list_size() const {
  return season_list_.size();
}
inline void OriginalProductDetail::clear_season_list() {
  season_list_.Clear();
}
inline ::google::protobuf::uint32 OriginalProductDetail::season_list(int index) const {
  return season_list_.Get(index);
}
inline void OriginalProductDetail::set_season_list(int index, ::google::protobuf::uint32 value) {
  season_list_.Set(index, value);
}
inline void OriginalProductDetail::add_season_list(::google::protobuf::uint32 value) {
  season_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OriginalProductDetail::season_list() const {
  return season_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OriginalProductDetail::mutable_season_list() {
  return &season_list_;
}

// optional uint32 type = 10;
inline bool OriginalProductDetail::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OriginalProductDetail::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OriginalProductDetail::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OriginalProductDetail::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 OriginalProductDetail::type() const {
  return type_;
}
inline void OriginalProductDetail::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated .dgame.OriginalProductPartInfo part_list = 11;
inline int OriginalProductDetail::part_list_size() const {
  return part_list_.size();
}
inline void OriginalProductDetail::clear_part_list() {
  part_list_.Clear();
}
inline const ::dgame::OriginalProductPartInfo& OriginalProductDetail::part_list(int index) const {
  return part_list_.Get(index);
}
inline ::dgame::OriginalProductPartInfo* OriginalProductDetail::mutable_part_list(int index) {
  return part_list_.Mutable(index);
}
inline ::dgame::OriginalProductPartInfo* OriginalProductDetail::add_part_list() {
  return part_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductPartInfo >&
OriginalProductDetail::part_list() const {
  return part_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductPartInfo >*
OriginalProductDetail::mutable_part_list() {
  return &part_list_;
}

// optional uint32 is_can_modify_lining = 12;
inline bool OriginalProductDetail::has_is_can_modify_lining() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OriginalProductDetail::set_has_is_can_modify_lining() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OriginalProductDetail::clear_has_is_can_modify_lining() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OriginalProductDetail::clear_is_can_modify_lining() {
  is_can_modify_lining_ = 0u;
  clear_has_is_can_modify_lining();
}
inline ::google::protobuf::uint32 OriginalProductDetail::is_can_modify_lining() const {
  return is_can_modify_lining_;
}
inline void OriginalProductDetail::set_is_can_modify_lining(::google::protobuf::uint32 value) {
  set_has_is_can_modify_lining();
  is_can_modify_lining_ = value;
}

// optional string sketch_front_url = 13;
inline bool OriginalProductDetail::has_sketch_front_url() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OriginalProductDetail::set_has_sketch_front_url() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OriginalProductDetail::clear_has_sketch_front_url() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OriginalProductDetail::clear_sketch_front_url() {
  if (sketch_front_url_ != &::google::protobuf::internal::kEmptyString) {
    sketch_front_url_->clear();
  }
  clear_has_sketch_front_url();
}
inline const ::std::string& OriginalProductDetail::sketch_front_url() const {
  return *sketch_front_url_;
}
inline void OriginalProductDetail::set_sketch_front_url(const ::std::string& value) {
  set_has_sketch_front_url();
  if (sketch_front_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_front_url_ = new ::std::string;
  }
  sketch_front_url_->assign(value);
}
inline void OriginalProductDetail::set_sketch_front_url(const char* value) {
  set_has_sketch_front_url();
  if (sketch_front_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_front_url_ = new ::std::string;
  }
  sketch_front_url_->assign(value);
}
inline void OriginalProductDetail::set_sketch_front_url(const char* value, size_t size) {
  set_has_sketch_front_url();
  if (sketch_front_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_front_url_ = new ::std::string;
  }
  sketch_front_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_sketch_front_url() {
  set_has_sketch_front_url();
  if (sketch_front_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_front_url_ = new ::std::string;
  }
  return sketch_front_url_;
}
inline ::std::string* OriginalProductDetail::release_sketch_front_url() {
  clear_has_sketch_front_url();
  if (sketch_front_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sketch_front_url_;
    sketch_front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_sketch_front_url(::std::string* sketch_front_url) {
  if (sketch_front_url_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_front_url_;
  }
  if (sketch_front_url) {
    set_has_sketch_front_url();
    sketch_front_url_ = sketch_front_url;
  } else {
    clear_has_sketch_front_url();
    sketch_front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sketch_back_url = 14;
inline bool OriginalProductDetail::has_sketch_back_url() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OriginalProductDetail::set_has_sketch_back_url() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OriginalProductDetail::clear_has_sketch_back_url() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OriginalProductDetail::clear_sketch_back_url() {
  if (sketch_back_url_ != &::google::protobuf::internal::kEmptyString) {
    sketch_back_url_->clear();
  }
  clear_has_sketch_back_url();
}
inline const ::std::string& OriginalProductDetail::sketch_back_url() const {
  return *sketch_back_url_;
}
inline void OriginalProductDetail::set_sketch_back_url(const ::std::string& value) {
  set_has_sketch_back_url();
  if (sketch_back_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_back_url_ = new ::std::string;
  }
  sketch_back_url_->assign(value);
}
inline void OriginalProductDetail::set_sketch_back_url(const char* value) {
  set_has_sketch_back_url();
  if (sketch_back_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_back_url_ = new ::std::string;
  }
  sketch_back_url_->assign(value);
}
inline void OriginalProductDetail::set_sketch_back_url(const char* value, size_t size) {
  set_has_sketch_back_url();
  if (sketch_back_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_back_url_ = new ::std::string;
  }
  sketch_back_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_sketch_back_url() {
  set_has_sketch_back_url();
  if (sketch_back_url_ == &::google::protobuf::internal::kEmptyString) {
    sketch_back_url_ = new ::std::string;
  }
  return sketch_back_url_;
}
inline ::std::string* OriginalProductDetail::release_sketch_back_url() {
  clear_has_sketch_back_url();
  if (sketch_back_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sketch_back_url_;
    sketch_back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_sketch_back_url(::std::string* sketch_back_url) {
  if (sketch_back_url_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_back_url_;
  }
  if (sketch_back_url) {
    set_has_sketch_back_url();
    sketch_back_url_ = sketch_back_url;
  } else {
    clear_has_sketch_back_url();
    sketch_back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sketch_desc = 15;
inline bool OriginalProductDetail::has_sketch_desc() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OriginalProductDetail::set_has_sketch_desc() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OriginalProductDetail::clear_has_sketch_desc() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OriginalProductDetail::clear_sketch_desc() {
  if (sketch_desc_ != &::google::protobuf::internal::kEmptyString) {
    sketch_desc_->clear();
  }
  clear_has_sketch_desc();
}
inline const ::std::string& OriginalProductDetail::sketch_desc() const {
  return *sketch_desc_;
}
inline void OriginalProductDetail::set_sketch_desc(const ::std::string& value) {
  set_has_sketch_desc();
  if (sketch_desc_ == &::google::protobuf::internal::kEmptyString) {
    sketch_desc_ = new ::std::string;
  }
  sketch_desc_->assign(value);
}
inline void OriginalProductDetail::set_sketch_desc(const char* value) {
  set_has_sketch_desc();
  if (sketch_desc_ == &::google::protobuf::internal::kEmptyString) {
    sketch_desc_ = new ::std::string;
  }
  sketch_desc_->assign(value);
}
inline void OriginalProductDetail::set_sketch_desc(const char* value, size_t size) {
  set_has_sketch_desc();
  if (sketch_desc_ == &::google::protobuf::internal::kEmptyString) {
    sketch_desc_ = new ::std::string;
  }
  sketch_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OriginalProductDetail::mutable_sketch_desc() {
  set_has_sketch_desc();
  if (sketch_desc_ == &::google::protobuf::internal::kEmptyString) {
    sketch_desc_ = new ::std::string;
  }
  return sketch_desc_;
}
inline ::std::string* OriginalProductDetail::release_sketch_desc() {
  clear_has_sketch_desc();
  if (sketch_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sketch_desc_;
    sketch_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OriginalProductDetail::set_allocated_sketch_desc(::std::string* sketch_desc) {
  if (sketch_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_desc_;
  }
  if (sketch_desc) {
    set_has_sketch_desc();
    sketch_desc_ = sketch_desc;
  } else {
    clear_has_sketch_desc();
    sketch_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// TradeInfo

// optional uint32 time = 1;
inline bool TradeInfo::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeInfo::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TradeInfo::time() const {
  return time_;
}
inline void TradeInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 type = 2;
inline bool TradeInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TradeInfo::type() const {
  return type_;
}
inline void TradeInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 value = 3;
inline bool TradeInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeInfo::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 TradeInfo::value() const {
  return value_;
}
inline void TradeInfo::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ProductSpaceCategoryInfo

// optional uint32 category_id = 1;
inline bool ProductSpaceCategoryInfo::has_category_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductSpaceCategoryInfo::set_has_category_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductSpaceCategoryInfo::clear_has_category_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductSpaceCategoryInfo::clear_category_id() {
  category_id_ = 0u;
  clear_has_category_id();
}
inline ::google::protobuf::uint32 ProductSpaceCategoryInfo::category_id() const {
  return category_id_;
}
inline void ProductSpaceCategoryInfo::set_category_id(::google::protobuf::uint32 value) {
  set_has_category_id();
  category_id_ = value;
}

// repeated uint32 category_child_list = 2;
inline int ProductSpaceCategoryInfo::category_child_list_size() const {
  return category_child_list_.size();
}
inline void ProductSpaceCategoryInfo::clear_category_child_list() {
  category_child_list_.Clear();
}
inline ::google::protobuf::uint32 ProductSpaceCategoryInfo::category_child_list(int index) const {
  return category_child_list_.Get(index);
}
inline void ProductSpaceCategoryInfo::set_category_child_list(int index, ::google::protobuf::uint32 value) {
  category_child_list_.Set(index, value);
}
inline void ProductSpaceCategoryInfo::add_category_child_list(::google::protobuf::uint32 value) {
  category_child_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ProductSpaceCategoryInfo::category_child_list() const {
  return category_child_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ProductSpaceCategoryInfo::mutable_category_child_list() {
  return &category_child_list_;
}

// -------------------------------------------------------------------

// ProductSpaceProductInfo

// optional string pname = 1;
inline bool ProductSpaceProductInfo::has_pname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProductSpaceProductInfo::set_has_pname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProductSpaceProductInfo::clear_has_pname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProductSpaceProductInfo::clear_pname() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    pname_->clear();
  }
  clear_has_pname();
}
inline const ::std::string& ProductSpaceProductInfo::pname() const {
  return *pname_;
}
inline void ProductSpaceProductInfo::set_pname(const ::std::string& value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void ProductSpaceProductInfo::set_pname(const char* value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void ProductSpaceProductInfo::set_pname(const char* value, size_t size) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSpaceProductInfo::mutable_pname() {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  return pname_;
}
inline ::std::string* ProductSpaceProductInfo::release_pname() {
  clear_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pname_;
    pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSpaceProductInfo::set_allocated_pname(::std::string* pname) {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (pname) {
    set_has_pname();
    pname_ = pname;
  } else {
    clear_has_pname();
    pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pdesc = 2;
inline bool ProductSpaceProductInfo::has_pdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProductSpaceProductInfo::set_has_pdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProductSpaceProductInfo::clear_has_pdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProductSpaceProductInfo::clear_pdesc() {
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    pdesc_->clear();
  }
  clear_has_pdesc();
}
inline const ::std::string& ProductSpaceProductInfo::pdesc() const {
  return *pdesc_;
}
inline void ProductSpaceProductInfo::set_pdesc(const ::std::string& value) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(value);
}
inline void ProductSpaceProductInfo::set_pdesc(const char* value) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(value);
}
inline void ProductSpaceProductInfo::set_pdesc(const char* value, size_t size) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSpaceProductInfo::mutable_pdesc() {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  return pdesc_;
}
inline ::std::string* ProductSpaceProductInfo::release_pdesc() {
  clear_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pdesc_;
    pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSpaceProductInfo::set_allocated_pdesc(::std::string* pdesc) {
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pdesc_;
  }
  if (pdesc) {
    set_has_pdesc();
    pdesc_ = pdesc;
  } else {
    clear_has_pdesc();
    pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pauthor = 3;
inline bool ProductSpaceProductInfo::has_pauthor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProductSpaceProductInfo::set_has_pauthor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProductSpaceProductInfo::clear_has_pauthor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProductSpaceProductInfo::clear_pauthor() {
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    pauthor_->clear();
  }
  clear_has_pauthor();
}
inline const ::std::string& ProductSpaceProductInfo::pauthor() const {
  return *pauthor_;
}
inline void ProductSpaceProductInfo::set_pauthor(const ::std::string& value) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(value);
}
inline void ProductSpaceProductInfo::set_pauthor(const char* value) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(value);
}
inline void ProductSpaceProductInfo::set_pauthor(const char* value, size_t size) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSpaceProductInfo::mutable_pauthor() {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  return pauthor_;
}
inline ::std::string* ProductSpaceProductInfo::release_pauthor() {
  clear_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pauthor_;
    pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSpaceProductInfo::set_allocated_pauthor(::std::string* pauthor) {
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    delete pauthor_;
  }
  if (pauthor) {
    set_has_pauthor();
    pauthor_ = pauthor;
  } else {
    clear_has_pauthor();
    pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string picture_url = 4;
inline bool ProductSpaceProductInfo::has_picture_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProductSpaceProductInfo::set_has_picture_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProductSpaceProductInfo::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProductSpaceProductInfo::clear_picture_url() {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    picture_url_->clear();
  }
  clear_has_picture_url();
}
inline const ::std::string& ProductSpaceProductInfo::picture_url() const {
  return *picture_url_;
}
inline void ProductSpaceProductInfo::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ProductSpaceProductInfo::set_picture_url(const char* value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void ProductSpaceProductInfo::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProductSpaceProductInfo::mutable_picture_url() {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  return picture_url_;
}
inline ::std::string* ProductSpaceProductInfo::release_picture_url() {
  clear_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_url_;
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProductSpaceProductInfo::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (picture_url) {
    set_has_picture_url();
    picture_url_ = picture_url;
  } else {
    clear_has_picture_url();
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CooperationProductInfo

// optional string pname = 1;
inline bool CooperationProductInfo::has_pname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CooperationProductInfo::set_has_pname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CooperationProductInfo::clear_has_pname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CooperationProductInfo::clear_pname() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    pname_->clear();
  }
  clear_has_pname();
}
inline const ::std::string& CooperationProductInfo::pname() const {
  return *pname_;
}
inline void CooperationProductInfo::set_pname(const ::std::string& value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void CooperationProductInfo::set_pname(const char* value) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(value);
}
inline void CooperationProductInfo::set_pname(const char* value, size_t size) {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  pname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CooperationProductInfo::mutable_pname() {
  set_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    pname_ = new ::std::string;
  }
  return pname_;
}
inline ::std::string* CooperationProductInfo::release_pname() {
  clear_has_pname();
  if (pname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pname_;
    pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CooperationProductInfo::set_allocated_pname(::std::string* pname) {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (pname) {
    set_has_pname();
    pname_ = pname;
  } else {
    clear_has_pname();
    pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pdesc = 2;
inline bool CooperationProductInfo::has_pdesc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CooperationProductInfo::set_has_pdesc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CooperationProductInfo::clear_has_pdesc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CooperationProductInfo::clear_pdesc() {
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    pdesc_->clear();
  }
  clear_has_pdesc();
}
inline const ::std::string& CooperationProductInfo::pdesc() const {
  return *pdesc_;
}
inline void CooperationProductInfo::set_pdesc(const ::std::string& value) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(value);
}
inline void CooperationProductInfo::set_pdesc(const char* value) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(value);
}
inline void CooperationProductInfo::set_pdesc(const char* value, size_t size) {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  pdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CooperationProductInfo::mutable_pdesc() {
  set_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    pdesc_ = new ::std::string;
  }
  return pdesc_;
}
inline ::std::string* CooperationProductInfo::release_pdesc() {
  clear_has_pdesc();
  if (pdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pdesc_;
    pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CooperationProductInfo::set_allocated_pdesc(::std::string* pdesc) {
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pdesc_;
  }
  if (pdesc) {
    set_has_pdesc();
    pdesc_ = pdesc;
  } else {
    clear_has_pdesc();
    pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 time = 3;
inline bool CooperationProductInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CooperationProductInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CooperationProductInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CooperationProductInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CooperationProductInfo::time() const {
  return time_;
}
inline void CooperationProductInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// repeated uint32 codesign_status_list = 4;
inline int CooperationProductInfo::codesign_status_list_size() const {
  return codesign_status_list_.size();
}
inline void CooperationProductInfo::clear_codesign_status_list() {
  codesign_status_list_.Clear();
}
inline ::google::protobuf::uint32 CooperationProductInfo::codesign_status_list(int index) const {
  return codesign_status_list_.Get(index);
}
inline void CooperationProductInfo::set_codesign_status_list(int index, ::google::protobuf::uint32 value) {
  codesign_status_list_.Set(index, value);
}
inline void CooperationProductInfo::add_codesign_status_list(::google::protobuf::uint32 value) {
  codesign_status_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CooperationProductInfo::codesign_status_list() const {
  return codesign_status_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CooperationProductInfo::mutable_codesign_status_list() {
  return &codesign_status_list_;
}

// required uint32 codesign_finistatus = 5;
inline bool CooperationProductInfo::has_codesign_finistatus() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CooperationProductInfo::set_has_codesign_finistatus() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CooperationProductInfo::clear_has_codesign_finistatus() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CooperationProductInfo::clear_codesign_finistatus() {
  codesign_finistatus_ = 0u;
  clear_has_codesign_finistatus();
}
inline ::google::protobuf::uint32 CooperationProductInfo::codesign_finistatus() const {
  return codesign_finistatus_;
}
inline void CooperationProductInfo::set_codesign_finistatus(::google::protobuf::uint32 value) {
  set_has_codesign_finistatus();
  codesign_finistatus_ = value;
}

// optional string pauthor = 6;
inline bool CooperationProductInfo::has_pauthor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CooperationProductInfo::set_has_pauthor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CooperationProductInfo::clear_has_pauthor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CooperationProductInfo::clear_pauthor() {
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    pauthor_->clear();
  }
  clear_has_pauthor();
}
inline const ::std::string& CooperationProductInfo::pauthor() const {
  return *pauthor_;
}
inline void CooperationProductInfo::set_pauthor(const ::std::string& value) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(value);
}
inline void CooperationProductInfo::set_pauthor(const char* value) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(value);
}
inline void CooperationProductInfo::set_pauthor(const char* value, size_t size) {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  pauthor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CooperationProductInfo::mutable_pauthor() {
  set_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    pauthor_ = new ::std::string;
  }
  return pauthor_;
}
inline ::std::string* CooperationProductInfo::release_pauthor() {
  clear_has_pauthor();
  if (pauthor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pauthor_;
    pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CooperationProductInfo::set_allocated_pauthor(::std::string* pauthor) {
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    delete pauthor_;
  }
  if (pauthor) {
    set_has_pauthor();
    pauthor_ = pauthor;
  } else {
    clear_has_pauthor();
    pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string picture_url = 7;
inline bool CooperationProductInfo::has_picture_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CooperationProductInfo::set_has_picture_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CooperationProductInfo::clear_has_picture_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CooperationProductInfo::clear_picture_url() {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    picture_url_->clear();
  }
  clear_has_picture_url();
}
inline const ::std::string& CooperationProductInfo::picture_url() const {
  return *picture_url_;
}
inline void CooperationProductInfo::set_picture_url(const ::std::string& value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void CooperationProductInfo::set_picture_url(const char* value) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(value);
}
inline void CooperationProductInfo::set_picture_url(const char* value, size_t size) {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  picture_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CooperationProductInfo::mutable_picture_url() {
  set_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    picture_url_ = new ::std::string;
  }
  return picture_url_;
}
inline ::std::string* CooperationProductInfo::release_picture_url() {
  clear_has_picture_url();
  if (picture_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_url_;
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CooperationProductInfo::set_allocated_picture_url(::std::string* picture_url) {
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (picture_url) {
    set_has_picture_url();
    picture_url_ = picture_url;
  } else {
    clear_has_picture_url();
    picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dgame

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::SYSTEM_STATUS>() {
  return ::dgame::SYSTEM_STATUS_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::ELogin_Type>() {
  return ::dgame::ELogin_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::EGM_Type>() {
  return ::dgame::EGM_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::EChat_Type>() {
  return ::dgame::EChat_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::EOrder_Type>() {
  return ::dgame::EOrder_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::EDesigner_Type>() {
  return ::dgame::EDesigner_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::EDesigner_Check_Status>() {
  return ::dgame::EDesigner_Check_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::Error_Code>() {
  return ::dgame::Error_Code_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::OrderStatus>() {
  return ::dgame::OrderStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::ECoDesigner_Status>() {
  return ::dgame::ECoDesigner_Status_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dgame::OrderCancelReason>() {
  return ::dgame::OrderCancelReason_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dgame_5fdefine_2eproto__INCLUDED
