// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace SS {

namespace {

const ::google::protobuf::Descriptor* Msg_Client_Disconnet_G2M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Client_Disconnet_G2M_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Client_Kickout_M2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Client_Kickout_M2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Heart_Beat_M2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Heart_Beat_M2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Heart_Beat_G2M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Heart_Beat_G2M_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_ServerRegister_G2O_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_ServerRegister_G2O_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Heart_Beat_G2O_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Heart_Beat_G2O_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Heart_Beat_O2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Heart_Beat_O2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Mobile_Validate_G2O_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Mobile_Validate_G2O_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_Mobile_Validate_O2G_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_Mobile_Validate_O2G_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_LogicCommon_M2O_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_LogicCommon_M2O_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_LogicCommon_O2M_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_LogicCommon_O2M_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_server_2eproto() {
  protobuf_AddDesc_server_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "server.proto");
  GOOGLE_CHECK(file != NULL);
  Msg_Client_Disconnet_G2M_descriptor_ = file->message_type(0);
  static const int Msg_Client_Disconnet_G2M_offsets_[1] = {
  };
  Msg_Client_Disconnet_G2M_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Client_Disconnet_G2M_descriptor_,
      Msg_Client_Disconnet_G2M::default_instance_,
      Msg_Client_Disconnet_G2M_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Client_Disconnet_G2M, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Client_Disconnet_G2M, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Client_Disconnet_G2M));
  Msg_Client_Kickout_M2G_descriptor_ = file->message_type(1);
  static const int Msg_Client_Kickout_M2G_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Client_Kickout_M2G, error_code_),
  };
  Msg_Client_Kickout_M2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Client_Kickout_M2G_descriptor_,
      Msg_Client_Kickout_M2G::default_instance_,
      Msg_Client_Kickout_M2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Client_Kickout_M2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Client_Kickout_M2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Client_Kickout_M2G));
  Msg_Heart_Beat_M2G_descriptor_ = file->message_type(2);
  static const int Msg_Heart_Beat_M2G_offsets_[1] = {
  };
  Msg_Heart_Beat_M2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Heart_Beat_M2G_descriptor_,
      Msg_Heart_Beat_M2G::default_instance_,
      Msg_Heart_Beat_M2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_M2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_M2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Heart_Beat_M2G));
  Msg_Heart_Beat_G2M_descriptor_ = file->message_type(3);
  static const int Msg_Heart_Beat_G2M_offsets_[1] = {
  };
  Msg_Heart_Beat_G2M_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Heart_Beat_G2M_descriptor_,
      Msg_Heart_Beat_G2M::default_instance_,
      Msg_Heart_Beat_G2M_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_G2M, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_G2M, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Heart_Beat_G2M));
  Msg_ServerRegister_G2O_descriptor_ = file->message_type(4);
  static const int Msg_ServerRegister_G2O_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ServerRegister_G2O, server_id_),
  };
  Msg_ServerRegister_G2O_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_ServerRegister_G2O_descriptor_,
      Msg_ServerRegister_G2O::default_instance_,
      Msg_ServerRegister_G2O_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ServerRegister_G2O, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_ServerRegister_G2O, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_ServerRegister_G2O));
  Msg_Heart_Beat_G2O_descriptor_ = file->message_type(5);
  static const int Msg_Heart_Beat_G2O_offsets_[1] = {
  };
  Msg_Heart_Beat_G2O_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Heart_Beat_G2O_descriptor_,
      Msg_Heart_Beat_G2O::default_instance_,
      Msg_Heart_Beat_G2O_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_G2O, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_G2O, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Heart_Beat_G2O));
  Msg_Heart_Beat_O2G_descriptor_ = file->message_type(6);
  static const int Msg_Heart_Beat_O2G_offsets_[1] = {
  };
  Msg_Heart_Beat_O2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Heart_Beat_O2G_descriptor_,
      Msg_Heart_Beat_O2G::default_instance_,
      Msg_Heart_Beat_O2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_O2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Heart_Beat_O2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Heart_Beat_O2G));
  Msg_Mobile_Validate_G2O_descriptor_ = file->message_type(7);
  static const int Msg_Mobile_Validate_G2O_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, moblie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, type_),
  };
  Msg_Mobile_Validate_G2O_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Mobile_Validate_G2O_descriptor_,
      Msg_Mobile_Validate_G2O::default_instance_,
      Msg_Mobile_Validate_G2O_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_G2O, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Mobile_Validate_G2O));
  Msg_Mobile_Validate_O2G_descriptor_ = file->message_type(8);
  static const int Msg_Mobile_Validate_O2G_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, moblie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, error_code_),
  };
  Msg_Mobile_Validate_O2G_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_Mobile_Validate_O2G_descriptor_,
      Msg_Mobile_Validate_O2G::default_instance_,
      Msg_Mobile_Validate_O2G_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_Mobile_Validate_O2G, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_Mobile_Validate_O2G));
  Msg_LogicCommon_M2O_descriptor_ = file->message_type(9);
  static const int Msg_LogicCommon_M2O_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, msg_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, seq_),
  };
  Msg_LogicCommon_M2O_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_LogicCommon_M2O_descriptor_,
      Msg_LogicCommon_M2O::default_instance_,
      Msg_LogicCommon_M2O_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_M2O, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_LogicCommon_M2O));
  Msg_LogicCommon_O2M_descriptor_ = file->message_type(10);
  static const int Msg_LogicCommon_O2M_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, msg_body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, msg_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, msg_desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, seq_),
  };
  Msg_LogicCommon_O2M_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_LogicCommon_O2M_descriptor_,
      Msg_LogicCommon_O2M::default_instance_,
      Msg_LogicCommon_O2M_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_LogicCommon_O2M, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_LogicCommon_O2M));
  CommonData_descriptor_ = file->message_type(11);
  static const int CommonData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonData, data_),
  };
  CommonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonData_descriptor_,
      CommonData::default_instance_,
      CommonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_server_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Client_Disconnet_G2M_descriptor_, &Msg_Client_Disconnet_G2M::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Client_Kickout_M2G_descriptor_, &Msg_Client_Kickout_M2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Heart_Beat_M2G_descriptor_, &Msg_Heart_Beat_M2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Heart_Beat_G2M_descriptor_, &Msg_Heart_Beat_G2M::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_ServerRegister_G2O_descriptor_, &Msg_ServerRegister_G2O::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Heart_Beat_G2O_descriptor_, &Msg_Heart_Beat_G2O::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Heart_Beat_O2G_descriptor_, &Msg_Heart_Beat_O2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Mobile_Validate_G2O_descriptor_, &Msg_Mobile_Validate_G2O::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_Mobile_Validate_O2G_descriptor_, &Msg_Mobile_Validate_O2G::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_LogicCommon_M2O_descriptor_, &Msg_LogicCommon_M2O::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_LogicCommon_O2M_descriptor_, &Msg_LogicCommon_O2M::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonData_descriptor_, &CommonData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_server_2eproto() {
  delete Msg_Client_Disconnet_G2M::default_instance_;
  delete Msg_Client_Disconnet_G2M_reflection_;
  delete Msg_Client_Kickout_M2G::default_instance_;
  delete Msg_Client_Kickout_M2G_reflection_;
  delete Msg_Heart_Beat_M2G::default_instance_;
  delete Msg_Heart_Beat_M2G_reflection_;
  delete Msg_Heart_Beat_G2M::default_instance_;
  delete Msg_Heart_Beat_G2M_reflection_;
  delete Msg_ServerRegister_G2O::default_instance_;
  delete Msg_ServerRegister_G2O_reflection_;
  delete Msg_Heart_Beat_G2O::default_instance_;
  delete Msg_Heart_Beat_G2O_reflection_;
  delete Msg_Heart_Beat_O2G::default_instance_;
  delete Msg_Heart_Beat_O2G_reflection_;
  delete Msg_Mobile_Validate_G2O::default_instance_;
  delete Msg_Mobile_Validate_G2O_reflection_;
  delete Msg_Mobile_Validate_O2G::default_instance_;
  delete Msg_Mobile_Validate_O2G_reflection_;
  delete Msg_LogicCommon_M2O::default_instance_;
  delete Msg_LogicCommon_M2O_reflection_;
  delete Msg_LogicCommon_O2M::default_instance_;
  delete Msg_LogicCommon_O2M_reflection_;
  delete CommonData::default_instance_;
  delete CommonData_reflection_;
}

void protobuf_AddDesc_server_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014server.proto\022\002SS\"\032\n\030Msg_Client_Disconn"
    "et_G2M\",\n\026Msg_Client_Kickout_M2G\022\022\n\nerro"
    "r_code\030\001 \002(\005\"\024\n\022Msg_Heart_Beat_M2G\"\024\n\022Ms"
    "g_Heart_Beat_G2M\"+\n\026Msg_ServerRegister_G"
    "2O\022\021\n\tserver_id\030\001 \002(\005\"\024\n\022Msg_Heart_Beat_"
    "G2O\"\024\n\022Msg_Heart_Beat_O2G\"W\n\027Msg_Mobile_"
    "Validate_G2O\022\016\n\006moblie\030\001 \002(\t\022\020\n\010password"
    "\030\002 \002(\t\022\014\n\004code\030\003 \002(\005\022\014\n\004type\030\004 \002(\005\"]\n\027Ms"
    "g_Mobile_Validate_O2G\022\016\n\006moblie\030\001 \002(\t\022\020\n"
    "\010password\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\022\022\n\nerror_c"
    "ode\030\004 \002(\005\"a\n\023Msg_LogicCommon_M2O\022\016\n\006msg_"
    "id\030\001 \002(\005\022\020\n\010msg_body\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022"
    "\016\n\006userId\030\004 \001(\t\022\013\n\003seq\030\005 \001(\r\"h\n\023Msg_Logi"
    "cCommon_O2M\022\016\n\006msg_id\030\001 \002(\005\022\020\n\010msg_body\030"
    "\002 \001(\t\022\020\n\010msg_code\030\003 \002(\005\022\020\n\010msg_desc\030\004 \001("
    "\t\022\013\n\003seq\030\005 \001(\r\"\032\n\nCommonData\022\014\n\004data\030\001 \002"
    "(\t", 642);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "server.proto", &protobuf_RegisterTypes);
  Msg_Client_Disconnet_G2M::default_instance_ = new Msg_Client_Disconnet_G2M();
  Msg_Client_Kickout_M2G::default_instance_ = new Msg_Client_Kickout_M2G();
  Msg_Heart_Beat_M2G::default_instance_ = new Msg_Heart_Beat_M2G();
  Msg_Heart_Beat_G2M::default_instance_ = new Msg_Heart_Beat_G2M();
  Msg_ServerRegister_G2O::default_instance_ = new Msg_ServerRegister_G2O();
  Msg_Heart_Beat_G2O::default_instance_ = new Msg_Heart_Beat_G2O();
  Msg_Heart_Beat_O2G::default_instance_ = new Msg_Heart_Beat_O2G();
  Msg_Mobile_Validate_G2O::default_instance_ = new Msg_Mobile_Validate_G2O();
  Msg_Mobile_Validate_O2G::default_instance_ = new Msg_Mobile_Validate_O2G();
  Msg_LogicCommon_M2O::default_instance_ = new Msg_LogicCommon_M2O();
  Msg_LogicCommon_O2M::default_instance_ = new Msg_LogicCommon_O2M();
  CommonData::default_instance_ = new CommonData();
  Msg_Client_Disconnet_G2M::default_instance_->InitAsDefaultInstance();
  Msg_Client_Kickout_M2G::default_instance_->InitAsDefaultInstance();
  Msg_Heart_Beat_M2G::default_instance_->InitAsDefaultInstance();
  Msg_Heart_Beat_G2M::default_instance_->InitAsDefaultInstance();
  Msg_ServerRegister_G2O::default_instance_->InitAsDefaultInstance();
  Msg_Heart_Beat_G2O::default_instance_->InitAsDefaultInstance();
  Msg_Heart_Beat_O2G::default_instance_->InitAsDefaultInstance();
  Msg_Mobile_Validate_G2O::default_instance_->InitAsDefaultInstance();
  Msg_Mobile_Validate_O2G::default_instance_->InitAsDefaultInstance();
  Msg_LogicCommon_M2O::default_instance_->InitAsDefaultInstance();
  Msg_LogicCommon_O2M::default_instance_->InitAsDefaultInstance();
  CommonData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_server_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_server_2eproto {
  StaticDescriptorInitializer_server_2eproto() {
    protobuf_AddDesc_server_2eproto();
  }
} static_descriptor_initializer_server_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Msg_Client_Disconnet_G2M::Msg_Client_Disconnet_G2M()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Client_Disconnet_G2M::InitAsDefaultInstance() {
}

Msg_Client_Disconnet_G2M::Msg_Client_Disconnet_G2M(const Msg_Client_Disconnet_G2M& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Client_Disconnet_G2M::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Client_Disconnet_G2M::~Msg_Client_Disconnet_G2M() {
  SharedDtor();
}

void Msg_Client_Disconnet_G2M::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Client_Disconnet_G2M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Client_Disconnet_G2M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Client_Disconnet_G2M_descriptor_;
}

const Msg_Client_Disconnet_G2M& Msg_Client_Disconnet_G2M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Client_Disconnet_G2M* Msg_Client_Disconnet_G2M::default_instance_ = NULL;

Msg_Client_Disconnet_G2M* Msg_Client_Disconnet_G2M::New() const {
  return new Msg_Client_Disconnet_G2M;
}

void Msg_Client_Disconnet_G2M::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Client_Disconnet_G2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Msg_Client_Disconnet_G2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Client_Disconnet_G2M::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Client_Disconnet_G2M::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Client_Disconnet_G2M::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Client_Disconnet_G2M* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Client_Disconnet_G2M*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Client_Disconnet_G2M::MergeFrom(const Msg_Client_Disconnet_G2M& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Client_Disconnet_G2M::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Client_Disconnet_G2M::CopyFrom(const Msg_Client_Disconnet_G2M& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Client_Disconnet_G2M::IsInitialized() const {

  return true;
}

void Msg_Client_Disconnet_G2M::Swap(Msg_Client_Disconnet_G2M* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Client_Disconnet_G2M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Client_Disconnet_G2M_descriptor_;
  metadata.reflection = Msg_Client_Disconnet_G2M_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Client_Kickout_M2G::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Msg_Client_Kickout_M2G::Msg_Client_Kickout_M2G()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Client_Kickout_M2G::InitAsDefaultInstance() {
}

Msg_Client_Kickout_M2G::Msg_Client_Kickout_M2G(const Msg_Client_Kickout_M2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Client_Kickout_M2G::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Client_Kickout_M2G::~Msg_Client_Kickout_M2G() {
  SharedDtor();
}

void Msg_Client_Kickout_M2G::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Client_Kickout_M2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Client_Kickout_M2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Client_Kickout_M2G_descriptor_;
}

const Msg_Client_Kickout_M2G& Msg_Client_Kickout_M2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Client_Kickout_M2G* Msg_Client_Kickout_M2G::default_instance_ = NULL;

Msg_Client_Kickout_M2G* Msg_Client_Kickout_M2G::New() const {
  return new Msg_Client_Kickout_M2G;
}

void Msg_Client_Kickout_M2G::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Client_Kickout_M2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Client_Kickout_M2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Client_Kickout_M2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Client_Kickout_M2G::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Client_Kickout_M2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Client_Kickout_M2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Client_Kickout_M2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Client_Kickout_M2G::MergeFrom(const Msg_Client_Kickout_M2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Client_Kickout_M2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Client_Kickout_M2G::CopyFrom(const Msg_Client_Kickout_M2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Client_Kickout_M2G::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_Client_Kickout_M2G::Swap(Msg_Client_Kickout_M2G* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Client_Kickout_M2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Client_Kickout_M2G_descriptor_;
  metadata.reflection = Msg_Client_Kickout_M2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Msg_Heart_Beat_M2G::Msg_Heart_Beat_M2G()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Heart_Beat_M2G::InitAsDefaultInstance() {
}

Msg_Heart_Beat_M2G::Msg_Heart_Beat_M2G(const Msg_Heart_Beat_M2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Heart_Beat_M2G::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Heart_Beat_M2G::~Msg_Heart_Beat_M2G() {
  SharedDtor();
}

void Msg_Heart_Beat_M2G::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Heart_Beat_M2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Heart_Beat_M2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Heart_Beat_M2G_descriptor_;
}

const Msg_Heart_Beat_M2G& Msg_Heart_Beat_M2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Heart_Beat_M2G* Msg_Heart_Beat_M2G::default_instance_ = NULL;

Msg_Heart_Beat_M2G* Msg_Heart_Beat_M2G::New() const {
  return new Msg_Heart_Beat_M2G;
}

void Msg_Heart_Beat_M2G::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Heart_Beat_M2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Msg_Heart_Beat_M2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Heart_Beat_M2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Heart_Beat_M2G::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Heart_Beat_M2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Heart_Beat_M2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Heart_Beat_M2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Heart_Beat_M2G::MergeFrom(const Msg_Heart_Beat_M2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Heart_Beat_M2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Heart_Beat_M2G::CopyFrom(const Msg_Heart_Beat_M2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Heart_Beat_M2G::IsInitialized() const {

  return true;
}

void Msg_Heart_Beat_M2G::Swap(Msg_Heart_Beat_M2G* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Heart_Beat_M2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Heart_Beat_M2G_descriptor_;
  metadata.reflection = Msg_Heart_Beat_M2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Msg_Heart_Beat_G2M::Msg_Heart_Beat_G2M()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Heart_Beat_G2M::InitAsDefaultInstance() {
}

Msg_Heart_Beat_G2M::Msg_Heart_Beat_G2M(const Msg_Heart_Beat_G2M& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Heart_Beat_G2M::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Heart_Beat_G2M::~Msg_Heart_Beat_G2M() {
  SharedDtor();
}

void Msg_Heart_Beat_G2M::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Heart_Beat_G2M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Heart_Beat_G2M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Heart_Beat_G2M_descriptor_;
}

const Msg_Heart_Beat_G2M& Msg_Heart_Beat_G2M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Heart_Beat_G2M* Msg_Heart_Beat_G2M::default_instance_ = NULL;

Msg_Heart_Beat_G2M* Msg_Heart_Beat_G2M::New() const {
  return new Msg_Heart_Beat_G2M;
}

void Msg_Heart_Beat_G2M::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Heart_Beat_G2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Msg_Heart_Beat_G2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Heart_Beat_G2M::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Heart_Beat_G2M::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Heart_Beat_G2M::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Heart_Beat_G2M* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Heart_Beat_G2M*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Heart_Beat_G2M::MergeFrom(const Msg_Heart_Beat_G2M& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Heart_Beat_G2M::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Heart_Beat_G2M::CopyFrom(const Msg_Heart_Beat_G2M& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Heart_Beat_G2M::IsInitialized() const {

  return true;
}

void Msg_Heart_Beat_G2M::Swap(Msg_Heart_Beat_G2M* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Heart_Beat_G2M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Heart_Beat_G2M_descriptor_;
  metadata.reflection = Msg_Heart_Beat_G2M_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_ServerRegister_G2O::kServerIdFieldNumber;
#endif  // !_MSC_VER

Msg_ServerRegister_G2O::Msg_ServerRegister_G2O()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_ServerRegister_G2O::InitAsDefaultInstance() {
}

Msg_ServerRegister_G2O::Msg_ServerRegister_G2O(const Msg_ServerRegister_G2O& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_ServerRegister_G2O::SharedCtor() {
  _cached_size_ = 0;
  server_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_ServerRegister_G2O::~Msg_ServerRegister_G2O() {
  SharedDtor();
}

void Msg_ServerRegister_G2O::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_ServerRegister_G2O::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_ServerRegister_G2O::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_ServerRegister_G2O_descriptor_;
}

const Msg_ServerRegister_G2O& Msg_ServerRegister_G2O::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_ServerRegister_G2O* Msg_ServerRegister_G2O::default_instance_ = NULL;

Msg_ServerRegister_G2O* Msg_ServerRegister_G2O::New() const {
  return new Msg_ServerRegister_G2O;
}

void Msg_ServerRegister_G2O::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    server_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_ServerRegister_G2O::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 server_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_id_)));
          set_has_server_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_ServerRegister_G2O::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->server_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_ServerRegister_G2O::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 server_id = 1;
  if (has_server_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->server_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_ServerRegister_G2O::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 server_id = 1;
    if (has_server_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_ServerRegister_G2O::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_ServerRegister_G2O* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_ServerRegister_G2O*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_ServerRegister_G2O::MergeFrom(const Msg_ServerRegister_G2O& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_id()) {
      set_server_id(from.server_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_ServerRegister_G2O::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_ServerRegister_G2O::CopyFrom(const Msg_ServerRegister_G2O& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_ServerRegister_G2O::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_ServerRegister_G2O::Swap(Msg_ServerRegister_G2O* other) {
  if (other != this) {
    std::swap(server_id_, other->server_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_ServerRegister_G2O::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_ServerRegister_G2O_descriptor_;
  metadata.reflection = Msg_ServerRegister_G2O_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Msg_Heart_Beat_G2O::Msg_Heart_Beat_G2O()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Heart_Beat_G2O::InitAsDefaultInstance() {
}

Msg_Heart_Beat_G2O::Msg_Heart_Beat_G2O(const Msg_Heart_Beat_G2O& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Heart_Beat_G2O::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Heart_Beat_G2O::~Msg_Heart_Beat_G2O() {
  SharedDtor();
}

void Msg_Heart_Beat_G2O::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Heart_Beat_G2O::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Heart_Beat_G2O::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Heart_Beat_G2O_descriptor_;
}

const Msg_Heart_Beat_G2O& Msg_Heart_Beat_G2O::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Heart_Beat_G2O* Msg_Heart_Beat_G2O::default_instance_ = NULL;

Msg_Heart_Beat_G2O* Msg_Heart_Beat_G2O::New() const {
  return new Msg_Heart_Beat_G2O;
}

void Msg_Heart_Beat_G2O::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Heart_Beat_G2O::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Msg_Heart_Beat_G2O::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Heart_Beat_G2O::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Heart_Beat_G2O::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Heart_Beat_G2O::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Heart_Beat_G2O* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Heart_Beat_G2O*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Heart_Beat_G2O::MergeFrom(const Msg_Heart_Beat_G2O& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Heart_Beat_G2O::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Heart_Beat_G2O::CopyFrom(const Msg_Heart_Beat_G2O& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Heart_Beat_G2O::IsInitialized() const {

  return true;
}

void Msg_Heart_Beat_G2O::Swap(Msg_Heart_Beat_G2O* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Heart_Beat_G2O::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Heart_Beat_G2O_descriptor_;
  metadata.reflection = Msg_Heart_Beat_G2O_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Msg_Heart_Beat_O2G::Msg_Heart_Beat_O2G()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Heart_Beat_O2G::InitAsDefaultInstance() {
}

Msg_Heart_Beat_O2G::Msg_Heart_Beat_O2G(const Msg_Heart_Beat_O2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Heart_Beat_O2G::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Heart_Beat_O2G::~Msg_Heart_Beat_O2G() {
  SharedDtor();
}

void Msg_Heart_Beat_O2G::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_Heart_Beat_O2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Heart_Beat_O2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Heart_Beat_O2G_descriptor_;
}

const Msg_Heart_Beat_O2G& Msg_Heart_Beat_O2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Heart_Beat_O2G* Msg_Heart_Beat_O2G::default_instance_ = NULL;

Msg_Heart_Beat_O2G* Msg_Heart_Beat_O2G::New() const {
  return new Msg_Heart_Beat_O2G;
}

void Msg_Heart_Beat_O2G::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Heart_Beat_O2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Msg_Heart_Beat_O2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Heart_Beat_O2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Heart_Beat_O2G::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Heart_Beat_O2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Heart_Beat_O2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Heart_Beat_O2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Heart_Beat_O2G::MergeFrom(const Msg_Heart_Beat_O2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Heart_Beat_O2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Heart_Beat_O2G::CopyFrom(const Msg_Heart_Beat_O2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Heart_Beat_O2G::IsInitialized() const {

  return true;
}

void Msg_Heart_Beat_O2G::Swap(Msg_Heart_Beat_O2G* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Heart_Beat_O2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Heart_Beat_O2G_descriptor_;
  metadata.reflection = Msg_Heart_Beat_O2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Mobile_Validate_G2O::kMoblieFieldNumber;
const int Msg_Mobile_Validate_G2O::kPasswordFieldNumber;
const int Msg_Mobile_Validate_G2O::kCodeFieldNumber;
const int Msg_Mobile_Validate_G2O::kTypeFieldNumber;
#endif  // !_MSC_VER

Msg_Mobile_Validate_G2O::Msg_Mobile_Validate_G2O()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Mobile_Validate_G2O::InitAsDefaultInstance() {
}

Msg_Mobile_Validate_G2O::Msg_Mobile_Validate_G2O(const Msg_Mobile_Validate_G2O& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Mobile_Validate_G2O::SharedCtor() {
  _cached_size_ = 0;
  moblie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Mobile_Validate_G2O::~Msg_Mobile_Validate_G2O() {
  SharedDtor();
}

void Msg_Mobile_Validate_G2O::SharedDtor() {
  if (moblie_ != &::google::protobuf::internal::kEmptyString) {
    delete moblie_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Msg_Mobile_Validate_G2O::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Mobile_Validate_G2O::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Mobile_Validate_G2O_descriptor_;
}

const Msg_Mobile_Validate_G2O& Msg_Mobile_Validate_G2O::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Mobile_Validate_G2O* Msg_Mobile_Validate_G2O::default_instance_ = NULL;

Msg_Mobile_Validate_G2O* Msg_Mobile_Validate_G2O::New() const {
  return new Msg_Mobile_Validate_G2O;
}

void Msg_Mobile_Validate_G2O::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_moblie()) {
      if (moblie_ != &::google::protobuf::internal::kEmptyString) {
        moblie_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    code_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Mobile_Validate_G2O::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string moblie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moblie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->moblie().data(), this->moblie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // required int32 code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Mobile_Validate_G2O::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string moblie = 1;
  if (has_moblie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->moblie().data(), this->moblie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->moblie(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required int32 code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->code(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Mobile_Validate_G2O::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string moblie = 1;
  if (has_moblie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->moblie().data(), this->moblie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->moblie(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required int32 code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->code(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Mobile_Validate_G2O::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string moblie = 1;
    if (has_moblie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moblie());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required int32 code = 3;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // required int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Mobile_Validate_G2O::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Mobile_Validate_G2O* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Mobile_Validate_G2O*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Mobile_Validate_G2O::MergeFrom(const Msg_Mobile_Validate_G2O& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moblie()) {
      set_moblie(from.moblie());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Mobile_Validate_G2O::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Mobile_Validate_G2O::CopyFrom(const Msg_Mobile_Validate_G2O& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Mobile_Validate_G2O::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_Mobile_Validate_G2O::Swap(Msg_Mobile_Validate_G2O* other) {
  if (other != this) {
    std::swap(moblie_, other->moblie_);
    std::swap(password_, other->password_);
    std::swap(code_, other->code_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Mobile_Validate_G2O::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Mobile_Validate_G2O_descriptor_;
  metadata.reflection = Msg_Mobile_Validate_G2O_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_Mobile_Validate_O2G::kMoblieFieldNumber;
const int Msg_Mobile_Validate_O2G::kPasswordFieldNumber;
const int Msg_Mobile_Validate_O2G::kTypeFieldNumber;
const int Msg_Mobile_Validate_O2G::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Msg_Mobile_Validate_O2G::Msg_Mobile_Validate_O2G()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_Mobile_Validate_O2G::InitAsDefaultInstance() {
}

Msg_Mobile_Validate_O2G::Msg_Mobile_Validate_O2G(const Msg_Mobile_Validate_O2G& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_Mobile_Validate_O2G::SharedCtor() {
  _cached_size_ = 0;
  moblie_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_Mobile_Validate_O2G::~Msg_Mobile_Validate_O2G() {
  SharedDtor();
}

void Msg_Mobile_Validate_O2G::SharedDtor() {
  if (moblie_ != &::google::protobuf::internal::kEmptyString) {
    delete moblie_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Msg_Mobile_Validate_O2G::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_Mobile_Validate_O2G::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_Mobile_Validate_O2G_descriptor_;
}

const Msg_Mobile_Validate_O2G& Msg_Mobile_Validate_O2G::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_Mobile_Validate_O2G* Msg_Mobile_Validate_O2G::default_instance_ = NULL;

Msg_Mobile_Validate_O2G* Msg_Mobile_Validate_O2G::New() const {
  return new Msg_Mobile_Validate_O2G;
}

void Msg_Mobile_Validate_O2G::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_moblie()) {
      if (moblie_ != &::google::protobuf::internal::kEmptyString) {
        moblie_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    type_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_Mobile_Validate_O2G::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string moblie = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_moblie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->moblie().data(), this->moblie().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_Mobile_Validate_O2G::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string moblie = 1;
  if (has_moblie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->moblie().data(), this->moblie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->moblie(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // required int32 error_code = 4;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_Mobile_Validate_O2G::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string moblie = 1;
  if (has_moblie()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->moblie().data(), this->moblie().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->moblie(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // required int32 error_code = 4;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_Mobile_Validate_O2G::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string moblie = 1;
    if (has_moblie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->moblie());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 error_code = 4;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_Mobile_Validate_O2G::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_Mobile_Validate_O2G* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_Mobile_Validate_O2G*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_Mobile_Validate_O2G::MergeFrom(const Msg_Mobile_Validate_O2G& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moblie()) {
      set_moblie(from.moblie());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_Mobile_Validate_O2G::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_Mobile_Validate_O2G::CopyFrom(const Msg_Mobile_Validate_O2G& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Mobile_Validate_O2G::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Msg_Mobile_Validate_O2G::Swap(Msg_Mobile_Validate_O2G* other) {
  if (other != this) {
    std::swap(moblie_, other->moblie_);
    std::swap(password_, other->password_);
    std::swap(type_, other->type_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_Mobile_Validate_O2G::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_Mobile_Validate_O2G_descriptor_;
  metadata.reflection = Msg_Mobile_Validate_O2G_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_LogicCommon_M2O::kMsgIdFieldNumber;
const int Msg_LogicCommon_M2O::kMsgBodyFieldNumber;
const int Msg_LogicCommon_M2O::kUrlFieldNumber;
const int Msg_LogicCommon_M2O::kUserIdFieldNumber;
const int Msg_LogicCommon_M2O::kSeqFieldNumber;
#endif  // !_MSC_VER

Msg_LogicCommon_M2O::Msg_LogicCommon_M2O()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_LogicCommon_M2O::InitAsDefaultInstance() {
}

Msg_LogicCommon_M2O::Msg_LogicCommon_M2O(const Msg_LogicCommon_M2O& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_LogicCommon_M2O::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_LogicCommon_M2O::~Msg_LogicCommon_M2O() {
  SharedDtor();
}

void Msg_LogicCommon_M2O::SharedDtor() {
  if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_body_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void Msg_LogicCommon_M2O::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_LogicCommon_M2O::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_LogicCommon_M2O_descriptor_;
}

const Msg_LogicCommon_M2O& Msg_LogicCommon_M2O::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_LogicCommon_M2O* Msg_LogicCommon_M2O::default_instance_ = NULL;

Msg_LogicCommon_M2O* Msg_LogicCommon_M2O::New() const {
  return new Msg_LogicCommon_M2O;
}

void Msg_LogicCommon_M2O::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0;
    if (has_msg_body()) {
      if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
        msg_body_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_LogicCommon_M2O::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_body;
        break;
      }

      // optional string msg_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_body().data(), this->msg_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // optional string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_LogicCommon_M2O::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // optional string msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_body().data(), this->msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_body(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  // optional uint32 seq = 5;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_LogicCommon_M2O::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // optional string msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_body().data(), this->msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_body(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  // optional uint32 seq = 5;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_LogicCommon_M2O::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // optional string msg_body = 2;
    if (has_msg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_body());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // optional uint32 seq = 5;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_LogicCommon_M2O::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_LogicCommon_M2O* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_LogicCommon_M2O*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_LogicCommon_M2O::MergeFrom(const Msg_LogicCommon_M2O& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_body()) {
      set_msg_body(from.msg_body());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_LogicCommon_M2O::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_LogicCommon_M2O::CopyFrom(const Msg_LogicCommon_M2O& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LogicCommon_M2O::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Msg_LogicCommon_M2O::Swap(Msg_LogicCommon_M2O* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_body_, other->msg_body_);
    std::swap(url_, other->url_);
    std::swap(userid_, other->userid_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_LogicCommon_M2O::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_LogicCommon_M2O_descriptor_;
  metadata.reflection = Msg_LogicCommon_M2O_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_LogicCommon_O2M::kMsgIdFieldNumber;
const int Msg_LogicCommon_O2M::kMsgBodyFieldNumber;
const int Msg_LogicCommon_O2M::kMsgCodeFieldNumber;
const int Msg_LogicCommon_O2M::kMsgDescFieldNumber;
const int Msg_LogicCommon_O2M::kSeqFieldNumber;
#endif  // !_MSC_VER

Msg_LogicCommon_O2M::Msg_LogicCommon_O2M()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_LogicCommon_O2M::InitAsDefaultInstance() {
}

Msg_LogicCommon_O2M::Msg_LogicCommon_O2M(const Msg_LogicCommon_O2M& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_LogicCommon_O2M::SharedCtor() {
  _cached_size_ = 0;
  msg_id_ = 0;
  msg_body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_code_ = 0;
  msg_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_LogicCommon_O2M::~Msg_LogicCommon_O2M() {
  SharedDtor();
}

void Msg_LogicCommon_O2M::SharedDtor() {
  if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_body_;
  }
  if (msg_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_desc_;
  }
  if (this != default_instance_) {
  }
}

void Msg_LogicCommon_O2M::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_LogicCommon_O2M::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_LogicCommon_O2M_descriptor_;
}

const Msg_LogicCommon_O2M& Msg_LogicCommon_O2M::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

Msg_LogicCommon_O2M* Msg_LogicCommon_O2M::default_instance_ = NULL;

Msg_LogicCommon_O2M* Msg_LogicCommon_O2M::New() const {
  return new Msg_LogicCommon_O2M;
}

void Msg_LogicCommon_O2M::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_id_ = 0;
    if (has_msg_body()) {
      if (msg_body_ != &::google::protobuf::internal::kEmptyString) {
        msg_body_->clear();
      }
    }
    msg_code_ = 0;
    if (has_msg_desc()) {
      if (msg_desc_ != &::google::protobuf::internal::kEmptyString) {
        msg_desc_->clear();
      }
    }
    seq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_LogicCommon_O2M::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 msg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_id_)));
          set_has_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg_body;
        break;
      }

      // optional string msg_body = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_body().data(), this->msg_body().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msg_code;
        break;
      }

      // required int32 msg_code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msg_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_code_)));
          set_has_msg_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_msg_desc;
        break;
      }

      // optional string msg_desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg_desc().data(), this->msg_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seq;
        break;
      }

      // optional uint32 seq = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seq_)));
          set_has_seq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_LogicCommon_O2M::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->msg_id(), output);
  }

  // optional string msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_body().data(), this->msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg_body(), output);
  }

  // required int32 msg_code = 3;
  if (has_msg_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msg_code(), output);
  }

  // optional string msg_desc = 4;
  if (has_msg_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_desc().data(), this->msg_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msg_desc(), output);
  }

  // optional uint32 seq = 5;
  if (has_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_LogicCommon_O2M::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 msg_id = 1;
  if (has_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->msg_id(), target);
  }

  // optional string msg_body = 2;
  if (has_msg_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_body().data(), this->msg_body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg_body(), target);
  }

  // required int32 msg_code = 3;
  if (has_msg_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msg_code(), target);
  }

  // optional string msg_desc = 4;
  if (has_msg_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg_desc().data(), this->msg_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->msg_desc(), target);
  }

  // optional uint32 seq = 5;
  if (has_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_LogicCommon_O2M::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 msg_id = 1;
    if (has_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_id());
    }

    // optional string msg_body = 2;
    if (has_msg_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_body());
    }

    // required int32 msg_code = 3;
    if (has_msg_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->msg_code());
    }

    // optional string msg_desc = 4;
    if (has_msg_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg_desc());
    }

    // optional uint32 seq = 5;
    if (has_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_LogicCommon_O2M::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_LogicCommon_O2M* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_LogicCommon_O2M*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_LogicCommon_O2M::MergeFrom(const Msg_LogicCommon_O2M& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_id()) {
      set_msg_id(from.msg_id());
    }
    if (from.has_msg_body()) {
      set_msg_body(from.msg_body());
    }
    if (from.has_msg_code()) {
      set_msg_code(from.msg_code());
    }
    if (from.has_msg_desc()) {
      set_msg_desc(from.msg_desc());
    }
    if (from.has_seq()) {
      set_seq(from.seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_LogicCommon_O2M::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_LogicCommon_O2M::CopyFrom(const Msg_LogicCommon_O2M& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_LogicCommon_O2M::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Msg_LogicCommon_O2M::Swap(Msg_LogicCommon_O2M* other) {
  if (other != this) {
    std::swap(msg_id_, other->msg_id_);
    std::swap(msg_body_, other->msg_body_);
    std::swap(msg_code_, other->msg_code_);
    std::swap(msg_desc_, other->msg_desc_);
    std::swap(seq_, other->seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_LogicCommon_O2M::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_LogicCommon_O2M_descriptor_;
  metadata.reflection = Msg_LogicCommon_O2M_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonData::kDataFieldNumber;
#endif  // !_MSC_VER

CommonData::CommonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonData::InitAsDefaultInstance() {
}

CommonData::CommonData(const CommonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonData::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonData::~CommonData() {
  SharedDtor();
}

void CommonData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CommonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonData_descriptor_;
}

const CommonData& CommonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_server_2eproto();
  return *default_instance_;
}

CommonData* CommonData::default_instance_ = NULL;

CommonData* CommonData::New() const {
  return new CommonData;
}

void CommonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonData::MergeFrom(const CommonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonData::CopyFrom(const CommonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonData::Swap(CommonData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonData_descriptor_;
  metadata.reflection = CommonData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SS

// @@protoc_insertion_point(global_scope)
