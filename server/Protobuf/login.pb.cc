// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CS {

namespace {

const ::google::protobuf::Descriptor* P_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  P_reflection_ = NULL;
const ::google::protobuf::Descriptor* PRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReconnectRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReconnectRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_UserLogin_Req_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_UserLogin_Req_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_UserLogin_Rsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_UserLogin_Rsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_UserInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_UserInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_GameError_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_GameError_Notify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* PLAT_NUM_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_login_2eproto() {
  protobuf_AddDesc_login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "login.proto");
  GOOGLE_CHECK(file != NULL);
  P_descriptor_ = file->message_type(0);
  static const int P_offsets_[1] = {
  };
  P_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      P_descriptor_,
      P::default_instance_,
      P_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(P, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(P));
  PRsp_descriptor_ = file->message_type(1);
  static const int PRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRsp, interval_),
  };
  PRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PRsp_descriptor_,
      PRsp::default_instance_,
      PRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PRsp));
  ReconnectReq_descriptor_ = file->message_type(2);
  static const int ReconnectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, gcode_),
  };
  ReconnectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectReq_descriptor_,
      ReconnectReq::default_instance_,
      ReconnectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectReq));
  ReconnectRsp_descriptor_ = file->message_type(3);
  static const int ReconnectRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRsp, result_),
  };
  ReconnectRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReconnectRsp_descriptor_,
      ReconnectRsp::default_instance_,
      ReconnectRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReconnectRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReconnectRsp));
  Msg_UserLogin_Req_descriptor_ = file->message_type(4);
  static const int Msg_UserLogin_Req_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, code_),
  };
  Msg_UserLogin_Req_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_UserLogin_Req_descriptor_,
      Msg_UserLogin_Req::default_instance_,
      Msg_UserLogin_Req_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Req, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_UserLogin_Req));
  Msg_UserLogin_Rsp_descriptor_ = file->message_type(5);
  static const int Msg_UserLogin_Rsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Rsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Rsp, error_code_),
  };
  Msg_UserLogin_Rsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_UserLogin_Rsp_descriptor_,
      Msg_UserLogin_Rsp::default_instance_,
      Msg_UserLogin_Rsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Rsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserLogin_Rsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_UserLogin_Rsp));
  Msg_UserInfo_Notify_descriptor_ = file->message_type(6);
  static const int Msg_UserInfo_Notify_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, user_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, hobby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, skin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, date_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, brand_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, dressed_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, birthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, head_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, zodiac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, nick_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, equipment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, designer_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, designer_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, balance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, dress_clothes_),
  };
  Msg_UserInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_UserInfo_Notify_descriptor_,
      Msg_UserInfo_Notify::default_instance_,
      Msg_UserInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_UserInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_UserInfo_Notify));
  Msg_GameError_Notify_descriptor_ = file->message_type(7);
  static const int Msg_GameError_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameError_Notify, error_code_),
  };
  Msg_GameError_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Msg_GameError_Notify_descriptor_,
      Msg_GameError_Notify::default_instance_,
      Msg_GameError_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameError_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg_GameError_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Msg_GameError_Notify));
  PLAT_NUM_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    P_descriptor_, &P::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PRsp_descriptor_, &PRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectReq_descriptor_, &ReconnectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReconnectRsp_descriptor_, &ReconnectRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_UserLogin_Req_descriptor_, &Msg_UserLogin_Req::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_UserLogin_Rsp_descriptor_, &Msg_UserLogin_Rsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_UserInfo_Notify_descriptor_, &Msg_UserInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Msg_GameError_Notify_descriptor_, &Msg_GameError_Notify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_login_2eproto() {
  delete P::default_instance_;
  delete P_reflection_;
  delete PRsp::default_instance_;
  delete PRsp_reflection_;
  delete ReconnectReq::default_instance_;
  delete ReconnectReq_reflection_;
  delete ReconnectRsp::default_instance_;
  delete ReconnectRsp_reflection_;
  delete Msg_UserLogin_Req::default_instance_;
  delete Msg_UserLogin_Req_reflection_;
  delete Msg_UserLogin_Rsp::default_instance_;
  delete Msg_UserLogin_Rsp_reflection_;
  delete Msg_UserInfo_Notify::default_instance_;
  delete Msg_UserInfo_Notify_reflection_;
  delete Msg_GameError_Notify::default_instance_;
  delete Msg_GameError_Notify_reflection_;
}

void protobuf_AddDesc_login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dgame::protobuf_AddDesc_dgame_5fdefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013login.proto\022\002CS\032\022dgame_define.proto\"\003\n"
    "\001P\"(\n\004PRsp\022\016\n\006result\030\001 \001(\005\022\020\n\010interval\030\002"
    " \001(\r\"*\n\014ReconnectReq\022\013\n\003uid\030\001 \001(\004\022\r\n\005gco"
    "de\030\002 \001(\t\"\036\n\014ReconnectRsp\022\016\n\006result\030\001 \001(\005"
    "\"W\n\021Msg_UserLogin_Req\022\024\n\014account_name\030\001 "
    "\002(\t\022\020\n\010password\030\002 \002(\t\022\014\n\004type\030\003 \002(\005\022\014\n\004c"
    "ode\030\004 \001(\005\"5\n\021Msg_UserLogin_Rsp\022\014\n\004type\030\001"
    " \002(\005\022\022\n\nerror_code\030\002 \002(\005\"\371\003\n\023Msg_UserInf"
    "o_Notify\022\017\n\007user_id\030\001 \001(\r\022\021\n\tuser_name\030\002"
    " \001(\t\022\r\n\005email\030\003 \001(\t\022\013\n\003sex\030\004 \001(\r\022\013\n\003job\030"
    "\005 \001(\r\022\r\n\005hobby\030\006 \001(\r\022\014\n\004skin\030\007 \001(\r\022&\n\tda"
    "te_list\030\010 \003(\0132\023.dgame.SouvenirDate\022\022\n\nbr"
    "and_list\030\t \003(\r\022\r\n\005color\030\n \001(\r\022\024\n\014dressed"
    "_list\030\013 \003(\r\022\020\n\010birthday\030\014 \001(\r\022\017\n\007head_id"
    "\030\r \001(\r\022\013\n\003age\030\016 \001(\r\022\016\n\006zodiac\030\017 \001(\r\022\021\n\tn"
    "ick_name\030\020 \001(\t\022\014\n\004sign\030\021 \001(\t\022,\n\016equipmen"
    "t_list\030\022 \003(\0132\024.dgame.EquipmentData\022\025\n\rde"
    "signer_type\030\023 \001(\r\022\027\n\017designer_status\030\024 \001"
    "(\r\022\016\n\006points\030\025 \001(\r\022\017\n\007balance\030\026 \001(\002\022\014\n\004g"
    "old\030\027 \001(\r\022)\n\rdress_clothes\030\030 \001(\0132\022.dgame"
    ".ProductData\"*\n\024Msg_GameError_Notify\022\022\n\n"
    "error_code\030\001 \001(\005* \n\010PLAT_NUM\022\007\n\003IOS\020\000\022\013\n"
    "\007ANDROID\020\001", 890);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "login.proto", &protobuf_RegisterTypes);
  P::default_instance_ = new P();
  PRsp::default_instance_ = new PRsp();
  ReconnectReq::default_instance_ = new ReconnectReq();
  ReconnectRsp::default_instance_ = new ReconnectRsp();
  Msg_UserLogin_Req::default_instance_ = new Msg_UserLogin_Req();
  Msg_UserLogin_Rsp::default_instance_ = new Msg_UserLogin_Rsp();
  Msg_UserInfo_Notify::default_instance_ = new Msg_UserInfo_Notify();
  Msg_GameError_Notify::default_instance_ = new Msg_GameError_Notify();
  P::default_instance_->InitAsDefaultInstance();
  PRsp::default_instance_->InitAsDefaultInstance();
  ReconnectReq::default_instance_->InitAsDefaultInstance();
  ReconnectRsp::default_instance_->InitAsDefaultInstance();
  Msg_UserLogin_Req::default_instance_->InitAsDefaultInstance();
  Msg_UserLogin_Rsp::default_instance_->InitAsDefaultInstance();
  Msg_UserInfo_Notify::default_instance_->InitAsDefaultInstance();
  Msg_GameError_Notify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_login_2eproto {
  StaticDescriptorInitializer_login_2eproto() {
    protobuf_AddDesc_login_2eproto();
  }
} static_descriptor_initializer_login_2eproto_;
const ::google::protobuf::EnumDescriptor* PLAT_NUM_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PLAT_NUM_descriptor_;
}
bool PLAT_NUM_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

P::P()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void P::InitAsDefaultInstance() {
}

P::P(const P& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void P::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

P::~P() {
  SharedDtor();
}

void P::SharedDtor() {
  if (this != default_instance_) {
  }
}

void P::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* P::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return P_descriptor_;
}

const P& P::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

P* P::default_instance_ = NULL;

P* P::New() const {
  return new P;
}

void P::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool P::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void P::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* P::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int P::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void P::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const P* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const P*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void P::MergeFrom(const P& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void P::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void P::CopyFrom(const P& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool P::IsInitialized() const {

  return true;
}

void P::Swap(P* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata P::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = P_descriptor_;
  metadata.reflection = P_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PRsp::kResultFieldNumber;
const int PRsp::kIntervalFieldNumber;
#endif  // !_MSC_VER

PRsp::PRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PRsp::InitAsDefaultInstance() {
}

PRsp::PRsp(const PRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PRsp::~PRsp() {
  SharedDtor();
}

void PRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PRsp_descriptor_;
}

const PRsp& PRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

PRsp* PRsp::default_instance_ = NULL;

PRsp* PRsp::New() const {
  return new PRsp;
}

void PRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    interval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }

      // optional uint32 interval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint32 interval = 2;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint32 interval = 2;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional uint32 interval = 2;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PRsp::MergeFrom(const PRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRsp::CopyFrom(const PRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRsp::IsInitialized() const {

  return true;
}

void PRsp::Swap(PRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PRsp_descriptor_;
  metadata.reflection = PRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectReq::kUidFieldNumber;
const int ReconnectReq::kGcodeFieldNumber;
#endif  // !_MSC_VER

ReconnectReq::ReconnectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectReq::InitAsDefaultInstance() {
}

ReconnectReq::ReconnectReq(const ReconnectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  gcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectReq::~ReconnectReq() {
  SharedDtor();
}

void ReconnectReq::SharedDtor() {
  if (gcode_ != &::google::protobuf::internal::kEmptyString) {
    delete gcode_;
  }
  if (this != default_instance_) {
  }
}

void ReconnectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectReq_descriptor_;
}

const ReconnectReq& ReconnectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReconnectReq* ReconnectReq::default_instance_ = NULL;

ReconnectReq* ReconnectReq::New() const {
  return new ReconnectReq;
}

void ReconnectReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_gcode()) {
      if (gcode_ != &::google::protobuf::internal::kEmptyString) {
        gcode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gcode;
        break;
      }

      // optional string gcode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gcode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gcode().data(), this->gcode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string gcode = 2;
  if (has_gcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcode().data(), this->gcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->gcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string gcode = 2;
  if (has_gcode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gcode().data(), this->gcode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->gcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string gcode = 2;
    if (has_gcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectReq::MergeFrom(const ReconnectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gcode()) {
      set_gcode(from.gcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectReq::CopyFrom(const ReconnectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectReq::IsInitialized() const {

  return true;
}

void ReconnectReq::Swap(ReconnectReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(gcode_, other->gcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectReq_descriptor_;
  metadata.reflection = ReconnectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReconnectRsp::kResultFieldNumber;
#endif  // !_MSC_VER

ReconnectRsp::ReconnectRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReconnectRsp::InitAsDefaultInstance() {
}

ReconnectRsp::ReconnectRsp(const ReconnectRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReconnectRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReconnectRsp::~ReconnectRsp() {
  SharedDtor();
}

void ReconnectRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReconnectRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReconnectRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReconnectRsp_descriptor_;
}

const ReconnectRsp& ReconnectRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

ReconnectRsp* ReconnectRsp::default_instance_ = NULL;

ReconnectRsp* ReconnectRsp::New() const {
  return new ReconnectRsp;
}

void ReconnectRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReconnectRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReconnectRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReconnectRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReconnectRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReconnectRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReconnectRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReconnectRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReconnectRsp::MergeFrom(const ReconnectRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReconnectRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconnectRsp::CopyFrom(const ReconnectRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconnectRsp::IsInitialized() const {

  return true;
}

void ReconnectRsp::Swap(ReconnectRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReconnectRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReconnectRsp_descriptor_;
  metadata.reflection = ReconnectRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_UserLogin_Req::kAccountNameFieldNumber;
const int Msg_UserLogin_Req::kPasswordFieldNumber;
const int Msg_UserLogin_Req::kTypeFieldNumber;
const int Msg_UserLogin_Req::kCodeFieldNumber;
#endif  // !_MSC_VER

Msg_UserLogin_Req::Msg_UserLogin_Req()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_UserLogin_Req::InitAsDefaultInstance() {
}

Msg_UserLogin_Req::Msg_UserLogin_Req(const Msg_UserLogin_Req& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_UserLogin_Req::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_UserLogin_Req::~Msg_UserLogin_Req() {
  SharedDtor();
}

void Msg_UserLogin_Req::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void Msg_UserLogin_Req::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_UserLogin_Req::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_UserLogin_Req_descriptor_;
}

const Msg_UserLogin_Req& Msg_UserLogin_Req::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Msg_UserLogin_Req* Msg_UserLogin_Req::default_instance_ = NULL;

Msg_UserLogin_Req* Msg_UserLogin_Req::New() const {
  return new Msg_UserLogin_Req;
}

void Msg_UserLogin_Req::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    type_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_UserLogin_Req::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional int32 code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_UserLogin_Req::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int32 code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_UserLogin_Req::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int32 code = 4;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_UserLogin_Req::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_UserLogin_Req::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_UserLogin_Req* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_UserLogin_Req*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_UserLogin_Req::MergeFrom(const Msg_UserLogin_Req& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_UserLogin_Req::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_UserLogin_Req::CopyFrom(const Msg_UserLogin_Req& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_UserLogin_Req::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Msg_UserLogin_Req::Swap(Msg_UserLogin_Req* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(password_, other->password_);
    std::swap(type_, other->type_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_UserLogin_Req::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_UserLogin_Req_descriptor_;
  metadata.reflection = Msg_UserLogin_Req_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_UserLogin_Rsp::kTypeFieldNumber;
const int Msg_UserLogin_Rsp::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Msg_UserLogin_Rsp::Msg_UserLogin_Rsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_UserLogin_Rsp::InitAsDefaultInstance() {
}

Msg_UserLogin_Rsp::Msg_UserLogin_Rsp(const Msg_UserLogin_Rsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_UserLogin_Rsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_UserLogin_Rsp::~Msg_UserLogin_Rsp() {
  SharedDtor();
}

void Msg_UserLogin_Rsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_UserLogin_Rsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_UserLogin_Rsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_UserLogin_Rsp_descriptor_;
}

const Msg_UserLogin_Rsp& Msg_UserLogin_Rsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Msg_UserLogin_Rsp* Msg_UserLogin_Rsp::default_instance_ = NULL;

Msg_UserLogin_Rsp* Msg_UserLogin_Rsp::New() const {
  return new Msg_UserLogin_Rsp;
}

void Msg_UserLogin_Rsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_UserLogin_Rsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_UserLogin_Rsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_UserLogin_Rsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_UserLogin_Rsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_UserLogin_Rsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_UserLogin_Rsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_UserLogin_Rsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_UserLogin_Rsp::MergeFrom(const Msg_UserLogin_Rsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_UserLogin_Rsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_UserLogin_Rsp::CopyFrom(const Msg_UserLogin_Rsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_UserLogin_Rsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Msg_UserLogin_Rsp::Swap(Msg_UserLogin_Rsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_UserLogin_Rsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_UserLogin_Rsp_descriptor_;
  metadata.reflection = Msg_UserLogin_Rsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_UserInfo_Notify::kUserIdFieldNumber;
const int Msg_UserInfo_Notify::kUserNameFieldNumber;
const int Msg_UserInfo_Notify::kEmailFieldNumber;
const int Msg_UserInfo_Notify::kSexFieldNumber;
const int Msg_UserInfo_Notify::kJobFieldNumber;
const int Msg_UserInfo_Notify::kHobbyFieldNumber;
const int Msg_UserInfo_Notify::kSkinFieldNumber;
const int Msg_UserInfo_Notify::kDateListFieldNumber;
const int Msg_UserInfo_Notify::kBrandListFieldNumber;
const int Msg_UserInfo_Notify::kColorFieldNumber;
const int Msg_UserInfo_Notify::kDressedListFieldNumber;
const int Msg_UserInfo_Notify::kBirthdayFieldNumber;
const int Msg_UserInfo_Notify::kHeadIdFieldNumber;
const int Msg_UserInfo_Notify::kAgeFieldNumber;
const int Msg_UserInfo_Notify::kZodiacFieldNumber;
const int Msg_UserInfo_Notify::kNickNameFieldNumber;
const int Msg_UserInfo_Notify::kSignFieldNumber;
const int Msg_UserInfo_Notify::kEquipmentListFieldNumber;
const int Msg_UserInfo_Notify::kDesignerTypeFieldNumber;
const int Msg_UserInfo_Notify::kDesignerStatusFieldNumber;
const int Msg_UserInfo_Notify::kPointsFieldNumber;
const int Msg_UserInfo_Notify::kBalanceFieldNumber;
const int Msg_UserInfo_Notify::kGoldFieldNumber;
const int Msg_UserInfo_Notify::kDressClothesFieldNumber;
#endif  // !_MSC_VER

Msg_UserInfo_Notify::Msg_UserInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_UserInfo_Notify::InitAsDefaultInstance() {
  dress_clothes_ = const_cast< ::dgame::ProductData*>(&::dgame::ProductData::default_instance());
}

Msg_UserInfo_Notify::Msg_UserInfo_Notify(const Msg_UserInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_UserInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0u;
  job_ = 0u;
  hobby_ = 0u;
  skin_ = 0u;
  color_ = 0u;
  birthday_ = 0u;
  head_id_ = 0u;
  age_ = 0u;
  zodiac_ = 0u;
  nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  designer_type_ = 0u;
  designer_status_ = 0u;
  points_ = 0u;
  balance_ = 0;
  gold_ = 0u;
  dress_clothes_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_UserInfo_Notify::~Msg_UserInfo_Notify() {
  SharedDtor();
}

void Msg_UserInfo_Notify::SharedDtor() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
    delete dress_clothes_;
  }
}

void Msg_UserInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_UserInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_UserInfo_Notify_descriptor_;
}

const Msg_UserInfo_Notify& Msg_UserInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Msg_UserInfo_Notify* Msg_UserInfo_Notify::default_instance_ = NULL;

Msg_UserInfo_Notify* Msg_UserInfo_Notify::New() const {
  return new Msg_UserInfo_Notify;
}

void Msg_UserInfo_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = 0u;
    if (has_user_name()) {
      if (user_name_ != &::google::protobuf::internal::kEmptyString) {
        user_name_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    sex_ = 0u;
    job_ = 0u;
    hobby_ = 0u;
    skin_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    color_ = 0u;
    birthday_ = 0u;
    head_id_ = 0u;
    age_ = 0u;
    zodiac_ = 0u;
    if (has_nick_name()) {
      if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
        nick_name_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    designer_type_ = 0u;
    designer_status_ = 0u;
    points_ = 0u;
    balance_ = 0;
    gold_ = 0u;
    if (has_dress_clothes()) {
      if (dress_clothes_ != NULL) dress_clothes_->::dgame::ProductData::Clear();
    }
  }
  date_list_.Clear();
  brand_list_.Clear();
  dressed_list_.Clear();
  equipment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_UserInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_name;
        break;
      }

      // optional string user_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_name().data(), this->user_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hobby;
        break;
      }

      // optional uint32 hobby = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hobby:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hobby_)));
          set_has_hobby();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_skin;
        break;
      }

      // optional uint32 skin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skin_)));
          set_has_skin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_date_list;
        break;
      }

      // repeated .dgame.SouvenirDate date_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_date_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_date_list;
        if (input->ExpectTag(72)) goto parse_brand_list;
        break;
      }

      // repeated uint32 brand_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_brand_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_brand_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_brand_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_brand_list;
        if (input->ExpectTag(80)) goto parse_color;
        break;
      }

      // optional uint32 color = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dressed_list;
        break;
      }

      // repeated uint32 dressed_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dressed_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_dressed_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dressed_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_dressed_list;
        if (input->ExpectTag(96)) goto parse_birthday;
        break;
      }

      // optional uint32 birthday = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_birthday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &birthday_)));
          set_has_birthday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_head_id;
        break;
      }

      // optional uint32 head_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &head_id_)));
          set_has_head_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_age;
        break;
      }

      // optional uint32 age = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_zodiac;
        break;
      }

      // optional uint32 zodiac = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zodiac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zodiac_)));
          set_has_zodiac();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_nick_name;
        break;
      }

      // optional string nick_name = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nick_name().data(), this->nick_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_sign;
        break;
      }

      // optional string sign = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipment_list;
        break;
      }

      // repeated .dgame.EquipmentData equipment_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_equipment_list;
        if (input->ExpectTag(152)) goto parse_designer_type;
        break;
      }

      // optional uint32 designer_type = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_designer_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &designer_type_)));
          set_has_designer_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_designer_status;
        break;
      }

      // optional uint32 designer_status = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_designer_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &designer_status_)));
          set_has_designer_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_points;
        break;
      }

      // optional uint32 points = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_points:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &points_)));
          set_has_points();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_balance;
        break;
      }

      // optional float balance = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_balance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &balance_)));
          set_has_balance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_gold;
        break;
      }

      // optional uint32 gold = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_dress_clothes;
        break;
      }

      // optional .dgame.ProductData dress_clothes = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress_clothes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dress_clothes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_UserInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_name(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->email(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 hobby = 6;
  if (has_hobby()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hobby(), output);
  }

  // optional uint32 skin = 7;
  if (has_skin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->skin(), output);
  }

  // repeated .dgame.SouvenirDate date_list = 8;
  for (int i = 0; i < this->date_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->date_list(i), output);
  }

  // repeated uint32 brand_list = 9;
  for (int i = 0; i < this->brand_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->brand_list(i), output);
  }

  // optional uint32 color = 10;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->color(), output);
  }

  // repeated uint32 dressed_list = 11;
  for (int i = 0; i < this->dressed_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->dressed_list(i), output);
  }

  // optional uint32 birthday = 12;
  if (has_birthday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->birthday(), output);
  }

  // optional uint32 head_id = 13;
  if (has_head_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->head_id(), output);
  }

  // optional uint32 age = 14;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->age(), output);
  }

  // optional uint32 zodiac = 15;
  if (has_zodiac()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->zodiac(), output);
  }

  // optional string nick_name = 16;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->nick_name(), output);
  }

  // optional string sign = 17;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->sign(), output);
  }

  // repeated .dgame.EquipmentData equipment_list = 18;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->equipment_list(i), output);
  }

  // optional uint32 designer_type = 19;
  if (has_designer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->designer_type(), output);
  }

  // optional uint32 designer_status = 20;
  if (has_designer_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->designer_status(), output);
  }

  // optional uint32 points = 21;
  if (has_points()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->points(), output);
  }

  // optional float balance = 22;
  if (has_balance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->balance(), output);
  }

  // optional uint32 gold = 23;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->gold(), output);
  }

  // optional .dgame.ProductData dress_clothes = 24;
  if (has_dress_clothes()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->dress_clothes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_UserInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // optional string user_name = 2;
  if (has_user_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_name().data(), this->user_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user_name(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 hobby = 6;
  if (has_hobby()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hobby(), target);
  }

  // optional uint32 skin = 7;
  if (has_skin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->skin(), target);
  }

  // repeated .dgame.SouvenirDate date_list = 8;
  for (int i = 0; i < this->date_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->date_list(i), target);
  }

  // repeated uint32 brand_list = 9;
  for (int i = 0; i < this->brand_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->brand_list(i), target);
  }

  // optional uint32 color = 10;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->color(), target);
  }

  // repeated uint32 dressed_list = 11;
  for (int i = 0; i < this->dressed_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(11, this->dressed_list(i), target);
  }

  // optional uint32 birthday = 12;
  if (has_birthday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->birthday(), target);
  }

  // optional uint32 head_id = 13;
  if (has_head_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->head_id(), target);
  }

  // optional uint32 age = 14;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->age(), target);
  }

  // optional uint32 zodiac = 15;
  if (has_zodiac()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->zodiac(), target);
  }

  // optional string nick_name = 16;
  if (has_nick_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nick_name().data(), this->nick_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->nick_name(), target);
  }

  // optional string sign = 17;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->sign(), target);
  }

  // repeated .dgame.EquipmentData equipment_list = 18;
  for (int i = 0; i < this->equipment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->equipment_list(i), target);
  }

  // optional uint32 designer_type = 19;
  if (has_designer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->designer_type(), target);
  }

  // optional uint32 designer_status = 20;
  if (has_designer_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->designer_status(), target);
  }

  // optional uint32 points = 21;
  if (has_points()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->points(), target);
  }

  // optional float balance = 22;
  if (has_balance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->balance(), target);
  }

  // optional uint32 gold = 23;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->gold(), target);
  }

  // optional .dgame.ProductData dress_clothes = 24;
  if (has_dress_clothes()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->dress_clothes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_UserInfo_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // optional string user_name = 2;
    if (has_user_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_name());
    }

    // optional string email = 3;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 hobby = 6;
    if (has_hobby()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hobby());
    }

    // optional uint32 skin = 7;
    if (has_skin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skin());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 color = 10;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 birthday = 12;
    if (has_birthday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->birthday());
    }

    // optional uint32 head_id = 13;
    if (has_head_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->head_id());
    }

    // optional uint32 age = 14;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->age());
    }

    // optional uint32 zodiac = 15;
    if (has_zodiac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zodiac());
    }

    // optional string nick_name = 16;
    if (has_nick_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick_name());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string sign = 17;
    if (has_sign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 designer_type = 19;
    if (has_designer_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->designer_type());
    }

    // optional uint32 designer_status = 20;
    if (has_designer_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->designer_status());
    }

    // optional uint32 points = 21;
    if (has_points()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->points());
    }

    // optional float balance = 22;
    if (has_balance()) {
      total_size += 2 + 4;
    }

    // optional uint32 gold = 23;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional .dgame.ProductData dress_clothes = 24;
    if (has_dress_clothes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dress_clothes());
    }

  }
  // repeated .dgame.SouvenirDate date_list = 8;
  total_size += 1 * this->date_list_size();
  for (int i = 0; i < this->date_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->date_list(i));
  }

  // repeated uint32 brand_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->brand_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->brand_list(i));
    }
    total_size += 1 * this->brand_list_size() + data_size;
  }

  // repeated uint32 dressed_list = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->dressed_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dressed_list(i));
    }
    total_size += 1 * this->dressed_list_size() + data_size;
  }

  // repeated .dgame.EquipmentData equipment_list = 18;
  total_size += 2 * this->equipment_list_size();
  for (int i = 0; i < this->equipment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipment_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_UserInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_UserInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_UserInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_UserInfo_Notify::MergeFrom(const Msg_UserInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  date_list_.MergeFrom(from.date_list_);
  brand_list_.MergeFrom(from.brand_list_);
  dressed_list_.MergeFrom(from.dressed_list_);
  equipment_list_.MergeFrom(from.equipment_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_user_name()) {
      set_user_name(from.user_name());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_hobby()) {
      set_hobby(from.hobby());
    }
    if (from.has_skin()) {
      set_skin(from.skin());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_birthday()) {
      set_birthday(from.birthday());
    }
    if (from.has_head_id()) {
      set_head_id(from.head_id());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
    if (from.has_zodiac()) {
      set_zodiac(from.zodiac());
    }
    if (from.has_nick_name()) {
      set_nick_name(from.nick_name());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_designer_type()) {
      set_designer_type(from.designer_type());
    }
    if (from.has_designer_status()) {
      set_designer_status(from.designer_status());
    }
    if (from.has_points()) {
      set_points(from.points());
    }
    if (from.has_balance()) {
      set_balance(from.balance());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_dress_clothes()) {
      mutable_dress_clothes()->::dgame::ProductData::MergeFrom(from.dress_clothes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_UserInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_UserInfo_Notify::CopyFrom(const Msg_UserInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_UserInfo_Notify::IsInitialized() const {

  for (int i = 0; i < date_list_size(); i++) {
    if (!this->date_list(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equipment_list_size(); i++) {
    if (!this->equipment_list(i).IsInitialized()) return false;
  }
  if (has_dress_clothes()) {
    if (!this->dress_clothes().IsInitialized()) return false;
  }
  return true;
}

void Msg_UserInfo_Notify::Swap(Msg_UserInfo_Notify* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(user_name_, other->user_name_);
    std::swap(email_, other->email_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(hobby_, other->hobby_);
    std::swap(skin_, other->skin_);
    date_list_.Swap(&other->date_list_);
    brand_list_.Swap(&other->brand_list_);
    std::swap(color_, other->color_);
    dressed_list_.Swap(&other->dressed_list_);
    std::swap(birthday_, other->birthday_);
    std::swap(head_id_, other->head_id_);
    std::swap(age_, other->age_);
    std::swap(zodiac_, other->zodiac_);
    std::swap(nick_name_, other->nick_name_);
    std::swap(sign_, other->sign_);
    equipment_list_.Swap(&other->equipment_list_);
    std::swap(designer_type_, other->designer_type_);
    std::swap(designer_status_, other->designer_status_);
    std::swap(points_, other->points_);
    std::swap(balance_, other->balance_);
    std::swap(gold_, other->gold_);
    std::swap(dress_clothes_, other->dress_clothes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_UserInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_UserInfo_Notify_descriptor_;
  metadata.reflection = Msg_UserInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Msg_GameError_Notify::kErrorCodeFieldNumber;
#endif  // !_MSC_VER

Msg_GameError_Notify::Msg_GameError_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Msg_GameError_Notify::InitAsDefaultInstance() {
}

Msg_GameError_Notify::Msg_GameError_Notify(const Msg_GameError_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Msg_GameError_Notify::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg_GameError_Notify::~Msg_GameError_Notify() {
  SharedDtor();
}

void Msg_GameError_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Msg_GameError_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg_GameError_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_GameError_Notify_descriptor_;
}

const Msg_GameError_Notify& Msg_GameError_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_login_2eproto();
  return *default_instance_;
}

Msg_GameError_Notify* Msg_GameError_Notify::default_instance_ = NULL;

Msg_GameError_Notify* Msg_GameError_Notify::New() const {
  return new Msg_GameError_Notify;
}

void Msg_GameError_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Msg_GameError_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Msg_GameError_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Msg_GameError_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Msg_GameError_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg_GameError_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Msg_GameError_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Msg_GameError_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Msg_GameError_Notify::MergeFrom(const Msg_GameError_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Msg_GameError_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_GameError_Notify::CopyFrom(const Msg_GameError_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_GameError_Notify::IsInitialized() const {

  return true;
}

void Msg_GameError_Notify::Swap(Msg_GameError_Notify* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Msg_GameError_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_GameError_Notify_descriptor_;
  metadata.reflection = Msg_GameError_Notify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS

// @@protoc_insertion_point(global_scope)
