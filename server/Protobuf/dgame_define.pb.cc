// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dgame_define.proto

#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dgame_define.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dgame {

namespace {

const ::google::protobuf::Descriptor* OpenedSystemItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenedSystemItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PartsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PartsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SouvenirDate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SouvenirDate_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OrderInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductSketchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductSketchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointSourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointSourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OriginalProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OriginalProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BindBankAccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BindBankAccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OriginalProductProfitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OriginalProductProfitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayOriginalProductProfit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayOriginalProductProfit_reflection_ = NULL;
const ::google::protobuf::Descriptor* OriginalProductProfitBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OriginalProductProfitBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayOriginalProductProfitBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayOriginalProductProfitBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CouponData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CouponData_reflection_ = NULL;
const ::google::protobuf::Descriptor* OriginalProductPartInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OriginalProductPartInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OriginalProductDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OriginalProductDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductSpaceCategoryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductSpaceCategoryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProductSpaceProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProductSpaceProductInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CooperationProductInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CooperationProductInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SYSTEM_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ELogin_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGM_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChat_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOrder_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDesigner_Type_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDesigner_Check_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Error_Code_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECoDesigner_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderCancelReason_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dgame_5fdefine_2eproto() {
  protobuf_AddDesc_dgame_5fdefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dgame_define.proto");
  GOOGLE_CHECK(file != NULL);
  OpenedSystemItem_descriptor_ = file->message_type(0);
  static const int OpenedSystemItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedSystemItem, system_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedSystemItem, status_),
  };
  OpenedSystemItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenedSystemItem_descriptor_,
      OpenedSystemItem::default_instance_,
      OpenedSystemItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedSystemItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenedSystemItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenedSystemItem));
  EquipmentData_descriptor_ = file->message_type(1);
  static const int EquipmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentData, id_),
  };
  EquipmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentData_descriptor_,
      EquipmentData::default_instance_,
      EquipmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentData));
  PartsData_descriptor_ = file->message_type(2);
  static const int PartsData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartsData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartsData, value_),
  };
  PartsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PartsData_descriptor_,
      PartsData::default_instance_,
      PartsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PartsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PartsData));
  ProductData_descriptor_ = file->message_type(3);
  static const int ProductData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, src_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, design_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, lining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, picture_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, parts_list_),
  };
  ProductData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductData_descriptor_,
      ProductData::default_instance_,
      ProductData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductData));
  ProductDetailInfo_descriptor_ = file->message_type(4);
  static const int ProductDetailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, base_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, shape_belong_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, collar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, font_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, design_partner_),
  };
  ProductDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductDetailInfo_descriptor_,
      ProductDetailInfo::default_instance_,
      ProductDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductDetailInfo));
  SouvenirDate_descriptor_ = file->message_type(5);
  static const int SouvenirDate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SouvenirDate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SouvenirDate, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SouvenirDate, desc_),
  };
  SouvenirDate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SouvenirDate_descriptor_,
      SouvenirDate::default_instance_,
      SouvenirDate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SouvenirDate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SouvenirDate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SouvenirDate));
  OrderItem_descriptor_ = file->message_type(6);
  static const int OrderItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderItem, id_),
  };
  OrderItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderItem_descriptor_,
      OrderItem::default_instance_,
      OrderItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderItem));
  OrderInfo_descriptor_ = file->message_type(7);
  static const int OrderInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, order_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, is_invoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, invoice_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, tephone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, receive_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, item_list_),
  };
  OrderInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderInfo_descriptor_,
      OrderInfo::default_instance_,
      OrderInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderInfo));
  ProductSketchInfo_descriptor_ = file->message_type(8);
  static const int ProductSketchInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, front_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, back_url_),
  };
  ProductSketchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductSketchInfo_descriptor_,
      ProductSketchInfo::default_instance_,
      ProductSketchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSketchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductSketchInfo));
  PointSourceInfo_descriptor_ = file->message_type(9);
  static const int PointSourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, point_),
  };
  PointSourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointSourceInfo_descriptor_,
      PointSourceInfo::default_instance_,
      PointSourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointSourceInfo));
  OriginalProductInfo_descriptor_ = file->message_type(10);
  static const int OriginalProductInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, img_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, click_liked_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, comment_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, is_init_),
  };
  OriginalProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OriginalProductInfo_descriptor_,
      OriginalProductInfo::default_instance_,
      OriginalProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OriginalProductInfo));
  BindBankAccountInfo_descriptor_ = file->message_type(11);
  static const int BindBankAccountInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBankAccountInfo, account_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBankAccountInfo, card_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBankAccountInfo, bind_time_),
  };
  BindBankAccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BindBankAccountInfo_descriptor_,
      BindBankAccountInfo::default_instance_,
      BindBankAccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBankAccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BindBankAccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BindBankAccountInfo));
  OriginalProductProfitInfo_descriptor_ = file->message_type(12);
  static const int OriginalProductProfitInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, id_),
  };
  OriginalProductProfitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OriginalProductProfitInfo_descriptor_,
      OriginalProductProfitInfo::default_instance_,
      OriginalProductProfitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OriginalProductProfitInfo));
  DayOriginalProductProfit_descriptor_ = file->message_type(13);
  static const int DayOriginalProductProfit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfit, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfit, profit_list_),
  };
  DayOriginalProductProfit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayOriginalProductProfit_descriptor_,
      DayOriginalProductProfit::default_instance_,
      DayOriginalProductProfit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayOriginalProductProfit));
  OriginalProductProfitBaseInfo_descriptor_ = file->message_type(14);
  static const int OriginalProductProfitBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, total_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, yesterday_total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, id_),
  };
  OriginalProductProfitBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OriginalProductProfitBaseInfo_descriptor_,
      OriginalProductProfitBaseInfo::default_instance_,
      OriginalProductProfitBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductProfitBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OriginalProductProfitBaseInfo));
  DayOriginalProductProfitBase_descriptor_ = file->message_type(15);
  static const int DayOriginalProductProfitBase_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfitBase, date_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfitBase, total_profit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfitBase, total_count_),
  };
  DayOriginalProductProfitBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayOriginalProductProfitBase_descriptor_,
      DayOriginalProductProfitBase::default_instance_,
      DayOriginalProductProfitBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfitBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayOriginalProductProfitBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayOriginalProductProfitBase));
  ProfitData_descriptor_ = file->message_type(16);
  static const int ProfitData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, profit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, profit_source_),
  };
  ProfitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfitData_descriptor_,
      ProfitData::default_instance_,
      ProfitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfitData));
  CouponData_descriptor_ = file->message_type(17);
  static const int CouponData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, coupon_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, is_use_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, coupon_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, need_cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, use_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, create_time_),
  };
  CouponData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CouponData_descriptor_,
      CouponData::default_instance_,
      CouponData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CouponData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CouponData));
  OriginalProductPartInfo_descriptor_ = file->message_type(18);
  static const int OriginalProductPartInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductPartInfo, part_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductPartInfo, materials_list_),
  };
  OriginalProductPartInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OriginalProductPartInfo_descriptor_,
      OriginalProductPartInfo::default_instance_,
      OriginalProductPartInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductPartInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductPartInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OriginalProductPartInfo));
  OriginalProductDetail_descriptor_ = file->message_type(19);
  static const int OriginalProductDetail_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, style_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, season_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, part_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, is_can_modify_lining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, sketch_front_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, sketch_back_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, sketch_desc_),
  };
  OriginalProductDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OriginalProductDetail_descriptor_,
      OriginalProductDetail::default_instance_,
      OriginalProductDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OriginalProductDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OriginalProductDetail));
  TradeInfo_descriptor_ = file->message_type(20);
  static const int TradeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfo, value_),
  };
  TradeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeInfo_descriptor_,
      TradeInfo::default_instance_,
      TradeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeInfo));
  ProductSpaceCategoryInfo_descriptor_ = file->message_type(21);
  static const int ProductSpaceCategoryInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceCategoryInfo, category_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceCategoryInfo, category_child_list_),
  };
  ProductSpaceCategoryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductSpaceCategoryInfo_descriptor_,
      ProductSpaceCategoryInfo::default_instance_,
      ProductSpaceCategoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceCategoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceCategoryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductSpaceCategoryInfo));
  ProductSpaceProductInfo_descriptor_ = file->message_type(22);
  static const int ProductSpaceProductInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, pname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, pdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, pauthor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, picture_url_),
  };
  ProductSpaceProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProductSpaceProductInfo_descriptor_,
      ProductSpaceProductInfo::default_instance_,
      ProductSpaceProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProductSpaceProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProductSpaceProductInfo));
  CooperationProductInfo_descriptor_ = file->message_type(23);
  static const int CooperationProductInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, pname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, pdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, codesign_status_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, codesign_finistatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, pauthor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, picture_url_),
  };
  CooperationProductInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CooperationProductInfo_descriptor_,
      CooperationProductInfo::default_instance_,
      CooperationProductInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CooperationProductInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CooperationProductInfo));
  SYSTEM_STATUS_descriptor_ = file->enum_type(0);
  ELogin_Type_descriptor_ = file->enum_type(1);
  EGM_Type_descriptor_ = file->enum_type(2);
  EChat_Type_descriptor_ = file->enum_type(3);
  EOrder_Type_descriptor_ = file->enum_type(4);
  EDesigner_Type_descriptor_ = file->enum_type(5);
  EDesigner_Check_Status_descriptor_ = file->enum_type(6);
  Error_Code_descriptor_ = file->enum_type(7);
  OrderStatus_descriptor_ = file->enum_type(8);
  ECoDesigner_Status_descriptor_ = file->enum_type(9);
  OrderCancelReason_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dgame_5fdefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenedSystemItem_descriptor_, &OpenedSystemItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentData_descriptor_, &EquipmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PartsData_descriptor_, &PartsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductData_descriptor_, &ProductData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductDetailInfo_descriptor_, &ProductDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SouvenirDate_descriptor_, &SouvenirDate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderItem_descriptor_, &OrderItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderInfo_descriptor_, &OrderInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductSketchInfo_descriptor_, &ProductSketchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointSourceInfo_descriptor_, &PointSourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OriginalProductInfo_descriptor_, &OriginalProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BindBankAccountInfo_descriptor_, &BindBankAccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OriginalProductProfitInfo_descriptor_, &OriginalProductProfitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayOriginalProductProfit_descriptor_, &DayOriginalProductProfit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OriginalProductProfitBaseInfo_descriptor_, &OriginalProductProfitBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayOriginalProductProfitBase_descriptor_, &DayOriginalProductProfitBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfitData_descriptor_, &ProfitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CouponData_descriptor_, &CouponData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OriginalProductPartInfo_descriptor_, &OriginalProductPartInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OriginalProductDetail_descriptor_, &OriginalProductDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeInfo_descriptor_, &TradeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductSpaceCategoryInfo_descriptor_, &ProductSpaceCategoryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProductSpaceProductInfo_descriptor_, &ProductSpaceProductInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CooperationProductInfo_descriptor_, &CooperationProductInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dgame_5fdefine_2eproto() {
  delete OpenedSystemItem::default_instance_;
  delete OpenedSystemItem_reflection_;
  delete EquipmentData::default_instance_;
  delete EquipmentData_reflection_;
  delete PartsData::default_instance_;
  delete PartsData_reflection_;
  delete ProductData::default_instance_;
  delete ProductData_reflection_;
  delete ProductDetailInfo::default_instance_;
  delete ProductDetailInfo_reflection_;
  delete SouvenirDate::default_instance_;
  delete SouvenirDate_reflection_;
  delete OrderItem::default_instance_;
  delete OrderItem_reflection_;
  delete OrderInfo::default_instance_;
  delete OrderInfo_reflection_;
  delete ProductSketchInfo::default_instance_;
  delete ProductSketchInfo_reflection_;
  delete PointSourceInfo::default_instance_;
  delete PointSourceInfo_reflection_;
  delete OriginalProductInfo::default_instance_;
  delete OriginalProductInfo_reflection_;
  delete BindBankAccountInfo::default_instance_;
  delete BindBankAccountInfo_reflection_;
  delete OriginalProductProfitInfo::default_instance_;
  delete OriginalProductProfitInfo_reflection_;
  delete DayOriginalProductProfit::default_instance_;
  delete DayOriginalProductProfit_reflection_;
  delete OriginalProductProfitBaseInfo::default_instance_;
  delete OriginalProductProfitBaseInfo_reflection_;
  delete DayOriginalProductProfitBase::default_instance_;
  delete DayOriginalProductProfitBase_reflection_;
  delete ProfitData::default_instance_;
  delete ProfitData_reflection_;
  delete CouponData::default_instance_;
  delete CouponData_reflection_;
  delete OriginalProductPartInfo::default_instance_;
  delete OriginalProductPartInfo_reflection_;
  delete OriginalProductDetail::default_instance_;
  delete OriginalProductDetail_reflection_;
  delete TradeInfo::default_instance_;
  delete TradeInfo_reflection_;
  delete ProductSpaceCategoryInfo::default_instance_;
  delete ProductSpaceCategoryInfo_reflection_;
  delete ProductSpaceProductInfo::default_instance_;
  delete ProductSpaceProductInfo_reflection_;
  delete CooperationProductInfo::default_instance_;
  delete CooperationProductInfo_reflection_;
}

void protobuf_AddDesc_dgame_5fdefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022dgame_define.proto\022\005dgame\"K\n\020OpenedSys"
    "temItem\022\021\n\tsystem_id\030\001 \001(\r\022$\n\006status\030\002 \001"
    "(\0162\024.dgame.SYSTEM_STATUS\")\n\rEquipmentDat"
    "a\022\014\n\004type\030\001 \002(\r\022\n\n\002id\030\002 \002(\r\"&\n\tPartsData"
    "\022\n\n\002id\030\001 \002(\r\022\r\n\005value\030\002 \002(\r\"\244\001\n\013ProductD"
    "ata\022\n\n\002id\030\001 \001(\r\022\016\n\006src_id\030\002 \001(\r\022\014\n\004name\030"
    "\003 \001(\t\022\020\n\010material\030\004 \001(\r\022\016\n\006design\030\005 \001(\r\022"
    "\016\n\006lining\030\006 \001(\r\022\023\n\013picture_url\030\007 \001(\t\022$\n\n"
    "parts_list\030\010 \003(\0132\020.dgame.PartsData\"\246\001\n\021P"
    "roductDetailInfo\022%\n\tbase_data\030\001 \001(\0132\022.dg"
    "ame.ProductData\022\027\n\017shape_belong_to\030\002 \001(\t"
    "\022\016\n\006collar\030\003 \001(\r\022\014\n\004sign\030\004 \001(\t\022\014\n\004font\030\005"
    " \001(\r\022\r\n\005color\030\006 \001(\r\022\026\n\016design_partner\030\007 "
    "\001(\t\"6\n\014SouvenirDate\022\n\n\002id\030\001 \002(\r\022\014\n\004date\030"
    "\002 \002(\r\022\014\n\004desc\030\003 \002(\t\"%\n\tOrderItem\022\014\n\004type"
    "\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"\342\001\n\tOrderInfo\022\020\n\010orde"
    "r_id\030\001 \001(\r\022\020\n\010owner_id\030\002 \001(\r\022\024\n\014order_st"
    "atus\030\003 \001(\r\022\023\n\013create_time\030\004 \001(\r\022\017\n\007addre"
    "ss\030\005 \001(\t\022\022\n\nis_invoice\030\006 \001(\r\022\025\n\rinvoice_"
    "title\030\007 \001(\t\022\017\n\007tephone\030\010 \001(\t\022\024\n\014receive_"
    "name\030\t \001(\t\022#\n\titem_list\030\n \003(\0132\020.dgame.Or"
    "derItem\"T\n\021ProductSketchInfo\022\014\n\004name\030\001 \001"
    "(\t\022\014\n\004desc\030\002 \001(\t\022\021\n\tfront_url\030\003 \001(\t\022\020\n\010b"
    "ack_url\030\004 \001(\t\"J\n\017PointSourceInfo\022\014\n\004name"
    "\030\001 \001(\t\022\014\n\004type\030\002 \001(\r\022\014\n\004time\030\003 \001(\r\022\r\n\005po"
    "int\030\004 \001(\r\"\241\001\n\023OriginalProductInfo\022\n\n\002id\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\014\n\004desc\030\003 \001(\t\022\017\n\007img"
    "_url\030\004 \001(\t\022\016\n\006status\030\005 \001(\r\022\031\n\021click_like"
    "d_times\030\006 \001(\r\022\025\n\rcomment_times\030\007 \001(\r\022\017\n\007"
    "is_init\030\010 \001(\r\"S\n\023BindBankAccountInfo\022\024\n\014"
    "account_name\030\001 \002(\t\022\023\n\013card_number\030\002 \002(\t\022"
    "\021\n\tbind_time\030\003 \002(\r\"T\n\031OriginalProductPro"
    "fitInfo\022\014\n\004name\030\001 \001(\t\022\016\n\006profit\030\002 \001(\002\022\r\n"
    "\005count\030\003 \001(\r\022\n\n\002id\030\004 \001(\r\"d\n\030DayOriginalP"
    "roductProfit\022\021\n\tdate_time\030\001 \002(\r\0225\n\013profi"
    "t_list\030\002 \003(\0132 .dgame.OriginalProductProf"
    "itInfo\"\204\001\n\035OriginalProductProfitBaseInfo"
    "\022\014\n\004name\030\001 \001(\t\022\024\n\014total_profit\030\002 \001(\002\022\023\n\013"
    "total_count\030\003 \001(\r\022\036\n\026yesterday_total_pro"
    "fit\030\004 \001(\002\022\n\n\002id\030\005 \001(\r\"\\\n\034DayOriginalProd"
    "uctProfitBase\022\021\n\tdate_time\030\001 \002(\r\022\024\n\014tota"
    "l_profit\030\002 \001(\002\022\023\n\013total_count\030\003 \001(\r\"c\n\nP"
    "rofitData\022\014\n\004time\030\001 \002(\r\022\r\n\005money\030\002 \002(\002\022\023"
    "\n\013profit_type\030\003 \002(\r\022\014\n\004name\030\004 \001(\t\022\025\n\rpro"
    "fit_source\030\005 \001(\r\"\245\001\n\nCouponData\022\021\n\tcoupo"
    "n_id\030\001 \002(\r\022\016\n\006is_use\030\002 \002(\r\022\022\n\nbegin_time"
    "\030\003 \002(\r\022\020\n\010end_time\030\004 \002(\r\022\024\n\014coupon_value"
    "\030\005 \002(\r\022\021\n\tneed_cost\030\006 \002(\r\022\020\n\010use_type\030\007 "
    "\002(\r\022\023\n\013create_time\030\010 \002(\r\"B\n\027OriginalProd"
    "uctPartInfo\022\017\n\007part_id\030\001 \001(\r\022\026\n\016material"
    "s_list\030\002 \003(\r\"\315\002\n\025OriginalProductDetail\022\n"
    "\n\002id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003url\030\003 \001(\t\022\014\n"
    "\004desc\030\004 \001(\t\022\022\n\nstyle_list\030\005 \003(\r\022\r\n\005color"
    "\030\006 \001(\r\022\021\n\tmaterials\030\007 \001(\r\022\r\n\005model\030\010 \001(\r"
    "\022\023\n\013season_list\030\t \003(\r\022\014\n\004type\030\n \001(\r\0221\n\tp"
    "art_list\030\013 \003(\0132\036.dgame.OriginalProductPa"
    "rtInfo\022\034\n\024is_can_modify_lining\030\014 \001(\r\022\030\n\020"
    "sketch_front_url\030\r \001(\t\022\027\n\017sketch_back_ur"
    "l\030\016 \001(\t\022\023\n\013sketch_desc\030\017 \001(\t\"6\n\tTradeInf"
    "o\022\014\n\004time\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005value\030\003"
    " \001(\r\"L\n\030ProductSpaceCategoryInfo\022\023\n\013cate"
    "gory_id\030\001 \001(\r\022\033\n\023category_child_list\030\002 \003"
    "(\r\"]\n\027ProductSpaceProductInfo\022\r\n\005pname\030\001"
    " \001(\t\022\r\n\005pdesc\030\002 \001(\t\022\017\n\007pauthor\030\003 \001(\t\022\023\n\013"
    "picture_url\030\004 \001(\t\"\245\001\n\026CooperationProduct"
    "Info\022\r\n\005pname\030\001 \001(\t\022\r\n\005pdesc\030\002 \001(\t\022\014\n\004ti"
    "me\030\003 \002(\r\022\034\n\024codesign_status_list\030\004 \003(\r\022\033"
    "\n\023codesign_finistatus\030\005 \002(\r\022\017\n\007pauthor\030\006"
    " \001(\t\022\023\n\013picture_url\030\007 \001(\t*-\n\rSYSTEM_STAT"
    "US\022\014\n\010FINISHED\020\000\022\016\n\nUNFINISHED\020\001*K\n\013ELog"
    "in_Type\022\022\n\016E_Login_Normal\020\001\022\024\n\020E_Login_R"
    "egister\020\002\022\022\n\016E_Login_Modify\020\003*\034\n\010EGM_Typ"
    "e\022\020\n\014E_GM_Set_Age\020\001*.\n\nEChat_Type\022\016\n\nE_C"
    "hat_P2P\020\001\022\020\n\014E_Chat_World\020\002*r\n\013EOrder_Ty"
    "pe\022\030\n\024E_Order_Type_Payment\020\001\022\030\n\024E_Order_"
    "Type_Receive\020\002\022\031\n\025E_Order_Type_Ivaluate\020"
    "\003\022\024\n\020E_Order_Type_All\020\004*Z\n\016EDesigner_Typ"
    "e\022\025\n\021E_Designer_Normal\020\000\022\024\n\020E_Designer_L"
    "over\020\001\022\033\n\027E_Designer_Professional\020\002*\201\001\n\026"
    "EDesigner_Check_Status\022\030\n\024Designer_Statu"
    "s_None\020\000\022\031\n\025Designer_Status_Check\020\001\022\030\n\024D"
    "esigner_Status_Fail\020\002\022\030\n\024Designer_Status"
    "_Pass\020\003*\244\003\n\nError_Code\022\025\n\021Error_Code_Unk"
    "now\020\000\022\022\n\rError_Code_OK\020\310\001\022\036\n\032Error_Code_"
    "Account_Invalid\020\002\022\026\n\022Error_Code_Kickout\020"
    "\003\022\035\n\031Error_Code_Account_In_Use\020\004\022\'\n#Erro"
    "r_Code_PhoneNumber_Not_Register\020\005\022#\n\037Err"
    "or_Code_Mobile_Validate_Fail\020\006\022-\n)Error_"
    "Code_Mobile_Validate_Server_Invalid\020\007\022\"\n"
    "\036Error_Code_Chat_Target_Invalid\020d\022%\n Err"
    "or_Code_Feedback_Desc_Invalid\020\254\002\022(\n#Erro"
    "r_Code_Exchange_Gold_Not_Enough\020\220\003\022\"\n\035Er"
    "ror_Code_Balance_Not_Enough\020\350\007*\300\001\n\013Order"
    "Status\022\023\n\017PENDING_PAYMENT\020\000\022\022\n\016PENDING_R"
    "EVIEW\020\001\022\024\n\020PENDING_SHIPMENT\020\002\022\013\n\007SHIPPED"
    "\020\003\022\014\n\010RECEIVED\020\004\022\r\n\tCOMPLETED\020\005\022\n\n\006FAILE"
    "D\020\006\022\014\n\010CANCELED\020\007\022\n\n\006DENIED\020\010\022\r\n\tPRODUCI"
    "NG\020\t\022\023\n\017WAIT_OVER_PAYED\020\n*\242\001\n\022ECoDesigne"
    "r_Status\022\032\n\026Codesigner_Status_None\020\000\022\032\n\026"
    "Codesigner_Status_Send\020\001\022\030\n\024Codesigner_S"
    "tatus_Co\020\002\022\033\n\027Codesigner_Status_Check\020\003\022"
    "\035\n\031Codesigner_Status_NoCheck\020\004*b\n\021OrderC"
    "ancelReason\022\020\n\014Not_Want_Buy\020\001\022\r\n\tBuy_Aga"
    "in\020\002\022\020\n\014Design_Again\020\003\022\020\n\014Out_Of_Stock\020\004"
    "\022\010\n\004Else\020\005", 4170);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dgame_define.proto", &protobuf_RegisterTypes);
  OpenedSystemItem::default_instance_ = new OpenedSystemItem();
  EquipmentData::default_instance_ = new EquipmentData();
  PartsData::default_instance_ = new PartsData();
  ProductData::default_instance_ = new ProductData();
  ProductDetailInfo::default_instance_ = new ProductDetailInfo();
  SouvenirDate::default_instance_ = new SouvenirDate();
  OrderItem::default_instance_ = new OrderItem();
  OrderInfo::default_instance_ = new OrderInfo();
  ProductSketchInfo::default_instance_ = new ProductSketchInfo();
  PointSourceInfo::default_instance_ = new PointSourceInfo();
  OriginalProductInfo::default_instance_ = new OriginalProductInfo();
  BindBankAccountInfo::default_instance_ = new BindBankAccountInfo();
  OriginalProductProfitInfo::default_instance_ = new OriginalProductProfitInfo();
  DayOriginalProductProfit::default_instance_ = new DayOriginalProductProfit();
  OriginalProductProfitBaseInfo::default_instance_ = new OriginalProductProfitBaseInfo();
  DayOriginalProductProfitBase::default_instance_ = new DayOriginalProductProfitBase();
  ProfitData::default_instance_ = new ProfitData();
  CouponData::default_instance_ = new CouponData();
  OriginalProductPartInfo::default_instance_ = new OriginalProductPartInfo();
  OriginalProductDetail::default_instance_ = new OriginalProductDetail();
  TradeInfo::default_instance_ = new TradeInfo();
  ProductSpaceCategoryInfo::default_instance_ = new ProductSpaceCategoryInfo();
  ProductSpaceProductInfo::default_instance_ = new ProductSpaceProductInfo();
  CooperationProductInfo::default_instance_ = new CooperationProductInfo();
  OpenedSystemItem::default_instance_->InitAsDefaultInstance();
  EquipmentData::default_instance_->InitAsDefaultInstance();
  PartsData::default_instance_->InitAsDefaultInstance();
  ProductData::default_instance_->InitAsDefaultInstance();
  ProductDetailInfo::default_instance_->InitAsDefaultInstance();
  SouvenirDate::default_instance_->InitAsDefaultInstance();
  OrderItem::default_instance_->InitAsDefaultInstance();
  OrderInfo::default_instance_->InitAsDefaultInstance();
  ProductSketchInfo::default_instance_->InitAsDefaultInstance();
  PointSourceInfo::default_instance_->InitAsDefaultInstance();
  OriginalProductInfo::default_instance_->InitAsDefaultInstance();
  BindBankAccountInfo::default_instance_->InitAsDefaultInstance();
  OriginalProductProfitInfo::default_instance_->InitAsDefaultInstance();
  DayOriginalProductProfit::default_instance_->InitAsDefaultInstance();
  OriginalProductProfitBaseInfo::default_instance_->InitAsDefaultInstance();
  DayOriginalProductProfitBase::default_instance_->InitAsDefaultInstance();
  ProfitData::default_instance_->InitAsDefaultInstance();
  CouponData::default_instance_->InitAsDefaultInstance();
  OriginalProductPartInfo::default_instance_->InitAsDefaultInstance();
  OriginalProductDetail::default_instance_->InitAsDefaultInstance();
  TradeInfo::default_instance_->InitAsDefaultInstance();
  ProductSpaceCategoryInfo::default_instance_->InitAsDefaultInstance();
  ProductSpaceProductInfo::default_instance_->InitAsDefaultInstance();
  CooperationProductInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dgame_5fdefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dgame_5fdefine_2eproto {
  StaticDescriptorInitializer_dgame_5fdefine_2eproto() {
    protobuf_AddDesc_dgame_5fdefine_2eproto();
  }
} static_descriptor_initializer_dgame_5fdefine_2eproto_;
const ::google::protobuf::EnumDescriptor* SYSTEM_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SYSTEM_STATUS_descriptor_;
}
bool SYSTEM_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELogin_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ELogin_Type_descriptor_;
}
bool ELogin_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGM_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGM_Type_descriptor_;
}
bool EGM_Type_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChat_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChat_Type_descriptor_;
}
bool EChat_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOrder_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOrder_Type_descriptor_;
}
bool EOrder_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDesigner_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDesigner_Type_descriptor_;
}
bool EDesigner_Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDesigner_Check_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDesigner_Check_Status_descriptor_;
}
bool EDesigner_Check_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Error_Code_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Error_Code_descriptor_;
}
bool Error_Code_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 100:
    case 200:
    case 300:
    case 400:
    case 1000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderStatus_descriptor_;
}
bool OrderStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECoDesigner_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECoDesigner_Status_descriptor_;
}
bool ECoDesigner_Status_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OrderCancelReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderCancelReason_descriptor_;
}
bool OrderCancelReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int OpenedSystemItem::kSystemIdFieldNumber;
const int OpenedSystemItem::kStatusFieldNumber;
#endif  // !_MSC_VER

OpenedSystemItem::OpenedSystemItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenedSystemItem::InitAsDefaultInstance() {
}

OpenedSystemItem::OpenedSystemItem(const OpenedSystemItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenedSystemItem::SharedCtor() {
  _cached_size_ = 0;
  system_id_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenedSystemItem::~OpenedSystemItem() {
  SharedDtor();
}

void OpenedSystemItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenedSystemItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenedSystemItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenedSystemItem_descriptor_;
}

const OpenedSystemItem& OpenedSystemItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OpenedSystemItem* OpenedSystemItem::default_instance_ = NULL;

OpenedSystemItem* OpenedSystemItem::New() const {
  return new OpenedSystemItem;
}

void OpenedSystemItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    system_id_ = 0u;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenedSystemItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 system_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &system_id_)));
          set_has_system_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .dgame.SYSTEM_STATUS status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::dgame::SYSTEM_STATUS_IsValid(value)) {
            set_status(static_cast< ::dgame::SYSTEM_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenedSystemItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 system_id = 1;
  if (has_system_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->system_id(), output);
  }

  // optional .dgame.SYSTEM_STATUS status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenedSystemItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 system_id = 1;
  if (has_system_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->system_id(), target);
  }

  // optional .dgame.SYSTEM_STATUS status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenedSystemItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 system_id = 1;
    if (has_system_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->system_id());
    }

    // optional .dgame.SYSTEM_STATUS status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenedSystemItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenedSystemItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenedSystemItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenedSystemItem::MergeFrom(const OpenedSystemItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_system_id()) {
      set_system_id(from.system_id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenedSystemItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenedSystemItem::CopyFrom(const OpenedSystemItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenedSystemItem::IsInitialized() const {

  return true;
}

void OpenedSystemItem::Swap(OpenedSystemItem* other) {
  if (other != this) {
    std::swap(system_id_, other->system_id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenedSystemItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenedSystemItem_descriptor_;
  metadata.reflection = OpenedSystemItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentData::kTypeFieldNumber;
const int EquipmentData::kIdFieldNumber;
#endif  // !_MSC_VER

EquipmentData::EquipmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentData::InitAsDefaultInstance() {
}

EquipmentData::EquipmentData(const EquipmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentData::~EquipmentData() {
  SharedDtor();
}

void EquipmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentData_descriptor_;
}

const EquipmentData& EquipmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

EquipmentData* EquipmentData::default_instance_ = NULL;

EquipmentData* EquipmentData::New() const {
  return new EquipmentData;
}

void EquipmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentData::MergeFrom(const EquipmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentData::CopyFrom(const EquipmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipmentData::Swap(EquipmentData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentData_descriptor_;
  metadata.reflection = EquipmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PartsData::kIdFieldNumber;
const int PartsData::kValueFieldNumber;
#endif  // !_MSC_VER

PartsData::PartsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PartsData::InitAsDefaultInstance() {
}

PartsData::PartsData(const PartsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PartsData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PartsData::~PartsData() {
  SharedDtor();
}

void PartsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PartsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PartsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PartsData_descriptor_;
}

const PartsData& PartsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

PartsData* PartsData::default_instance_ = NULL;

PartsData* PartsData::New() const {
  return new PartsData;
}

void PartsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PartsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PartsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PartsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PartsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PartsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PartsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PartsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PartsData::MergeFrom(const PartsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PartsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartsData::CopyFrom(const PartsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartsData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PartsData::Swap(PartsData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PartsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PartsData_descriptor_;
  metadata.reflection = PartsData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductData::kIdFieldNumber;
const int ProductData::kSrcIdFieldNumber;
const int ProductData::kNameFieldNumber;
const int ProductData::kMaterialFieldNumber;
const int ProductData::kDesignFieldNumber;
const int ProductData::kLiningFieldNumber;
const int ProductData::kPictureUrlFieldNumber;
const int ProductData::kPartsListFieldNumber;
#endif  // !_MSC_VER

ProductData::ProductData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductData::InitAsDefaultInstance() {
}

ProductData::ProductData(const ProductData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  src_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  material_ = 0u;
  design_ = 0u;
  lining_ = 0u;
  picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductData::~ProductData() {
  SharedDtor();
}

void ProductData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (this != default_instance_) {
  }
}

void ProductData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductData_descriptor_;
}

const ProductData& ProductData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProductData* ProductData::default_instance_ = NULL;

ProductData* ProductData::New() const {
  return new ProductData;
}

void ProductData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    src_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    material_ = 0u;
    design_ = 0u;
    lining_ = 0u;
    if (has_picture_url()) {
      if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
        picture_url_->clear();
      }
    }
  }
  parts_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_src_id;
        break;
      }

      // optional uint32 src_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_src_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_id_)));
          set_has_src_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_material;
        break;
      }

      // optional uint32 material = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_material:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_design;
        break;
      }

      // optional uint32 design = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_design:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &design_)));
          set_has_design();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lining;
        break;
      }

      // optional uint32 lining = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lining_)));
          set_has_lining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_picture_url;
        break;
      }

      // optional string picture_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_url().data(), this->picture_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parts_list;
        break;
      }

      // repeated .dgame.PartsData parts_list = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_parts_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 material = 4;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->material(), output);
  }

  // optional uint32 design = 5;
  if (has_design()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->design(), output);
  }

  // optional uint32 lining = 6;
  if (has_lining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lining(), output);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->picture_url(), output);
  }

  // repeated .dgame.PartsData parts_list = 8;
  for (int i = 0; i < this->parts_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->parts_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 src_id = 2;
  if (has_src_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 material = 4;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->material(), target);
  }

  // optional uint32 design = 5;
  if (has_design()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->design(), target);
  }

  // optional uint32 lining = 6;
  if (has_lining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lining(), target);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->picture_url(), target);
  }

  // repeated .dgame.PartsData parts_list = 8;
  for (int i = 0; i < this->parts_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->parts_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 src_id = 2;
    if (has_src_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 material = 4;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->material());
    }

    // optional uint32 design = 5;
    if (has_design()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->design());
    }

    // optional uint32 lining = 6;
    if (has_lining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lining());
    }

    // optional string picture_url = 7;
    if (has_picture_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_url());
    }

  }
  // repeated .dgame.PartsData parts_list = 8;
  total_size += 1 * this->parts_list_size();
  for (int i = 0; i < this->parts_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductData::MergeFrom(const ProductData& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_list_.MergeFrom(from.parts_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_src_id()) {
      set_src_id(from.src_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_design()) {
      set_design(from.design());
    }
    if (from.has_lining()) {
      set_lining(from.lining());
    }
    if (from.has_picture_url()) {
      set_picture_url(from.picture_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductData::CopyFrom(const ProductData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductData::IsInitialized() const {

  for (int i = 0; i < parts_list_size(); i++) {
    if (!this->parts_list(i).IsInitialized()) return false;
  }
  return true;
}

void ProductData::Swap(ProductData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(src_id_, other->src_id_);
    std::swap(name_, other->name_);
    std::swap(material_, other->material_);
    std::swap(design_, other->design_);
    std::swap(lining_, other->lining_);
    std::swap(picture_url_, other->picture_url_);
    parts_list_.Swap(&other->parts_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductData_descriptor_;
  metadata.reflection = ProductData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductDetailInfo::kBaseDataFieldNumber;
const int ProductDetailInfo::kShapeBelongToFieldNumber;
const int ProductDetailInfo::kCollarFieldNumber;
const int ProductDetailInfo::kSignFieldNumber;
const int ProductDetailInfo::kFontFieldNumber;
const int ProductDetailInfo::kColorFieldNumber;
const int ProductDetailInfo::kDesignPartnerFieldNumber;
#endif  // !_MSC_VER

ProductDetailInfo::ProductDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductDetailInfo::InitAsDefaultInstance() {
  base_data_ = const_cast< ::dgame::ProductData*>(&::dgame::ProductData::default_instance());
}

ProductDetailInfo::ProductDetailInfo(const ProductDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  base_data_ = NULL;
  shape_belong_to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collar_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  font_ = 0u;
  color_ = 0u;
  design_partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductDetailInfo::~ProductDetailInfo() {
  SharedDtor();
}

void ProductDetailInfo::SharedDtor() {
  if (shape_belong_to_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_belong_to_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (design_partner_ != &::google::protobuf::internal::kEmptyString) {
    delete design_partner_;
  }
  if (this != default_instance_) {
    delete base_data_;
  }
}

void ProductDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductDetailInfo_descriptor_;
}

const ProductDetailInfo& ProductDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProductDetailInfo* ProductDetailInfo::default_instance_ = NULL;

ProductDetailInfo* ProductDetailInfo::New() const {
  return new ProductDetailInfo;
}

void ProductDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_base_data()) {
      if (base_data_ != NULL) base_data_->::dgame::ProductData::Clear();
    }
    if (has_shape_belong_to()) {
      if (shape_belong_to_ != &::google::protobuf::internal::kEmptyString) {
        shape_belong_to_->clear();
      }
    }
    collar_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    font_ = 0u;
    color_ = 0u;
    if (has_design_partner()) {
      if (design_partner_ != &::google::protobuf::internal::kEmptyString) {
        design_partner_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dgame.ProductData base_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shape_belong_to;
        break;
      }

      // optional string shape_belong_to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shape_belong_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shape_belong_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shape_belong_to().data(), this->shape_belong_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collar;
        break;
      }

      // optional uint32 collar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &collar_)));
          set_has_collar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_font;
        break;
      }

      // optional uint32 font = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_font:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &font_)));
          set_has_font();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional uint32 color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_design_partner;
        break;
      }

      // optional string design_partner = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_design_partner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_design_partner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->design_partner().data(), this->design_partner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dgame.ProductData base_data = 1;
  if (has_base_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->base_data(), output);
  }

  // optional string shape_belong_to = 2;
  if (has_shape_belong_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape_belong_to().data(), this->shape_belong_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->shape_belong_to(), output);
  }

  // optional uint32 collar = 3;
  if (has_collar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->collar(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sign(), output);
  }

  // optional uint32 font = 5;
  if (has_font()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->font(), output);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->color(), output);
  }

  // optional string design_partner = 7;
  if (has_design_partner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->design_partner().data(), this->design_partner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->design_partner(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dgame.ProductData base_data = 1;
  if (has_base_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->base_data(), target);
  }

  // optional string shape_belong_to = 2;
  if (has_shape_belong_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shape_belong_to().data(), this->shape_belong_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->shape_belong_to(), target);
  }

  // optional uint32 collar = 3;
  if (has_collar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->collar(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional uint32 font = 5;
  if (has_font()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->font(), target);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->color(), target);
  }

  // optional string design_partner = 7;
  if (has_design_partner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->design_partner().data(), this->design_partner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->design_partner(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dgame.ProductData base_data = 1;
    if (has_base_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base_data());
    }

    // optional string shape_belong_to = 2;
    if (has_shape_belong_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shape_belong_to());
    }

    // optional uint32 collar = 3;
    if (has_collar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->collar());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 font = 5;
    if (has_font()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->font());
    }

    // optional uint32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional string design_partner = 7;
    if (has_design_partner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->design_partner());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductDetailInfo::MergeFrom(const ProductDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_base_data()) {
      mutable_base_data()->::dgame::ProductData::MergeFrom(from.base_data());
    }
    if (from.has_shape_belong_to()) {
      set_shape_belong_to(from.shape_belong_to());
    }
    if (from.has_collar()) {
      set_collar(from.collar());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_font()) {
      set_font(from.font());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_design_partner()) {
      set_design_partner(from.design_partner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductDetailInfo::CopyFrom(const ProductDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductDetailInfo::IsInitialized() const {

  if (has_base_data()) {
    if (!this->base_data().IsInitialized()) return false;
  }
  return true;
}

void ProductDetailInfo::Swap(ProductDetailInfo* other) {
  if (other != this) {
    std::swap(base_data_, other->base_data_);
    std::swap(shape_belong_to_, other->shape_belong_to_);
    std::swap(collar_, other->collar_);
    std::swap(sign_, other->sign_);
    std::swap(font_, other->font_);
    std::swap(color_, other->color_);
    std::swap(design_partner_, other->design_partner_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductDetailInfo_descriptor_;
  metadata.reflection = ProductDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SouvenirDate::kIdFieldNumber;
const int SouvenirDate::kDateFieldNumber;
const int SouvenirDate::kDescFieldNumber;
#endif  // !_MSC_VER

SouvenirDate::SouvenirDate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SouvenirDate::InitAsDefaultInstance() {
}

SouvenirDate::SouvenirDate(const SouvenirDate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SouvenirDate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  date_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SouvenirDate::~SouvenirDate() {
  SharedDtor();
}

void SouvenirDate::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void SouvenirDate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SouvenirDate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SouvenirDate_descriptor_;
}

const SouvenirDate& SouvenirDate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

SouvenirDate* SouvenirDate::default_instance_ = NULL;

SouvenirDate* SouvenirDate::New() const {
  return new SouvenirDate;
}

void SouvenirDate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    date_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SouvenirDate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_date;
        break;
      }

      // required uint32 date = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SouvenirDate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 date = 2;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->date(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SouvenirDate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 date = 2;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->date(), target);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SouvenirDate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 date = 2;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // required string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SouvenirDate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SouvenirDate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SouvenirDate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SouvenirDate::MergeFrom(const SouvenirDate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SouvenirDate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SouvenirDate::CopyFrom(const SouvenirDate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SouvenirDate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SouvenirDate::Swap(SouvenirDate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(date_, other->date_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SouvenirDate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SouvenirDate_descriptor_;
  metadata.reflection = SouvenirDate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderItem::kTypeFieldNumber;
const int OrderItem::kIdFieldNumber;
#endif  // !_MSC_VER

OrderItem::OrderItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderItem::InitAsDefaultInstance() {
}

OrderItem::OrderItem(const OrderItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderItem::~OrderItem() {
  SharedDtor();
}

void OrderItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OrderItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderItem_descriptor_;
}

const OrderItem& OrderItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OrderItem* OrderItem::default_instance_ = NULL;

OrderItem* OrderItem::New() const {
  return new OrderItem;
}

void OrderItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderItem::MergeFrom(const OrderItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderItem::CopyFrom(const OrderItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderItem::IsInitialized() const {

  return true;
}

void OrderItem::Swap(OrderItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderItem_descriptor_;
  metadata.reflection = OrderItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OrderInfo::kOrderIdFieldNumber;
const int OrderInfo::kOwnerIdFieldNumber;
const int OrderInfo::kOrderStatusFieldNumber;
const int OrderInfo::kCreateTimeFieldNumber;
const int OrderInfo::kAddressFieldNumber;
const int OrderInfo::kIsInvoiceFieldNumber;
const int OrderInfo::kInvoiceTitleFieldNumber;
const int OrderInfo::kTephoneFieldNumber;
const int OrderInfo::kReceiveNameFieldNumber;
const int OrderInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

OrderInfo::OrderInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderInfo::InitAsDefaultInstance() {
}

OrderInfo::OrderInfo(const OrderInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderInfo::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0u;
  owner_id_ = 0u;
  order_status_ = 0u;
  create_time_ = 0u;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_invoice_ = 0u;
  invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receive_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderInfo::~OrderInfo() {
  SharedDtor();
}

void OrderInfo::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_title_;
  }
  if (tephone_ != &::google::protobuf::internal::kEmptyString) {
    delete tephone_;
  }
  if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receive_name_;
  }
  if (this != default_instance_) {
  }
}

void OrderInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderInfo_descriptor_;
}

const OrderInfo& OrderInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OrderInfo* OrderInfo::default_instance_ = NULL;

OrderInfo* OrderInfo::New() const {
  return new OrderInfo;
}

void OrderInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = 0u;
    owner_id_ = 0u;
    order_status_ = 0u;
    create_time_ = 0u;
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    is_invoice_ = 0u;
    if (has_invoice_title()) {
      if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
        invoice_title_->clear();
      }
    }
    if (has_tephone()) {
      if (tephone_ != &::google::protobuf::internal::kEmptyString) {
        tephone_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_receive_name()) {
      if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
        receive_name_->clear();
      }
    }
  }
  item_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_owner_id;
        break;
      }

      // optional uint32 owner_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order_status;
        break;
      }

      // optional uint32 order_status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &order_status_)));
          set_has_order_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_create_time;
        break;
      }

      // optional uint32 create_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_address;
        break;
      }

      // optional string address = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_invoice;
        break;
      }

      // optional uint32 is_invoice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_invoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_invoice_)));
          set_has_is_invoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_invoice_title;
        break;
      }

      // optional string invoice_title = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invoice_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invoice_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invoice_title().data(), this->invoice_title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_tephone;
        break;
      }

      // optional string tephone = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tephone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tephone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tephone().data(), this->tephone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_receive_name;
        break;
      }

      // optional string receive_name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_receive_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_receive_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->receive_name().data(), this->receive_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item_list;
        break;
      }

      // repeated .dgame.OrderItem item_list = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_item_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->order_id(), output);
  }

  // optional uint32 owner_id = 2;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->owner_id(), output);
  }

  // optional uint32 order_status = 3;
  if (has_order_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->order_status(), output);
  }

  // optional uint32 create_time = 4;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->create_time(), output);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->address(), output);
  }

  // optional uint32 is_invoice = 6;
  if (has_is_invoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->is_invoice(), output);
  }

  // optional string invoice_title = 7;
  if (has_invoice_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invoice_title().data(), this->invoice_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->invoice_title(), output);
  }

  // optional string tephone = 8;
  if (has_tephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tephone().data(), this->tephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->tephone(), output);
  }

  // optional string receive_name = 9;
  if (has_receive_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receive_name().data(), this->receive_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->receive_name(), output);
  }

  // repeated .dgame.OrderItem item_list = 10;
  for (int i = 0; i < this->item_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->item_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->order_id(), target);
  }

  // optional uint32 owner_id = 2;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->owner_id(), target);
  }

  // optional uint32 order_status = 3;
  if (has_order_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->order_status(), target);
  }

  // optional uint32 create_time = 4;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->create_time(), target);
  }

  // optional string address = 5;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->address(), target);
  }

  // optional uint32 is_invoice = 6;
  if (has_is_invoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->is_invoice(), target);
  }

  // optional string invoice_title = 7;
  if (has_invoice_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invoice_title().data(), this->invoice_title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->invoice_title(), target);
  }

  // optional string tephone = 8;
  if (has_tephone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tephone().data(), this->tephone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->tephone(), target);
  }

  // optional string receive_name = 9;
  if (has_receive_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->receive_name().data(), this->receive_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->receive_name(), target);
  }

  // repeated .dgame.OrderItem item_list = 10;
  for (int i = 0; i < this->item_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->item_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_id());
    }

    // optional uint32 owner_id = 2;
    if (has_owner_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->owner_id());
    }

    // optional uint32 order_status = 3;
    if (has_order_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->order_status());
    }

    // optional uint32 create_time = 4;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

    // optional string address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // optional uint32 is_invoice = 6;
    if (has_is_invoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_invoice());
    }

    // optional string invoice_title = 7;
    if (has_invoice_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invoice_title());
    }

    // optional string tephone = 8;
    if (has_tephone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tephone());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string receive_name = 9;
    if (has_receive_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->receive_name());
    }

  }
  // repeated .dgame.OrderItem item_list = 10;
  total_size += 1 * this->item_list_size();
  for (int i = 0; i < this->item_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderInfo::MergeFrom(const OrderInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_list_.MergeFrom(from.item_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_order_status()) {
      set_order_status(from.order_status());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_is_invoice()) {
      set_is_invoice(from.is_invoice());
    }
    if (from.has_invoice_title()) {
      set_invoice_title(from.invoice_title());
    }
    if (from.has_tephone()) {
      set_tephone(from.tephone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_receive_name()) {
      set_receive_name(from.receive_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderInfo::CopyFrom(const OrderInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderInfo::IsInitialized() const {

  return true;
}

void OrderInfo::Swap(OrderInfo* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(order_status_, other->order_status_);
    std::swap(create_time_, other->create_time_);
    std::swap(address_, other->address_);
    std::swap(is_invoice_, other->is_invoice_);
    std::swap(invoice_title_, other->invoice_title_);
    std::swap(tephone_, other->tephone_);
    std::swap(receive_name_, other->receive_name_);
    item_list_.Swap(&other->item_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderInfo_descriptor_;
  metadata.reflection = OrderInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductSketchInfo::kNameFieldNumber;
const int ProductSketchInfo::kDescFieldNumber;
const int ProductSketchInfo::kFrontUrlFieldNumber;
const int ProductSketchInfo::kBackUrlFieldNumber;
#endif  // !_MSC_VER

ProductSketchInfo::ProductSketchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductSketchInfo::InitAsDefaultInstance() {
}

ProductSketchInfo::ProductSketchInfo(const ProductSketchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductSketchInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductSketchInfo::~ProductSketchInfo() {
  SharedDtor();
}

void ProductSketchInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (front_url_ != &::google::protobuf::internal::kEmptyString) {
    delete front_url_;
  }
  if (back_url_ != &::google::protobuf::internal::kEmptyString) {
    delete back_url_;
  }
  if (this != default_instance_) {
  }
}

void ProductSketchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductSketchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductSketchInfo_descriptor_;
}

const ProductSketchInfo& ProductSketchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProductSketchInfo* ProductSketchInfo::default_instance_ = NULL;

ProductSketchInfo* ProductSketchInfo::New() const {
  return new ProductSketchInfo;
}

void ProductSketchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_front_url()) {
      if (front_url_ != &::google::protobuf::internal::kEmptyString) {
        front_url_->clear();
      }
    }
    if (has_back_url()) {
      if (back_url_ != &::google::protobuf::internal::kEmptyString) {
        back_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductSketchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_front_url;
        break;
      }

      // optional string front_url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_front_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_front_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->front_url().data(), this->front_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_back_url;
        break;
      }

      // optional string back_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_back_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->back_url().data(), this->back_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductSketchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // optional string front_url = 3;
  if (has_front_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->front_url().data(), this->front_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->front_url(), output);
  }

  // optional string back_url = 4;
  if (has_back_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->back_url().data(), this->back_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->back_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductSketchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // optional string front_url = 3;
  if (has_front_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->front_url().data(), this->front_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->front_url(), target);
  }

  // optional string back_url = 4;
  if (has_back_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->back_url().data(), this->back_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->back_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductSketchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string front_url = 3;
    if (has_front_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->front_url());
    }

    // optional string back_url = 4;
    if (has_back_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->back_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductSketchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductSketchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductSketchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductSketchInfo::MergeFrom(const ProductSketchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_front_url()) {
      set_front_url(from.front_url());
    }
    if (from.has_back_url()) {
      set_back_url(from.back_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductSketchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductSketchInfo::CopyFrom(const ProductSketchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSketchInfo::IsInitialized() const {

  return true;
}

void ProductSketchInfo::Swap(ProductSketchInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(front_url_, other->front_url_);
    std::swap(back_url_, other->back_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductSketchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductSketchInfo_descriptor_;
  metadata.reflection = ProductSketchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointSourceInfo::kNameFieldNumber;
const int PointSourceInfo::kTypeFieldNumber;
const int PointSourceInfo::kTimeFieldNumber;
const int PointSourceInfo::kPointFieldNumber;
#endif  // !_MSC_VER

PointSourceInfo::PointSourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PointSourceInfo::InitAsDefaultInstance() {
}

PointSourceInfo::PointSourceInfo(const PointSourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PointSourceInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  time_ = 0u;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointSourceInfo::~PointSourceInfo() {
  SharedDtor();
}

void PointSourceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PointSourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointSourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointSourceInfo_descriptor_;
}

const PointSourceInfo& PointSourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

PointSourceInfo* PointSourceInfo::default_instance_ = NULL;

PointSourceInfo* PointSourceInfo::New() const {
  return new PointSourceInfo;
}

void PointSourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    time_ = 0u;
    point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointSourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // optional uint32 point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PointSourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PointSourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PointSourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointSourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointSourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointSourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointSourceInfo::MergeFrom(const PointSourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointSourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSourceInfo::CopyFrom(const PointSourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSourceInfo::IsInitialized() const {

  return true;
}

void PointSourceInfo::Swap(PointSourceInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointSourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointSourceInfo_descriptor_;
  metadata.reflection = PointSourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OriginalProductInfo::kIdFieldNumber;
const int OriginalProductInfo::kNameFieldNumber;
const int OriginalProductInfo::kDescFieldNumber;
const int OriginalProductInfo::kImgUrlFieldNumber;
const int OriginalProductInfo::kStatusFieldNumber;
const int OriginalProductInfo::kClickLikedTimesFieldNumber;
const int OriginalProductInfo::kCommentTimesFieldNumber;
const int OriginalProductInfo::kIsInitFieldNumber;
#endif  // !_MSC_VER

OriginalProductInfo::OriginalProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OriginalProductInfo::InitAsDefaultInstance() {
}

OriginalProductInfo::OriginalProductInfo(const OriginalProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OriginalProductInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  img_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  status_ = 0u;
  click_liked_times_ = 0u;
  comment_times_ = 0u;
  is_init_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OriginalProductInfo::~OriginalProductInfo() {
  SharedDtor();
}

void OriginalProductInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (img_url_ != &::google::protobuf::internal::kEmptyString) {
    delete img_url_;
  }
  if (this != default_instance_) {
  }
}

void OriginalProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginalProductInfo_descriptor_;
}

const OriginalProductInfo& OriginalProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OriginalProductInfo* OriginalProductInfo::default_instance_ = NULL;

OriginalProductInfo* OriginalProductInfo::New() const {
  return new OriginalProductInfo;
}

void OriginalProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_img_url()) {
      if (img_url_ != &::google::protobuf::internal::kEmptyString) {
        img_url_->clear();
      }
    }
    status_ = 0u;
    click_liked_times_ = 0u;
    comment_times_ = 0u;
    is_init_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OriginalProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_img_url;
        break;
      }

      // optional string img_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_img_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_img_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->img_url().data(), this->img_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_click_liked_times;
        break;
      }

      // optional uint32 click_liked_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_click_liked_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &click_liked_times_)));
          set_has_click_liked_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_comment_times;
        break;
      }

      // optional uint32 comment_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_comment_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &comment_times_)));
          set_has_comment_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_is_init;
        break;
      }

      // optional uint32 is_init = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_init:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_init_)));
          set_has_is_init();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OriginalProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional string img_url = 4;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->img_url(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  // optional uint32 click_liked_times = 6;
  if (has_click_liked_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->click_liked_times(), output);
  }

  // optional uint32 comment_times = 7;
  if (has_comment_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->comment_times(), output);
  }

  // optional uint32 is_init = 8;
  if (has_is_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->is_init(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OriginalProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional string img_url = 4;
  if (has_img_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->img_url().data(), this->img_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->img_url(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  // optional uint32 click_liked_times = 6;
  if (has_click_liked_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->click_liked_times(), target);
  }

  // optional uint32 comment_times = 7;
  if (has_comment_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->comment_times(), target);
  }

  // optional uint32 is_init = 8;
  if (has_is_init()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->is_init(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OriginalProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional string img_url = 4;
    if (has_img_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->img_url());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 click_liked_times = 6;
    if (has_click_liked_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->click_liked_times());
    }

    // optional uint32 comment_times = 7;
    if (has_comment_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->comment_times());
    }

    // optional uint32 is_init = 8;
    if (has_is_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_init());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OriginalProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OriginalProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OriginalProductInfo::MergeFrom(const OriginalProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_img_url()) {
      set_img_url(from.img_url());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_click_liked_times()) {
      set_click_liked_times(from.click_liked_times());
    }
    if (from.has_comment_times()) {
      set_comment_times(from.comment_times());
    }
    if (from.has_is_init()) {
      set_is_init(from.is_init());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OriginalProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalProductInfo::CopyFrom(const OriginalProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalProductInfo::IsInitialized() const {

  return true;
}

void OriginalProductInfo::Swap(OriginalProductInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(img_url_, other->img_url_);
    std::swap(status_, other->status_);
    std::swap(click_liked_times_, other->click_liked_times_);
    std::swap(comment_times_, other->comment_times_);
    std::swap(is_init_, other->is_init_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OriginalProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OriginalProductInfo_descriptor_;
  metadata.reflection = OriginalProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BindBankAccountInfo::kAccountNameFieldNumber;
const int BindBankAccountInfo::kCardNumberFieldNumber;
const int BindBankAccountInfo::kBindTimeFieldNumber;
#endif  // !_MSC_VER

BindBankAccountInfo::BindBankAccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BindBankAccountInfo::InitAsDefaultInstance() {
}

BindBankAccountInfo::BindBankAccountInfo(const BindBankAccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BindBankAccountInfo::SharedCtor() {
  _cached_size_ = 0;
  account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bind_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BindBankAccountInfo::~BindBankAccountInfo() {
  SharedDtor();
}

void BindBankAccountInfo::SharedDtor() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (this != default_instance_) {
  }
}

void BindBankAccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BindBankAccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BindBankAccountInfo_descriptor_;
}

const BindBankAccountInfo& BindBankAccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

BindBankAccountInfo* BindBankAccountInfo::default_instance_ = NULL;

BindBankAccountInfo* BindBankAccountInfo::New() const {
  return new BindBankAccountInfo;
}

void BindBankAccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account_name()) {
      if (account_name_ != &::google::protobuf::internal::kEmptyString) {
        account_name_->clear();
      }
    }
    if (has_card_number()) {
      if (card_number_ != &::google::protobuf::internal::kEmptyString) {
        card_number_->clear();
      }
    }
    bind_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BindBankAccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string account_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account_name().data(), this->account_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_card_number;
        break;
      }

      // required string card_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_card_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_card_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->card_number().data(), this->card_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind_time;
        break;
      }

      // required uint32 bind_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_time_)));
          set_has_bind_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BindBankAccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account_name(), output);
  }

  // required string card_number = 2;
  if (has_card_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->card_number(), output);
  }

  // required uint32 bind_time = 3;
  if (has_bind_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bind_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BindBankAccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string account_name = 1;
  if (has_account_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account_name().data(), this->account_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account_name(), target);
  }

  // required string card_number = 2;
  if (has_card_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->card_number().data(), this->card_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->card_number(), target);
  }

  // required uint32 bind_time = 3;
  if (has_bind_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bind_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BindBankAccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string account_name = 1;
    if (has_account_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account_name());
    }

    // required string card_number = 2;
    if (has_card_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->card_number());
    }

    // required uint32 bind_time = 3;
    if (has_bind_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BindBankAccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BindBankAccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BindBankAccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BindBankAccountInfo::MergeFrom(const BindBankAccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account_name()) {
      set_account_name(from.account_name());
    }
    if (from.has_card_number()) {
      set_card_number(from.card_number());
    }
    if (from.has_bind_time()) {
      set_bind_time(from.bind_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BindBankAccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BindBankAccountInfo::CopyFrom(const BindBankAccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BindBankAccountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BindBankAccountInfo::Swap(BindBankAccountInfo* other) {
  if (other != this) {
    std::swap(account_name_, other->account_name_);
    std::swap(card_number_, other->card_number_);
    std::swap(bind_time_, other->bind_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BindBankAccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BindBankAccountInfo_descriptor_;
  metadata.reflection = BindBankAccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OriginalProductProfitInfo::kNameFieldNumber;
const int OriginalProductProfitInfo::kProfitFieldNumber;
const int OriginalProductProfitInfo::kCountFieldNumber;
const int OriginalProductProfitInfo::kIdFieldNumber;
#endif  // !_MSC_VER

OriginalProductProfitInfo::OriginalProductProfitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OriginalProductProfitInfo::InitAsDefaultInstance() {
}

OriginalProductProfitInfo::OriginalProductProfitInfo(const OriginalProductProfitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OriginalProductProfitInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profit_ = 0;
  count_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OriginalProductProfitInfo::~OriginalProductProfitInfo() {
  SharedDtor();
}

void OriginalProductProfitInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OriginalProductProfitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalProductProfitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginalProductProfitInfo_descriptor_;
}

const OriginalProductProfitInfo& OriginalProductProfitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OriginalProductProfitInfo* OriginalProductProfitInfo::default_instance_ = NULL;

OriginalProductProfitInfo* OriginalProductProfitInfo::New() const {
  return new OriginalProductProfitInfo;
}

void OriginalProductProfitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profit_ = 0;
    count_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OriginalProductProfitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_profit;
        break;
      }

      // optional float profit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &profit_)));
          set_has_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OriginalProductProfitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional float profit = 2;
  if (has_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->profit(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OriginalProductProfitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float profit = 2;
  if (has_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->profit(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OriginalProductProfitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float profit = 2;
    if (has_profit()) {
      total_size += 1 + 4;
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalProductProfitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OriginalProductProfitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OriginalProductProfitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OriginalProductProfitInfo::MergeFrom(const OriginalProductProfitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profit()) {
      set_profit(from.profit());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OriginalProductProfitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalProductProfitInfo::CopyFrom(const OriginalProductProfitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalProductProfitInfo::IsInitialized() const {

  return true;
}

void OriginalProductProfitInfo::Swap(OriginalProductProfitInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(profit_, other->profit_);
    std::swap(count_, other->count_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OriginalProductProfitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OriginalProductProfitInfo_descriptor_;
  metadata.reflection = OriginalProductProfitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayOriginalProductProfit::kDateTimeFieldNumber;
const int DayOriginalProductProfit::kProfitListFieldNumber;
#endif  // !_MSC_VER

DayOriginalProductProfit::DayOriginalProductProfit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayOriginalProductProfit::InitAsDefaultInstance() {
}

DayOriginalProductProfit::DayOriginalProductProfit(const DayOriginalProductProfit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayOriginalProductProfit::SharedCtor() {
  _cached_size_ = 0;
  date_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayOriginalProductProfit::~DayOriginalProductProfit() {
  SharedDtor();
}

void DayOriginalProductProfit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayOriginalProductProfit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayOriginalProductProfit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayOriginalProductProfit_descriptor_;
}

const DayOriginalProductProfit& DayOriginalProductProfit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

DayOriginalProductProfit* DayOriginalProductProfit::default_instance_ = NULL;

DayOriginalProductProfit* DayOriginalProductProfit::New() const {
  return new DayOriginalProductProfit;
}

void DayOriginalProductProfit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_time_ = 0u;
  }
  profit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayOriginalProductProfit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profit_list;
        break;
      }

      // repeated .dgame.OriginalProductProfitInfo profit_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profit_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_profit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_profit_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayOriginalProductProfit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date_time = 1;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date_time(), output);
  }

  // repeated .dgame.OriginalProductProfitInfo profit_list = 2;
  for (int i = 0; i < this->profit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->profit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayOriginalProductProfit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date_time = 1;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date_time(), target);
  }

  // repeated .dgame.OriginalProductProfitInfo profit_list = 2;
  for (int i = 0; i < this->profit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->profit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayOriginalProductProfit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date_time = 1;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date_time());
    }

  }
  // repeated .dgame.OriginalProductProfitInfo profit_list = 2;
  total_size += 1 * this->profit_list_size();
  for (int i = 0; i < this->profit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->profit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayOriginalProductProfit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayOriginalProductProfit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayOriginalProductProfit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayOriginalProductProfit::MergeFrom(const DayOriginalProductProfit& from) {
  GOOGLE_CHECK_NE(&from, this);
  profit_list_.MergeFrom(from.profit_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayOriginalProductProfit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayOriginalProductProfit::CopyFrom(const DayOriginalProductProfit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayOriginalProductProfit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DayOriginalProductProfit::Swap(DayOriginalProductProfit* other) {
  if (other != this) {
    std::swap(date_time_, other->date_time_);
    profit_list_.Swap(&other->profit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayOriginalProductProfit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayOriginalProductProfit_descriptor_;
  metadata.reflection = DayOriginalProductProfit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OriginalProductProfitBaseInfo::kNameFieldNumber;
const int OriginalProductProfitBaseInfo::kTotalProfitFieldNumber;
const int OriginalProductProfitBaseInfo::kTotalCountFieldNumber;
const int OriginalProductProfitBaseInfo::kYesterdayTotalProfitFieldNumber;
const int OriginalProductProfitBaseInfo::kIdFieldNumber;
#endif  // !_MSC_VER

OriginalProductProfitBaseInfo::OriginalProductProfitBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OriginalProductProfitBaseInfo::InitAsDefaultInstance() {
}

OriginalProductProfitBaseInfo::OriginalProductProfitBaseInfo(const OriginalProductProfitBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OriginalProductProfitBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_profit_ = 0;
  total_count_ = 0u;
  yesterday_total_profit_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OriginalProductProfitBaseInfo::~OriginalProductProfitBaseInfo() {
  SharedDtor();
}

void OriginalProductProfitBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void OriginalProductProfitBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalProductProfitBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginalProductProfitBaseInfo_descriptor_;
}

const OriginalProductProfitBaseInfo& OriginalProductProfitBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OriginalProductProfitBaseInfo* OriginalProductProfitBaseInfo::default_instance_ = NULL;

OriginalProductProfitBaseInfo* OriginalProductProfitBaseInfo::New() const {
  return new OriginalProductProfitBaseInfo;
}

void OriginalProductProfitBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    total_profit_ = 0;
    total_count_ = 0u;
    yesterday_total_profit_ = 0;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OriginalProductProfitBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_total_profit;
        break;
      }

      // optional float total_profit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yesterday_total_profit;
        break;
      }

      // optional float yesterday_total_profit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yesterday_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yesterday_total_profit_)));
          set_has_yesterday_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OriginalProductProfitBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional float total_profit = 2;
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total_profit(), output);
  }

  // optional uint32 total_count = 3;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_count(), output);
  }

  // optional float yesterday_total_profit = 4;
  if (has_yesterday_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yesterday_total_profit(), output);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OriginalProductProfitBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float total_profit = 2;
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total_profit(), target);
  }

  // optional uint32 total_count = 3;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_count(), target);
  }

  // optional float yesterday_total_profit = 4;
  if (has_yesterday_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yesterday_total_profit(), target);
  }

  // optional uint32 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OriginalProductProfitBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float total_profit = 2;
    if (has_total_profit()) {
      total_size += 1 + 4;
    }

    // optional uint32 total_count = 3;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

    // optional float yesterday_total_profit = 4;
    if (has_yesterday_total_profit()) {
      total_size += 1 + 4;
    }

    // optional uint32 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalProductProfitBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OriginalProductProfitBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OriginalProductProfitBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OriginalProductProfitBaseInfo::MergeFrom(const OriginalProductProfitBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
    if (from.has_yesterday_total_profit()) {
      set_yesterday_total_profit(from.yesterday_total_profit());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OriginalProductProfitBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalProductProfitBaseInfo::CopyFrom(const OriginalProductProfitBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalProductProfitBaseInfo::IsInitialized() const {

  return true;
}

void OriginalProductProfitBaseInfo::Swap(OriginalProductProfitBaseInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_count_, other->total_count_);
    std::swap(yesterday_total_profit_, other->yesterday_total_profit_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OriginalProductProfitBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OriginalProductProfitBaseInfo_descriptor_;
  metadata.reflection = OriginalProductProfitBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayOriginalProductProfitBase::kDateTimeFieldNumber;
const int DayOriginalProductProfitBase::kTotalProfitFieldNumber;
const int DayOriginalProductProfitBase::kTotalCountFieldNumber;
#endif  // !_MSC_VER

DayOriginalProductProfitBase::DayOriginalProductProfitBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayOriginalProductProfitBase::InitAsDefaultInstance() {
}

DayOriginalProductProfitBase::DayOriginalProductProfitBase(const DayOriginalProductProfitBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayOriginalProductProfitBase::SharedCtor() {
  _cached_size_ = 0;
  date_time_ = 0u;
  total_profit_ = 0;
  total_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayOriginalProductProfitBase::~DayOriginalProductProfitBase() {
  SharedDtor();
}

void DayOriginalProductProfitBase::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayOriginalProductProfitBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayOriginalProductProfitBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayOriginalProductProfitBase_descriptor_;
}

const DayOriginalProductProfitBase& DayOriginalProductProfitBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

DayOriginalProductProfitBase* DayOriginalProductProfitBase::default_instance_ = NULL;

DayOriginalProductProfitBase* DayOriginalProductProfitBase::New() const {
  return new DayOriginalProductProfitBase;
}

void DayOriginalProductProfitBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    date_time_ = 0u;
    total_profit_ = 0;
    total_count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayOriginalProductProfitBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 date_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_time_)));
          set_has_date_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_total_profit;
        break;
      }

      // optional float total_profit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_total_profit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &total_profit_)));
          set_has_total_profit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_count;
        break;
      }

      // optional uint32 total_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_count_)));
          set_has_total_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayOriginalProductProfitBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 date_time = 1;
  if (has_date_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->date_time(), output);
  }

  // optional float total_profit = 2;
  if (has_total_profit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->total_profit(), output);
  }

  // optional uint32 total_count = 3;
  if (has_total_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayOriginalProductProfitBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 date_time = 1;
  if (has_date_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->date_time(), target);
  }

  // optional float total_profit = 2;
  if (has_total_profit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->total_profit(), target);
  }

  // optional uint32 total_count = 3;
  if (has_total_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayOriginalProductProfitBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 date_time = 1;
    if (has_date_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date_time());
    }

    // optional float total_profit = 2;
    if (has_total_profit()) {
      total_size += 1 + 4;
    }

    // optional uint32 total_count = 3;
    if (has_total_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayOriginalProductProfitBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayOriginalProductProfitBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayOriginalProductProfitBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayOriginalProductProfitBase::MergeFrom(const DayOriginalProductProfitBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date_time()) {
      set_date_time(from.date_time());
    }
    if (from.has_total_profit()) {
      set_total_profit(from.total_profit());
    }
    if (from.has_total_count()) {
      set_total_count(from.total_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayOriginalProductProfitBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayOriginalProductProfitBase::CopyFrom(const DayOriginalProductProfitBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayOriginalProductProfitBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DayOriginalProductProfitBase::Swap(DayOriginalProductProfitBase* other) {
  if (other != this) {
    std::swap(date_time_, other->date_time_);
    std::swap(total_profit_, other->total_profit_);
    std::swap(total_count_, other->total_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayOriginalProductProfitBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayOriginalProductProfitBase_descriptor_;
  metadata.reflection = DayOriginalProductProfitBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfitData::kTimeFieldNumber;
const int ProfitData::kMoneyFieldNumber;
const int ProfitData::kProfitTypeFieldNumber;
const int ProfitData::kNameFieldNumber;
const int ProfitData::kProfitSourceFieldNumber;
#endif  // !_MSC_VER

ProfitData::ProfitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfitData::InitAsDefaultInstance() {
}

ProfitData::ProfitData(const ProfitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfitData::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  money_ = 0;
  profit_type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profit_source_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfitData::~ProfitData() {
  SharedDtor();
}

void ProfitData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProfitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfitData_descriptor_;
}

const ProfitData& ProfitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProfitData* ProfitData::default_instance_ = NULL;

ProfitData* ProfitData::New() const {
  return new ProfitData;
}

void ProfitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    money_ = 0;
    profit_type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profit_source_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_money;
        break;
      }

      // required float money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profit_type;
        break;
      }

      // required uint32 profit_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profit_type_)));
          set_has_profit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profit_source;
        break;
      }

      // optional uint32 profit_source = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profit_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profit_source_)));
          set_has_profit_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // required float money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->money(), output);
  }

  // required uint32 profit_type = 3;
  if (has_profit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->profit_type(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 profit_source = 5;
  if (has_profit_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->profit_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // required float money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->money(), target);
  }

  // required uint32 profit_type = 3;
  if (has_profit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->profit_type(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 profit_source = 5;
  if (has_profit_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->profit_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required float money = 2;
    if (has_money()) {
      total_size += 1 + 4;
    }

    // required uint32 profit_type = 3;
    if (has_profit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profit_type());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 profit_source = 5;
    if (has_profit_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profit_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfitData::MergeFrom(const ProfitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_profit_type()) {
      set_profit_type(from.profit_type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profit_source()) {
      set_profit_source(from.profit_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfitData::CopyFrom(const ProfitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfitData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProfitData::Swap(ProfitData* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(money_, other->money_);
    std::swap(profit_type_, other->profit_type_);
    std::swap(name_, other->name_);
    std::swap(profit_source_, other->profit_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfitData_descriptor_;
  metadata.reflection = ProfitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CouponData::kCouponIdFieldNumber;
const int CouponData::kIsUseFieldNumber;
const int CouponData::kBeginTimeFieldNumber;
const int CouponData::kEndTimeFieldNumber;
const int CouponData::kCouponValueFieldNumber;
const int CouponData::kNeedCostFieldNumber;
const int CouponData::kUseTypeFieldNumber;
const int CouponData::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

CouponData::CouponData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CouponData::InitAsDefaultInstance() {
}

CouponData::CouponData(const CouponData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CouponData::SharedCtor() {
  _cached_size_ = 0;
  coupon_id_ = 0u;
  is_use_ = 0u;
  begin_time_ = 0u;
  end_time_ = 0u;
  coupon_value_ = 0u;
  need_cost_ = 0u;
  use_type_ = 0u;
  create_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CouponData::~CouponData() {
  SharedDtor();
}

void CouponData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CouponData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CouponData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CouponData_descriptor_;
}

const CouponData& CouponData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

CouponData* CouponData::default_instance_ = NULL;

CouponData* CouponData::New() const {
  return new CouponData;
}

void CouponData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coupon_id_ = 0u;
    is_use_ = 0u;
    begin_time_ = 0u;
    end_time_ = 0u;
    coupon_value_ = 0u;
    need_cost_ = 0u;
    use_type_ = 0u;
    create_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CouponData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 coupon_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupon_id_)));
          set_has_coupon_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_use;
        break;
      }

      // required uint32 is_use = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_use_)));
          set_has_is_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin_time;
        break;
      }

      // required uint32 begin_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end_time;
        break;
      }

      // required uint32 end_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coupon_value;
        break;
      }

      // required uint32 coupon_value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupon_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupon_value_)));
          set_has_coupon_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_need_cost;
        break;
      }

      // required uint32 need_cost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_need_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &need_cost_)));
          set_has_need_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_type;
        break;
      }

      // required uint32 use_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_type_)));
          set_has_use_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_create_time;
        break;
      }

      // required uint32 create_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CouponData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 coupon_id = 1;
  if (has_coupon_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coupon_id(), output);
  }

  // required uint32 is_use = 2;
  if (has_is_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->is_use(), output);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin_time(), output);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end_time(), output);
  }

  // required uint32 coupon_value = 5;
  if (has_coupon_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coupon_value(), output);
  }

  // required uint32 need_cost = 6;
  if (has_need_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->need_cost(), output);
  }

  // required uint32 use_type = 7;
  if (has_use_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->use_type(), output);
  }

  // required uint32 create_time = 8;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CouponData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 coupon_id = 1;
  if (has_coupon_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coupon_id(), target);
  }

  // required uint32 is_use = 2;
  if (has_is_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->is_use(), target);
  }

  // required uint32 begin_time = 3;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin_time(), target);
  }

  // required uint32 end_time = 4;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end_time(), target);
  }

  // required uint32 coupon_value = 5;
  if (has_coupon_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->coupon_value(), target);
  }

  // required uint32 need_cost = 6;
  if (has_need_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->need_cost(), target);
  }

  // required uint32 use_type = 7;
  if (has_use_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->use_type(), target);
  }

  // required uint32 create_time = 8;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CouponData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 coupon_id = 1;
    if (has_coupon_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupon_id());
    }

    // required uint32 is_use = 2;
    if (has_is_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_use());
    }

    // required uint32 begin_time = 3;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin_time());
    }

    // required uint32 end_time = 4;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_time());
    }

    // required uint32 coupon_value = 5;
    if (has_coupon_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupon_value());
    }

    // required uint32 need_cost = 6;
    if (has_need_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->need_cost());
    }

    // required uint32 use_type = 7;
    if (has_use_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_type());
    }

    // required uint32 create_time = 8;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->create_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CouponData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CouponData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CouponData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CouponData::MergeFrom(const CouponData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coupon_id()) {
      set_coupon_id(from.coupon_id());
    }
    if (from.has_is_use()) {
      set_is_use(from.is_use());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_coupon_value()) {
      set_coupon_value(from.coupon_value());
    }
    if (from.has_need_cost()) {
      set_need_cost(from.need_cost());
    }
    if (from.has_use_type()) {
      set_use_type(from.use_type());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CouponData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CouponData::CopyFrom(const CouponData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CouponData::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CouponData::Swap(CouponData* other) {
  if (other != this) {
    std::swap(coupon_id_, other->coupon_id_);
    std::swap(is_use_, other->is_use_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(coupon_value_, other->coupon_value_);
    std::swap(need_cost_, other->need_cost_);
    std::swap(use_type_, other->use_type_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CouponData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CouponData_descriptor_;
  metadata.reflection = CouponData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OriginalProductPartInfo::kPartIdFieldNumber;
const int OriginalProductPartInfo::kMaterialsListFieldNumber;
#endif  // !_MSC_VER

OriginalProductPartInfo::OriginalProductPartInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OriginalProductPartInfo::InitAsDefaultInstance() {
}

OriginalProductPartInfo::OriginalProductPartInfo(const OriginalProductPartInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OriginalProductPartInfo::SharedCtor() {
  _cached_size_ = 0;
  part_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OriginalProductPartInfo::~OriginalProductPartInfo() {
  SharedDtor();
}

void OriginalProductPartInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OriginalProductPartInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalProductPartInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginalProductPartInfo_descriptor_;
}

const OriginalProductPartInfo& OriginalProductPartInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OriginalProductPartInfo* OriginalProductPartInfo::default_instance_ = NULL;

OriginalProductPartInfo* OriginalProductPartInfo::New() const {
  return new OriginalProductPartInfo;
}

void OriginalProductPartInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_id_ = 0u;
  }
  materials_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OriginalProductPartInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 part_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_id_)));
          set_has_part_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_materials_list;
        break;
      }

      // repeated uint32 materials_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_materials_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_materials_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_materials_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OriginalProductPartInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 part_id = 1;
  if (has_part_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->part_id(), output);
  }

  // repeated uint32 materials_list = 2;
  for (int i = 0; i < this->materials_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->materials_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OriginalProductPartInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 part_id = 1;
  if (has_part_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->part_id(), target);
  }

  // repeated uint32 materials_list = 2;
  for (int i = 0; i < this->materials_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->materials_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OriginalProductPartInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 part_id = 1;
    if (has_part_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part_id());
    }

  }
  // repeated uint32 materials_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->materials_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->materials_list(i));
    }
    total_size += 1 * this->materials_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalProductPartInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OriginalProductPartInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OriginalProductPartInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OriginalProductPartInfo::MergeFrom(const OriginalProductPartInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_list_.MergeFrom(from.materials_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part_id()) {
      set_part_id(from.part_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OriginalProductPartInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalProductPartInfo::CopyFrom(const OriginalProductPartInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalProductPartInfo::IsInitialized() const {

  return true;
}

void OriginalProductPartInfo::Swap(OriginalProductPartInfo* other) {
  if (other != this) {
    std::swap(part_id_, other->part_id_);
    materials_list_.Swap(&other->materials_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OriginalProductPartInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OriginalProductPartInfo_descriptor_;
  metadata.reflection = OriginalProductPartInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OriginalProductDetail::kIdFieldNumber;
const int OriginalProductDetail::kNameFieldNumber;
const int OriginalProductDetail::kUrlFieldNumber;
const int OriginalProductDetail::kDescFieldNumber;
const int OriginalProductDetail::kStyleListFieldNumber;
const int OriginalProductDetail::kColorFieldNumber;
const int OriginalProductDetail::kMaterialsFieldNumber;
const int OriginalProductDetail::kModelFieldNumber;
const int OriginalProductDetail::kSeasonListFieldNumber;
const int OriginalProductDetail::kTypeFieldNumber;
const int OriginalProductDetail::kPartListFieldNumber;
const int OriginalProductDetail::kIsCanModifyLiningFieldNumber;
const int OriginalProductDetail::kSketchFrontUrlFieldNumber;
const int OriginalProductDetail::kSketchBackUrlFieldNumber;
const int OriginalProductDetail::kSketchDescFieldNumber;
#endif  // !_MSC_VER

OriginalProductDetail::OriginalProductDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OriginalProductDetail::InitAsDefaultInstance() {
}

OriginalProductDetail::OriginalProductDetail(const OriginalProductDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OriginalProductDetail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  color_ = 0u;
  materials_ = 0u;
  model_ = 0u;
  type_ = 0u;
  is_can_modify_lining_ = 0u;
  sketch_front_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sketch_back_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sketch_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OriginalProductDetail::~OriginalProductDetail() {
  SharedDtor();
}

void OriginalProductDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (sketch_front_url_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_front_url_;
  }
  if (sketch_back_url_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_back_url_;
  }
  if (sketch_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete sketch_desc_;
  }
  if (this != default_instance_) {
  }
}

void OriginalProductDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OriginalProductDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginalProductDetail_descriptor_;
}

const OriginalProductDetail& OriginalProductDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

OriginalProductDetail* OriginalProductDetail::default_instance_ = NULL;

OriginalProductDetail* OriginalProductDetail::New() const {
  return new OriginalProductDetail;
}

void OriginalProductDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    color_ = 0u;
    materials_ = 0u;
    model_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    type_ = 0u;
    is_can_modify_lining_ = 0u;
    if (has_sketch_front_url()) {
      if (sketch_front_url_ != &::google::protobuf::internal::kEmptyString) {
        sketch_front_url_->clear();
      }
    }
    if (has_sketch_back_url()) {
      if (sketch_back_url_ != &::google::protobuf::internal::kEmptyString) {
        sketch_back_url_->clear();
      }
    }
    if (has_sketch_desc()) {
      if (sketch_desc_ != &::google::protobuf::internal::kEmptyString) {
        sketch_desc_->clear();
      }
    }
  }
  style_list_.Clear();
  season_list_.Clear();
  part_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OriginalProductDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_url;
        break;
      }

      // optional string url = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url().data(), this->url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_style_list;
        break;
      }

      // repeated uint32 style_list = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_style_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_style_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_style_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_style_list;
        if (input->ExpectTag(48)) goto parse_color;
        break;
      }

      // optional uint32 color = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_materials;
        break;
      }

      // optional uint32 materials = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_materials:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &materials_)));
          set_has_materials();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_model;
        break;
      }

      // optional uint32 model = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_model:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &model_)));
          set_has_model();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_season_list;
        break;
      }

      // repeated uint32 season_list = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_season_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_season_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_season_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_season_list;
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }

      // optional uint32 type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_part_list;
        break;
      }

      // repeated .dgame.OriginalProductPartInfo part_list = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_part_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_part_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_part_list;
        if (input->ExpectTag(96)) goto parse_is_can_modify_lining;
        break;
      }

      // optional uint32 is_can_modify_lining = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_can_modify_lining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &is_can_modify_lining_)));
          set_has_is_can_modify_lining();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_sketch_front_url;
        break;
      }

      // optional string sketch_front_url = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch_front_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sketch_front_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sketch_front_url().data(), this->sketch_front_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_sketch_back_url;
        break;
      }

      // optional string sketch_back_url = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch_back_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sketch_back_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sketch_back_url().data(), this->sketch_back_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_sketch_desc;
        break;
      }

      // optional string sketch_desc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sketch_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sketch_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sketch_desc().data(), this->sketch_desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OriginalProductDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->url(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // repeated uint32 style_list = 5;
  for (int i = 0; i < this->style_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->style_list(i), output);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->color(), output);
  }

  // optional uint32 materials = 7;
  if (has_materials()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->materials(), output);
  }

  // optional uint32 model = 8;
  if (has_model()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->model(), output);
  }

  // repeated uint32 season_list = 9;
  for (int i = 0; i < this->season_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->season_list(i), output);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->type(), output);
  }

  // repeated .dgame.OriginalProductPartInfo part_list = 11;
  for (int i = 0; i < this->part_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->part_list(i), output);
  }

  // optional uint32 is_can_modify_lining = 12;
  if (has_is_can_modify_lining()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->is_can_modify_lining(), output);
  }

  // optional string sketch_front_url = 13;
  if (has_sketch_front_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_front_url().data(), this->sketch_front_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->sketch_front_url(), output);
  }

  // optional string sketch_back_url = 14;
  if (has_sketch_back_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_back_url().data(), this->sketch_back_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->sketch_back_url(), output);
  }

  // optional string sketch_desc = 15;
  if (has_sketch_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_desc().data(), this->sketch_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->sketch_desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OriginalProductDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string url = 3;
  if (has_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url().data(), this->url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->url(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // repeated uint32 style_list = 5;
  for (int i = 0; i < this->style_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->style_list(i), target);
  }

  // optional uint32 color = 6;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->color(), target);
  }

  // optional uint32 materials = 7;
  if (has_materials()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->materials(), target);
  }

  // optional uint32 model = 8;
  if (has_model()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->model(), target);
  }

  // repeated uint32 season_list = 9;
  for (int i = 0; i < this->season_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(9, this->season_list(i), target);
  }

  // optional uint32 type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->type(), target);
  }

  // repeated .dgame.OriginalProductPartInfo part_list = 11;
  for (int i = 0; i < this->part_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->part_list(i), target);
  }

  // optional uint32 is_can_modify_lining = 12;
  if (has_is_can_modify_lining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->is_can_modify_lining(), target);
  }

  // optional string sketch_front_url = 13;
  if (has_sketch_front_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_front_url().data(), this->sketch_front_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sketch_front_url(), target);
  }

  // optional string sketch_back_url = 14;
  if (has_sketch_back_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_back_url().data(), this->sketch_back_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->sketch_back_url(), target);
  }

  // optional string sketch_desc = 15;
  if (has_sketch_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sketch_desc().data(), this->sketch_desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->sketch_desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OriginalProductDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string url = 3;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 color = 6;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional uint32 materials = 7;
    if (has_materials()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->materials());
    }

    // optional uint32 model = 8;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->model());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 is_can_modify_lining = 12;
    if (has_is_can_modify_lining()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->is_can_modify_lining());
    }

    // optional string sketch_front_url = 13;
    if (has_sketch_front_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sketch_front_url());
    }

    // optional string sketch_back_url = 14;
    if (has_sketch_back_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sketch_back_url());
    }

    // optional string sketch_desc = 15;
    if (has_sketch_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sketch_desc());
    }

  }
  // repeated uint32 style_list = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->style_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->style_list(i));
    }
    total_size += 1 * this->style_list_size() + data_size;
  }

  // repeated uint32 season_list = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->season_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->season_list(i));
    }
    total_size += 1 * this->season_list_size() + data_size;
  }

  // repeated .dgame.OriginalProductPartInfo part_list = 11;
  total_size += 1 * this->part_list_size();
  for (int i = 0; i < this->part_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->part_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OriginalProductDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OriginalProductDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OriginalProductDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OriginalProductDetail::MergeFrom(const OriginalProductDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  style_list_.MergeFrom(from.style_list_);
  season_list_.MergeFrom(from.season_list_);
  part_list_.MergeFrom(from.part_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_materials()) {
      set_materials(from.materials());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_can_modify_lining()) {
      set_is_can_modify_lining(from.is_can_modify_lining());
    }
    if (from.has_sketch_front_url()) {
      set_sketch_front_url(from.sketch_front_url());
    }
    if (from.has_sketch_back_url()) {
      set_sketch_back_url(from.sketch_back_url());
    }
    if (from.has_sketch_desc()) {
      set_sketch_desc(from.sketch_desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OriginalProductDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OriginalProductDetail::CopyFrom(const OriginalProductDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginalProductDetail::IsInitialized() const {

  return true;
}

void OriginalProductDetail::Swap(OriginalProductDetail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(url_, other->url_);
    std::swap(desc_, other->desc_);
    style_list_.Swap(&other->style_list_);
    std::swap(color_, other->color_);
    std::swap(materials_, other->materials_);
    std::swap(model_, other->model_);
    season_list_.Swap(&other->season_list_);
    std::swap(type_, other->type_);
    part_list_.Swap(&other->part_list_);
    std::swap(is_can_modify_lining_, other->is_can_modify_lining_);
    std::swap(sketch_front_url_, other->sketch_front_url_);
    std::swap(sketch_back_url_, other->sketch_back_url_);
    std::swap(sketch_desc_, other->sketch_desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OriginalProductDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OriginalProductDetail_descriptor_;
  metadata.reflection = OriginalProductDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeInfo::kTimeFieldNumber;
const int TradeInfo::kTypeFieldNumber;
const int TradeInfo::kValueFieldNumber;
#endif  // !_MSC_VER

TradeInfo::TradeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeInfo::InitAsDefaultInstance() {
}

TradeInfo::TradeInfo(const TradeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  type_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeInfo::~TradeInfo() {
  SharedDtor();
}

void TradeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TradeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeInfo_descriptor_;
}

const TradeInfo& TradeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

TradeInfo* TradeInfo::default_instance_ = NULL;

TradeInfo* TradeInfo::New() const {
  return new TradeInfo;
}

void TradeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
    type_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeInfo::MergeFrom(const TradeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeInfo::CopyFrom(const TradeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeInfo::IsInitialized() const {

  return true;
}

void TradeInfo::Swap(TradeInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeInfo_descriptor_;
  metadata.reflection = TradeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductSpaceCategoryInfo::kCategoryIdFieldNumber;
const int ProductSpaceCategoryInfo::kCategoryChildListFieldNumber;
#endif  // !_MSC_VER

ProductSpaceCategoryInfo::ProductSpaceCategoryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductSpaceCategoryInfo::InitAsDefaultInstance() {
}

ProductSpaceCategoryInfo::ProductSpaceCategoryInfo(const ProductSpaceCategoryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductSpaceCategoryInfo::SharedCtor() {
  _cached_size_ = 0;
  category_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductSpaceCategoryInfo::~ProductSpaceCategoryInfo() {
  SharedDtor();
}

void ProductSpaceCategoryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProductSpaceCategoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductSpaceCategoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductSpaceCategoryInfo_descriptor_;
}

const ProductSpaceCategoryInfo& ProductSpaceCategoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProductSpaceCategoryInfo* ProductSpaceCategoryInfo::default_instance_ = NULL;

ProductSpaceCategoryInfo* ProductSpaceCategoryInfo::New() const {
  return new ProductSpaceCategoryInfo;
}

void ProductSpaceCategoryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    category_id_ = 0u;
  }
  category_child_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductSpaceCategoryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 category_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &category_id_)));
          set_has_category_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category_child_list;
        break;
      }

      // repeated uint32 category_child_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category_child_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_category_child_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_category_child_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category_child_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductSpaceCategoryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 category_id = 1;
  if (has_category_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->category_id(), output);
  }

  // repeated uint32 category_child_list = 2;
  for (int i = 0; i < this->category_child_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->category_child_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductSpaceCategoryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 category_id = 1;
  if (has_category_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->category_id(), target);
  }

  // repeated uint32 category_child_list = 2;
  for (int i = 0; i < this->category_child_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->category_child_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductSpaceCategoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 category_id = 1;
    if (has_category_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->category_id());
    }

  }
  // repeated uint32 category_child_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->category_child_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->category_child_list(i));
    }
    total_size += 1 * this->category_child_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductSpaceCategoryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductSpaceCategoryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductSpaceCategoryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductSpaceCategoryInfo::MergeFrom(const ProductSpaceCategoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  category_child_list_.MergeFrom(from.category_child_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_category_id()) {
      set_category_id(from.category_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductSpaceCategoryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductSpaceCategoryInfo::CopyFrom(const ProductSpaceCategoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSpaceCategoryInfo::IsInitialized() const {

  return true;
}

void ProductSpaceCategoryInfo::Swap(ProductSpaceCategoryInfo* other) {
  if (other != this) {
    std::swap(category_id_, other->category_id_);
    category_child_list_.Swap(&other->category_child_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductSpaceCategoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductSpaceCategoryInfo_descriptor_;
  metadata.reflection = ProductSpaceCategoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProductSpaceProductInfo::kPnameFieldNumber;
const int ProductSpaceProductInfo::kPdescFieldNumber;
const int ProductSpaceProductInfo::kPauthorFieldNumber;
const int ProductSpaceProductInfo::kPictureUrlFieldNumber;
#endif  // !_MSC_VER

ProductSpaceProductInfo::ProductSpaceProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProductSpaceProductInfo::InitAsDefaultInstance() {
}

ProductSpaceProductInfo::ProductSpaceProductInfo(const ProductSpaceProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProductSpaceProductInfo::SharedCtor() {
  _cached_size_ = 0;
  pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProductSpaceProductInfo::~ProductSpaceProductInfo() {
  SharedDtor();
}

void ProductSpaceProductInfo::SharedDtor() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pdesc_;
  }
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    delete pauthor_;
  }
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (this != default_instance_) {
  }
}

void ProductSpaceProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProductSpaceProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProductSpaceProductInfo_descriptor_;
}

const ProductSpaceProductInfo& ProductSpaceProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

ProductSpaceProductInfo* ProductSpaceProductInfo::default_instance_ = NULL;

ProductSpaceProductInfo* ProductSpaceProductInfo::New() const {
  return new ProductSpaceProductInfo;
}

void ProductSpaceProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pname()) {
      if (pname_ != &::google::protobuf::internal::kEmptyString) {
        pname_->clear();
      }
    }
    if (has_pdesc()) {
      if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
        pdesc_->clear();
      }
    }
    if (has_pauthor()) {
      if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
        pauthor_->clear();
      }
    }
    if (has_picture_url()) {
      if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
        picture_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProductSpaceProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pname().data(), this->pname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdesc;
        break;
      }

      // optional string pdesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdesc().data(), this->pdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pauthor;
        break;
      }

      // optional string pauthor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pauthor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pauthor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pauthor().data(), this->pauthor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_picture_url;
        break;
      }

      // optional string picture_url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_url().data(), this->picture_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProductSpaceProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pname = 1;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pname().data(), this->pname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pname(), output);
  }

  // optional string pdesc = 2;
  if (has_pdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdesc().data(), this->pdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pdesc(), output);
  }

  // optional string pauthor = 3;
  if (has_pauthor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pauthor().data(), this->pauthor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->pauthor(), output);
  }

  // optional string picture_url = 4;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->picture_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProductSpaceProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pname = 1;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pname().data(), this->pname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pname(), target);
  }

  // optional string pdesc = 2;
  if (has_pdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdesc().data(), this->pdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pdesc(), target);
  }

  // optional string pauthor = 3;
  if (has_pauthor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pauthor().data(), this->pauthor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pauthor(), target);
  }

  // optional string picture_url = 4;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->picture_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProductSpaceProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pname = 1;
    if (has_pname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pname());
    }

    // optional string pdesc = 2;
    if (has_pdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdesc());
    }

    // optional string pauthor = 3;
    if (has_pauthor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pauthor());
    }

    // optional string picture_url = 4;
    if (has_picture_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProductSpaceProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProductSpaceProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProductSpaceProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProductSpaceProductInfo::MergeFrom(const ProductSpaceProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pname()) {
      set_pname(from.pname());
    }
    if (from.has_pdesc()) {
      set_pdesc(from.pdesc());
    }
    if (from.has_pauthor()) {
      set_pauthor(from.pauthor());
    }
    if (from.has_picture_url()) {
      set_picture_url(from.picture_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProductSpaceProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductSpaceProductInfo::CopyFrom(const ProductSpaceProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductSpaceProductInfo::IsInitialized() const {

  return true;
}

void ProductSpaceProductInfo::Swap(ProductSpaceProductInfo* other) {
  if (other != this) {
    std::swap(pname_, other->pname_);
    std::swap(pdesc_, other->pdesc_);
    std::swap(pauthor_, other->pauthor_);
    std::swap(picture_url_, other->picture_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProductSpaceProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProductSpaceProductInfo_descriptor_;
  metadata.reflection = ProductSpaceProductInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CooperationProductInfo::kPnameFieldNumber;
const int CooperationProductInfo::kPdescFieldNumber;
const int CooperationProductInfo::kTimeFieldNumber;
const int CooperationProductInfo::kCodesignStatusListFieldNumber;
const int CooperationProductInfo::kCodesignFinistatusFieldNumber;
const int CooperationProductInfo::kPauthorFieldNumber;
const int CooperationProductInfo::kPictureUrlFieldNumber;
#endif  // !_MSC_VER

CooperationProductInfo::CooperationProductInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CooperationProductInfo::InitAsDefaultInstance() {
}

CooperationProductInfo::CooperationProductInfo(const CooperationProductInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CooperationProductInfo::SharedCtor() {
  _cached_size_ = 0;
  pname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  codesign_finistatus_ = 0u;
  pauthor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  picture_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CooperationProductInfo::~CooperationProductInfo() {
  SharedDtor();
}

void CooperationProductInfo::SharedDtor() {
  if (pname_ != &::google::protobuf::internal::kEmptyString) {
    delete pname_;
  }
  if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pdesc_;
  }
  if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
    delete pauthor_;
  }
  if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_url_;
  }
  if (this != default_instance_) {
  }
}

void CooperationProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CooperationProductInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CooperationProductInfo_descriptor_;
}

const CooperationProductInfo& CooperationProductInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dgame_5fdefine_2eproto();
  return *default_instance_;
}

CooperationProductInfo* CooperationProductInfo::default_instance_ = NULL;

CooperationProductInfo* CooperationProductInfo::New() const {
  return new CooperationProductInfo;
}

void CooperationProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pname()) {
      if (pname_ != &::google::protobuf::internal::kEmptyString) {
        pname_->clear();
      }
    }
    if (has_pdesc()) {
      if (pdesc_ != &::google::protobuf::internal::kEmptyString) {
        pdesc_->clear();
      }
    }
    time_ = 0u;
    codesign_finistatus_ = 0u;
    if (has_pauthor()) {
      if (pauthor_ != &::google::protobuf::internal::kEmptyString) {
        pauthor_->clear();
      }
    }
    if (has_picture_url()) {
      if (picture_url_ != &::google::protobuf::internal::kEmptyString) {
        picture_url_->clear();
      }
    }
  }
  codesign_status_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CooperationProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pname().data(), this->pname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pdesc;
        break;
      }

      // optional string pdesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pdesc().data(), this->pdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_codesign_status_list;
        break;
      }

      // repeated uint32 codesign_status_list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codesign_status_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_codesign_status_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_codesign_status_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_codesign_status_list;
        if (input->ExpectTag(40)) goto parse_codesign_finistatus;
        break;
      }

      // required uint32 codesign_finistatus = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_codesign_finistatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &codesign_finistatus_)));
          set_has_codesign_finistatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pauthor;
        break;
      }

      // optional string pauthor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pauthor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pauthor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pauthor().data(), this->pauthor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_picture_url;
        break;
      }

      // optional string picture_url = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_picture_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->picture_url().data(), this->picture_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CooperationProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pname = 1;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pname().data(), this->pname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pname(), output);
  }

  // optional string pdesc = 2;
  if (has_pdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdesc().data(), this->pdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pdesc(), output);
  }

  // required uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // repeated uint32 codesign_status_list = 4;
  for (int i = 0; i < this->codesign_status_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->codesign_status_list(i), output);
  }

  // required uint32 codesign_finistatus = 5;
  if (has_codesign_finistatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->codesign_finistatus(), output);
  }

  // optional string pauthor = 6;
  if (has_pauthor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pauthor().data(), this->pauthor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->pauthor(), output);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->picture_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CooperationProductInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pname = 1;
  if (has_pname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pname().data(), this->pname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pname(), target);
  }

  // optional string pdesc = 2;
  if (has_pdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pdesc().data(), this->pdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pdesc(), target);
  }

  // required uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // repeated uint32 codesign_status_list = 4;
  for (int i = 0; i < this->codesign_status_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->codesign_status_list(i), target);
  }

  // required uint32 codesign_finistatus = 5;
  if (has_codesign_finistatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->codesign_finistatus(), target);
  }

  // optional string pauthor = 6;
  if (has_pauthor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pauthor().data(), this->pauthor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->pauthor(), target);
  }

  // optional string picture_url = 7;
  if (has_picture_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->picture_url().data(), this->picture_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->picture_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CooperationProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pname = 1;
    if (has_pname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pname());
    }

    // optional string pdesc = 2;
    if (has_pdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pdesc());
    }

    // required uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 codesign_finistatus = 5;
    if (has_codesign_finistatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->codesign_finistatus());
    }

    // optional string pauthor = 6;
    if (has_pauthor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pauthor());
    }

    // optional string picture_url = 7;
    if (has_picture_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture_url());
    }

  }
  // repeated uint32 codesign_status_list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->codesign_status_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->codesign_status_list(i));
    }
    total_size += 1 * this->codesign_status_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CooperationProductInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CooperationProductInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CooperationProductInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CooperationProductInfo::MergeFrom(const CooperationProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  codesign_status_list_.MergeFrom(from.codesign_status_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pname()) {
      set_pname(from.pname());
    }
    if (from.has_pdesc()) {
      set_pdesc(from.pdesc());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_codesign_finistatus()) {
      set_codesign_finistatus(from.codesign_finistatus());
    }
    if (from.has_pauthor()) {
      set_pauthor(from.pauthor());
    }
    if (from.has_picture_url()) {
      set_picture_url(from.picture_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CooperationProductInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CooperationProductInfo::CopyFrom(const CooperationProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CooperationProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000014) != 0x00000014) return false;

  return true;
}

void CooperationProductInfo::Swap(CooperationProductInfo* other) {
  if (other != this) {
    std::swap(pname_, other->pname_);
    std::swap(pdesc_, other->pdesc_);
    std::swap(time_, other->time_);
    codesign_status_list_.Swap(&other->codesign_status_list_);
    std::swap(codesign_finistatus_, other->codesign_finistatus_);
    std::swap(pauthor_, other->pauthor_);
    std::swap(picture_url_, other->picture_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CooperationProductInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CooperationProductInfo_descriptor_;
  metadata.reflection = CooperationProductInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace dgame

// @@protoc_insertion_point(global_scope)
