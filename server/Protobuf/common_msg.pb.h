// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_msg.proto

#ifndef PROTOBUF_common_5fmsg_2eproto__INCLUDED
#define PROTOBUF_common_5fmsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dgame_define.pb.h"
// @@protoc_insertion_point(includes)

namespace CS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_5fmsg_2eproto();
void protobuf_AssignDesc_common_5fmsg_2eproto();
void protobuf_ShutdownFile_common_5fmsg_2eproto();

class MapPos;
class OtherUserInfo;
class Msg_HeartBeat_C2S;
class Msg_HeartBeat_S2C;
class Msg_TargetServerInvalid_S2C;
class Msg_OtherUserList_G2C;
class Msg_UserEnterScene_C2G;
class Msg_UserLeaveScene_C2G;
class Msg_UserLeaveScene_G2C;
class Msg_Goto_C2G;
class Msg_Goto_G2C;
class Msg_Equipment_C2S;
class Msg_Equipment_S2C;
class Msg_GM_C2S;
class Msg_UserBaseInfoModify_C2S;
class Msg_UserBaseInfoModify_S2C;
class Msg_UserInfoModify_C2S;
class Msg_UserInfoModify_S2C;
class Msg_DesignProduct_C2S;
class Msg_DesignProduct_S2C;
class Msg_UserProductList_C2S;
class Msg_UserProductList_S2C;
class Msg_UserProductDetail_C2S;
class Msg_UserProductDetail_S2C;
class Msg_ServerTime_C2S;
class Msg_ServerTime_S2C;
class Msg_GoodsRecommend_C2S;
class Msg_GoodsRecommend_S2C;
class Msg_GoodsSearch_C2S;
class Msg_GoodsSearch_S2C;
class Msg_Chat_C2S;
class Msg_Chat_S2C;
class Msg_Chat_Notify_S2C;
class Msg_CreateOrder_C2S;
class Msg_CreateOrder_S2C;
class Msg_AddItemToShoppingCart_C2S;
class Msg_AddItemToShoppingCart_S2C;
class Msg_ShoppingCartItemList_C2S;
class Msg_ShoppingCartItemList_S2C;
class Msg_Feedback_C2S;
class Msg_Feedback_S2C;
class Msg_DesignerApply_C2S;
class Msg_DesignerApply_S2C;
class Msg_ProductSketchUpload_C2S;
class Msg_ProductSketchUpload_S2C;
class Msg_PointSourceList_C2S;
class Msg_PointSourceList_S2C;
class Msg_WithdrawMoney_C2S;
class Msg_WithdrawMoney_S2C;
class Msg_MyOriginalProductList_C2S;
class Msg_MyOriginalProductList_S2C;
class Msg_BindBankAccount_C2S;
class Msg_BindBankAccount_S2C;
class Msg_BindBankAccountList_C2S;
class Msg_BindBankAccountList_S2C;
class Msg_OriginalProductProfitList_C2S;
class Msg_OriginalProductProfitList_S2C;
class Msg_OriginalProductProfitDetailList_C2S;
class Msg_OriginalProductProfitDetailList_S2C;
class Msg_OriginalProductProfitDetail_C2S;
class Msg_OriginalProductProfitDetail_S2C;
class Msg_OriginalProductDetail_C2S;
class Msg_OriginalProductDetail_S2C;
class Msg_OriginalProductModify_C2S;
class Msg_OriginalProductModify_S2C;
class Msg_ProfitList_C2S;
class Msg_ProfitList_S2C;
class Msg_Gold2Money_C2S;
class Msg_Gold2Money_S2C;
class Msg_CouponList_C2S;
class Msg_CouponList_S2C;
class Msg_GlodPercent_C2S;
class Msg_GlodPercent_S2C;
class Msg_TradeDetailList_C2S;
class Msg_TradeDetailList_S2C;
class Msg_PrePayOrderCreate_C2S;
class Msg_PrePayOrderCreate_S2C;
class Msg_ProductSpace_C2S;
class Msg_ProductSpace_S2C;
class OrderInfo;
class Order;
class OrderGoods;
class OrderReceiver;
class OrderInvoice;
class OrderLog;
class OrderQuery;
class query_all_order_req;
class query_all_order_res;
class query_con_order_req;
class query_con_order_res;
class query_single_order_req;
class query_single_order_res;
class Msg_CooperationProductSpace_C2S;
class Msg_CooperationProductSpace_S2C;
class PayReq;
class PayResp;
class CreateOrderReq;
class Goods;
class GoodsPart;
class CreateOrderRes;
class GoodsProductStatusReq;
class GoodsProductStatusRes;
class ChooseOrderPayWayReq;
class ChooseOrderPayWayRes;
class DeleteOrderReq;
class DeleteOrderRes;
class CancelOrderReq;
class CancelOrderRes;
class ConfirmGrOrderReq;
class ConfirmGrOrderRes;
class JudgeOrderReq;
class JudgeOrderRes;
class GoodsJudge;
class DelayOrderReq;
class DelayOrderRes;
class OpusReq;
class OwnOpusReq;
class OpusBo;
class OpusCoopReq;
class PublishOpusCoopReq;
class AddOpusCoopReq;
class OpusCoopBo;
class PaySyncResultReq;
class PaySyncResultResp;
class UserReceiver;
class queryUserReceiverReq;
class queryUserReceiverRes;
class createUserReceiverReq;
class createUserReceiverRes;
class updateUserReceiverReq;
class updateUserReceiverRes;
class createDefaultUserReceiverReq;
class createDefaultUserReceiverRes;
class deleteUserReceiverReq;
class deleteUserReceiverRes;
class Area;
class queryAreaFirstReq;
class queryAreaFirstResp;
class queryAreaSecondReq;
class queryAreaSecondResp;
class queryAreaThreeReq;
class queryAreaThreeResp;

enum CreateOrderReq_PayType {
  CreateOrderReq_PayType_ZFB = 1,
  CreateOrderReq_PayType_WECHAT = 2
};
bool CreateOrderReq_PayType_IsValid(int value);
const CreateOrderReq_PayType CreateOrderReq_PayType_PayType_MIN = CreateOrderReq_PayType_ZFB;
const CreateOrderReq_PayType CreateOrderReq_PayType_PayType_MAX = CreateOrderReq_PayType_WECHAT;
const int CreateOrderReq_PayType_PayType_ARRAYSIZE = CreateOrderReq_PayType_PayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateOrderReq_PayType_descriptor();
inline const ::std::string& CreateOrderReq_PayType_Name(CreateOrderReq_PayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateOrderReq_PayType_descriptor(), value);
}
inline bool CreateOrderReq_PayType_Parse(
    const ::std::string& name, CreateOrderReq_PayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateOrderReq_PayType>(
    CreateOrderReq_PayType_descriptor(), name, value);
}
enum GoodsProductStatusRes_ProductStatus {
  GoodsProductStatusRes_ProductStatus_WAIT_PRODUCTION = 1,
  GoodsProductStatusRes_ProductStatus_PRODUCTING = 2,
  GoodsProductStatusRes_ProductStatus_WIRING = 3,
  GoodsProductStatusRes_ProductStatus_PEND = 4,
  GoodsProductStatusRes_ProductStatus_STAMPING = 5,
  GoodsProductStatusRes_ProductStatus_CHECK = 6,
  GoodsProductStatusRes_ProductStatus_INBOUND = 7
};
bool GoodsProductStatusRes_ProductStatus_IsValid(int value);
const GoodsProductStatusRes_ProductStatus GoodsProductStatusRes_ProductStatus_ProductStatus_MIN = GoodsProductStatusRes_ProductStatus_WAIT_PRODUCTION;
const GoodsProductStatusRes_ProductStatus GoodsProductStatusRes_ProductStatus_ProductStatus_MAX = GoodsProductStatusRes_ProductStatus_INBOUND;
const int GoodsProductStatusRes_ProductStatus_ProductStatus_ARRAYSIZE = GoodsProductStatusRes_ProductStatus_ProductStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoodsProductStatusRes_ProductStatus_descriptor();
inline const ::std::string& GoodsProductStatusRes_ProductStatus_Name(GoodsProductStatusRes_ProductStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoodsProductStatusRes_ProductStatus_descriptor(), value);
}
inline bool GoodsProductStatusRes_ProductStatus_Parse(
    const ::std::string& name, GoodsProductStatusRes_ProductStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoodsProductStatusRes_ProductStatus>(
    GoodsProductStatusRes_ProductStatus_descriptor(), name, value);
}
enum ChooseOrderPayWayReq_PayType {
  ChooseOrderPayWayReq_PayType_ZFB = 1,
  ChooseOrderPayWayReq_PayType_WECHAT = 2
};
bool ChooseOrderPayWayReq_PayType_IsValid(int value);
const ChooseOrderPayWayReq_PayType ChooseOrderPayWayReq_PayType_PayType_MIN = ChooseOrderPayWayReq_PayType_ZFB;
const ChooseOrderPayWayReq_PayType ChooseOrderPayWayReq_PayType_PayType_MAX = ChooseOrderPayWayReq_PayType_WECHAT;
const int ChooseOrderPayWayReq_PayType_PayType_ARRAYSIZE = ChooseOrderPayWayReq_PayType_PayType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChooseOrderPayWayReq_PayType_descriptor();
inline const ::std::string& ChooseOrderPayWayReq_PayType_Name(ChooseOrderPayWayReq_PayType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChooseOrderPayWayReq_PayType_descriptor(), value);
}
inline bool ChooseOrderPayWayReq_PayType_Parse(
    const ::std::string& name, ChooseOrderPayWayReq_PayType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChooseOrderPayWayReq_PayType>(
    ChooseOrderPayWayReq_PayType_descriptor(), name, value);
}
enum OrderCmdResult {
  SUCCESS = 200,
  FAILURE = 202
};
bool OrderCmdResult_IsValid(int value);
const OrderCmdResult OrderCmdResult_MIN = SUCCESS;
const OrderCmdResult OrderCmdResult_MAX = FAILURE;
const int OrderCmdResult_ARRAYSIZE = OrderCmdResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderCmdResult_descriptor();
inline const ::std::string& OrderCmdResult_Name(OrderCmdResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderCmdResult_descriptor(), value);
}
inline bool OrderCmdResult_Parse(
    const ::std::string& name, OrderCmdResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderCmdResult>(
    OrderCmdResult_descriptor(), name, value);
}
enum ReceiverCmdResult {
  Receiver_SUCCESS = 200,
  Receiver_FAILURE = 202
};
bool ReceiverCmdResult_IsValid(int value);
const ReceiverCmdResult ReceiverCmdResult_MIN = Receiver_SUCCESS;
const ReceiverCmdResult ReceiverCmdResult_MAX = Receiver_FAILURE;
const int ReceiverCmdResult_ARRAYSIZE = ReceiverCmdResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReceiverCmdResult_descriptor();
inline const ::std::string& ReceiverCmdResult_Name(ReceiverCmdResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReceiverCmdResult_descriptor(), value);
}
inline bool ReceiverCmdResult_Parse(
    const ::std::string& name, ReceiverCmdResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReceiverCmdResult>(
    ReceiverCmdResult_descriptor(), name, value);
}
enum AreaResult {
  Area_SUCCESS = 200,
  Area_FAILURE = 202
};
bool AreaResult_IsValid(int value);
const AreaResult AreaResult_MIN = Area_SUCCESS;
const AreaResult AreaResult_MAX = Area_FAILURE;
const int AreaResult_ARRAYSIZE = AreaResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* AreaResult_descriptor();
inline const ::std::string& AreaResult_Name(AreaResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    AreaResult_descriptor(), value);
}
inline bool AreaResult_Parse(
    const ::std::string& name, AreaResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AreaResult>(
    AreaResult_descriptor(), name, value);
}
// ===================================================================

class MapPos : public ::google::protobuf::Message {
 public:
  MapPos();
  virtual ~MapPos();

  MapPos(const MapPos& from);

  inline MapPos& operator=(const MapPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapPos& default_instance();

  void Swap(MapPos* other);

  // implements Message ----------------------------------------------

  MapPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapPos& from);
  void MergeFrom(const MapPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.MapPos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static MapPos* default_instance_;
};
// -------------------------------------------------------------------

class OtherUserInfo : public ::google::protobuf::Message {
 public:
  OtherUserInfo();
  virtual ~OtherUserInfo();

  OtherUserInfo(const OtherUserInfo& from);

  inline OtherUserInfo& operator=(const OtherUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherUserInfo& default_instance();

  void Swap(OtherUserInfo* other);

  // implements Message ----------------------------------------------

  OtherUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtherUserInfo& from);
  void MergeFrom(const OtherUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required string user_name = 2;
  inline bool has_user_name() const;
  inline void clear_user_name();
  static const int kUserNameFieldNumber = 2;
  inline const ::std::string& user_name() const;
  inline void set_user_name(const ::std::string& value);
  inline void set_user_name(const char* value);
  inline void set_user_name(const char* value, size_t size);
  inline ::std::string* mutable_user_name();
  inline ::std::string* release_user_name();
  inline void set_allocated_user_name(::std::string* user_name);

  // required .CS.MapPos cur_pos = 3;
  inline bool has_cur_pos() const;
  inline void clear_cur_pos();
  static const int kCurPosFieldNumber = 3;
  inline const ::CS::MapPos& cur_pos() const;
  inline ::CS::MapPos* mutable_cur_pos();
  inline ::CS::MapPos* release_cur_pos();
  inline void set_allocated_cur_pos(::CS::MapPos* cur_pos);

  // repeated .dgame.EquipmentData equipment_list = 4;
  inline int equipment_list_size() const;
  inline void clear_equipment_list();
  static const int kEquipmentListFieldNumber = 4;
  inline const ::dgame::EquipmentData& equipment_list(int index) const;
  inline ::dgame::EquipmentData* mutable_equipment_list(int index);
  inline ::dgame::EquipmentData* add_equipment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
      equipment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
      mutable_equipment_list();

  // @@protoc_insertion_point(class_scope:CS.OtherUserInfo)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_user_name();
  inline void clear_has_user_name();
  inline void set_has_cur_pos();
  inline void clear_has_cur_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_name_;
  ::CS::MapPos* cur_pos_;
  ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData > equipment_list_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OtherUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class Msg_HeartBeat_C2S : public ::google::protobuf::Message {
 public:
  Msg_HeartBeat_C2S();
  virtual ~Msg_HeartBeat_C2S();

  Msg_HeartBeat_C2S(const Msg_HeartBeat_C2S& from);

  inline Msg_HeartBeat_C2S& operator=(const Msg_HeartBeat_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_HeartBeat_C2S& default_instance();

  void Swap(Msg_HeartBeat_C2S* other);

  // implements Message ----------------------------------------------

  Msg_HeartBeat_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_HeartBeat_C2S& from);
  void MergeFrom(const Msg_HeartBeat_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_HeartBeat_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_HeartBeat_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_HeartBeat_S2C : public ::google::protobuf::Message {
 public:
  Msg_HeartBeat_S2C();
  virtual ~Msg_HeartBeat_S2C();

  Msg_HeartBeat_S2C(const Msg_HeartBeat_S2C& from);

  inline Msg_HeartBeat_S2C& operator=(const Msg_HeartBeat_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_HeartBeat_S2C& default_instance();

  void Swap(Msg_HeartBeat_S2C* other);

  // implements Message ----------------------------------------------

  Msg_HeartBeat_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_HeartBeat_S2C& from);
  void MergeFrom(const Msg_HeartBeat_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_HeartBeat_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_HeartBeat_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_TargetServerInvalid_S2C : public ::google::protobuf::Message {
 public:
  Msg_TargetServerInvalid_S2C();
  virtual ~Msg_TargetServerInvalid_S2C();

  Msg_TargetServerInvalid_S2C(const Msg_TargetServerInvalid_S2C& from);

  inline Msg_TargetServerInvalid_S2C& operator=(const Msg_TargetServerInvalid_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_TargetServerInvalid_S2C& default_instance();

  void Swap(Msg_TargetServerInvalid_S2C* other);

  // implements Message ----------------------------------------------

  Msg_TargetServerInvalid_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_TargetServerInvalid_S2C& from);
  void MergeFrom(const Msg_TargetServerInvalid_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string url_desc = 1;
  inline bool has_url_desc() const;
  inline void clear_url_desc();
  static const int kUrlDescFieldNumber = 1;
  inline const ::std::string& url_desc() const;
  inline void set_url_desc(const ::std::string& value);
  inline void set_url_desc(const char* value);
  inline void set_url_desc(const char* value, size_t size);
  inline ::std::string* mutable_url_desc();
  inline ::std::string* release_url_desc();
  inline void set_allocated_url_desc(::std::string* url_desc);

  // optional string url = 2;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 2;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // @@protoc_insertion_point(class_scope:CS.Msg_TargetServerInvalid_S2C)
 private:
  inline void set_has_url_desc();
  inline void clear_has_url_desc();
  inline void set_has_url();
  inline void clear_has_url();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* url_desc_;
  ::std::string* url_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_TargetServerInvalid_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OtherUserList_G2C : public ::google::protobuf::Message {
 public:
  Msg_OtherUserList_G2C();
  virtual ~Msg_OtherUserList_G2C();

  Msg_OtherUserList_G2C(const Msg_OtherUserList_G2C& from);

  inline Msg_OtherUserList_G2C& operator=(const Msg_OtherUserList_G2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OtherUserList_G2C& default_instance();

  void Swap(Msg_OtherUserList_G2C* other);

  // implements Message ----------------------------------------------

  Msg_OtherUserList_G2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OtherUserList_G2C& from);
  void MergeFrom(const Msg_OtherUserList_G2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.OtherUserInfo user_list = 1;
  inline int user_list_size() const;
  inline void clear_user_list();
  static const int kUserListFieldNumber = 1;
  inline const ::CS::OtherUserInfo& user_list(int index) const;
  inline ::CS::OtherUserInfo* mutable_user_list(int index);
  inline ::CS::OtherUserInfo* add_user_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::OtherUserInfo >&
      user_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::OtherUserInfo >*
      mutable_user_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_OtherUserList_G2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::OtherUserInfo > user_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OtherUserList_G2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserEnterScene_C2G : public ::google::protobuf::Message {
 public:
  Msg_UserEnterScene_C2G();
  virtual ~Msg_UserEnterScene_C2G();

  Msg_UserEnterScene_C2G(const Msg_UserEnterScene_C2G& from);

  inline Msg_UserEnterScene_C2G& operator=(const Msg_UserEnterScene_C2G& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserEnterScene_C2G& default_instance();

  void Swap(Msg_UserEnterScene_C2G* other);

  // implements Message ----------------------------------------------

  Msg_UserEnterScene_C2G* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserEnterScene_C2G& from);
  void MergeFrom(const Msg_UserEnterScene_C2G& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserEnterScene_C2G)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserEnterScene_C2G* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserLeaveScene_C2G : public ::google::protobuf::Message {
 public:
  Msg_UserLeaveScene_C2G();
  virtual ~Msg_UserLeaveScene_C2G();

  Msg_UserLeaveScene_C2G(const Msg_UserLeaveScene_C2G& from);

  inline Msg_UserLeaveScene_C2G& operator=(const Msg_UserLeaveScene_C2G& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserLeaveScene_C2G& default_instance();

  void Swap(Msg_UserLeaveScene_C2G* other);

  // implements Message ----------------------------------------------

  Msg_UserLeaveScene_C2G* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserLeaveScene_C2G& from);
  void MergeFrom(const Msg_UserLeaveScene_C2G& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_UserLeaveScene_C2G)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserLeaveScene_C2G* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserLeaveScene_G2C : public ::google::protobuf::Message {
 public:
  Msg_UserLeaveScene_G2C();
  virtual ~Msg_UserLeaveScene_G2C();

  Msg_UserLeaveScene_G2C(const Msg_UserLeaveScene_G2C& from);

  inline Msg_UserLeaveScene_G2C& operator=(const Msg_UserLeaveScene_G2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserLeaveScene_G2C& default_instance();

  void Swap(Msg_UserLeaveScene_G2C* other);

  // implements Message ----------------------------------------------

  Msg_UserLeaveScene_G2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserLeaveScene_G2C& from);
  void MergeFrom(const Msg_UserLeaveScene_G2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserLeaveScene_G2C)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserLeaveScene_G2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Goto_C2G : public ::google::protobuf::Message {
 public:
  Msg_Goto_C2G();
  virtual ~Msg_Goto_C2G();

  Msg_Goto_C2G(const Msg_Goto_C2G& from);

  inline Msg_Goto_C2G& operator=(const Msg_Goto_C2G& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Goto_C2G& default_instance();

  void Swap(Msg_Goto_C2G* other);

  // implements Message ----------------------------------------------

  Msg_Goto_C2G* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Goto_C2G& from);
  void MergeFrom(const Msg_Goto_C2G& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.MapPos from = 1;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 1;
  inline const ::CS::MapPos& from() const;
  inline ::CS::MapPos* mutable_from();
  inline ::CS::MapPos* release_from();
  inline void set_allocated_from(::CS::MapPos* from);

  // required .CS.MapPos to = 2;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 2;
  inline const ::CS::MapPos& to() const;
  inline ::CS::MapPos* mutable_to();
  inline ::CS::MapPos* release_to();
  inline void set_allocated_to(::CS::MapPos* to);

  // @@protoc_insertion_point(class_scope:CS.Msg_Goto_C2G)
 private:
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::MapPos* from_;
  ::CS::MapPos* to_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Goto_C2G* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Goto_G2C : public ::google::protobuf::Message {
 public:
  Msg_Goto_G2C();
  virtual ~Msg_Goto_G2C();

  Msg_Goto_G2C(const Msg_Goto_G2C& from);

  inline Msg_Goto_G2C& operator=(const Msg_Goto_G2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Goto_G2C& default_instance();

  void Swap(Msg_Goto_G2C* other);

  // implements Message ----------------------------------------------

  Msg_Goto_G2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Goto_G2C& from);
  void MergeFrom(const Msg_Goto_G2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);

  // required .CS.MapPos from = 2;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 2;
  inline const ::CS::MapPos& from() const;
  inline ::CS::MapPos* mutable_from();
  inline ::CS::MapPos* release_from();
  inline void set_allocated_from(::CS::MapPos* from);

  // required .CS.MapPos to = 3;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 3;
  inline const ::CS::MapPos& to() const;
  inline ::CS::MapPos* mutable_to();
  inline ::CS::MapPos* release_to();
  inline void set_allocated_to(::CS::MapPos* to);

  // @@protoc_insertion_point(class_scope:CS.Msg_Goto_G2C)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_from();
  inline void clear_has_from();
  inline void set_has_to();
  inline void clear_has_to();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::MapPos* from_;
  ::CS::MapPos* to_;
  ::google::protobuf::uint32 user_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Goto_G2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Equipment_C2S : public ::google::protobuf::Message {
 public:
  Msg_Equipment_C2S();
  virtual ~Msg_Equipment_C2S();

  Msg_Equipment_C2S(const Msg_Equipment_C2S& from);

  inline Msg_Equipment_C2S& operator=(const Msg_Equipment_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Equipment_C2S& default_instance();

  void Swap(Msg_Equipment_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Equipment_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Equipment_C2S& from);
  void MergeFrom(const Msg_Equipment_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.EquipmentData equipment_list = 1;
  inline int equipment_list_size() const;
  inline void clear_equipment_list();
  static const int kEquipmentListFieldNumber = 1;
  inline const ::dgame::EquipmentData& equipment_list(int index) const;
  inline ::dgame::EquipmentData* mutable_equipment_list(int index);
  inline ::dgame::EquipmentData* add_equipment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
      equipment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
      mutable_equipment_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_Equipment_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData > equipment_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Equipment_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Equipment_S2C : public ::google::protobuf::Message {
 public:
  Msg_Equipment_S2C();
  virtual ~Msg_Equipment_S2C();

  Msg_Equipment_S2C(const Msg_Equipment_S2C& from);

  inline Msg_Equipment_S2C& operator=(const Msg_Equipment_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Equipment_S2C& default_instance();

  void Swap(Msg_Equipment_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Equipment_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Equipment_S2C& from);
  void MergeFrom(const Msg_Equipment_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_Equipment_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Equipment_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GM_C2S : public ::google::protobuf::Message {
 public:
  Msg_GM_C2S();
  virtual ~Msg_GM_C2S();

  Msg_GM_C2S(const Msg_GM_C2S& from);

  inline Msg_GM_C2S& operator=(const Msg_GM_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GM_C2S& default_instance();

  void Swap(Msg_GM_C2S* other);

  // implements Message ----------------------------------------------

  Msg_GM_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GM_C2S& from);
  void MergeFrom(const Msg_GM_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gm_id = 1;
  inline bool has_gm_id() const;
  inline void clear_gm_id();
  static const int kGmIdFieldNumber = 1;
  inline ::google::protobuf::uint32 gm_id() const;
  inline void set_gm_id(::google::protobuf::uint32 value);

  // required uint32 param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // required uint32 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_GM_C2S)
 private:
  inline void set_has_gm_id();
  inline void clear_has_gm_id();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gm_id_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GM_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserBaseInfoModify_C2S : public ::google::protobuf::Message {
 public:
  Msg_UserBaseInfoModify_C2S();
  virtual ~Msg_UserBaseInfoModify_C2S();

  Msg_UserBaseInfoModify_C2S(const Msg_UserBaseInfoModify_C2S& from);

  inline Msg_UserBaseInfoModify_C2S& operator=(const Msg_UserBaseInfoModify_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserBaseInfoModify_C2S& default_instance();

  void Swap(Msg_UserBaseInfoModify_C2S* other);

  // implements Message ----------------------------------------------

  Msg_UserBaseInfoModify_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserBaseInfoModify_C2S& from);
  void MergeFrom(const Msg_UserBaseInfoModify_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 head_img_id = 1;
  inline bool has_head_img_id() const;
  inline void clear_head_img_id();
  static const int kHeadImgIdFieldNumber = 1;
  inline ::google::protobuf::uint32 head_img_id() const;
  inline void set_head_img_id(::google::protobuf::uint32 value);

  // optional string nick_name = 2;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 2;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string sign = 3;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 3;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserBaseInfoModify_C2S)
 private:
  inline void set_has_head_img_id();
  inline void clear_has_head_img_id();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* nick_name_;
  ::std::string* sign_;
  ::google::protobuf::uint32 head_img_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserBaseInfoModify_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserBaseInfoModify_S2C : public ::google::protobuf::Message {
 public:
  Msg_UserBaseInfoModify_S2C();
  virtual ~Msg_UserBaseInfoModify_S2C();

  Msg_UserBaseInfoModify_S2C(const Msg_UserBaseInfoModify_S2C& from);

  inline Msg_UserBaseInfoModify_S2C& operator=(const Msg_UserBaseInfoModify_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserBaseInfoModify_S2C& default_instance();

  void Swap(Msg_UserBaseInfoModify_S2C* other);

  // implements Message ----------------------------------------------

  Msg_UserBaseInfoModify_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserBaseInfoModify_S2C& from);
  void MergeFrom(const Msg_UserBaseInfoModify_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserBaseInfoModify_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserBaseInfoModify_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserInfoModify_C2S : public ::google::protobuf::Message {
 public:
  Msg_UserInfoModify_C2S();
  virtual ~Msg_UserInfoModify_C2S();

  Msg_UserInfoModify_C2S(const Msg_UserInfoModify_C2S& from);

  inline Msg_UserInfoModify_C2S& operator=(const Msg_UserInfoModify_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserInfoModify_C2S& default_instance();

  void Swap(Msg_UserInfoModify_C2S* other);

  // implements Message ----------------------------------------------

  Msg_UserInfoModify_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserInfoModify_C2S& from);
  void MergeFrom(const Msg_UserInfoModify_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string email = 1;
  inline bool has_email() const;
  inline void clear_email();
  static const int kEmailFieldNumber = 1;
  inline const ::std::string& email() const;
  inline void set_email(const ::std::string& value);
  inline void set_email(const char* value);
  inline void set_email(const char* value, size_t size);
  inline ::std::string* mutable_email();
  inline ::std::string* release_email();
  inline void set_allocated_email(::std::string* email);

  // optional uint32 sex = 2;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 2;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 hobby = 4;
  inline bool has_hobby() const;
  inline void clear_hobby();
  static const int kHobbyFieldNumber = 4;
  inline ::google::protobuf::uint32 hobby() const;
  inline void set_hobby(::google::protobuf::uint32 value);

  // optional uint32 skin = 5;
  inline bool has_skin() const;
  inline void clear_skin();
  static const int kSkinFieldNumber = 5;
  inline ::google::protobuf::uint32 skin() const;
  inline void set_skin(::google::protobuf::uint32 value);

  // repeated .dgame.SouvenirDate date_list = 6;
  inline int date_list_size() const;
  inline void clear_date_list();
  static const int kDateListFieldNumber = 6;
  inline const ::dgame::SouvenirDate& date_list(int index) const;
  inline ::dgame::SouvenirDate* mutable_date_list(int index);
  inline ::dgame::SouvenirDate* add_date_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >&
      date_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >*
      mutable_date_list();

  // repeated uint32 brand_list = 7;
  inline int brand_list_size() const;
  inline void clear_brand_list();
  static const int kBrandListFieldNumber = 7;
  inline ::google::protobuf::uint32 brand_list(int index) const;
  inline void set_brand_list(int index, ::google::protobuf::uint32 value);
  inline void add_brand_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      brand_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_brand_list();

  // optional uint32 color = 8;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 8;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // repeated uint32 dressed_list = 9;
  inline int dressed_list_size() const;
  inline void clear_dressed_list();
  static const int kDressedListFieldNumber = 9;
  inline ::google::protobuf::uint32 dressed_list(int index) const;
  inline void set_dressed_list(int index, ::google::protobuf::uint32 value);
  inline void add_dressed_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      dressed_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_dressed_list();

  // optional uint32 birthday = 10;
  inline bool has_birthday() const;
  inline void clear_birthday();
  static const int kBirthdayFieldNumber = 10;
  inline ::google::protobuf::uint32 birthday() const;
  inline void set_birthday(::google::protobuf::uint32 value);

  // optional uint32 head_img_id = 11;
  inline bool has_head_img_id() const;
  inline void clear_head_img_id();
  static const int kHeadImgIdFieldNumber = 11;
  inline ::google::protobuf::uint32 head_img_id() const;
  inline void set_head_img_id(::google::protobuf::uint32 value);

  // optional uint32 age = 12;
  inline bool has_age() const;
  inline void clear_age();
  static const int kAgeFieldNumber = 12;
  inline ::google::protobuf::uint32 age() const;
  inline void set_age(::google::protobuf::uint32 value);

  // optional uint32 zodiac = 13;
  inline bool has_zodiac() const;
  inline void clear_zodiac();
  static const int kZodiacFieldNumber = 13;
  inline ::google::protobuf::uint32 zodiac() const;
  inline void set_zodiac(::google::protobuf::uint32 value);

  // optional string nick_name = 14;
  inline bool has_nick_name() const;
  inline void clear_nick_name();
  static const int kNickNameFieldNumber = 14;
  inline const ::std::string& nick_name() const;
  inline void set_nick_name(const ::std::string& value);
  inline void set_nick_name(const char* value);
  inline void set_nick_name(const char* value, size_t size);
  inline ::std::string* mutable_nick_name();
  inline ::std::string* release_nick_name();
  inline void set_allocated_nick_name(::std::string* nick_name);

  // optional string sign = 15;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 15;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserInfoModify_C2S)
 private:
  inline void set_has_email();
  inline void clear_has_email();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_hobby();
  inline void clear_has_hobby();
  inline void set_has_skin();
  inline void clear_has_skin();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_birthday();
  inline void clear_has_birthday();
  inline void set_has_head_img_id();
  inline void clear_has_head_img_id();
  inline void set_has_age();
  inline void clear_has_age();
  inline void set_has_zodiac();
  inline void clear_has_zodiac();
  inline void set_has_nick_name();
  inline void clear_has_nick_name();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* email_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 hobby_;
  ::google::protobuf::uint32 skin_;
  ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate > date_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > brand_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > dressed_list_;
  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 birthday_;
  ::google::protobuf::uint32 head_img_id_;
  ::google::protobuf::uint32 age_;
  ::std::string* nick_name_;
  ::std::string* sign_;
  ::google::protobuf::uint32 zodiac_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserInfoModify_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserInfoModify_S2C : public ::google::protobuf::Message {
 public:
  Msg_UserInfoModify_S2C();
  virtual ~Msg_UserInfoModify_S2C();

  Msg_UserInfoModify_S2C(const Msg_UserInfoModify_S2C& from);

  inline Msg_UserInfoModify_S2C& operator=(const Msg_UserInfoModify_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserInfoModify_S2C& default_instance();

  void Swap(Msg_UserInfoModify_S2C* other);

  // implements Message ----------------------------------------------

  Msg_UserInfoModify_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserInfoModify_S2C& from);
  void MergeFrom(const Msg_UserInfoModify_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_UserInfoModify_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserInfoModify_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_DesignProduct_C2S : public ::google::protobuf::Message {
 public:
  Msg_DesignProduct_C2S();
  virtual ~Msg_DesignProduct_C2S();

  Msg_DesignProduct_C2S(const Msg_DesignProduct_C2S& from);

  inline Msg_DesignProduct_C2S& operator=(const Msg_DesignProduct_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_DesignProduct_C2S& default_instance();

  void Swap(Msg_DesignProduct_C2S* other);

  // implements Message ----------------------------------------------

  Msg_DesignProduct_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_DesignProduct_C2S& from);
  void MergeFrom(const Msg_DesignProduct_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dgame.ProductData product = 1;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 1;
  inline const ::dgame::ProductData& product() const;
  inline ::dgame::ProductData* mutable_product();
  inline ::dgame::ProductData* release_product();
  inline void set_allocated_product(::dgame::ProductData* product);

  // @@protoc_insertion_point(class_scope:CS.Msg_DesignProduct_C2S)
 private:
  inline void set_has_product();
  inline void clear_has_product();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dgame::ProductData* product_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_DesignProduct_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_DesignProduct_S2C : public ::google::protobuf::Message {
 public:
  Msg_DesignProduct_S2C();
  virtual ~Msg_DesignProduct_S2C();

  Msg_DesignProduct_S2C(const Msg_DesignProduct_S2C& from);

  inline Msg_DesignProduct_S2C& operator=(const Msg_DesignProduct_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_DesignProduct_S2C& default_instance();

  void Swap(Msg_DesignProduct_S2C* other);

  // implements Message ----------------------------------------------

  Msg_DesignProduct_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_DesignProduct_S2C& from);
  void MergeFrom(const Msg_DesignProduct_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_DesignProduct_S2C)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_DesignProduct_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserProductList_C2S : public ::google::protobuf::Message {
 public:
  Msg_UserProductList_C2S();
  virtual ~Msg_UserProductList_C2S();

  Msg_UserProductList_C2S(const Msg_UserProductList_C2S& from);

  inline Msg_UserProductList_C2S& operator=(const Msg_UserProductList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserProductList_C2S& default_instance();

  void Swap(Msg_UserProductList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_UserProductList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserProductList_C2S& from);
  void MergeFrom(const Msg_UserProductList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_UserProductList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserProductList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserProductList_S2C : public ::google::protobuf::Message {
 public:
  Msg_UserProductList_S2C();
  virtual ~Msg_UserProductList_S2C();

  Msg_UserProductList_S2C(const Msg_UserProductList_S2C& from);

  inline Msg_UserProductList_S2C& operator=(const Msg_UserProductList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserProductList_S2C& default_instance();

  void Swap(Msg_UserProductList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_UserProductList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserProductList_S2C& from);
  void MergeFrom(const Msg_UserProductList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.ProductData product_list = 1;
  inline int product_list_size() const;
  inline void clear_product_list();
  static const int kProductListFieldNumber = 1;
  inline const ::dgame::ProductData& product_list(int index) const;
  inline ::dgame::ProductData* mutable_product_list(int index);
  inline ::dgame::ProductData* add_product_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductData >&
      product_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductData >*
      mutable_product_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_UserProductList_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::ProductData > product_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserProductList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserProductDetail_C2S : public ::google::protobuf::Message {
 public:
  Msg_UserProductDetail_C2S();
  virtual ~Msg_UserProductDetail_C2S();

  Msg_UserProductDetail_C2S(const Msg_UserProductDetail_C2S& from);

  inline Msg_UserProductDetail_C2S& operator=(const Msg_UserProductDetail_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserProductDetail_C2S& default_instance();

  void Swap(Msg_UserProductDetail_C2S* other);

  // implements Message ----------------------------------------------

  Msg_UserProductDetail_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserProductDetail_C2S& from);
  void MergeFrom(const Msg_UserProductDetail_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserProductDetail_C2S)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserProductDetail_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_UserProductDetail_S2C : public ::google::protobuf::Message {
 public:
  Msg_UserProductDetail_S2C();
  virtual ~Msg_UserProductDetail_S2C();

  Msg_UserProductDetail_S2C(const Msg_UserProductDetail_S2C& from);

  inline Msg_UserProductDetail_S2C& operator=(const Msg_UserProductDetail_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_UserProductDetail_S2C& default_instance();

  void Swap(Msg_UserProductDetail_S2C* other);

  // implements Message ----------------------------------------------

  Msg_UserProductDetail_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_UserProductDetail_S2C& from);
  void MergeFrom(const Msg_UserProductDetail_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dgame.ProductDetailInfo detail = 1;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::dgame::ProductDetailInfo& detail() const;
  inline ::dgame::ProductDetailInfo* mutable_detail();
  inline ::dgame::ProductDetailInfo* release_detail();
  inline void set_allocated_detail(::dgame::ProductDetailInfo* detail);

  // @@protoc_insertion_point(class_scope:CS.Msg_UserProductDetail_S2C)
 private:
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dgame::ProductDetailInfo* detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_UserProductDetail_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ServerTime_C2S : public ::google::protobuf::Message {
 public:
  Msg_ServerTime_C2S();
  virtual ~Msg_ServerTime_C2S();

  Msg_ServerTime_C2S(const Msg_ServerTime_C2S& from);

  inline Msg_ServerTime_C2S& operator=(const Msg_ServerTime_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ServerTime_C2S& default_instance();

  void Swap(Msg_ServerTime_C2S* other);

  // implements Message ----------------------------------------------

  Msg_ServerTime_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ServerTime_C2S& from);
  void MergeFrom(const Msg_ServerTime_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_ServerTime_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ServerTime_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ServerTime_S2C : public ::google::protobuf::Message {
 public:
  Msg_ServerTime_S2C();
  virtual ~Msg_ServerTime_S2C();

  Msg_ServerTime_S2C(const Msg_ServerTime_S2C& from);

  inline Msg_ServerTime_S2C& operator=(const Msg_ServerTime_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ServerTime_S2C& default_instance();

  void Swap(Msg_ServerTime_S2C* other);

  // implements Message ----------------------------------------------

  Msg_ServerTime_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ServerTime_S2C& from);
  void MergeFrom(const Msg_ServerTime_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_time = 1;
  inline bool has_server_time() const;
  inline void clear_server_time();
  static const int kServerTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 server_time() const;
  inline void set_server_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_ServerTime_S2C)
 private:
  inline void set_has_server_time();
  inline void clear_has_server_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ServerTime_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GoodsRecommend_C2S : public ::google::protobuf::Message {
 public:
  Msg_GoodsRecommend_C2S();
  virtual ~Msg_GoodsRecommend_C2S();

  Msg_GoodsRecommend_C2S(const Msg_GoodsRecommend_C2S& from);

  inline Msg_GoodsRecommend_C2S& operator=(const Msg_GoodsRecommend_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GoodsRecommend_C2S& default_instance();

  void Swap(Msg_GoodsRecommend_C2S* other);

  // implements Message ----------------------------------------------

  Msg_GoodsRecommend_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GoodsRecommend_C2S& from);
  void MergeFrom(const Msg_GoodsRecommend_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_GoodsRecommend_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GoodsRecommend_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GoodsRecommend_S2C : public ::google::protobuf::Message {
 public:
  Msg_GoodsRecommend_S2C();
  virtual ~Msg_GoodsRecommend_S2C();

  Msg_GoodsRecommend_S2C(const Msg_GoodsRecommend_S2C& from);

  inline Msg_GoodsRecommend_S2C& operator=(const Msg_GoodsRecommend_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GoodsRecommend_S2C& default_instance();

  void Swap(Msg_GoodsRecommend_S2C* other);

  // implements Message ----------------------------------------------

  Msg_GoodsRecommend_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GoodsRecommend_S2C& from);
  void MergeFrom(const Msg_GoodsRecommend_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_list(int index) const;
  inline void set_goods_list(int index, ::google::protobuf::uint32 value);
  inline void add_goods_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      goods_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_goods_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_GoodsRecommend_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > goods_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GoodsRecommend_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GoodsSearch_C2S : public ::google::protobuf::Message {
 public:
  Msg_GoodsSearch_C2S();
  virtual ~Msg_GoodsSearch_C2S();

  Msg_GoodsSearch_C2S(const Msg_GoodsSearch_C2S& from);

  inline Msg_GoodsSearch_C2S& operator=(const Msg_GoodsSearch_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GoodsSearch_C2S& default_instance();

  void Swap(Msg_GoodsSearch_C2S* other);

  // implements Message ----------------------------------------------

  Msg_GoodsSearch_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GoodsSearch_C2S& from);
  void MergeFrom(const Msg_GoodsSearch_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_GoodsSearch_C2S)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GoodsSearch_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GoodsSearch_S2C : public ::google::protobuf::Message {
 public:
  Msg_GoodsSearch_S2C();
  virtual ~Msg_GoodsSearch_S2C();

  Msg_GoodsSearch_S2C(const Msg_GoodsSearch_S2C& from);

  inline Msg_GoodsSearch_S2C& operator=(const Msg_GoodsSearch_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GoodsSearch_S2C& default_instance();

  void Swap(Msg_GoodsSearch_S2C* other);

  // implements Message ----------------------------------------------

  Msg_GoodsSearch_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GoodsSearch_S2C& from);
  void MergeFrom(const Msg_GoodsSearch_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated uint32 goods_list = 2;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 2;
  inline ::google::protobuf::uint32 goods_list(int index) const;
  inline void set_goods_list(int index, ::google::protobuf::uint32 value);
  inline void add_goods_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      goods_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_goods_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_GoodsSearch_S2C)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > goods_list_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GoodsSearch_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Chat_C2S : public ::google::protobuf::Message {
 public:
  Msg_Chat_C2S();
  virtual ~Msg_Chat_C2S();

  Msg_Chat_C2S(const Msg_Chat_C2S& from);

  inline Msg_Chat_C2S& operator=(const Msg_Chat_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Chat_C2S& default_instance();

  void Swap(Msg_Chat_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Chat_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Chat_C2S& from);
  void MergeFrom(const Msg_Chat_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // optional string target_name = 3;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 3;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // required string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CS.Msg_Chat_C2S)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 target_id_;
  ::std::string* target_name_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Chat_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Chat_S2C : public ::google::protobuf::Message {
 public:
  Msg_Chat_S2C();
  virtual ~Msg_Chat_S2C();

  Msg_Chat_S2C(const Msg_Chat_S2C& from);

  inline Msg_Chat_S2C& operator=(const Msg_Chat_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Chat_S2C& default_instance();

  void Swap(Msg_Chat_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Chat_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Chat_S2C& from);
  void MergeFrom(const Msg_Chat_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_Chat_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Chat_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Chat_Notify_S2C : public ::google::protobuf::Message {
 public:
  Msg_Chat_Notify_S2C();
  virtual ~Msg_Chat_Notify_S2C();

  Msg_Chat_Notify_S2C(const Msg_Chat_Notify_S2C& from);

  inline Msg_Chat_Notify_S2C& operator=(const Msg_Chat_Notify_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Chat_Notify_S2C& default_instance();

  void Swap(Msg_Chat_Notify_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Chat_Notify_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Chat_Notify_S2C& from);
  void MergeFrom(const Msg_Chat_Notify_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 sender_id = 2;
  inline bool has_sender_id() const;
  inline void clear_sender_id();
  static const int kSenderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 sender_id() const;
  inline void set_sender_id(::google::protobuf::uint32 value);

  // optional string sender_name = 3;
  inline bool has_sender_name() const;
  inline void clear_sender_name();
  static const int kSenderNameFieldNumber = 3;
  inline const ::std::string& sender_name() const;
  inline void set_sender_name(const ::std::string& value);
  inline void set_sender_name(const char* value);
  inline void set_sender_name(const char* value, size_t size);
  inline ::std::string* mutable_sender_name();
  inline ::std::string* release_sender_name();
  inline void set_allocated_sender_name(::std::string* sender_name);

  // optional uint32 target_id = 4;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 4;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // optional string target_name = 5;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 5;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // required string text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:CS.Msg_Chat_Notify_S2C)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sender_id();
  inline void clear_has_sender_id();
  inline void set_has_sender_name();
  inline void clear_has_sender_name();
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 sender_id_;
  ::std::string* sender_name_;
  ::std::string* target_name_;
  ::std::string* text_;
  ::google::protobuf::uint32 target_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Chat_Notify_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CreateOrder_C2S : public ::google::protobuf::Message {
 public:
  Msg_CreateOrder_C2S();
  virtual ~Msg_CreateOrder_C2S();

  Msg_CreateOrder_C2S(const Msg_CreateOrder_C2S& from);

  inline Msg_CreateOrder_C2S& operator=(const Msg_CreateOrder_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CreateOrder_C2S& default_instance();

  void Swap(Msg_CreateOrder_C2S* other);

  // implements Message ----------------------------------------------

  Msg_CreateOrder_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CreateOrder_C2S& from);
  void MergeFrom(const Msg_CreateOrder_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.OrderItem item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::dgame::OrderItem& item_list(int index) const;
  inline ::dgame::OrderItem* mutable_item_list(int index);
  inline ::dgame::OrderItem* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >*
      mutable_item_list();

  // required string adress = 2;
  inline bool has_adress() const;
  inline void clear_adress();
  static const int kAdressFieldNumber = 2;
  inline const ::std::string& adress() const;
  inline void set_adress(const ::std::string& value);
  inline void set_adress(const char* value);
  inline void set_adress(const char* value, size_t size);
  inline ::std::string* mutable_adress();
  inline ::std::string* release_adress();
  inline void set_allocated_adress(::std::string* adress);

  // required uint32 is_invoice = 3;
  inline bool has_is_invoice() const;
  inline void clear_is_invoice();
  static const int kIsInvoiceFieldNumber = 3;
  inline ::google::protobuf::uint32 is_invoice() const;
  inline void set_is_invoice(::google::protobuf::uint32 value);

  // optional string invoice_title = 4;
  inline bool has_invoice_title() const;
  inline void clear_invoice_title();
  static const int kInvoiceTitleFieldNumber = 4;
  inline const ::std::string& invoice_title() const;
  inline void set_invoice_title(const ::std::string& value);
  inline void set_invoice_title(const char* value);
  inline void set_invoice_title(const char* value, size_t size);
  inline ::std::string* mutable_invoice_title();
  inline ::std::string* release_invoice_title();
  inline void set_allocated_invoice_title(::std::string* invoice_title);

  // required string tephone = 5;
  inline bool has_tephone() const;
  inline void clear_tephone();
  static const int kTephoneFieldNumber = 5;
  inline const ::std::string& tephone() const;
  inline void set_tephone(const ::std::string& value);
  inline void set_tephone(const char* value);
  inline void set_tephone(const char* value, size_t size);
  inline ::std::string* mutable_tephone();
  inline ::std::string* release_tephone();
  inline void set_allocated_tephone(::std::string* tephone);

  // required string receive_name = 6;
  inline bool has_receive_name() const;
  inline void clear_receive_name();
  static const int kReceiveNameFieldNumber = 6;
  inline const ::std::string& receive_name() const;
  inline void set_receive_name(const ::std::string& value);
  inline void set_receive_name(const char* value);
  inline void set_receive_name(const char* value, size_t size);
  inline ::std::string* mutable_receive_name();
  inline ::std::string* release_receive_name();
  inline void set_allocated_receive_name(::std::string* receive_name);

  // @@protoc_insertion_point(class_scope:CS.Msg_CreateOrder_C2S)
 private:
  inline void set_has_adress();
  inline void clear_has_adress();
  inline void set_has_is_invoice();
  inline void clear_has_is_invoice();
  inline void set_has_invoice_title();
  inline void clear_has_invoice_title();
  inline void set_has_tephone();
  inline void clear_has_tephone();
  inline void set_has_receive_name();
  inline void clear_has_receive_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem > item_list_;
  ::std::string* adress_;
  ::std::string* invoice_title_;
  ::std::string* tephone_;
  ::std::string* receive_name_;
  ::google::protobuf::uint32 is_invoice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CreateOrder_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CreateOrder_S2C : public ::google::protobuf::Message {
 public:
  Msg_CreateOrder_S2C();
  virtual ~Msg_CreateOrder_S2C();

  Msg_CreateOrder_S2C(const Msg_CreateOrder_S2C& from);

  inline Msg_CreateOrder_S2C& operator=(const Msg_CreateOrder_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CreateOrder_S2C& default_instance();

  void Swap(Msg_CreateOrder_S2C* other);

  // implements Message ----------------------------------------------

  Msg_CreateOrder_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CreateOrder_S2C& from);
  void MergeFrom(const Msg_CreateOrder_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_CreateOrder_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CreateOrder_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_AddItemToShoppingCart_C2S : public ::google::protobuf::Message {
 public:
  Msg_AddItemToShoppingCart_C2S();
  virtual ~Msg_AddItemToShoppingCart_C2S();

  Msg_AddItemToShoppingCart_C2S(const Msg_AddItemToShoppingCart_C2S& from);

  inline Msg_AddItemToShoppingCart_C2S& operator=(const Msg_AddItemToShoppingCart_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_AddItemToShoppingCart_C2S& default_instance();

  void Swap(Msg_AddItemToShoppingCart_C2S* other);

  // implements Message ----------------------------------------------

  Msg_AddItemToShoppingCart_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_AddItemToShoppingCart_C2S& from);
  void MergeFrom(const Msg_AddItemToShoppingCart_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 itme_id = 1;
  inline bool has_itme_id() const;
  inline void clear_itme_id();
  static const int kItmeIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itme_id() const;
  inline void set_itme_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_AddItemToShoppingCart_C2S)
 private:
  inline void set_has_itme_id();
  inline void clear_has_itme_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itme_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_AddItemToShoppingCart_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_AddItemToShoppingCart_S2C : public ::google::protobuf::Message {
 public:
  Msg_AddItemToShoppingCart_S2C();
  virtual ~Msg_AddItemToShoppingCart_S2C();

  Msg_AddItemToShoppingCart_S2C(const Msg_AddItemToShoppingCart_S2C& from);

  inline Msg_AddItemToShoppingCart_S2C& operator=(const Msg_AddItemToShoppingCart_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_AddItemToShoppingCart_S2C& default_instance();

  void Swap(Msg_AddItemToShoppingCart_S2C* other);

  // implements Message ----------------------------------------------

  Msg_AddItemToShoppingCart_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_AddItemToShoppingCart_S2C& from);
  void MergeFrom(const Msg_AddItemToShoppingCart_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // required uint32 itme_id = 2;
  inline bool has_itme_id() const;
  inline void clear_itme_id();
  static const int kItmeIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itme_id() const;
  inline void set_itme_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_AddItemToShoppingCart_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_itme_id();
  inline void clear_has_itme_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 itme_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_AddItemToShoppingCart_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ShoppingCartItemList_C2S : public ::google::protobuf::Message {
 public:
  Msg_ShoppingCartItemList_C2S();
  virtual ~Msg_ShoppingCartItemList_C2S();

  Msg_ShoppingCartItemList_C2S(const Msg_ShoppingCartItemList_C2S& from);

  inline Msg_ShoppingCartItemList_C2S& operator=(const Msg_ShoppingCartItemList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ShoppingCartItemList_C2S& default_instance();

  void Swap(Msg_ShoppingCartItemList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_ShoppingCartItemList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ShoppingCartItemList_C2S& from);
  void MergeFrom(const Msg_ShoppingCartItemList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_ShoppingCartItemList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ShoppingCartItemList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ShoppingCartItemList_S2C : public ::google::protobuf::Message {
 public:
  Msg_ShoppingCartItemList_S2C();
  virtual ~Msg_ShoppingCartItemList_S2C();

  Msg_ShoppingCartItemList_S2C(const Msg_ShoppingCartItemList_S2C& from);

  inline Msg_ShoppingCartItemList_S2C& operator=(const Msg_ShoppingCartItemList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ShoppingCartItemList_S2C& default_instance();

  void Swap(Msg_ShoppingCartItemList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_ShoppingCartItemList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ShoppingCartItemList_S2C& from);
  void MergeFrom(const Msg_ShoppingCartItemList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline ::google::protobuf::uint32 item_list(int index) const;
  inline void set_item_list(int index, ::google::protobuf::uint32 value);
  inline void add_item_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      item_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_ShoppingCartItemList_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ShoppingCartItemList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Feedback_C2S : public ::google::protobuf::Message {
 public:
  Msg_Feedback_C2S();
  virtual ~Msg_Feedback_C2S();

  Msg_Feedback_C2S(const Msg_Feedback_C2S& from);

  inline Msg_Feedback_C2S& operator=(const Msg_Feedback_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Feedback_C2S& default_instance();

  void Swap(Msg_Feedback_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Feedback_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Feedback_C2S& from);
  void MergeFrom(const Msg_Feedback_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string desc = 1;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 1;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:CS.Msg_Feedback_C2S)
 private:
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Feedback_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Feedback_S2C : public ::google::protobuf::Message {
 public:
  Msg_Feedback_S2C();
  virtual ~Msg_Feedback_S2C();

  Msg_Feedback_S2C(const Msg_Feedback_S2C& from);

  inline Msg_Feedback_S2C& operator=(const Msg_Feedback_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Feedback_S2C& default_instance();

  void Swap(Msg_Feedback_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Feedback_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Feedback_S2C& from);
  void MergeFrom(const Msg_Feedback_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_Feedback_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Feedback_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_DesignerApply_C2S : public ::google::protobuf::Message {
 public:
  Msg_DesignerApply_C2S();
  virtual ~Msg_DesignerApply_C2S();

  Msg_DesignerApply_C2S(const Msg_DesignerApply_C2S& from);

  inline Msg_DesignerApply_C2S& operator=(const Msg_DesignerApply_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_DesignerApply_C2S& default_instance();

  void Swap(Msg_DesignerApply_C2S* other);

  // implements Message ----------------------------------------------

  Msg_DesignerApply_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_DesignerApply_C2S& from);
  void MergeFrom(const Msg_DesignerApply_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 designer_type = 1;
  inline bool has_designer_type() const;
  inline void clear_designer_type();
  static const int kDesignerTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 designer_type() const;
  inline void set_designer_type(::google::protobuf::uint32 value);

  // optional string exp_desc = 2;
  inline bool has_exp_desc() const;
  inline void clear_exp_desc();
  static const int kExpDescFieldNumber = 2;
  inline const ::std::string& exp_desc() const;
  inline void set_exp_desc(const ::std::string& value);
  inline void set_exp_desc(const char* value);
  inline void set_exp_desc(const char* value, size_t size);
  inline ::std::string* mutable_exp_desc();
  inline ::std::string* release_exp_desc();
  inline void set_allocated_exp_desc(::std::string* exp_desc);

  // optional string certificate_url = 3;
  inline bool has_certificate_url() const;
  inline void clear_certificate_url();
  static const int kCertificateUrlFieldNumber = 3;
  inline const ::std::string& certificate_url() const;
  inline void set_certificate_url(const ::std::string& value);
  inline void set_certificate_url(const char* value);
  inline void set_certificate_url(const char* value, size_t size);
  inline ::std::string* mutable_certificate_url();
  inline ::std::string* release_certificate_url();
  inline void set_allocated_certificate_url(::std::string* certificate_url);

  // optional .dgame.ProductSketchInfo sketch_info = 4;
  inline bool has_sketch_info() const;
  inline void clear_sketch_info();
  static const int kSketchInfoFieldNumber = 4;
  inline const ::dgame::ProductSketchInfo& sketch_info() const;
  inline ::dgame::ProductSketchInfo* mutable_sketch_info();
  inline ::dgame::ProductSketchInfo* release_sketch_info();
  inline void set_allocated_sketch_info(::dgame::ProductSketchInfo* sketch_info);

  // @@protoc_insertion_point(class_scope:CS.Msg_DesignerApply_C2S)
 private:
  inline void set_has_designer_type();
  inline void clear_has_designer_type();
  inline void set_has_exp_desc();
  inline void clear_has_exp_desc();
  inline void set_has_certificate_url();
  inline void clear_has_certificate_url();
  inline void set_has_sketch_info();
  inline void clear_has_sketch_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* exp_desc_;
  ::std::string* certificate_url_;
  ::dgame::ProductSketchInfo* sketch_info_;
  ::google::protobuf::uint32 designer_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_DesignerApply_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_DesignerApply_S2C : public ::google::protobuf::Message {
 public:
  Msg_DesignerApply_S2C();
  virtual ~Msg_DesignerApply_S2C();

  Msg_DesignerApply_S2C(const Msg_DesignerApply_S2C& from);

  inline Msg_DesignerApply_S2C& operator=(const Msg_DesignerApply_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_DesignerApply_S2C& default_instance();

  void Swap(Msg_DesignerApply_S2C* other);

  // implements Message ----------------------------------------------

  Msg_DesignerApply_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_DesignerApply_S2C& from);
  void MergeFrom(const Msg_DesignerApply_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_DesignerApply_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_DesignerApply_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProductSketchUpload_C2S : public ::google::protobuf::Message {
 public:
  Msg_ProductSketchUpload_C2S();
  virtual ~Msg_ProductSketchUpload_C2S();

  Msg_ProductSketchUpload_C2S(const Msg_ProductSketchUpload_C2S& from);

  inline Msg_ProductSketchUpload_C2S& operator=(const Msg_ProductSketchUpload_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProductSketchUpload_C2S& default_instance();

  void Swap(Msg_ProductSketchUpload_C2S* other);

  // implements Message ----------------------------------------------

  Msg_ProductSketchUpload_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProductSketchUpload_C2S& from);
  void MergeFrom(const Msg_ProductSketchUpload_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .dgame.ProductSketchInfo sketch_info = 1;
  inline bool has_sketch_info() const;
  inline void clear_sketch_info();
  static const int kSketchInfoFieldNumber = 1;
  inline const ::dgame::ProductSketchInfo& sketch_info() const;
  inline ::dgame::ProductSketchInfo* mutable_sketch_info();
  inline ::dgame::ProductSketchInfo* release_sketch_info();
  inline void set_allocated_sketch_info(::dgame::ProductSketchInfo* sketch_info);

  // @@protoc_insertion_point(class_scope:CS.Msg_ProductSketchUpload_C2S)
 private:
  inline void set_has_sketch_info();
  inline void clear_has_sketch_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dgame::ProductSketchInfo* sketch_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProductSketchUpload_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProductSketchUpload_S2C : public ::google::protobuf::Message {
 public:
  Msg_ProductSketchUpload_S2C();
  virtual ~Msg_ProductSketchUpload_S2C();

  Msg_ProductSketchUpload_S2C(const Msg_ProductSketchUpload_S2C& from);

  inline Msg_ProductSketchUpload_S2C& operator=(const Msg_ProductSketchUpload_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProductSketchUpload_S2C& default_instance();

  void Swap(Msg_ProductSketchUpload_S2C* other);

  // implements Message ----------------------------------------------

  Msg_ProductSketchUpload_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProductSketchUpload_S2C& from);
  void MergeFrom(const Msg_ProductSketchUpload_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_ProductSketchUpload_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProductSketchUpload_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_PointSourceList_C2S : public ::google::protobuf::Message {
 public:
  Msg_PointSourceList_C2S();
  virtual ~Msg_PointSourceList_C2S();

  Msg_PointSourceList_C2S(const Msg_PointSourceList_C2S& from);

  inline Msg_PointSourceList_C2S& operator=(const Msg_PointSourceList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_PointSourceList_C2S& default_instance();

  void Swap(Msg_PointSourceList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_PointSourceList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_PointSourceList_C2S& from);
  void MergeFrom(const Msg_PointSourceList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_PointSourceList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_PointSourceList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_PointSourceList_S2C : public ::google::protobuf::Message {
 public:
  Msg_PointSourceList_S2C();
  virtual ~Msg_PointSourceList_S2C();

  Msg_PointSourceList_S2C(const Msg_PointSourceList_S2C& from);

  inline Msg_PointSourceList_S2C& operator=(const Msg_PointSourceList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_PointSourceList_S2C& default_instance();

  void Swap(Msg_PointSourceList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_PointSourceList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_PointSourceList_S2C& from);
  void MergeFrom(const Msg_PointSourceList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.PointSourceInfo point_list = 1;
  inline int point_list_size() const;
  inline void clear_point_list();
  static const int kPointListFieldNumber = 1;
  inline const ::dgame::PointSourceInfo& point_list(int index) const;
  inline ::dgame::PointSourceInfo* mutable_point_list(int index);
  inline ::dgame::PointSourceInfo* add_point_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::PointSourceInfo >&
      point_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::PointSourceInfo >*
      mutable_point_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_PointSourceList_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::PointSourceInfo > point_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_PointSourceList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_WithdrawMoney_C2S : public ::google::protobuf::Message {
 public:
  Msg_WithdrawMoney_C2S();
  virtual ~Msg_WithdrawMoney_C2S();

  Msg_WithdrawMoney_C2S(const Msg_WithdrawMoney_C2S& from);

  inline Msg_WithdrawMoney_C2S& operator=(const Msg_WithdrawMoney_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_WithdrawMoney_C2S& default_instance();

  void Swap(Msg_WithdrawMoney_C2S* other);

  // implements Message ----------------------------------------------

  Msg_WithdrawMoney_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_WithdrawMoney_C2S& from);
  void MergeFrom(const Msg_WithdrawMoney_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float money = 1;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 1;
  inline float money() const;
  inline void set_money(float value);

  // @@protoc_insertion_point(class_scope:CS.Msg_WithdrawMoney_C2S)
 private:
  inline void set_has_money();
  inline void clear_has_money();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float money_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_WithdrawMoney_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_WithdrawMoney_S2C : public ::google::protobuf::Message {
 public:
  Msg_WithdrawMoney_S2C();
  virtual ~Msg_WithdrawMoney_S2C();

  Msg_WithdrawMoney_S2C(const Msg_WithdrawMoney_S2C& from);

  inline Msg_WithdrawMoney_S2C& operator=(const Msg_WithdrawMoney_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_WithdrawMoney_S2C& default_instance();

  void Swap(Msg_WithdrawMoney_S2C* other);

  // implements Message ----------------------------------------------

  Msg_WithdrawMoney_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_WithdrawMoney_S2C& from);
  void MergeFrom(const Msg_WithdrawMoney_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_WithdrawMoney_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_WithdrawMoney_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_MyOriginalProductList_C2S : public ::google::protobuf::Message {
 public:
  Msg_MyOriginalProductList_C2S();
  virtual ~Msg_MyOriginalProductList_C2S();

  Msg_MyOriginalProductList_C2S(const Msg_MyOriginalProductList_C2S& from);

  inline Msg_MyOriginalProductList_C2S& operator=(const Msg_MyOriginalProductList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_MyOriginalProductList_C2S& default_instance();

  void Swap(Msg_MyOriginalProductList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_MyOriginalProductList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_MyOriginalProductList_C2S& from);
  void MergeFrom(const Msg_MyOriginalProductList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_MyOriginalProductList_C2S)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_MyOriginalProductList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_MyOriginalProductList_S2C : public ::google::protobuf::Message {
 public:
  Msg_MyOriginalProductList_S2C();
  virtual ~Msg_MyOriginalProductList_S2C();

  Msg_MyOriginalProductList_S2C(const Msg_MyOriginalProductList_S2C& from);

  inline Msg_MyOriginalProductList_S2C& operator=(const Msg_MyOriginalProductList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_MyOriginalProductList_S2C& default_instance();

  void Swap(Msg_MyOriginalProductList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_MyOriginalProductList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_MyOriginalProductList_S2C& from);
  void MergeFrom(const Msg_MyOriginalProductList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 cur_index = 2;
  inline bool has_cur_index() const;
  inline void clear_cur_index();
  static const int kCurIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_index() const;
  inline void set_cur_index(::google::protobuf::uint32 value);

  // optional uint32 total_index = 3;
  inline bool has_total_index() const;
  inline void clear_total_index();
  static const int kTotalIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 total_index() const;
  inline void set_total_index(::google::protobuf::uint32 value);

  // repeated .dgame.OriginalProductInfo product_list = 4;
  inline int product_list_size() const;
  inline void clear_product_list();
  static const int kProductListFieldNumber = 4;
  inline const ::dgame::OriginalProductInfo& product_list(int index) const;
  inline ::dgame::OriginalProductInfo* mutable_product_list(int index);
  inline ::dgame::OriginalProductInfo* add_product_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductInfo >&
      product_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductInfo >*
      mutable_product_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_MyOriginalProductList_S2C)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cur_index();
  inline void clear_has_cur_index();
  inline void set_has_total_index();
  inline void clear_has_total_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 cur_index_;
  ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductInfo > product_list_;
  ::google::protobuf::uint32 total_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_MyOriginalProductList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_BindBankAccount_C2S : public ::google::protobuf::Message {
 public:
  Msg_BindBankAccount_C2S();
  virtual ~Msg_BindBankAccount_C2S();

  Msg_BindBankAccount_C2S(const Msg_BindBankAccount_C2S& from);

  inline Msg_BindBankAccount_C2S& operator=(const Msg_BindBankAccount_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_BindBankAccount_C2S& default_instance();

  void Swap(Msg_BindBankAccount_C2S* other);

  // implements Message ----------------------------------------------

  Msg_BindBankAccount_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_BindBankAccount_C2S& from);
  void MergeFrom(const Msg_BindBankAccount_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_name = 1;
  inline bool has_account_name() const;
  inline void clear_account_name();
  static const int kAccountNameFieldNumber = 1;
  inline const ::std::string& account_name() const;
  inline void set_account_name(const ::std::string& value);
  inline void set_account_name(const char* value);
  inline void set_account_name(const char* value, size_t size);
  inline ::std::string* mutable_account_name();
  inline ::std::string* release_account_name();
  inline void set_allocated_account_name(::std::string* account_name);

  // required string card_number = 2;
  inline bool has_card_number() const;
  inline void clear_card_number();
  static const int kCardNumberFieldNumber = 2;
  inline const ::std::string& card_number() const;
  inline void set_card_number(const ::std::string& value);
  inline void set_card_number(const char* value);
  inline void set_card_number(const char* value, size_t size);
  inline ::std::string* mutable_card_number();
  inline ::std::string* release_card_number();
  inline void set_allocated_card_number(::std::string* card_number);

  // @@protoc_insertion_point(class_scope:CS.Msg_BindBankAccount_C2S)
 private:
  inline void set_has_account_name();
  inline void clear_has_account_name();
  inline void set_has_card_number();
  inline void clear_has_card_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_name_;
  ::std::string* card_number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_BindBankAccount_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_BindBankAccount_S2C : public ::google::protobuf::Message {
 public:
  Msg_BindBankAccount_S2C();
  virtual ~Msg_BindBankAccount_S2C();

  Msg_BindBankAccount_S2C(const Msg_BindBankAccount_S2C& from);

  inline Msg_BindBankAccount_S2C& operator=(const Msg_BindBankAccount_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_BindBankAccount_S2C& default_instance();

  void Swap(Msg_BindBankAccount_S2C* other);

  // implements Message ----------------------------------------------

  Msg_BindBankAccount_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_BindBankAccount_S2C& from);
  void MergeFrom(const Msg_BindBankAccount_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_BindBankAccount_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_BindBankAccount_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_BindBankAccountList_C2S : public ::google::protobuf::Message {
 public:
  Msg_BindBankAccountList_C2S();
  virtual ~Msg_BindBankAccountList_C2S();

  Msg_BindBankAccountList_C2S(const Msg_BindBankAccountList_C2S& from);

  inline Msg_BindBankAccountList_C2S& operator=(const Msg_BindBankAccountList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_BindBankAccountList_C2S& default_instance();

  void Swap(Msg_BindBankAccountList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_BindBankAccountList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_BindBankAccountList_C2S& from);
  void MergeFrom(const Msg_BindBankAccountList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_BindBankAccountList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_BindBankAccountList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_BindBankAccountList_S2C : public ::google::protobuf::Message {
 public:
  Msg_BindBankAccountList_S2C();
  virtual ~Msg_BindBankAccountList_S2C();

  Msg_BindBankAccountList_S2C(const Msg_BindBankAccountList_S2C& from);

  inline Msg_BindBankAccountList_S2C& operator=(const Msg_BindBankAccountList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_BindBankAccountList_S2C& default_instance();

  void Swap(Msg_BindBankAccountList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_BindBankAccountList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_BindBankAccountList_S2C& from);
  void MergeFrom(const Msg_BindBankAccountList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.BindBankAccountInfo bank_list = 1;
  inline int bank_list_size() const;
  inline void clear_bank_list();
  static const int kBankListFieldNumber = 1;
  inline const ::dgame::BindBankAccountInfo& bank_list(int index) const;
  inline ::dgame::BindBankAccountInfo* mutable_bank_list(int index);
  inline ::dgame::BindBankAccountInfo* add_bank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::BindBankAccountInfo >&
      bank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::BindBankAccountInfo >*
      mutable_bank_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_BindBankAccountList_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::BindBankAccountInfo > bank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_BindBankAccountList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitList_C2S : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitList_C2S();
  virtual ~Msg_OriginalProductProfitList_C2S();

  Msg_OriginalProductProfitList_C2S(const Msg_OriginalProductProfitList_C2S& from);

  inline Msg_OriginalProductProfitList_C2S& operator=(const Msg_OriginalProductProfitList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitList_C2S& default_instance();

  void Swap(Msg_OriginalProductProfitList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitList_C2S& from);
  void MergeFrom(const Msg_OriginalProductProfitList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitList_C2S)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitList_S2C : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitList_S2C();
  virtual ~Msg_OriginalProductProfitList_S2C();

  Msg_OriginalProductProfitList_S2C(const Msg_OriginalProductProfitList_S2C& from);

  inline Msg_OriginalProductProfitList_S2C& operator=(const Msg_OriginalProductProfitList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitList_S2C& default_instance();

  void Swap(Msg_OriginalProductProfitList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitList_S2C& from);
  void MergeFrom(const Msg_OriginalProductProfitList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_profit = 1;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 1;
  inline ::google::protobuf::uint32 total_profit() const;
  inline void set_total_profit(::google::protobuf::uint32 value);

  // optional uint32 total_count = 2;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 2;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);

  // optional uint32 cur_index = 3;
  inline bool has_cur_index() const;
  inline void clear_cur_index();
  static const int kCurIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_index() const;
  inline void set_cur_index(::google::protobuf::uint32 value);

  // optional uint32 total_index = 4;
  inline bool has_total_index() const;
  inline void clear_total_index();
  static const int kTotalIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 total_index() const;
  inline void set_total_index(::google::protobuf::uint32 value);

  // repeated .dgame.OriginalProductProfitBaseInfo profit_list = 5;
  inline int profit_list_size() const;
  inline void clear_profit_list();
  static const int kProfitListFieldNumber = 5;
  inline const ::dgame::OriginalProductProfitBaseInfo& profit_list(int index) const;
  inline ::dgame::OriginalProductProfitBaseInfo* mutable_profit_list(int index);
  inline ::dgame::OriginalProductProfitBaseInfo* add_profit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitBaseInfo >&
      profit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitBaseInfo >*
      mutable_profit_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitList_S2C)
 private:
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_count();
  inline void clear_has_total_count();
  inline void set_has_cur_index();
  inline void clear_has_cur_index();
  inline void set_has_total_index();
  inline void clear_has_total_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_profit_;
  ::google::protobuf::uint32 total_count_;
  ::google::protobuf::uint32 cur_index_;
  ::google::protobuf::uint32 total_index_;
  ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitBaseInfo > profit_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitDetailList_C2S : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitDetailList_C2S();
  virtual ~Msg_OriginalProductProfitDetailList_C2S();

  Msg_OriginalProductProfitDetailList_C2S(const Msg_OriginalProductProfitDetailList_C2S& from);

  inline Msg_OriginalProductProfitDetailList_C2S& operator=(const Msg_OriginalProductProfitDetailList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitDetailList_C2S& default_instance();

  void Swap(Msg_OriginalProductProfitDetailList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitDetailList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitDetailList_C2S& from);
  void MergeFrom(const Msg_OriginalProductProfitDetailList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitDetailList_C2S)
 private:
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitDetailList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitDetailList_S2C : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitDetailList_S2C();
  virtual ~Msg_OriginalProductProfitDetailList_S2C();

  Msg_OriginalProductProfitDetailList_S2C(const Msg_OriginalProductProfitDetailList_S2C& from);

  inline Msg_OriginalProductProfitDetailList_S2C& operator=(const Msg_OriginalProductProfitDetailList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitDetailList_S2C& default_instance();

  void Swap(Msg_OriginalProductProfitDetailList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitDetailList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitDetailList_S2C& from);
  void MergeFrom(const Msg_OriginalProductProfitDetailList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_profit = 1;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 1;
  inline ::google::protobuf::uint32 total_profit() const;
  inline void set_total_profit(::google::protobuf::uint32 value);

  // optional uint32 cur_index = 2;
  inline bool has_cur_index() const;
  inline void clear_cur_index();
  static const int kCurIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_index() const;
  inline void set_cur_index(::google::protobuf::uint32 value);

  // optional uint32 total_index = 3;
  inline bool has_total_index() const;
  inline void clear_total_index();
  static const int kTotalIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 total_index() const;
  inline void set_total_index(::google::protobuf::uint32 value);

  // repeated .dgame.DayOriginalProductProfit profit_list = 4;
  inline int profit_list_size() const;
  inline void clear_profit_list();
  static const int kProfitListFieldNumber = 4;
  inline const ::dgame::DayOriginalProductProfit& profit_list(int index) const;
  inline ::dgame::DayOriginalProductProfit* mutable_profit_list(int index);
  inline ::dgame::DayOriginalProductProfit* add_profit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfit >&
      profit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfit >*
      mutable_profit_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitDetailList_S2C)
 private:
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_cur_index();
  inline void clear_has_cur_index();
  inline void set_has_total_index();
  inline void clear_has_total_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_profit_;
  ::google::protobuf::uint32 cur_index_;
  ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfit > profit_list_;
  ::google::protobuf::uint32 total_index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitDetailList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitDetail_C2S : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitDetail_C2S();
  virtual ~Msg_OriginalProductProfitDetail_C2S();

  Msg_OriginalProductProfitDetail_C2S(const Msg_OriginalProductProfitDetail_C2S& from);

  inline Msg_OriginalProductProfitDetail_C2S& operator=(const Msg_OriginalProductProfitDetail_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitDetail_C2S& default_instance();

  void Swap(Msg_OriginalProductProfitDetail_C2S* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitDetail_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitDetail_C2S& from);
  void MergeFrom(const Msg_OriginalProductProfitDetail_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitDetail_C2S)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitDetail_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductProfitDetail_S2C : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductProfitDetail_S2C();
  virtual ~Msg_OriginalProductProfitDetail_S2C();

  Msg_OriginalProductProfitDetail_S2C(const Msg_OriginalProductProfitDetail_S2C& from);

  inline Msg_OriginalProductProfitDetail_S2C& operator=(const Msg_OriginalProductProfitDetail_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductProfitDetail_S2C& default_instance();

  void Swap(Msg_OriginalProductProfitDetail_S2C* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductProfitDetail_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductProfitDetail_S2C& from);
  void MergeFrom(const Msg_OriginalProductProfitDetail_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 total_profit = 3;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 3;
  inline ::google::protobuf::uint32 total_profit() const;
  inline void set_total_profit(::google::protobuf::uint32 value);

  // optional uint32 total_count = 4;
  inline bool has_total_count() const;
  inline void clear_total_count();
  static const int kTotalCountFieldNumber = 4;
  inline ::google::protobuf::uint32 total_count() const;
  inline void set_total_count(::google::protobuf::uint32 value);

  // repeated .dgame.DayOriginalProductProfitBase profit_base_list = 5;
  inline int profit_base_list_size() const;
  inline void clear_profit_base_list();
  static const int kProfitBaseListFieldNumber = 5;
  inline const ::dgame::DayOriginalProductProfitBase& profit_base_list(int index) const;
  inline ::dgame::DayOriginalProductProfitBase* mutable_profit_base_list(int index);
  inline ::dgame::DayOriginalProductProfitBase* add_profit_base_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfitBase >&
      profit_base_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfitBase >*
      mutable_profit_base_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductProfitDetail_S2C)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_count();
  inline void clear_has_total_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 total_profit_;
  ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfitBase > profit_base_list_;
  ::google::protobuf::uint32 total_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductProfitDetail_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductDetail_C2S : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductDetail_C2S();
  virtual ~Msg_OriginalProductDetail_C2S();

  Msg_OriginalProductDetail_C2S(const Msg_OriginalProductDetail_C2S& from);

  inline Msg_OriginalProductDetail_C2S& operator=(const Msg_OriginalProductDetail_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductDetail_C2S& default_instance();

  void Swap(Msg_OriginalProductDetail_C2S* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductDetail_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductDetail_C2S& from);
  void MergeFrom(const Msg_OriginalProductDetail_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductDetail_C2S)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductDetail_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductDetail_S2C : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductDetail_S2C();
  virtual ~Msg_OriginalProductDetail_S2C();

  Msg_OriginalProductDetail_S2C(const Msg_OriginalProductDetail_S2C& from);

  inline Msg_OriginalProductDetail_S2C& operator=(const Msg_OriginalProductDetail_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductDetail_S2C& default_instance();

  void Swap(Msg_OriginalProductDetail_S2C* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductDetail_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductDetail_S2C& from);
  void MergeFrom(const Msg_OriginalProductDetail_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .dgame.OriginalProductDetail product_detail = 1;
  inline bool has_product_detail() const;
  inline void clear_product_detail();
  static const int kProductDetailFieldNumber = 1;
  inline const ::dgame::OriginalProductDetail& product_detail() const;
  inline ::dgame::OriginalProductDetail* mutable_product_detail();
  inline ::dgame::OriginalProductDetail* release_product_detail();
  inline void set_allocated_product_detail(::dgame::OriginalProductDetail* product_detail);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductDetail_S2C)
 private:
  inline void set_has_product_detail();
  inline void clear_has_product_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::dgame::OriginalProductDetail* product_detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductDetail_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductModify_C2S : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductModify_C2S();
  virtual ~Msg_OriginalProductModify_C2S();

  Msg_OriginalProductModify_C2S(const Msg_OriginalProductModify_C2S& from);

  inline Msg_OriginalProductModify_C2S& operator=(const Msg_OriginalProductModify_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductModify_C2S& default_instance();

  void Swap(Msg_OriginalProductModify_C2S* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductModify_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductModify_C2S& from);
  void MergeFrom(const Msg_OriginalProductModify_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 operation = 1;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::google::protobuf::uint32 operation() const;
  inline void set_operation(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .dgame.OriginalProductDetail product = 3;
  inline bool has_product() const;
  inline void clear_product();
  static const int kProductFieldNumber = 3;
  inline const ::dgame::OriginalProductDetail& product() const;
  inline ::dgame::OriginalProductDetail* mutable_product();
  inline ::dgame::OriginalProductDetail* release_product();
  inline void set_allocated_product(::dgame::OriginalProductDetail* product);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductModify_C2S)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_product();
  inline void clear_has_product();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 operation_;
  ::google::protobuf::uint32 id_;
  ::dgame::OriginalProductDetail* product_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductModify_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_OriginalProductModify_S2C : public ::google::protobuf::Message {
 public:
  Msg_OriginalProductModify_S2C();
  virtual ~Msg_OriginalProductModify_S2C();

  Msg_OriginalProductModify_S2C(const Msg_OriginalProductModify_S2C& from);

  inline Msg_OriginalProductModify_S2C& operator=(const Msg_OriginalProductModify_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_OriginalProductModify_S2C& default_instance();

  void Swap(Msg_OriginalProductModify_S2C* other);

  // implements Message ----------------------------------------------

  Msg_OriginalProductModify_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_OriginalProductModify_S2C& from);
  void MergeFrom(const Msg_OriginalProductModify_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 operation = 1;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 1;
  inline ::google::protobuf::uint32 operation() const;
  inline void set_operation(::google::protobuf::uint32 value);

  // optional uint32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // optional uint32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_OriginalProductModify_S2C)
 private:
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 operation_;
  ::google::protobuf::uint32 error_code_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_OriginalProductModify_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProfitList_C2S : public ::google::protobuf::Message {
 public:
  Msg_ProfitList_C2S();
  virtual ~Msg_ProfitList_C2S();

  Msg_ProfitList_C2S(const Msg_ProfitList_C2S& from);

  inline Msg_ProfitList_C2S& operator=(const Msg_ProfitList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProfitList_C2S& default_instance();

  void Swap(Msg_ProfitList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_ProfitList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProfitList_C2S& from);
  void MergeFrom(const Msg_ProfitList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_ProfitList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProfitList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProfitList_S2C : public ::google::protobuf::Message {
 public:
  Msg_ProfitList_S2C();
  virtual ~Msg_ProfitList_S2C();

  Msg_ProfitList_S2C(const Msg_ProfitList_S2C& from);

  inline Msg_ProfitList_S2C& operator=(const Msg_ProfitList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProfitList_S2C& default_instance();

  void Swap(Msg_ProfitList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_ProfitList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProfitList_S2C& from);
  void MergeFrom(const Msg_ProfitList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 balance = 1;
  inline bool has_balance() const;
  inline void clear_balance();
  static const int kBalanceFieldNumber = 1;
  inline ::google::protobuf::uint32 balance() const;
  inline void set_balance(::google::protobuf::uint32 value);

  // required uint32 total_profit = 2;
  inline bool has_total_profit() const;
  inline void clear_total_profit();
  static const int kTotalProfitFieldNumber = 2;
  inline ::google::protobuf::uint32 total_profit() const;
  inline void set_total_profit(::google::protobuf::uint32 value);

  // required uint32 total_withdraw = 3;
  inline bool has_total_withdraw() const;
  inline void clear_total_withdraw();
  static const int kTotalWithdrawFieldNumber = 3;
  inline ::google::protobuf::uint32 total_withdraw() const;
  inline void set_total_withdraw(::google::protobuf::uint32 value);

  // repeated .dgame.ProfitData profit_list = 4;
  inline int profit_list_size() const;
  inline void clear_profit_list();
  static const int kProfitListFieldNumber = 4;
  inline const ::dgame::ProfitData& profit_list(int index) const;
  inline ::dgame::ProfitData* mutable_profit_list(int index);
  inline ::dgame::ProfitData* add_profit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProfitData >&
      profit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::ProfitData >*
      mutable_profit_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_ProfitList_S2C)
 private:
  inline void set_has_balance();
  inline void clear_has_balance();
  inline void set_has_total_profit();
  inline void clear_has_total_profit();
  inline void set_has_total_withdraw();
  inline void clear_has_total_withdraw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 balance_;
  ::google::protobuf::uint32 total_profit_;
  ::google::protobuf::RepeatedPtrField< ::dgame::ProfitData > profit_list_;
  ::google::protobuf::uint32 total_withdraw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProfitList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Gold2Money_C2S : public ::google::protobuf::Message {
 public:
  Msg_Gold2Money_C2S();
  virtual ~Msg_Gold2Money_C2S();

  Msg_Gold2Money_C2S(const Msg_Gold2Money_C2S& from);

  inline Msg_Gold2Money_C2S& operator=(const Msg_Gold2Money_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Gold2Money_C2S& default_instance();

  void Swap(Msg_Gold2Money_C2S* other);

  // implements Message ----------------------------------------------

  Msg_Gold2Money_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Gold2Money_C2S& from);
  void MergeFrom(const Msg_Gold2Money_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 gold = 1;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 1;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_Gold2Money_C2S)
 private:
  inline void set_has_gold();
  inline void clear_has_gold();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Gold2Money_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_Gold2Money_S2C : public ::google::protobuf::Message {
 public:
  Msg_Gold2Money_S2C();
  virtual ~Msg_Gold2Money_S2C();

  Msg_Gold2Money_S2C(const Msg_Gold2Money_S2C& from);

  inline Msg_Gold2Money_S2C& operator=(const Msg_Gold2Money_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_Gold2Money_S2C& default_instance();

  void Swap(Msg_Gold2Money_S2C* other);

  // implements Message ----------------------------------------------

  Msg_Gold2Money_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_Gold2Money_S2C& from);
  void MergeFrom(const Msg_Gold2Money_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 error_code() const;
  inline void set_error_code(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_Gold2Money_S2C)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 error_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_Gold2Money_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CouponList_C2S : public ::google::protobuf::Message {
 public:
  Msg_CouponList_C2S();
  virtual ~Msg_CouponList_C2S();

  Msg_CouponList_C2S(const Msg_CouponList_C2S& from);

  inline Msg_CouponList_C2S& operator=(const Msg_CouponList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CouponList_C2S& default_instance();

  void Swap(Msg_CouponList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_CouponList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CouponList_C2S& from);
  void MergeFrom(const Msg_CouponList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_CouponList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CouponList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CouponList_S2C : public ::google::protobuf::Message {
 public:
  Msg_CouponList_S2C();
  virtual ~Msg_CouponList_S2C();

  Msg_CouponList_S2C(const Msg_CouponList_S2C& from);

  inline Msg_CouponList_S2C& operator=(const Msg_CouponList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CouponList_S2C& default_instance();

  void Swap(Msg_CouponList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_CouponList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CouponList_S2C& from);
  void MergeFrom(const Msg_CouponList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.CouponData coupon_list = 1;
  inline int coupon_list_size() const;
  inline void clear_coupon_list();
  static const int kCouponListFieldNumber = 1;
  inline const ::dgame::CouponData& coupon_list(int index) const;
  inline ::dgame::CouponData* mutable_coupon_list(int index);
  inline ::dgame::CouponData* add_coupon_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::CouponData >&
      coupon_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::CouponData >*
      mutable_coupon_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_CouponList_S2C)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::CouponData > coupon_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CouponList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GlodPercent_C2S : public ::google::protobuf::Message {
 public:
  Msg_GlodPercent_C2S();
  virtual ~Msg_GlodPercent_C2S();

  Msg_GlodPercent_C2S(const Msg_GlodPercent_C2S& from);

  inline Msg_GlodPercent_C2S& operator=(const Msg_GlodPercent_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GlodPercent_C2S& default_instance();

  void Swap(Msg_GlodPercent_C2S* other);

  // implements Message ----------------------------------------------

  Msg_GlodPercent_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GlodPercent_C2S& from);
  void MergeFrom(const Msg_GlodPercent_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_GlodPercent_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GlodPercent_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_GlodPercent_S2C : public ::google::protobuf::Message {
 public:
  Msg_GlodPercent_S2C();
  virtual ~Msg_GlodPercent_S2C();

  Msg_GlodPercent_S2C(const Msg_GlodPercent_S2C& from);

  inline Msg_GlodPercent_S2C& operator=(const Msg_GlodPercent_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_GlodPercent_S2C& default_instance();

  void Swap(Msg_GlodPercent_S2C* other);

  // implements Message ----------------------------------------------

  Msg_GlodPercent_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_GlodPercent_S2C& from);
  void MergeFrom(const Msg_GlodPercent_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float pecent = 1;
  inline bool has_pecent() const;
  inline void clear_pecent();
  static const int kPecentFieldNumber = 1;
  inline float pecent() const;
  inline void set_pecent(float value);

  // @@protoc_insertion_point(class_scope:CS.Msg_GlodPercent_S2C)
 private:
  inline void set_has_pecent();
  inline void clear_has_pecent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  float pecent_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_GlodPercent_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_TradeDetailList_C2S : public ::google::protobuf::Message {
 public:
  Msg_TradeDetailList_C2S();
  virtual ~Msg_TradeDetailList_C2S();

  Msg_TradeDetailList_C2S(const Msg_TradeDetailList_C2S& from);

  inline Msg_TradeDetailList_C2S& operator=(const Msg_TradeDetailList_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_TradeDetailList_C2S& default_instance();

  void Swap(Msg_TradeDetailList_C2S* other);

  // implements Message ----------------------------------------------

  Msg_TradeDetailList_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_TradeDetailList_C2S& from);
  void MergeFrom(const Msg_TradeDetailList_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_TradeDetailList_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_TradeDetailList_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_TradeDetailList_S2C : public ::google::protobuf::Message {
 public:
  Msg_TradeDetailList_S2C();
  virtual ~Msg_TradeDetailList_S2C();

  Msg_TradeDetailList_S2C(const Msg_TradeDetailList_S2C& from);

  inline Msg_TradeDetailList_S2C& operator=(const Msg_TradeDetailList_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_TradeDetailList_S2C& default_instance();

  void Swap(Msg_TradeDetailList_S2C* other);

  // implements Message ----------------------------------------------

  Msg_TradeDetailList_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_TradeDetailList_S2C& from);
  void MergeFrom(const Msg_TradeDetailList_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pop = 1;
  inline bool has_pop() const;
  inline void clear_pop();
  static const int kPopFieldNumber = 1;
  inline ::google::protobuf::uint32 pop() const;
  inline void set_pop(::google::protobuf::uint32 value);

  // optional uint32 push = 2;
  inline bool has_push() const;
  inline void clear_push();
  static const int kPushFieldNumber = 2;
  inline ::google::protobuf::uint32 push() const;
  inline void set_push(::google::protobuf::uint32 value);

  // repeated .dgame.TradeInfo trade_list = 3;
  inline int trade_list_size() const;
  inline void clear_trade_list();
  static const int kTradeListFieldNumber = 3;
  inline const ::dgame::TradeInfo& trade_list(int index) const;
  inline ::dgame::TradeInfo* mutable_trade_list(int index);
  inline ::dgame::TradeInfo* add_trade_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::TradeInfo >&
      trade_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::TradeInfo >*
      mutable_trade_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_TradeDetailList_S2C)
 private:
  inline void set_has_pop();
  inline void clear_has_pop();
  inline void set_has_push();
  inline void clear_has_push();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pop_;
  ::google::protobuf::uint32 push_;
  ::google::protobuf::RepeatedPtrField< ::dgame::TradeInfo > trade_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_TradeDetailList_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_PrePayOrderCreate_C2S : public ::google::protobuf::Message {
 public:
  Msg_PrePayOrderCreate_C2S();
  virtual ~Msg_PrePayOrderCreate_C2S();

  Msg_PrePayOrderCreate_C2S(const Msg_PrePayOrderCreate_C2S& from);

  inline Msg_PrePayOrderCreate_C2S& operator=(const Msg_PrePayOrderCreate_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_PrePayOrderCreate_C2S& default_instance();

  void Swap(Msg_PrePayOrderCreate_C2S* other);

  // implements Message ----------------------------------------------

  Msg_PrePayOrderCreate_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_PrePayOrderCreate_C2S& from);
  void MergeFrom(const Msg_PrePayOrderCreate_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_fee = 1;
  inline bool has_total_fee() const;
  inline void clear_total_fee();
  static const int kTotalFeeFieldNumber = 1;
  inline ::google::protobuf::uint32 total_fee() const;
  inline void set_total_fee(::google::protobuf::uint32 value);

  // optional uint32 platform = 2;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 2;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_PrePayOrderCreate_C2S)
 private:
  inline void set_has_total_fee();
  inline void clear_has_total_fee();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_fee_;
  ::google::protobuf::uint32 platform_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_PrePayOrderCreate_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_PrePayOrderCreate_S2C : public ::google::protobuf::Message {
 public:
  Msg_PrePayOrderCreate_S2C();
  virtual ~Msg_PrePayOrderCreate_S2C();

  Msg_PrePayOrderCreate_S2C(const Msg_PrePayOrderCreate_S2C& from);

  inline Msg_PrePayOrderCreate_S2C& operator=(const Msg_PrePayOrderCreate_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_PrePayOrderCreate_S2C& default_instance();

  void Swap(Msg_PrePayOrderCreate_S2C* other);

  // implements Message ----------------------------------------------

  Msg_PrePayOrderCreate_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_PrePayOrderCreate_S2C& from);
  void MergeFrom(const Msg_PrePayOrderCreate_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 return_code = 1;
  inline bool has_return_code() const;
  inline void clear_return_code();
  static const int kReturnCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 return_code() const;
  inline void set_return_code(::google::protobuf::uint32 value);

  // optional string prepay_id = 2;
  inline bool has_prepay_id() const;
  inline void clear_prepay_id();
  static const int kPrepayIdFieldNumber = 2;
  inline const ::std::string& prepay_id() const;
  inline void set_prepay_id(const ::std::string& value);
  inline void set_prepay_id(const char* value);
  inline void set_prepay_id(const char* value, size_t size);
  inline ::std::string* mutable_prepay_id();
  inline ::std::string* release_prepay_id();
  inline void set_allocated_prepay_id(::std::string* prepay_id);

  // optional string sign = 3;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 3;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string appid = 4;
  inline bool has_appid() const;
  inline void clear_appid();
  static const int kAppidFieldNumber = 4;
  inline const ::std::string& appid() const;
  inline void set_appid(const ::std::string& value);
  inline void set_appid(const char* value);
  inline void set_appid(const char* value, size_t size);
  inline ::std::string* mutable_appid();
  inline ::std::string* release_appid();
  inline void set_allocated_appid(::std::string* appid);

  // optional string nonce_str = 5;
  inline bool has_nonce_str() const;
  inline void clear_nonce_str();
  static const int kNonceStrFieldNumber = 5;
  inline const ::std::string& nonce_str() const;
  inline void set_nonce_str(const ::std::string& value);
  inline void set_nonce_str(const char* value);
  inline void set_nonce_str(const char* value, size_t size);
  inline ::std::string* mutable_nonce_str();
  inline ::std::string* release_nonce_str();
  inline void set_allocated_nonce_str(::std::string* nonce_str);

  // optional string timestamp = 6;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 6;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  inline ::std::string* release_timestamp();
  inline void set_allocated_timestamp(::std::string* timestamp);

  // optional string mch_id = 7;
  inline bool has_mch_id() const;
  inline void clear_mch_id();
  static const int kMchIdFieldNumber = 7;
  inline const ::std::string& mch_id() const;
  inline void set_mch_id(const ::std::string& value);
  inline void set_mch_id(const char* value);
  inline void set_mch_id(const char* value, size_t size);
  inline ::std::string* mutable_mch_id();
  inline ::std::string* release_mch_id();
  inline void set_allocated_mch_id(::std::string* mch_id);

  // optional uint32 platform = 8;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 8;
  inline ::google::protobuf::uint32 platform() const;
  inline void set_platform(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Msg_PrePayOrderCreate_S2C)
 private:
  inline void set_has_return_code();
  inline void clear_has_return_code();
  inline void set_has_prepay_id();
  inline void clear_has_prepay_id();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_appid();
  inline void clear_has_appid();
  inline void set_has_nonce_str();
  inline void clear_has_nonce_str();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_mch_id();
  inline void clear_has_mch_id();
  inline void set_has_platform();
  inline void clear_has_platform();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* prepay_id_;
  ::std::string* sign_;
  ::std::string* appid_;
  ::google::protobuf::uint32 return_code_;
  ::google::protobuf::uint32 platform_;
  ::std::string* nonce_str_;
  ::std::string* timestamp_;
  ::std::string* mch_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_PrePayOrderCreate_S2C* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProductSpace_C2S : public ::google::protobuf::Message {
 public:
  Msg_ProductSpace_C2S();
  virtual ~Msg_ProductSpace_C2S();

  Msg_ProductSpace_C2S(const Msg_ProductSpace_C2S& from);

  inline Msg_ProductSpace_C2S& operator=(const Msg_ProductSpace_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProductSpace_C2S& default_instance();

  void Swap(Msg_ProductSpace_C2S* other);

  // implements Message ----------------------------------------------

  Msg_ProductSpace_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProductSpace_C2S& from);
  void MergeFrom(const Msg_ProductSpace_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dgame.ProductSpaceCategoryInfo Category_list = 1;
  inline int category_list_size() const;
  inline void clear_category_list();
  static const int kCategoryListFieldNumber = 1;
  inline const ::dgame::ProductSpaceCategoryInfo& category_list(int index) const;
  inline ::dgame::ProductSpaceCategoryInfo* mutable_category_list(int index);
  inline ::dgame::ProductSpaceCategoryInfo* add_category_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceCategoryInfo >&
      category_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceCategoryInfo >*
      mutable_category_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_ProductSpace_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceCategoryInfo > category_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProductSpace_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_ProductSpace_S2C : public ::google::protobuf::Message {
 public:
  Msg_ProductSpace_S2C();
  virtual ~Msg_ProductSpace_S2C();

  Msg_ProductSpace_S2C(const Msg_ProductSpace_S2C& from);

  inline Msg_ProductSpace_S2C& operator=(const Msg_ProductSpace_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_ProductSpace_S2C& default_instance();

  void Swap(Msg_ProductSpace_S2C* other);

  // implements Message ----------------------------------------------

  Msg_ProductSpace_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_ProductSpace_S2C& from);
  void MergeFrom(const Msg_ProductSpace_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 return_code = 1;
  inline bool has_return_code() const;
  inline void clear_return_code();
  static const int kReturnCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 return_code() const;
  inline void set_return_code(::google::protobuf::uint32 value);

  // repeated .dgame.ProductSpaceProductInfo Product_list = 2;
  inline int product_list_size() const;
  inline void clear_product_list();
  static const int kProductListFieldNumber = 2;
  inline const ::dgame::ProductSpaceProductInfo& product_list(int index) const;
  inline ::dgame::ProductSpaceProductInfo* mutable_product_list(int index);
  inline ::dgame::ProductSpaceProductInfo* add_product_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceProductInfo >&
      product_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceProductInfo >*
      mutable_product_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_ProductSpace_S2C)
 private:
  inline void set_has_return_code();
  inline void clear_has_return_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceProductInfo > product_list_;
  ::google::protobuf::uint32 return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_ProductSpace_S2C* default_instance_;
};
// -------------------------------------------------------------------

class OrderInfo : public ::google::protobuf::Message {
 public:
  OrderInfo();
  virtual ~OrderInfo();

  OrderInfo(const OrderInfo& from);

  inline OrderInfo& operator=(const OrderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderInfo& default_instance();

  void Swap(OrderInfo* other);

  // implements Message ----------------------------------------------

  OrderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderInfo& from);
  void MergeFrom(const OrderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CS.Order order = 1;
  inline bool has_order() const;
  inline void clear_order();
  static const int kOrderFieldNumber = 1;
  inline const ::CS::Order& order() const;
  inline ::CS::Order* mutable_order();
  inline ::CS::Order* release_order();
  inline void set_allocated_order(::CS::Order* order);

  // optional .CS.OrderReceiver order_receiver = 2;
  inline bool has_order_receiver() const;
  inline void clear_order_receiver();
  static const int kOrderReceiverFieldNumber = 2;
  inline const ::CS::OrderReceiver& order_receiver() const;
  inline ::CS::OrderReceiver* mutable_order_receiver();
  inline ::CS::OrderReceiver* release_order_receiver();
  inline void set_allocated_order_receiver(::CS::OrderReceiver* order_receiver);

  // optional bool has_invoice = 3;
  inline bool has_has_invoice() const;
  inline void clear_has_invoice();
  static const int kHasInvoiceFieldNumber = 3;
  inline bool has_invoice() const;
  inline void set_has_invoice(bool value);

  // optional .CS.OrderInvoice order_invoice = 4;
  inline bool has_order_invoice() const;
  inline void clear_order_invoice();
  static const int kOrderInvoiceFieldNumber = 4;
  inline const ::CS::OrderInvoice& order_invoice() const;
  inline ::CS::OrderInvoice* mutable_order_invoice();
  inline ::CS::OrderInvoice* release_order_invoice();
  inline void set_allocated_order_invoice(::CS::OrderInvoice* order_invoice);

  // repeated .CS.OrderLog order_log = 5;
  inline int order_log_size() const;
  inline void clear_order_log();
  static const int kOrderLogFieldNumber = 5;
  inline const ::CS::OrderLog& order_log(int index) const;
  inline ::CS::OrderLog* mutable_order_log(int index);
  inline ::CS::OrderLog* add_order_log();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::OrderLog >&
      order_log() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::OrderLog >*
      mutable_order_log();

  // @@protoc_insertion_point(class_scope:CS.OrderInfo)
 private:
  inline void set_has_order();
  inline void clear_has_order();
  inline void set_has_order_receiver();
  inline void clear_has_order_receiver();
  inline void set_has_has_invoice();
  inline void clear_has_has_invoice();
  inline void set_has_order_invoice();
  inline void clear_has_order_invoice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::Order* order_;
  ::CS::OrderReceiver* order_receiver_;
  ::CS::OrderInvoice* order_invoice_;
  ::google::protobuf::RepeatedPtrField< ::CS::OrderLog > order_log_;
  bool has_invoice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderInfo* default_instance_;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  void Swap(Order* other);

  // implements Message ----------------------------------------------

  Order* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string order_code = 2;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 2;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional uint32 status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional int64 order_time = 4;
  inline bool has_order_time() const;
  inline void clear_order_time();
  static const int kOrderTimeFieldNumber = 4;
  inline ::google::protobuf::int64 order_time() const;
  inline void set_order_time(::google::protobuf::int64 value);

  // repeated .CS.OrderGoods goods_list = 5;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 5;
  inline const ::CS::OrderGoods& goods_list(int index) const;
  inline ::CS::OrderGoods* mutable_goods_list(int index);
  inline ::CS::OrderGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::OrderGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::OrderGoods >*
      mutable_goods_list();

  // optional string act_id = 6;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 6;
  inline const ::std::string& act_id() const;
  inline void set_act_id(const ::std::string& value);
  inline void set_act_id(const char* value);
  inline void set_act_id(const char* value, size_t size);
  inline ::std::string* mutable_act_id();
  inline ::std::string* release_act_id();
  inline void set_allocated_act_id(::std::string* act_id);

  // optional float total_price = 7;
  inline bool has_total_price() const;
  inline void clear_total_price();
  static const int kTotalPriceFieldNumber = 7;
  inline float total_price() const;
  inline void set_total_price(float value);

  // optional uint32 total_num = 8;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 8;
  inline ::google::protobuf::uint32 total_num() const;
  inline void set_total_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.Order)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_order_time();
  inline void clear_has_order_time();
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_total_price();
  inline void clear_has_total_price();
  inline void set_has_total_num();
  inline void clear_has_total_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::int64 order_time_;
  ::google::protobuf::RepeatedPtrField< ::CS::OrderGoods > goods_list_;
  ::std::string* act_id_;
  float total_price_;
  ::google::protobuf::uint32 total_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Order* default_instance_;
};
// -------------------------------------------------------------------

class OrderGoods : public ::google::protobuf::Message {
 public:
  OrderGoods();
  virtual ~OrderGoods();

  OrderGoods(const OrderGoods& from);

  inline OrderGoods& operator=(const OrderGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderGoods& default_instance();

  void Swap(OrderGoods* other);

  // implements Message ----------------------------------------------

  OrderGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderGoods& from);
  void MergeFrom(const OrderGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline float price() const;
  inline void set_price(float value);

  // optional uint32 num = 4;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 4;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string image_url = 5;
  inline bool has_image_url() const;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 5;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional string shape = 6;
  inline bool has_shape() const;
  inline void clear_shape();
  static const int kShapeFieldNumber = 6;
  inline const ::std::string& shape() const;
  inline void set_shape(const ::std::string& value);
  inline void set_shape(const char* value);
  inline void set_shape(const char* value, size_t size);
  inline ::std::string* mutable_shape();
  inline ::std::string* release_shape();
  inline void set_allocated_shape(::std::string* shape);

  // optional string sign = 7;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 7;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string product_id = 8;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 8;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // optional string opus_id = 9;
  inline bool has_opus_id() const;
  inline void clear_opus_id();
  static const int kOpusIdFieldNumber = 9;
  inline const ::std::string& opus_id() const;
  inline void set_opus_id(const ::std::string& value);
  inline void set_opus_id(const char* value);
  inline void set_opus_id(const char* value, size_t size);
  inline ::std::string* mutable_opus_id();
  inline ::std::string* release_opus_id();
  inline void set_allocated_opus_id(::std::string* opus_id);

  // optional string ware_id = 10;
  inline bool has_ware_id() const;
  inline void clear_ware_id();
  static const int kWareIdFieldNumber = 10;
  inline const ::std::string& ware_id() const;
  inline void set_ware_id(const ::std::string& value);
  inline void set_ware_id(const char* value);
  inline void set_ware_id(const char* value, size_t size);
  inline ::std::string* mutable_ware_id();
  inline ::std::string* release_ware_id();
  inline void set_allocated_ware_id(::std::string* ware_id);

  // repeated .CS.GoodsPart goods_part_list = 11;
  inline int goods_part_list_size() const;
  inline void clear_goods_part_list();
  static const int kGoodsPartListFieldNumber = 11;
  inline const ::CS::GoodsPart& goods_part_list(int index) const;
  inline ::CS::GoodsPart* mutable_goods_part_list(int index);
  inline ::CS::GoodsPart* add_goods_part_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >&
      goods_part_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >*
      mutable_goods_part_list();

  // @@protoc_insertion_point(class_scope:CS.OrderGoods)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_image_url();
  inline void clear_has_image_url();
  inline void set_has_shape();
  inline void clear_has_shape();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_opus_id();
  inline void clear_has_opus_id();
  inline void set_has_ware_id();
  inline void clear_has_ware_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  float price_;
  ::std::string* image_url_;
  ::std::string* shape_;
  ::std::string* sign_;
  ::std::string* product_id_;
  ::std::string* opus_id_;
  ::std::string* ware_id_;
  ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart > goods_part_list_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderGoods* default_instance_;
};
// -------------------------------------------------------------------

class OrderReceiver : public ::google::protobuf::Message {
 public:
  OrderReceiver();
  virtual ~OrderReceiver();

  OrderReceiver(const OrderReceiver& from);

  inline OrderReceiver& operator=(const OrderReceiver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderReceiver& default_instance();

  void Swap(OrderReceiver* other);

  // implements Message ----------------------------------------------

  OrderReceiver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderReceiver& from);
  void MergeFrom(const OrderReceiver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string phone = 2;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 2;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string address = 3;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 3;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // @@protoc_insertion_point(class_scope:CS.OrderReceiver)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_address();
  inline void clear_has_address();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* address_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderReceiver* default_instance_;
};
// -------------------------------------------------------------------

class OrderInvoice : public ::google::protobuf::Message {
 public:
  OrderInvoice();
  virtual ~OrderInvoice();

  OrderInvoice(const OrderInvoice& from);

  inline OrderInvoice& operator=(const OrderInvoice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderInvoice& default_instance();

  void Swap(OrderInvoice* other);

  // implements Message ----------------------------------------------

  OrderInvoice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderInvoice& from);
  void MergeFrom(const OrderInvoice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:CS.OrderInvoice)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderInvoice* default_instance_;
};
// -------------------------------------------------------------------

class OrderLog : public ::google::protobuf::Message {
 public:
  OrderLog();
  virtual ~OrderLog();

  OrderLog(const OrderLog& from);

  inline OrderLog& operator=(const OrderLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderLog& default_instance();

  void Swap(OrderLog* other);

  // implements Message ----------------------------------------------

  OrderLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderLog& from);
  void MergeFrom(const OrderLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 create_date = 1;
  inline bool has_create_date() const;
  inline void clear_create_date();
  static const int kCreateDateFieldNumber = 1;
  inline ::google::protobuf::int64 create_date() const;
  inline void set_create_date(::google::protobuf::int64 value);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:CS.OrderLog)
 private:
  inline void set_has_create_date();
  inline void clear_has_create_date();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 create_date_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderLog* default_instance_;
};
// -------------------------------------------------------------------

class OrderQuery : public ::google::protobuf::Message {
 public:
  OrderQuery();
  virtual ~OrderQuery();

  OrderQuery(const OrderQuery& from);

  inline OrderQuery& operator=(const OrderQuery& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OrderQuery& default_instance();

  void Swap(OrderQuery* other);

  // implements Message ----------------------------------------------

  OrderQuery* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OrderQuery& from);
  void MergeFrom(const OrderQuery& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.OrderQuery)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OrderQuery* default_instance_;
};
// -------------------------------------------------------------------

class query_all_order_req : public ::google::protobuf::Message {
 public:
  query_all_order_req();
  virtual ~query_all_order_req();

  query_all_order_req(const query_all_order_req& from);

  inline query_all_order_req& operator=(const query_all_order_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_all_order_req& default_instance();

  void Swap(query_all_order_req* other);

  // implements Message ----------------------------------------------

  query_all_order_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_all_order_req& from);
  void MergeFrom(const query_all_order_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_page = 1;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_page() const;
  inline void set_cur_page(::google::protobuf::uint32 value);

  // optional uint32 page_size = 2;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 page_size() const;
  inline void set_page_size(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.query_all_order_req)
 private:
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_page_size();
  inline void clear_has_page_size();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_page_;
  ::google::protobuf::uint32 page_size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_all_order_req* default_instance_;
};
// -------------------------------------------------------------------

class query_all_order_res : public ::google::protobuf::Message {
 public:
  query_all_order_res();
  virtual ~query_all_order_res();

  query_all_order_res(const query_all_order_res& from);

  inline query_all_order_res& operator=(const query_all_order_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_all_order_res& default_instance();

  void Swap(query_all_order_res* other);

  // implements Message ----------------------------------------------

  query_all_order_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_all_order_res& from);
  void MergeFrom(const query_all_order_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.Order order_list = 1;
  inline int order_list_size() const;
  inline void clear_order_list();
  static const int kOrderListFieldNumber = 1;
  inline const ::CS::Order& order_list(int index) const;
  inline ::CS::Order* mutable_order_list(int index);
  inline ::CS::Order* add_order_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Order >&
      order_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Order >*
      mutable_order_list();

  // optional uint32 total_page = 2;
  inline bool has_total_page() const;
  inline void clear_total_page();
  static const int kTotalPageFieldNumber = 2;
  inline ::google::protobuf::uint32 total_page() const;
  inline void set_total_page(::google::protobuf::uint32 value);

  // optional string result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline const ::std::string& result_code() const;
  inline void set_result_code(const ::std::string& value);
  inline void set_result_code(const char* value);
  inline void set_result_code(const char* value, size_t size);
  inline ::std::string* mutable_result_code();
  inline ::std::string* release_result_code();
  inline void set_allocated_result_code(::std::string* result_code);

  // optional string result_des = 4;
  inline bool has_result_des() const;
  inline void clear_result_des();
  static const int kResultDesFieldNumber = 4;
  inline const ::std::string& result_des() const;
  inline void set_result_des(const ::std::string& value);
  inline void set_result_des(const char* value);
  inline void set_result_des(const char* value, size_t size);
  inline ::std::string* mutable_result_des();
  inline ::std::string* release_result_des();
  inline void set_allocated_result_des(::std::string* result_des);

  // optional uint32 total_num = 5;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 5;
  inline ::google::protobuf::uint32 total_num() const;
  inline void set_total_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.query_all_order_res)
 private:
  inline void set_has_total_page();
  inline void clear_has_total_page();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_des();
  inline void clear_has_result_des();
  inline void set_has_total_num();
  inline void clear_has_total_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::Order > order_list_;
  ::std::string* result_code_;
  ::google::protobuf::uint32 total_page_;
  ::google::protobuf::uint32 total_num_;
  ::std::string* result_des_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_all_order_res* default_instance_;
};
// -------------------------------------------------------------------

class query_con_order_req : public ::google::protobuf::Message {
 public:
  query_con_order_req();
  virtual ~query_con_order_req();

  query_con_order_req(const query_con_order_req& from);

  inline query_con_order_req& operator=(const query_con_order_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_con_order_req& default_instance();

  void Swap(query_con_order_req* other);

  // implements Message ----------------------------------------------

  query_con_order_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_con_order_req& from);
  void MergeFrom(const query_con_order_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_page = 1;
  inline bool has_cur_page() const;
  inline void clear_cur_page();
  static const int kCurPageFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_page() const;
  inline void set_cur_page(::google::protobuf::uint32 value);

  // optional uint32 page_size = 2;
  inline bool has_page_size() const;
  inline void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 page_size() const;
  inline void set_page_size(::google::protobuf::uint32 value);

  // optional .CS.OrderQuery order_query = 3;
  inline bool has_order_query() const;
  inline void clear_order_query();
  static const int kOrderQueryFieldNumber = 3;
  inline const ::CS::OrderQuery& order_query() const;
  inline ::CS::OrderQuery* mutable_order_query();
  inline ::CS::OrderQuery* release_order_query();
  inline void set_allocated_order_query(::CS::OrderQuery* order_query);

  // @@protoc_insertion_point(class_scope:CS.query_con_order_req)
 private:
  inline void set_has_cur_page();
  inline void clear_has_cur_page();
  inline void set_has_page_size();
  inline void clear_has_page_size();
  inline void set_has_order_query();
  inline void clear_has_order_query();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_page_;
  ::google::protobuf::uint32 page_size_;
  ::CS::OrderQuery* order_query_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_con_order_req* default_instance_;
};
// -------------------------------------------------------------------

class query_con_order_res : public ::google::protobuf::Message {
 public:
  query_con_order_res();
  virtual ~query_con_order_res();

  query_con_order_res(const query_con_order_res& from);

  inline query_con_order_res& operator=(const query_con_order_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_con_order_res& default_instance();

  void Swap(query_con_order_res* other);

  // implements Message ----------------------------------------------

  query_con_order_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_con_order_res& from);
  void MergeFrom(const query_con_order_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.Order order_list = 1;
  inline int order_list_size() const;
  inline void clear_order_list();
  static const int kOrderListFieldNumber = 1;
  inline const ::CS::Order& order_list(int index) const;
  inline ::CS::Order* mutable_order_list(int index);
  inline ::CS::Order* add_order_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Order >&
      order_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Order >*
      mutable_order_list();

  // optional uint32 total_page = 2;
  inline bool has_total_page() const;
  inline void clear_total_page();
  static const int kTotalPageFieldNumber = 2;
  inline ::google::protobuf::uint32 total_page() const;
  inline void set_total_page(::google::protobuf::uint32 value);

  // optional string result_code = 3;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 3;
  inline const ::std::string& result_code() const;
  inline void set_result_code(const ::std::string& value);
  inline void set_result_code(const char* value);
  inline void set_result_code(const char* value, size_t size);
  inline ::std::string* mutable_result_code();
  inline ::std::string* release_result_code();
  inline void set_allocated_result_code(::std::string* result_code);

  // optional string result_des = 4;
  inline bool has_result_des() const;
  inline void clear_result_des();
  static const int kResultDesFieldNumber = 4;
  inline const ::std::string& result_des() const;
  inline void set_result_des(const ::std::string& value);
  inline void set_result_des(const char* value);
  inline void set_result_des(const char* value, size_t size);
  inline ::std::string* mutable_result_des();
  inline ::std::string* release_result_des();
  inline void set_allocated_result_des(::std::string* result_des);

  // optional uint32 total_num = 5;
  inline bool has_total_num() const;
  inline void clear_total_num();
  static const int kTotalNumFieldNumber = 5;
  inline ::google::protobuf::uint32 total_num() const;
  inline void set_total_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.query_con_order_res)
 private:
  inline void set_has_total_page();
  inline void clear_has_total_page();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_des();
  inline void clear_has_result_des();
  inline void set_has_total_num();
  inline void clear_has_total_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::Order > order_list_;
  ::std::string* result_code_;
  ::google::protobuf::uint32 total_page_;
  ::google::protobuf::uint32 total_num_;
  ::std::string* result_des_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_con_order_res* default_instance_;
};
// -------------------------------------------------------------------

class query_single_order_req : public ::google::protobuf::Message {
 public:
  query_single_order_req();
  virtual ~query_single_order_req();

  query_single_order_req(const query_single_order_req& from);

  inline query_single_order_req& operator=(const query_single_order_req& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_single_order_req& default_instance();

  void Swap(query_single_order_req* other);

  // implements Message ----------------------------------------------

  query_single_order_req* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_single_order_req& from);
  void MergeFrom(const query_single_order_req& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // @@protoc_insertion_point(class_scope:CS.query_single_order_req)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_single_order_req* default_instance_;
};
// -------------------------------------------------------------------

class query_single_order_res : public ::google::protobuf::Message {
 public:
  query_single_order_res();
  virtual ~query_single_order_res();

  query_single_order_res(const query_single_order_res& from);

  inline query_single_order_res& operator=(const query_single_order_res& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const query_single_order_res& default_instance();

  void Swap(query_single_order_res* other);

  // implements Message ----------------------------------------------

  query_single_order_res* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const query_single_order_res& from);
  void MergeFrom(const query_single_order_res& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CS.OrderInfo orderInfo = 1;
  inline bool has_orderinfo() const;
  inline void clear_orderinfo();
  static const int kOrderInfoFieldNumber = 1;
  inline const ::CS::OrderInfo& orderinfo() const;
  inline ::CS::OrderInfo* mutable_orderinfo();
  inline ::CS::OrderInfo* release_orderinfo();
  inline void set_allocated_orderinfo(::CS::OrderInfo* orderinfo);

  // optional string result_code = 2;
  inline bool has_result_code() const;
  inline void clear_result_code();
  static const int kResultCodeFieldNumber = 2;
  inline const ::std::string& result_code() const;
  inline void set_result_code(const ::std::string& value);
  inline void set_result_code(const char* value);
  inline void set_result_code(const char* value, size_t size);
  inline ::std::string* mutable_result_code();
  inline ::std::string* release_result_code();
  inline void set_allocated_result_code(::std::string* result_code);

  // optional string result_des = 3;
  inline bool has_result_des() const;
  inline void clear_result_des();
  static const int kResultDesFieldNumber = 3;
  inline const ::std::string& result_des() const;
  inline void set_result_des(const ::std::string& value);
  inline void set_result_des(const char* value);
  inline void set_result_des(const char* value, size_t size);
  inline ::std::string* mutable_result_des();
  inline ::std::string* release_result_des();
  inline void set_allocated_result_des(::std::string* result_des);

  // @@protoc_insertion_point(class_scope:CS.query_single_order_res)
 private:
  inline void set_has_orderinfo();
  inline void clear_has_orderinfo();
  inline void set_has_result_code();
  inline void clear_has_result_code();
  inline void set_has_result_des();
  inline void clear_has_result_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::OrderInfo* orderinfo_;
  ::std::string* result_code_;
  ::std::string* result_des_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static query_single_order_res* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CooperationProductSpace_C2S : public ::google::protobuf::Message {
 public:
  Msg_CooperationProductSpace_C2S();
  virtual ~Msg_CooperationProductSpace_C2S();

  Msg_CooperationProductSpace_C2S(const Msg_CooperationProductSpace_C2S& from);

  inline Msg_CooperationProductSpace_C2S& operator=(const Msg_CooperationProductSpace_C2S& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CooperationProductSpace_C2S& default_instance();

  void Swap(Msg_CooperationProductSpace_C2S* other);

  // implements Message ----------------------------------------------

  Msg_CooperationProductSpace_C2S* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CooperationProductSpace_C2S& from);
  void MergeFrom(const Msg_CooperationProductSpace_C2S& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:CS.Msg_CooperationProductSpace_C2S)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CooperationProductSpace_C2S* default_instance_;
};
// -------------------------------------------------------------------

class Msg_CooperationProductSpace_S2C : public ::google::protobuf::Message {
 public:
  Msg_CooperationProductSpace_S2C();
  virtual ~Msg_CooperationProductSpace_S2C();

  Msg_CooperationProductSpace_S2C(const Msg_CooperationProductSpace_S2C& from);

  inline Msg_CooperationProductSpace_S2C& operator=(const Msg_CooperationProductSpace_S2C& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Msg_CooperationProductSpace_S2C& default_instance();

  void Swap(Msg_CooperationProductSpace_S2C* other);

  // implements Message ----------------------------------------------

  Msg_CooperationProductSpace_S2C* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Msg_CooperationProductSpace_S2C& from);
  void MergeFrom(const Msg_CooperationProductSpace_S2C& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 return_code = 1;
  inline bool has_return_code() const;
  inline void clear_return_code();
  static const int kReturnCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 return_code() const;
  inline void set_return_code(::google::protobuf::uint32 value);

  // repeated .dgame.CooperationProductInfo Product_list = 2;
  inline int product_list_size() const;
  inline void clear_product_list();
  static const int kProductListFieldNumber = 2;
  inline const ::dgame::CooperationProductInfo& product_list(int index) const;
  inline ::dgame::CooperationProductInfo* mutable_product_list(int index);
  inline ::dgame::CooperationProductInfo* add_product_list();
  inline const ::google::protobuf::RepeatedPtrField< ::dgame::CooperationProductInfo >&
      product_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::dgame::CooperationProductInfo >*
      mutable_product_list();

  // @@protoc_insertion_point(class_scope:CS.Msg_CooperationProductSpace_S2C)
 private:
  inline void set_has_return_code();
  inline void clear_has_return_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::dgame::CooperationProductInfo > product_list_;
  ::google::protobuf::uint32 return_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Msg_CooperationProductSpace_S2C* default_instance_;
};
// -------------------------------------------------------------------

class PayReq : public ::google::protobuf::Message {
 public:
  PayReq();
  virtual ~PayReq();

  PayReq(const PayReq& from);

  inline PayReq& operator=(const PayReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayReq& default_instance();

  void Swap(PayReq* other);

  // implements Message ----------------------------------------------

  PayReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayReq& from);
  void MergeFrom(const PayReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string subject = 3;
  inline bool has_subject() const;
  inline void clear_subject();
  static const int kSubjectFieldNumber = 3;
  inline const ::std::string& subject() const;
  inline void set_subject(const ::std::string& value);
  inline void set_subject(const char* value);
  inline void set_subject(const char* value, size_t size);
  inline ::std::string* mutable_subject();
  inline ::std::string* release_subject();
  inline void set_allocated_subject(::std::string* subject);

  // optional string body = 4;
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 4;
  inline const ::std::string& body() const;
  inline void set_body(const ::std::string& value);
  inline void set_body(const char* value);
  inline void set_body(const char* value, size_t size);
  inline ::std::string* mutable_body();
  inline ::std::string* release_body();
  inline void set_allocated_body(::std::string* body);

  // required uint32 totalFee = 5;
  inline bool has_totalfee() const;
  inline void clear_totalfee();
  static const int kTotalFeeFieldNumber = 5;
  inline ::google::protobuf::uint32 totalfee() const;
  inline void set_totalfee(::google::protobuf::uint32 value);

  // optional string appenv = 6;
  inline bool has_appenv() const;
  inline void clear_appenv();
  static const int kAppenvFieldNumber = 6;
  inline const ::std::string& appenv() const;
  inline void set_appenv(const ::std::string& value);
  inline void set_appenv(const char* value);
  inline void set_appenv(const char* value, size_t size);
  inline ::std::string* mutable_appenv();
  inline ::std::string* release_appenv();
  inline void set_allocated_appenv(::std::string* appenv);

  // optional string outContext = 7;
  inline bool has_outcontext() const;
  inline void clear_outcontext();
  static const int kOutContextFieldNumber = 7;
  inline const ::std::string& outcontext() const;
  inline void set_outcontext(const ::std::string& value);
  inline void set_outcontext(const char* value);
  inline void set_outcontext(const char* value, size_t size);
  inline ::std::string* mutable_outcontext();
  inline ::std::string* release_outcontext();
  inline void set_allocated_outcontext(::std::string* outcontext);

  // required string orderSn = 8;
  inline bool has_ordersn() const;
  inline void clear_ordersn();
  static const int kOrderSnFieldNumber = 8;
  inline const ::std::string& ordersn() const;
  inline void set_ordersn(const ::std::string& value);
  inline void set_ordersn(const char* value);
  inline void set_ordersn(const char* value, size_t size);
  inline ::std::string* mutable_ordersn();
  inline ::std::string* release_ordersn();
  inline void set_allocated_ordersn(::std::string* ordersn);

  // @@protoc_insertion_point(class_scope:CS.PayReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_subject();
  inline void clear_has_subject();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_totalfee();
  inline void clear_has_totalfee();
  inline void set_has_appenv();
  inline void clear_has_appenv();
  inline void set_has_outcontext();
  inline void clear_has_outcontext();
  inline void set_has_ordersn();
  inline void clear_has_ordersn();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::std::string* subject_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 totalfee_;
  ::std::string* body_;
  ::std::string* appenv_;
  ::std::string* outcontext_;
  ::std::string* ordersn_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static PayReq* default_instance_;
};
// -------------------------------------------------------------------

class PayResp : public ::google::protobuf::Message {
 public:
  PayResp();
  virtual ~PayResp();

  PayResp(const PayResp& from);

  inline PayResp& operator=(const PayResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PayResp& default_instance();

  void Swap(PayResp* other);

  // implements Message ----------------------------------------------

  PayResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PayResp& from);
  void MergeFrom(const PayResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CS.PayResp)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static PayResp* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrderReq : public ::google::protobuf::Message {
 public:
  CreateOrderReq();
  virtual ~CreateOrderReq();

  CreateOrderReq(const CreateOrderReq& from);

  inline CreateOrderReq& operator=(const CreateOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrderReq& default_instance();

  void Swap(CreateOrderReq* other);

  // implements Message ----------------------------------------------

  CreateOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrderReq& from);
  void MergeFrom(const CreateOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreateOrderReq_PayType PayType;
  static const PayType ZFB = CreateOrderReq_PayType_ZFB;
  static const PayType WECHAT = CreateOrderReq_PayType_WECHAT;
  static inline bool PayType_IsValid(int value) {
    return CreateOrderReq_PayType_IsValid(value);
  }
  static const PayType PayType_MIN =
    CreateOrderReq_PayType_PayType_MIN;
  static const PayType PayType_MAX =
    CreateOrderReq_PayType_PayType_MAX;
  static const int PayType_ARRAYSIZE =
    CreateOrderReq_PayType_PayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PayType_descriptor() {
    return CreateOrderReq_PayType_descriptor();
  }
  static inline const ::std::string& PayType_Name(PayType value) {
    return CreateOrderReq_PayType_Name(value);
  }
  static inline bool PayType_Parse(const ::std::string& name,
      PayType* value) {
    return CreateOrderReq_PayType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int64 order_time = 1;
  inline bool has_order_time() const;
  inline void clear_order_time();
  static const int kOrderTimeFieldNumber = 1;
  inline ::google::protobuf::int64 order_time() const;
  inline void set_order_time(::google::protobuf::int64 value);

  // required string act_id = 2;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 2;
  inline const ::std::string& act_id() const;
  inline void set_act_id(const ::std::string& value);
  inline void set_act_id(const char* value);
  inline void set_act_id(const char* value, size_t size);
  inline ::std::string* mutable_act_id();
  inline ::std::string* release_act_id();
  inline void set_allocated_act_id(::std::string* act_id);

  // optional string receiver_name = 3;
  inline bool has_receiver_name() const;
  inline void clear_receiver_name();
  static const int kReceiverNameFieldNumber = 3;
  inline const ::std::string& receiver_name() const;
  inline void set_receiver_name(const ::std::string& value);
  inline void set_receiver_name(const char* value);
  inline void set_receiver_name(const char* value, size_t size);
  inline ::std::string* mutable_receiver_name();
  inline ::std::string* release_receiver_name();
  inline void set_allocated_receiver_name(::std::string* receiver_name);

  // optional string receiver_phone = 4;
  inline bool has_receiver_phone() const;
  inline void clear_receiver_phone();
  static const int kReceiverPhoneFieldNumber = 4;
  inline const ::std::string& receiver_phone() const;
  inline void set_receiver_phone(const ::std::string& value);
  inline void set_receiver_phone(const char* value);
  inline void set_receiver_phone(const char* value, size_t size);
  inline ::std::string* mutable_receiver_phone();
  inline ::std::string* release_receiver_phone();
  inline void set_allocated_receiver_phone(::std::string* receiver_phone);

  // optional string receiver_address = 5;
  inline bool has_receiver_address() const;
  inline void clear_receiver_address();
  static const int kReceiverAddressFieldNumber = 5;
  inline const ::std::string& receiver_address() const;
  inline void set_receiver_address(const ::std::string& value);
  inline void set_receiver_address(const char* value);
  inline void set_receiver_address(const char* value, size_t size);
  inline ::std::string* mutable_receiver_address();
  inline ::std::string* release_receiver_address();
  inline void set_allocated_receiver_address(::std::string* receiver_address);

  // optional bool has_invoice = 6;
  inline bool has_has_invoice() const;
  inline void clear_has_invoice();
  static const int kHasInvoiceFieldNumber = 6;
  inline bool has_invoice() const;
  inline void set_has_invoice(bool value);

  // optional string invoice_title = 7;
  inline bool has_invoice_title() const;
  inline void clear_invoice_title();
  static const int kInvoiceTitleFieldNumber = 7;
  inline const ::std::string& invoice_title() const;
  inline void set_invoice_title(const ::std::string& value);
  inline void set_invoice_title(const char* value);
  inline void set_invoice_title(const char* value, size_t size);
  inline ::std::string* mutable_invoice_title();
  inline ::std::string* release_invoice_title();
  inline void set_allocated_invoice_title(::std::string* invoice_title);

  // optional string invoice_content = 8;
  inline bool has_invoice_content() const;
  inline void clear_invoice_content();
  static const int kInvoiceContentFieldNumber = 8;
  inline const ::std::string& invoice_content() const;
  inline void set_invoice_content(const ::std::string& value);
  inline void set_invoice_content(const char* value);
  inline void set_invoice_content(const char* value, size_t size);
  inline ::std::string* mutable_invoice_content();
  inline ::std::string* release_invoice_content();
  inline void set_allocated_invoice_content(::std::string* invoice_content);

  // optional .CS.CreateOrderReq.PayType pay_way = 9;
  inline bool has_pay_way() const;
  inline void clear_pay_way();
  static const int kPayWayFieldNumber = 9;
  inline ::CS::CreateOrderReq_PayType pay_way() const;
  inline void set_pay_way(::CS::CreateOrderReq_PayType value);

  // repeated .CS.Goods goods_list = 10;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 10;
  inline const ::CS::Goods& goods_list(int index) const;
  inline ::CS::Goods* mutable_goods_list(int index);
  inline ::CS::Goods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Goods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Goods >*
      mutable_goods_list();

  // optional string desc = 11;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 11;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // optional string zip_code = 12;
  inline bool has_zip_code() const;
  inline void clear_zip_code();
  static const int kZipCodeFieldNumber = 12;
  inline const ::std::string& zip_code() const;
  inline void set_zip_code(const ::std::string& value);
  inline void set_zip_code(const char* value);
  inline void set_zip_code(const char* value, size_t size);
  inline ::std::string* mutable_zip_code();
  inline ::std::string* release_zip_code();
  inline void set_allocated_zip_code(::std::string* zip_code);

  // @@protoc_insertion_point(class_scope:CS.CreateOrderReq)
 private:
  inline void set_has_order_time();
  inline void clear_has_order_time();
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_receiver_name();
  inline void clear_has_receiver_name();
  inline void set_has_receiver_phone();
  inline void clear_has_receiver_phone();
  inline void set_has_receiver_address();
  inline void clear_has_receiver_address();
  inline void set_has_has_invoice();
  inline void clear_has_has_invoice();
  inline void set_has_invoice_title();
  inline void clear_has_invoice_title();
  inline void set_has_invoice_content();
  inline void clear_has_invoice_content();
  inline void set_has_pay_way();
  inline void clear_has_pay_way();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_zip_code();
  inline void clear_has_zip_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 order_time_;
  ::std::string* act_id_;
  ::std::string* receiver_name_;
  ::std::string* receiver_phone_;
  ::std::string* receiver_address_;
  ::std::string* invoice_title_;
  bool has_invoice_;
  int pay_way_;
  ::std::string* invoice_content_;
  ::google::protobuf::RepeatedPtrField< ::CS::Goods > goods_list_;
  ::std::string* desc_;
  ::std::string* zip_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static CreateOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class Goods : public ::google::protobuf::Message {
 public:
  Goods();
  virtual ~Goods();

  Goods(const Goods& from);

  inline Goods& operator=(const Goods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Goods& default_instance();

  void Swap(Goods* other);

  // implements Message ----------------------------------------------

  Goods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Goods& from);
  void MergeFrom(const Goods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional float price = 2;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 2;
  inline float price() const;
  inline void set_price(float value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional string image_url = 4;
  inline bool has_image_url() const;
  inline void clear_image_url();
  static const int kImageUrlFieldNumber = 4;
  inline const ::std::string& image_url() const;
  inline void set_image_url(const ::std::string& value);
  inline void set_image_url(const char* value);
  inline void set_image_url(const char* value, size_t size);
  inline ::std::string* mutable_image_url();
  inline ::std::string* release_image_url();
  inline void set_allocated_image_url(::std::string* image_url);

  // optional string product_id = 5;
  inline bool has_product_id() const;
  inline void clear_product_id();
  static const int kProductIdFieldNumber = 5;
  inline const ::std::string& product_id() const;
  inline void set_product_id(const ::std::string& value);
  inline void set_product_id(const char* value);
  inline void set_product_id(const char* value, size_t size);
  inline ::std::string* mutable_product_id();
  inline ::std::string* release_product_id();
  inline void set_allocated_product_id(::std::string* product_id);

  // optional string opus_id = 6;
  inline bool has_opus_id() const;
  inline void clear_opus_id();
  static const int kOpusIdFieldNumber = 6;
  inline const ::std::string& opus_id() const;
  inline void set_opus_id(const ::std::string& value);
  inline void set_opus_id(const char* value);
  inline void set_opus_id(const char* value, size_t size);
  inline ::std::string* mutable_opus_id();
  inline ::std::string* release_opus_id();
  inline void set_allocated_opus_id(::std::string* opus_id);

  // optional string ware_id = 7;
  inline bool has_ware_id() const;
  inline void clear_ware_id();
  static const int kWareIdFieldNumber = 7;
  inline const ::std::string& ware_id() const;
  inline void set_ware_id(const ::std::string& value);
  inline void set_ware_id(const char* value);
  inline void set_ware_id(const char* value, size_t size);
  inline ::std::string* mutable_ware_id();
  inline ::std::string* release_ware_id();
  inline void set_allocated_ware_id(::std::string* ware_id);

  // repeated .CS.GoodsPart goods_part_list = 8;
  inline int goods_part_list_size() const;
  inline void clear_goods_part_list();
  static const int kGoodsPartListFieldNumber = 8;
  inline const ::CS::GoodsPart& goods_part_list(int index) const;
  inline ::CS::GoodsPart* mutable_goods_part_list(int index);
  inline ::CS::GoodsPart* add_goods_part_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >&
      goods_part_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >*
      mutable_goods_part_list();

  // @@protoc_insertion_point(class_scope:CS.Goods)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_image_url();
  inline void clear_has_image_url();
  inline void set_has_product_id();
  inline void clear_has_product_id();
  inline void set_has_opus_id();
  inline void clear_has_opus_id();
  inline void set_has_ware_id();
  inline void clear_has_ware_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  float price_;
  ::google::protobuf::uint32 num_;
  ::std::string* image_url_;
  ::std::string* product_id_;
  ::std::string* opus_id_;
  ::std::string* ware_id_;
  ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart > goods_part_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Goods* default_instance_;
};
// -------------------------------------------------------------------

class GoodsPart : public ::google::protobuf::Message {
 public:
  GoodsPart();
  virtual ~GoodsPart();

  GoodsPart(const GoodsPart& from);

  inline GoodsPart& operator=(const GoodsPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsPart& default_instance();

  void Swap(GoodsPart* other);

  // implements Message ----------------------------------------------

  GoodsPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsPart& from);
  void MergeFrom(const GoodsPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string part_id = 1;
  inline bool has_part_id() const;
  inline void clear_part_id();
  static const int kPartIdFieldNumber = 1;
  inline const ::std::string& part_id() const;
  inline void set_part_id(const ::std::string& value);
  inline void set_part_id(const char* value);
  inline void set_part_id(const char* value, size_t size);
  inline ::std::string* mutable_part_id();
  inline ::std::string* release_part_id();
  inline void set_allocated_part_id(::std::string* part_id);

  // optional string mat_id = 2;
  inline bool has_mat_id() const;
  inline void clear_mat_id();
  static const int kMatIdFieldNumber = 2;
  inline const ::std::string& mat_id() const;
  inline void set_mat_id(const ::std::string& value);
  inline void set_mat_id(const char* value);
  inline void set_mat_id(const char* value, size_t size);
  inline ::std::string* mutable_mat_id();
  inline ::std::string* release_mat_id();
  inline void set_allocated_mat_id(::std::string* mat_id);

  // @@protoc_insertion_point(class_scope:CS.GoodsPart)
 private:
  inline void set_has_part_id();
  inline void clear_has_part_id();
  inline void set_has_mat_id();
  inline void clear_has_mat_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* part_id_;
  ::std::string* mat_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static GoodsPart* default_instance_;
};
// -------------------------------------------------------------------

class CreateOrderRes : public ::google::protobuf::Message {
 public:
  CreateOrderRes();
  virtual ~CreateOrderRes();

  CreateOrderRes(const CreateOrderRes& from);

  inline CreateOrderRes& operator=(const CreateOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateOrderRes& default_instance();

  void Swap(CreateOrderRes* other);

  // implements Message ----------------------------------------------

  CreateOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateOrderRes& from);
  void MergeFrom(const CreateOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // @@protoc_insertion_point(class_scope:CS.CreateOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static CreateOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class GoodsProductStatusReq : public ::google::protobuf::Message {
 public:
  GoodsProductStatusReq();
  virtual ~GoodsProductStatusReq();

  GoodsProductStatusReq(const GoodsProductStatusReq& from);

  inline GoodsProductStatusReq& operator=(const GoodsProductStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsProductStatusReq& default_instance();

  void Swap(GoodsProductStatusReq* other);

  // implements Message ----------------------------------------------

  GoodsProductStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsProductStatusReq& from);
  void MergeFrom(const GoodsProductStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CS.GoodsProductStatusReq)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static GoodsProductStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class GoodsProductStatusRes : public ::google::protobuf::Message {
 public:
  GoodsProductStatusRes();
  virtual ~GoodsProductStatusRes();

  GoodsProductStatusRes(const GoodsProductStatusRes& from);

  inline GoodsProductStatusRes& operator=(const GoodsProductStatusRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsProductStatusRes& default_instance();

  void Swap(GoodsProductStatusRes* other);

  // implements Message ----------------------------------------------

  GoodsProductStatusRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsProductStatusRes& from);
  void MergeFrom(const GoodsProductStatusRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef GoodsProductStatusRes_ProductStatus ProductStatus;
  static const ProductStatus WAIT_PRODUCTION = GoodsProductStatusRes_ProductStatus_WAIT_PRODUCTION;
  static const ProductStatus PRODUCTING = GoodsProductStatusRes_ProductStatus_PRODUCTING;
  static const ProductStatus WIRING = GoodsProductStatusRes_ProductStatus_WIRING;
  static const ProductStatus PEND = GoodsProductStatusRes_ProductStatus_PEND;
  static const ProductStatus STAMPING = GoodsProductStatusRes_ProductStatus_STAMPING;
  static const ProductStatus CHECK = GoodsProductStatusRes_ProductStatus_CHECK;
  static const ProductStatus INBOUND = GoodsProductStatusRes_ProductStatus_INBOUND;
  static inline bool ProductStatus_IsValid(int value) {
    return GoodsProductStatusRes_ProductStatus_IsValid(value);
  }
  static const ProductStatus ProductStatus_MIN =
    GoodsProductStatusRes_ProductStatus_ProductStatus_MIN;
  static const ProductStatus ProductStatus_MAX =
    GoodsProductStatusRes_ProductStatus_ProductStatus_MAX;
  static const int ProductStatus_ARRAYSIZE =
    GoodsProductStatusRes_ProductStatus_ProductStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProductStatus_descriptor() {
    return GoodsProductStatusRes_ProductStatus_descriptor();
  }
  static inline const ::std::string& ProductStatus_Name(ProductStatus value) {
    return GoodsProductStatusRes_ProductStatus_Name(value);
  }
  static inline bool ProductStatus_Parse(const ::std::string& name,
      ProductStatus* value) {
    return GoodsProductStatusRes_ProductStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string goods_name = 1;
  inline bool has_goods_name() const;
  inline void clear_goods_name();
  static const int kGoodsNameFieldNumber = 1;
  inline const ::std::string& goods_name() const;
  inline void set_goods_name(const ::std::string& value);
  inline void set_goods_name(const char* value);
  inline void set_goods_name(const char* value, size_t size);
  inline ::std::string* mutable_goods_name();
  inline ::std::string* release_goods_name();
  inline void set_allocated_goods_name(::std::string* goods_name);

  // optional .CS.GoodsProductStatusRes.ProductStatus goods_status = 2;
  inline bool has_goods_status() const;
  inline void clear_goods_status();
  static const int kGoodsStatusFieldNumber = 2;
  inline ::CS::GoodsProductStatusRes_ProductStatus goods_status() const;
  inline void set_goods_status(::CS::GoodsProductStatusRes_ProductStatus value);

  // @@protoc_insertion_point(class_scope:CS.GoodsProductStatusRes)
 private:
  inline void set_has_goods_name();
  inline void clear_has_goods_name();
  inline void set_has_goods_status();
  inline void clear_has_goods_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* goods_name_;
  int goods_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static GoodsProductStatusRes* default_instance_;
};
// -------------------------------------------------------------------

class ChooseOrderPayWayReq : public ::google::protobuf::Message {
 public:
  ChooseOrderPayWayReq();
  virtual ~ChooseOrderPayWayReq();

  ChooseOrderPayWayReq(const ChooseOrderPayWayReq& from);

  inline ChooseOrderPayWayReq& operator=(const ChooseOrderPayWayReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChooseOrderPayWayReq& default_instance();

  void Swap(ChooseOrderPayWayReq* other);

  // implements Message ----------------------------------------------

  ChooseOrderPayWayReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChooseOrderPayWayReq& from);
  void MergeFrom(const ChooseOrderPayWayReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ChooseOrderPayWayReq_PayType PayType;
  static const PayType ZFB = ChooseOrderPayWayReq_PayType_ZFB;
  static const PayType WECHAT = ChooseOrderPayWayReq_PayType_WECHAT;
  static inline bool PayType_IsValid(int value) {
    return ChooseOrderPayWayReq_PayType_IsValid(value);
  }
  static const PayType PayType_MIN =
    ChooseOrderPayWayReq_PayType_PayType_MIN;
  static const PayType PayType_MAX =
    ChooseOrderPayWayReq_PayType_PayType_MAX;
  static const int PayType_ARRAYSIZE =
    ChooseOrderPayWayReq_PayType_PayType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PayType_descriptor() {
    return ChooseOrderPayWayReq_PayType_descriptor();
  }
  static inline const ::std::string& PayType_Name(PayType value) {
    return ChooseOrderPayWayReq_PayType_Name(value);
  }
  static inline bool PayType_Parse(const ::std::string& name,
      PayType* value) {
    return ChooseOrderPayWayReq_PayType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.ChooseOrderPayWayReq.PayType pay_way = 2;
  inline bool has_pay_way() const;
  inline void clear_pay_way();
  static const int kPayWayFieldNumber = 2;
  inline ::CS::ChooseOrderPayWayReq_PayType pay_way() const;
  inline void set_pay_way(::CS::ChooseOrderPayWayReq_PayType value);

  // @@protoc_insertion_point(class_scope:CS.ChooseOrderPayWayReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_pay_way();
  inline void clear_has_pay_way();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int pay_way_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ChooseOrderPayWayReq* default_instance_;
};
// -------------------------------------------------------------------

class ChooseOrderPayWayRes : public ::google::protobuf::Message {
 public:
  ChooseOrderPayWayRes();
  virtual ~ChooseOrderPayWayRes();

  ChooseOrderPayWayRes(const ChooseOrderPayWayRes& from);

  inline ChooseOrderPayWayRes& operator=(const ChooseOrderPayWayRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChooseOrderPayWayRes& default_instance();

  void Swap(ChooseOrderPayWayRes* other);

  // implements Message ----------------------------------------------

  ChooseOrderPayWayRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChooseOrderPayWayRes& from);
  void MergeFrom(const ChooseOrderPayWayRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // @@protoc_insertion_point(class_scope:CS.ChooseOrderPayWayRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ChooseOrderPayWayRes* default_instance_;
};
// -------------------------------------------------------------------

class DeleteOrderReq : public ::google::protobuf::Message {
 public:
  DeleteOrderReq();
  virtual ~DeleteOrderReq();

  DeleteOrderReq(const DeleteOrderReq& from);

  inline DeleteOrderReq& operator=(const DeleteOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOrderReq& default_instance();

  void Swap(DeleteOrderReq* other);

  // implements Message ----------------------------------------------

  DeleteOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteOrderReq& from);
  void MergeFrom(const DeleteOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // @@protoc_insertion_point(class_scope:CS.DeleteOrderReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static DeleteOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class DeleteOrderRes : public ::google::protobuf::Message {
 public:
  DeleteOrderRes();
  virtual ~DeleteOrderRes();

  DeleteOrderRes(const DeleteOrderRes& from);

  inline DeleteOrderRes& operator=(const DeleteOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteOrderRes& default_instance();

  void Swap(DeleteOrderRes* other);

  // implements Message ----------------------------------------------

  DeleteOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteOrderRes& from);
  void MergeFrom(const DeleteOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.OrderCmdResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CS::OrderCmdResult result() const;
  inline void set_result(::CS::OrderCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.DeleteOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static DeleteOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class CancelOrderReq : public ::google::protobuf::Message {
 public:
  CancelOrderReq();
  virtual ~CancelOrderReq();

  CancelOrderReq(const CancelOrderReq& from);

  inline CancelOrderReq& operator=(const CancelOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOrderReq& default_instance();

  void Swap(CancelOrderReq* other);

  // implements Message ----------------------------------------------

  CancelOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelOrderReq& from);
  void MergeFrom(const CancelOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .dgame.OrderCancelReason cancel_reason = 2;
  inline bool has_cancel_reason() const;
  inline void clear_cancel_reason();
  static const int kCancelReasonFieldNumber = 2;
  inline ::dgame::OrderCancelReason cancel_reason() const;
  inline void set_cancel_reason(::dgame::OrderCancelReason value);

  // @@protoc_insertion_point(class_scope:CS.CancelOrderReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_cancel_reason();
  inline void clear_has_cancel_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int cancel_reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static CancelOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class CancelOrderRes : public ::google::protobuf::Message {
 public:
  CancelOrderRes();
  virtual ~CancelOrderRes();

  CancelOrderRes(const CancelOrderRes& from);

  inline CancelOrderRes& operator=(const CancelOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOrderRes& default_instance();

  void Swap(CancelOrderRes* other);

  // implements Message ----------------------------------------------

  CancelOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelOrderRes& from);
  void MergeFrom(const CancelOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.OrderCmdResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CS::OrderCmdResult result() const;
  inline void set_result(::CS::OrderCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.CancelOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static CancelOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmGrOrderReq : public ::google::protobuf::Message {
 public:
  ConfirmGrOrderReq();
  virtual ~ConfirmGrOrderReq();

  ConfirmGrOrderReq(const ConfirmGrOrderReq& from);

  inline ConfirmGrOrderReq& operator=(const ConfirmGrOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmGrOrderReq& default_instance();

  void Swap(ConfirmGrOrderReq* other);

  // implements Message ----------------------------------------------

  ConfirmGrOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmGrOrderReq& from);
  void MergeFrom(const ConfirmGrOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // @@protoc_insertion_point(class_scope:CS.ConfirmGrOrderReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ConfirmGrOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class ConfirmGrOrderRes : public ::google::protobuf::Message {
 public:
  ConfirmGrOrderRes();
  virtual ~ConfirmGrOrderRes();

  ConfirmGrOrderRes(const ConfirmGrOrderRes& from);

  inline ConfirmGrOrderRes& operator=(const ConfirmGrOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfirmGrOrderRes& default_instance();

  void Swap(ConfirmGrOrderRes* other);

  // implements Message ----------------------------------------------

  ConfirmGrOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConfirmGrOrderRes& from);
  void MergeFrom(const ConfirmGrOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.OrderCmdResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CS::OrderCmdResult result() const;
  inline void set_result(::CS::OrderCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.ConfirmGrOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static ConfirmGrOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class JudgeOrderReq : public ::google::protobuf::Message {
 public:
  JudgeOrderReq();
  virtual ~JudgeOrderReq();

  JudgeOrderReq(const JudgeOrderReq& from);

  inline JudgeOrderReq& operator=(const JudgeOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JudgeOrderReq& default_instance();

  void Swap(JudgeOrderReq* other);

  // implements Message ----------------------------------------------

  JudgeOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JudgeOrderReq& from);
  void MergeFrom(const JudgeOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional int64 judge_time = 2;
  inline bool has_judge_time() const;
  inline void clear_judge_time();
  static const int kJudgeTimeFieldNumber = 2;
  inline ::google::protobuf::int64 judge_time() const;
  inline void set_judge_time(::google::protobuf::int64 value);

  // repeated .CS.GoodsJudge goods_judge_list = 3;
  inline int goods_judge_list_size() const;
  inline void clear_goods_judge_list();
  static const int kGoodsJudgeListFieldNumber = 3;
  inline const ::CS::GoodsJudge& goods_judge_list(int index) const;
  inline ::CS::GoodsJudge* mutable_goods_judge_list(int index);
  inline ::CS::GoodsJudge* add_goods_judge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsJudge >&
      goods_judge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsJudge >*
      mutable_goods_judge_list();

  // @@protoc_insertion_point(class_scope:CS.JudgeOrderReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_judge_time();
  inline void clear_has_judge_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  ::google::protobuf::int64 judge_time_;
  ::google::protobuf::RepeatedPtrField< ::CS::GoodsJudge > goods_judge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static JudgeOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class JudgeOrderRes : public ::google::protobuf::Message {
 public:
  JudgeOrderRes();
  virtual ~JudgeOrderRes();

  JudgeOrderRes(const JudgeOrderRes& from);

  inline JudgeOrderRes& operator=(const JudgeOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JudgeOrderRes& default_instance();

  void Swap(JudgeOrderRes* other);

  // implements Message ----------------------------------------------

  JudgeOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JudgeOrderRes& from);
  void MergeFrom(const JudgeOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.OrderCmdResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CS::OrderCmdResult result() const;
  inline void set_result(::CS::OrderCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.JudgeOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static JudgeOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class GoodsJudge : public ::google::protobuf::Message {
 public:
  GoodsJudge();
  virtual ~GoodsJudge();

  GoodsJudge(const GoodsJudge& from);

  inline GoodsJudge& operator=(const GoodsJudge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoodsJudge& default_instance();

  void Swap(GoodsJudge* other);

  // implements Message ----------------------------------------------

  GoodsJudge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoodsJudge& from);
  void MergeFrom(const GoodsJudge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int64 judge_time = 2;
  inline bool has_judge_time() const;
  inline void clear_judge_time();
  static const int kJudgeTimeFieldNumber = 2;
  inline ::google::protobuf::int64 judge_time() const;
  inline void set_judge_time(::google::protobuf::int64 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required string goods_id = 4;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 4;
  inline const ::std::string& goods_id() const;
  inline void set_goods_id(const ::std::string& value);
  inline void set_goods_id(const char* value);
  inline void set_goods_id(const char* value, size_t size);
  inline ::std::string* mutable_goods_id();
  inline ::std::string* release_goods_id();
  inline void set_allocated_goods_id(::std::string* goods_id);

  // @@protoc_insertion_point(class_scope:CS.GoodsJudge)
 private:
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_judge_time();
  inline void clear_has_judge_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_goods_id();
  inline void clear_has_goods_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int64 judge_time_;
  ::std::string* goods_id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static GoodsJudge* default_instance_;
};
// -------------------------------------------------------------------

class DelayOrderReq : public ::google::protobuf::Message {
 public:
  DelayOrderReq();
  virtual ~DelayOrderReq();

  DelayOrderReq(const DelayOrderReq& from);

  inline DelayOrderReq& operator=(const DelayOrderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelayOrderReq& default_instance();

  void Swap(DelayOrderReq* other);

  // implements Message ----------------------------------------------

  DelayOrderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelayOrderReq& from);
  void MergeFrom(const DelayOrderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional string reason = 2;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 2;
  inline const ::std::string& reason() const;
  inline void set_reason(const ::std::string& value);
  inline void set_reason(const char* value);
  inline void set_reason(const char* value, size_t size);
  inline ::std::string* mutable_reason();
  inline ::std::string* release_reason();
  inline void set_allocated_reason(::std::string* reason);

  // @@protoc_insertion_point(class_scope:CS.DelayOrderReq)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  ::std::string* reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static DelayOrderReq* default_instance_;
};
// -------------------------------------------------------------------

class DelayOrderRes : public ::google::protobuf::Message {
 public:
  DelayOrderRes();
  virtual ~DelayOrderRes();

  DelayOrderRes(const DelayOrderRes& from);

  inline DelayOrderRes& operator=(const DelayOrderRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelayOrderRes& default_instance();

  void Swap(DelayOrderRes* other);

  // implements Message ----------------------------------------------

  DelayOrderRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DelayOrderRes& from);
  void MergeFrom(const DelayOrderRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string order_code = 1;
  inline bool has_order_code() const;
  inline void clear_order_code();
  static const int kOrderCodeFieldNumber = 1;
  inline const ::std::string& order_code() const;
  inline void set_order_code(const ::std::string& value);
  inline void set_order_code(const char* value);
  inline void set_order_code(const char* value, size_t size);
  inline ::std::string* mutable_order_code();
  inline ::std::string* release_order_code();
  inline void set_allocated_order_code(::std::string* order_code);

  // optional .CS.OrderCmdResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::CS::OrderCmdResult result() const;
  inline void set_result(::CS::OrderCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.DelayOrderRes)
 private:
  inline void set_has_order_code();
  inline void clear_has_order_code();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* order_code_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static DelayOrderRes* default_instance_;
};
// -------------------------------------------------------------------

class OpusReq : public ::google::protobuf::Message {
 public:
  OpusReq();
  virtual ~OpusReq();

  OpusReq(const OpusReq& from);

  inline OpusReq& operator=(const OpusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpusReq& default_instance();

  void Swap(OpusReq* other);

  // implements Message ----------------------------------------------

  OpusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpusReq& from);
  void MergeFrom(const OpusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 opusId = 1;
  inline bool has_opusid() const;
  inline void clear_opusid();
  static const int kOpusIdFieldNumber = 1;
  inline ::google::protobuf::int64 opusid() const;
  inline void set_opusid(::google::protobuf::int64 value);

  // optional string retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.OpusReq)
 private:
  inline void set_has_opusid();
  inline void clear_has_opusid();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 opusid_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OpusReq* default_instance_;
};
// -------------------------------------------------------------------

class OwnOpusReq : public ::google::protobuf::Message {
 public:
  OwnOpusReq();
  virtual ~OwnOpusReq();

  OwnOpusReq(const OwnOpusReq& from);

  inline OwnOpusReq& operator=(const OwnOpusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OwnOpusReq& default_instance();

  void Swap(OwnOpusReq* other);

  // implements Message ----------------------------------------------

  OwnOpusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OwnOpusReq& from);
  void MergeFrom(const OwnOpusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 userId = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.OwnOpusReq)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 userid_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OwnOpusReq* default_instance_;
};
// -------------------------------------------------------------------

class OpusBo : public ::google::protobuf::Message {
 public:
  OpusBo();
  virtual ~OpusBo();

  OpusBo(const OpusBo& from);

  inline OpusBo& operator=(const OpusBo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpusBo& default_instance();

  void Swap(OpusBo* other);

  // implements Message ----------------------------------------------

  OpusBo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpusBo& from);
  void MergeFrom(const OpusBo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string sn = 3;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 3;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // optional string style = 4;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 4;
  inline const ::std::string& style() const;
  inline void set_style(const ::std::string& value);
  inline void set_style(const char* value);
  inline void set_style(const char* value, size_t size);
  inline ::std::string* mutable_style();
  inline ::std::string* release_style();
  inline void set_allocated_style(::std::string* style);

  // optional string size = 5;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 5;
  inline const ::std::string& size() const;
  inline void set_size(const ::std::string& value);
  inline void set_size(const char* value);
  inline void set_size(const char* value, size_t size);
  inline ::std::string* mutable_size();
  inline ::std::string* release_size();
  inline void set_allocated_size(::std::string* size);

  // optional int32 isRecommend = 6;
  inline bool has_isrecommend() const;
  inline void clear_isrecommend();
  static const int kIsRecommendFieldNumber = 6;
  inline ::google::protobuf::int32 isrecommend() const;
  inline void set_isrecommend(::google::protobuf::int32 value);

  // optional string partAttribute = 7;
  inline bool has_partattribute() const;
  inline void clear_partattribute();
  static const int kPartAttributeFieldNumber = 7;
  inline const ::std::string& partattribute() const;
  inline void set_partattribute(const ::std::string& value);
  inline void set_partattribute(const char* value);
  inline void set_partattribute(const char* value, size_t size);
  inline ::std::string* mutable_partattribute();
  inline ::std::string* release_partattribute();
  inline void set_allocated_partattribute(::std::string* partattribute);

  // optional int32 isGoods = 8;
  inline bool has_isgoods() const;
  inline void clear_isgoods();
  static const int kIsGoodsFieldNumber = 8;
  inline ::google::protobuf::int32 isgoods() const;
  inline void set_isgoods(::google::protobuf::int32 value);

  // optional string description = 9;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 9;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional string opusShot = 10;
  inline bool has_opusshot() const;
  inline void clear_opusshot();
  static const int kOpusShotFieldNumber = 10;
  inline const ::std::string& opusshot() const;
  inline void set_opusshot(const ::std::string& value);
  inline void set_opusshot(const char* value);
  inline void set_opusshot(const char* value, size_t size);
  inline ::std::string* mutable_opusshot();
  inline ::std::string* release_opusshot();
  inline void set_allocated_opusshot(::std::string* opusshot);

  // optional int64 userId = 11;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 11;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 17;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 17;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string createDate = 12;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreateDateFieldNumber = 12;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional int32 status = 15;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 15;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string remark = 16;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 16;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // repeated .CS.OpusBo opusList = 13;
  inline int opuslist_size() const;
  inline void clear_opuslist();
  static const int kOpusListFieldNumber = 13;
  inline const ::CS::OpusBo& opuslist(int index) const;
  inline ::CS::OpusBo* mutable_opuslist(int index);
  inline ::CS::OpusBo* add_opuslist();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::OpusBo >&
      opuslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::OpusBo >*
      mutable_opuslist();

  // optional string code = 14;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 14;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string retCode = 18;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 18;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.OpusBo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_isrecommend();
  inline void clear_has_isrecommend();
  inline void set_has_partattribute();
  inline void clear_has_partattribute();
  inline void set_has_isgoods();
  inline void clear_has_isgoods();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_opusshot();
  inline void clear_has_opusshot();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* sn_;
  ::std::string* style_;
  ::std::string* size_;
  ::std::string* partattribute_;
  ::google::protobuf::int32 isrecommend_;
  ::google::protobuf::int32 isgoods_;
  ::std::string* description_;
  ::std::string* opusshot_;
  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::std::string* createdate_;
  ::std::string* remark_;
  ::google::protobuf::RepeatedPtrField< ::CS::OpusBo > opuslist_;
  ::std::string* code_;
  ::std::string* retcode_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OpusBo* default_instance_;
};
// -------------------------------------------------------------------

class OpusCoopReq : public ::google::protobuf::Message {
 public:
  OpusCoopReq();
  virtual ~OpusCoopReq();

  OpusCoopReq(const OpusCoopReq& from);

  inline OpusCoopReq& operator=(const OpusCoopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpusCoopReq& default_instance();

  void Swap(OpusCoopReq* other);

  // implements Message ----------------------------------------------

  OpusCoopReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpusCoopReq& from);
  void MergeFrom(const OpusCoopReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string actId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  inline const ::std::string& actid() const;
  inline void set_actid(const ::std::string& value);
  inline void set_actid(const char* value);
  inline void set_actid(const char* value, size_t size);
  inline ::std::string* mutable_actid();
  inline ::std::string* release_actid();
  inline void set_allocated_actid(::std::string* actid);

  // optional int64 categoryId = 2;
  inline bool has_categoryid() const;
  inline void clear_categoryid();
  static const int kCategoryIdFieldNumber = 2;
  inline ::google::protobuf::int64 categoryid() const;
  inline void set_categoryid(::google::protobuf::int64 value);

  // optional string style = 3;
  inline bool has_style() const;
  inline void clear_style();
  static const int kStyleFieldNumber = 3;
  inline const ::std::string& style() const;
  inline void set_style(const ::std::string& value);
  inline void set_style(const char* value);
  inline void set_style(const char* value, size_t size);
  inline ::std::string* mutable_style();
  inline ::std::string* release_style();
  inline void set_allocated_style(::std::string* style);

  // optional string retCode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 4;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.OpusCoopReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_categoryid();
  inline void clear_has_categoryid();
  inline void set_has_style();
  inline void clear_has_style();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* actid_;
  ::google::protobuf::int64 categoryid_;
  ::std::string* style_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OpusCoopReq* default_instance_;
};
// -------------------------------------------------------------------

class PublishOpusCoopReq : public ::google::protobuf::Message {
 public:
  PublishOpusCoopReq();
  virtual ~PublishOpusCoopReq();

  PublishOpusCoopReq(const PublishOpusCoopReq& from);

  inline PublishOpusCoopReq& operator=(const PublishOpusCoopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOpusCoopReq& default_instance();

  void Swap(PublishOpusCoopReq* other);

  // implements Message ----------------------------------------------

  PublishOpusCoopReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PublishOpusCoopReq& from);
  void MergeFrom(const PublishOpusCoopReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string actId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  inline const ::std::string& actid() const;
  inline void set_actid(const ::std::string& value);
  inline void set_actid(const char* value);
  inline void set_actid(const char* value, size_t size);
  inline ::std::string* mutable_actid();
  inline ::std::string* release_actid();
  inline void set_allocated_actid(::std::string* actid);

  // required int64 opusId = 2;
  inline bool has_opusid() const;
  inline void clear_opusid();
  static const int kOpusIdFieldNumber = 2;
  inline ::google::protobuf::int64 opusid() const;
  inline void set_opusid(::google::protobuf::int64 value);

  // required int64 userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // required string remark = 4;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 4;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional string retCode = 5;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 5;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.PublishOpusCoopReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_opusid();
  inline void clear_has_opusid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* actid_;
  ::google::protobuf::int64 opusid_;
  ::google::protobuf::int64 userid_;
  ::std::string* remark_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static PublishOpusCoopReq* default_instance_;
};
// -------------------------------------------------------------------

class AddOpusCoopReq : public ::google::protobuf::Message {
 public:
  AddOpusCoopReq();
  virtual ~AddOpusCoopReq();

  AddOpusCoopReq(const AddOpusCoopReq& from);

  inline AddOpusCoopReq& operator=(const AddOpusCoopReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddOpusCoopReq& default_instance();

  void Swap(AddOpusCoopReq* other);

  // implements Message ----------------------------------------------

  AddOpusCoopReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddOpusCoopReq& from);
  void MergeFrom(const AddOpusCoopReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string actId = 1;
  inline bool has_actid() const;
  inline void clear_actid();
  static const int kActIdFieldNumber = 1;
  inline const ::std::string& actid() const;
  inline void set_actid(const ::std::string& value);
  inline void set_actid(const char* value);
  inline void set_actid(const char* value, size_t size);
  inline ::std::string* mutable_actid();
  inline ::std::string* release_actid();
  inline void set_allocated_actid(::std::string* actid);

  // required int64 opusId = 2;
  inline bool has_opusid() const;
  inline void clear_opusid();
  static const int kOpusIdFieldNumber = 2;
  inline ::google::protobuf::int64 opusid() const;
  inline void set_opusid(::google::protobuf::int64 value);

  // required int64 userId = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 3;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string retCode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 4;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.AddOpusCoopReq)
 private:
  inline void set_has_actid();
  inline void clear_has_actid();
  inline void set_has_opusid();
  inline void clear_has_opusid();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* actid_;
  ::google::protobuf::int64 opusid_;
  ::google::protobuf::int64 userid_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static AddOpusCoopReq* default_instance_;
};
// -------------------------------------------------------------------

class OpusCoopBo : public ::google::protobuf::Message {
 public:
  OpusCoopBo();
  virtual ~OpusCoopBo();

  OpusCoopBo(const OpusCoopBo& from);

  inline OpusCoopBo& operator=(const OpusCoopBo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpusCoopBo& default_instance();

  void Swap(OpusCoopBo* other);

  // implements Message ----------------------------------------------

  OpusCoopBo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpusCoopBo& from);
  void MergeFrom(const OpusCoopBo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 opusId = 3;
  inline bool has_opusid() const;
  inline void clear_opusid();
  static const int kOpusIdFieldNumber = 3;
  inline ::google::protobuf::int64 opusid() const;
  inline void set_opusid(::google::protobuf::int64 value);

  // optional string opusShot = 14;
  inline bool has_opusshot() const;
  inline void clear_opusshot();
  static const int kOpusShotFieldNumber = 14;
  inline const ::std::string& opusshot() const;
  inline void set_opusshot(const ::std::string& value);
  inline void set_opusshot(const char* value);
  inline void set_opusshot(const char* value, size_t size);
  inline ::std::string* mutable_opusshot();
  inline ::std::string* release_opusshot();
  inline void set_allocated_opusshot(::std::string* opusshot);

  // optional int64 userId = 4;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 4;
  inline ::google::protobuf::int64 userid() const;
  inline void set_userid(::google::protobuf::int64 value);

  // optional string userName = 12;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUserNameFieldNumber = 12;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional int64 coopUserId = 5;
  inline bool has_coopuserid() const;
  inline void clear_coopuserid();
  static const int kCoopUserIdFieldNumber = 5;
  inline ::google::protobuf::int64 coopuserid() const;
  inline void set_coopuserid(::google::protobuf::int64 value);

  // optional string coopUserName = 13;
  inline bool has_coopusername() const;
  inline void clear_coopusername();
  static const int kCoopUserNameFieldNumber = 13;
  inline const ::std::string& coopusername() const;
  inline void set_coopusername(const ::std::string& value);
  inline void set_coopusername(const char* value);
  inline void set_coopusername(const char* value, size_t size);
  inline ::std::string* mutable_coopusername();
  inline ::std::string* release_coopusername();
  inline void set_allocated_coopusername(::std::string* coopusername);

  // optional int32 status = 6;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 6;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string remark = 8;
  inline bool has_remark() const;
  inline void clear_remark();
  static const int kRemarkFieldNumber = 8;
  inline const ::std::string& remark() const;
  inline void set_remark(const ::std::string& value);
  inline void set_remark(const char* value);
  inline void set_remark(const char* value, size_t size);
  inline ::std::string* mutable_remark();
  inline ::std::string* release_remark();
  inline void set_allocated_remark(::std::string* remark);

  // optional string createDate = 9;
  inline bool has_createdate() const;
  inline void clear_createdate();
  static const int kCreateDateFieldNumber = 9;
  inline const ::std::string& createdate() const;
  inline void set_createdate(const ::std::string& value);
  inline void set_createdate(const char* value);
  inline void set_createdate(const char* value, size_t size);
  inline ::std::string* mutable_createdate();
  inline ::std::string* release_createdate();
  inline void set_allocated_createdate(::std::string* createdate);

  // optional string updateDate = 16;
  inline bool has_updatedate() const;
  inline void clear_updatedate();
  static const int kUpdateDateFieldNumber = 16;
  inline const ::std::string& updatedate() const;
  inline void set_updatedate(const ::std::string& value);
  inline void set_updatedate(const char* value);
  inline void set_updatedate(const char* value, size_t size);
  inline ::std::string* mutable_updatedate();
  inline ::std::string* release_updatedate();
  inline void set_allocated_updatedate(::std::string* updatedate);

  // repeated .CS.OpusCoopBo opusCoopList = 10;
  inline int opuscooplist_size() const;
  inline void clear_opuscooplist();
  static const int kOpusCoopListFieldNumber = 10;
  inline const ::CS::OpusCoopBo& opuscooplist(int index) const;
  inline ::CS::OpusCoopBo* mutable_opuscooplist(int index);
  inline ::CS::OpusCoopBo* add_opuscooplist();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::OpusCoopBo >&
      opuscooplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::OpusCoopBo >*
      mutable_opuscooplist();

  // optional string code = 11;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 11;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // optional string retCode = 15;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 15;
  inline const ::std::string& retcode() const;
  inline void set_retcode(const ::std::string& value);
  inline void set_retcode(const char* value);
  inline void set_retcode(const char* value, size_t size);
  inline ::std::string* mutable_retcode();
  inline ::std::string* release_retcode();
  inline void set_allocated_retcode(::std::string* retcode);

  // @@protoc_insertion_point(class_scope:CS.OpusCoopBo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_opusid();
  inline void clear_has_opusid();
  inline void set_has_opusshot();
  inline void clear_has_opusshot();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_coopuserid();
  inline void clear_has_coopuserid();
  inline void set_has_coopusername();
  inline void clear_has_coopusername();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_remark();
  inline void clear_has_remark();
  inline void set_has_createdate();
  inline void clear_has_createdate();
  inline void set_has_updatedate();
  inline void clear_has_updatedate();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_retcode();
  inline void clear_has_retcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::google::protobuf::int64 opusid_;
  ::std::string* opusshot_;
  ::google::protobuf::int64 userid_;
  ::std::string* username_;
  ::google::protobuf::int64 coopuserid_;
  ::std::string* coopusername_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 type_;
  ::std::string* remark_;
  ::std::string* createdate_;
  ::std::string* updatedate_;
  ::google::protobuf::RepeatedPtrField< ::CS::OpusCoopBo > opuscooplist_;
  ::std::string* code_;
  ::std::string* retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static OpusCoopBo* default_instance_;
};
// -------------------------------------------------------------------

class PaySyncResultReq : public ::google::protobuf::Message {
 public:
  PaySyncResultReq();
  virtual ~PaySyncResultReq();

  PaySyncResultReq(const PaySyncResultReq& from);

  inline PaySyncResultReq& operator=(const PaySyncResultReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaySyncResultReq& default_instance();

  void Swap(PaySyncResultReq* other);

  // implements Message ----------------------------------------------

  PaySyncResultReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaySyncResultReq& from);
  void MergeFrom(const PaySyncResultReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string resultStatus = 1;
  inline bool has_resultstatus() const;
  inline void clear_resultstatus();
  static const int kResultStatusFieldNumber = 1;
  inline const ::std::string& resultstatus() const;
  inline void set_resultstatus(const ::std::string& value);
  inline void set_resultstatus(const char* value);
  inline void set_resultstatus(const char* value, size_t size);
  inline ::std::string* mutable_resultstatus();
  inline ::std::string* release_resultstatus();
  inline void set_allocated_resultstatus(::std::string* resultstatus);

  // required string result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:CS.PaySyncResultReq)
 private:
  inline void set_has_resultstatus();
  inline void clear_has_resultstatus();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* resultstatus_;
  ::std::string* result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static PaySyncResultReq* default_instance_;
};
// -------------------------------------------------------------------

class PaySyncResultResp : public ::google::protobuf::Message {
 public:
  PaySyncResultResp();
  virtual ~PaySyncResultResp();

  PaySyncResultResp(const PaySyncResultResp& from);

  inline PaySyncResultResp& operator=(const PaySyncResultResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PaySyncResultResp& default_instance();

  void Swap(PaySyncResultResp* other);

  // implements Message ----------------------------------------------

  PaySyncResultResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PaySyncResultResp& from);
  void MergeFrom(const PaySyncResultResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:CS.PaySyncResultResp)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static PaySyncResultResp* default_instance_;
};
// -------------------------------------------------------------------

class UserReceiver : public ::google::protobuf::Message {
 public:
  UserReceiver();
  virtual ~UserReceiver();

  UserReceiver(const UserReceiver& from);

  inline UserReceiver& operator=(const UserReceiver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UserReceiver& default_instance();

  void Swap(UserReceiver* other);

  // implements Message ----------------------------------------------

  UserReceiver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserReceiver& from);
  void MergeFrom(const UserReceiver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string phone = 3;
  inline bool has_phone() const;
  inline void clear_phone();
  static const int kPhoneFieldNumber = 3;
  inline const ::std::string& phone() const;
  inline void set_phone(const ::std::string& value);
  inline void set_phone(const char* value);
  inline void set_phone(const char* value, size_t size);
  inline ::std::string* mutable_phone();
  inline ::std::string* release_phone();
  inline void set_allocated_phone(::std::string* phone);

  // optional string zip_code = 4;
  inline bool has_zip_code() const;
  inline void clear_zip_code();
  static const int kZipCodeFieldNumber = 4;
  inline const ::std::string& zip_code() const;
  inline void set_zip_code(const ::std::string& value);
  inline void set_zip_code(const char* value);
  inline void set_zip_code(const char* value, size_t size);
  inline ::std::string* mutable_zip_code();
  inline ::std::string* release_zip_code();
  inline void set_allocated_zip_code(::std::string* zip_code);

  // optional string area = 5;
  inline bool has_area() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 5;
  inline const ::std::string& area() const;
  inline void set_area(const ::std::string& value);
  inline void set_area(const char* value);
  inline void set_area(const char* value, size_t size);
  inline ::std::string* mutable_area();
  inline ::std::string* release_area();
  inline void set_allocated_area(::std::string* area);

  // optional string address = 6;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 6;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // optional string area_store = 7;
  inline bool has_area_store() const;
  inline void clear_area_store();
  static const int kAreaStoreFieldNumber = 7;
  inline const ::std::string& area_store() const;
  inline void set_area_store(const ::std::string& value);
  inline void set_area_store(const char* value);
  inline void set_area_store(const char* value, size_t size);
  inline ::std::string* mutable_area_store();
  inline ::std::string* release_area_store();
  inline void set_allocated_area_store(::std::string* area_store);

  // optional bool is_default = 8;
  inline bool has_is_default() const;
  inline void clear_is_default();
  static const int kIsDefaultFieldNumber = 8;
  inline bool is_default() const;
  inline void set_is_default(bool value);

  // optional string act_id = 9;
  inline bool has_act_id() const;
  inline void clear_act_id();
  static const int kActIdFieldNumber = 9;
  inline const ::std::string& act_id() const;
  inline void set_act_id(const ::std::string& value);
  inline void set_act_id(const char* value);
  inline void set_act_id(const char* value, size_t size);
  inline ::std::string* mutable_act_id();
  inline ::std::string* release_act_id();
  inline void set_allocated_act_id(::std::string* act_id);

  // optional string street = 10;
  inline bool has_street() const;
  inline void clear_street();
  static const int kStreetFieldNumber = 10;
  inline const ::std::string& street() const;
  inline void set_street(const ::std::string& value);
  inline void set_street(const char* value);
  inline void set_street(const char* value, size_t size);
  inline ::std::string* mutable_street();
  inline ::std::string* release_street();
  inline void set_allocated_street(::std::string* street);

  // optional string address_detail = 11;
  inline bool has_address_detail() const;
  inline void clear_address_detail();
  static const int kAddressDetailFieldNumber = 11;
  inline const ::std::string& address_detail() const;
  inline void set_address_detail(const ::std::string& value);
  inline void set_address_detail(const char* value);
  inline void set_address_detail(const char* value, size_t size);
  inline ::std::string* mutable_address_detail();
  inline ::std::string* release_address_detail();
  inline void set_allocated_address_detail(::std::string* address_detail);

  // @@protoc_insertion_point(class_scope:CS.UserReceiver)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_phone();
  inline void clear_has_phone();
  inline void set_has_zip_code();
  inline void clear_has_zip_code();
  inline void set_has_area();
  inline void clear_has_area();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_area_store();
  inline void clear_has_area_store();
  inline void set_has_is_default();
  inline void clear_has_is_default();
  inline void set_has_act_id();
  inline void clear_has_act_id();
  inline void set_has_street();
  inline void clear_has_street();
  inline void set_has_address_detail();
  inline void clear_has_address_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* phone_;
  ::std::string* zip_code_;
  ::std::string* area_;
  ::std::string* address_;
  ::std::string* area_store_;
  ::std::string* act_id_;
  ::std::string* street_;
  ::std::string* address_detail_;
  bool is_default_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static UserReceiver* default_instance_;
};
// -------------------------------------------------------------------

class queryUserReceiverReq : public ::google::protobuf::Message {
 public:
  queryUserReceiverReq();
  virtual ~queryUserReceiverReq();

  queryUserReceiverReq(const queryUserReceiverReq& from);

  inline queryUserReceiverReq& operator=(const queryUserReceiverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryUserReceiverReq& default_instance();

  void Swap(queryUserReceiverReq* other);

  // implements Message ----------------------------------------------

  queryUserReceiverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryUserReceiverReq& from);
  void MergeFrom(const queryUserReceiverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::std::string& account_id() const;
  inline void set_account_id(const ::std::string& value);
  inline void set_account_id(const char* value);
  inline void set_account_id(const char* value, size_t size);
  inline ::std::string* mutable_account_id();
  inline ::std::string* release_account_id();
  inline void set_allocated_account_id(::std::string* account_id);

  // @@protoc_insertion_point(class_scope:CS.queryUserReceiverReq)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryUserReceiverReq* default_instance_;
};
// -------------------------------------------------------------------

class queryUserReceiverRes : public ::google::protobuf::Message {
 public:
  queryUserReceiverRes();
  virtual ~queryUserReceiverRes();

  queryUserReceiverRes(const queryUserReceiverRes& from);

  inline queryUserReceiverRes& operator=(const queryUserReceiverRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryUserReceiverRes& default_instance();

  void Swap(queryUserReceiverRes* other);

  // implements Message ----------------------------------------------

  queryUserReceiverRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryUserReceiverRes& from);
  void MergeFrom(const queryUserReceiverRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.UserReceiver receiver_list = 1;
  inline int receiver_list_size() const;
  inline void clear_receiver_list();
  static const int kReceiverListFieldNumber = 1;
  inline const ::CS::UserReceiver& receiver_list(int index) const;
  inline ::CS::UserReceiver* mutable_receiver_list(int index);
  inline ::CS::UserReceiver* add_receiver_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::UserReceiver >&
      receiver_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::UserReceiver >*
      mutable_receiver_list();

  // @@protoc_insertion_point(class_scope:CS.queryUserReceiverRes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::UserReceiver > receiver_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryUserReceiverRes* default_instance_;
};
// -------------------------------------------------------------------

class createUserReceiverReq : public ::google::protobuf::Message {
 public:
  createUserReceiverReq();
  virtual ~createUserReceiverReq();

  createUserReceiverReq(const createUserReceiverReq& from);

  inline createUserReceiverReq& operator=(const createUserReceiverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const createUserReceiverReq& default_instance();

  void Swap(createUserReceiverReq* other);

  // implements Message ----------------------------------------------

  createUserReceiverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const createUserReceiverReq& from);
  void MergeFrom(const createUserReceiverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.UserReceiver user_receiver = 1;
  inline bool has_user_receiver() const;
  inline void clear_user_receiver();
  static const int kUserReceiverFieldNumber = 1;
  inline const ::CS::UserReceiver& user_receiver() const;
  inline ::CS::UserReceiver* mutable_user_receiver();
  inline ::CS::UserReceiver* release_user_receiver();
  inline void set_allocated_user_receiver(::CS::UserReceiver* user_receiver);

  // @@protoc_insertion_point(class_scope:CS.createUserReceiverReq)
 private:
  inline void set_has_user_receiver();
  inline void clear_has_user_receiver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::UserReceiver* user_receiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static createUserReceiverReq* default_instance_;
};
// -------------------------------------------------------------------

class createUserReceiverRes : public ::google::protobuf::Message {
 public:
  createUserReceiverRes();
  virtual ~createUserReceiverRes();

  createUserReceiverRes(const createUserReceiverRes& from);

  inline createUserReceiverRes& operator=(const createUserReceiverRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const createUserReceiverRes& default_instance();

  void Swap(createUserReceiverRes* other);

  // implements Message ----------------------------------------------

  createUserReceiverRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const createUserReceiverRes& from);
  void MergeFrom(const createUserReceiverRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.ReceiverCmdResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CS::ReceiverCmdResult result() const;
  inline void set_result(::CS::ReceiverCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.createUserReceiverRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static createUserReceiverRes* default_instance_;
};
// -------------------------------------------------------------------

class updateUserReceiverReq : public ::google::protobuf::Message {
 public:
  updateUserReceiverReq();
  virtual ~updateUserReceiverReq();

  updateUserReceiverReq(const updateUserReceiverReq& from);

  inline updateUserReceiverReq& operator=(const updateUserReceiverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateUserReceiverReq& default_instance();

  void Swap(updateUserReceiverReq* other);

  // implements Message ----------------------------------------------

  updateUserReceiverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateUserReceiverReq& from);
  void MergeFrom(const updateUserReceiverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.UserReceiver user_receiver = 1;
  inline bool has_user_receiver() const;
  inline void clear_user_receiver();
  static const int kUserReceiverFieldNumber = 1;
  inline const ::CS::UserReceiver& user_receiver() const;
  inline ::CS::UserReceiver* mutable_user_receiver();
  inline ::CS::UserReceiver* release_user_receiver();
  inline void set_allocated_user_receiver(::CS::UserReceiver* user_receiver);

  // @@protoc_insertion_point(class_scope:CS.updateUserReceiverReq)
 private:
  inline void set_has_user_receiver();
  inline void clear_has_user_receiver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CS::UserReceiver* user_receiver_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static updateUserReceiverReq* default_instance_;
};
// -------------------------------------------------------------------

class updateUserReceiverRes : public ::google::protobuf::Message {
 public:
  updateUserReceiverRes();
  virtual ~updateUserReceiverRes();

  updateUserReceiverRes(const updateUserReceiverRes& from);

  inline updateUserReceiverRes& operator=(const updateUserReceiverRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const updateUserReceiverRes& default_instance();

  void Swap(updateUserReceiverRes* other);

  // implements Message ----------------------------------------------

  updateUserReceiverRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const updateUserReceiverRes& from);
  void MergeFrom(const updateUserReceiverRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.ReceiverCmdResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CS::ReceiverCmdResult result() const;
  inline void set_result(::CS::ReceiverCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.updateUserReceiverRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static updateUserReceiverRes* default_instance_;
};
// -------------------------------------------------------------------

class createDefaultUserReceiverReq : public ::google::protobuf::Message {
 public:
  createDefaultUserReceiverReq();
  virtual ~createDefaultUserReceiverReq();

  createDefaultUserReceiverReq(const createDefaultUserReceiverReq& from);

  inline createDefaultUserReceiverReq& operator=(const createDefaultUserReceiverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const createDefaultUserReceiverReq& default_instance();

  void Swap(createDefaultUserReceiverReq* other);

  // implements Message ----------------------------------------------

  createDefaultUserReceiverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const createDefaultUserReceiverReq& from);
  void MergeFrom(const createDefaultUserReceiverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.createDefaultUserReceiverReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static createDefaultUserReceiverReq* default_instance_;
};
// -------------------------------------------------------------------

class createDefaultUserReceiverRes : public ::google::protobuf::Message {
 public:
  createDefaultUserReceiverRes();
  virtual ~createDefaultUserReceiverRes();

  createDefaultUserReceiverRes(const createDefaultUserReceiverRes& from);

  inline createDefaultUserReceiverRes& operator=(const createDefaultUserReceiverRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const createDefaultUserReceiverRes& default_instance();

  void Swap(createDefaultUserReceiverRes* other);

  // implements Message ----------------------------------------------

  createDefaultUserReceiverRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const createDefaultUserReceiverRes& from);
  void MergeFrom(const createDefaultUserReceiverRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.ReceiverCmdResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CS::ReceiverCmdResult result() const;
  inline void set_result(::CS::ReceiverCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.createDefaultUserReceiverRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static createDefaultUserReceiverRes* default_instance_;
};
// -------------------------------------------------------------------

class deleteUserReceiverReq : public ::google::protobuf::Message {
 public:
  deleteUserReceiverReq();
  virtual ~deleteUserReceiverReq();

  deleteUserReceiverReq(const deleteUserReceiverReq& from);

  inline deleteUserReceiverReq& operator=(const deleteUserReceiverReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteUserReceiverReq& default_instance();

  void Swap(deleteUserReceiverReq* other);

  // implements Message ----------------------------------------------

  deleteUserReceiverReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deleteUserReceiverReq& from);
  void MergeFrom(const deleteUserReceiverReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CS.deleteUserReceiverReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static deleteUserReceiverReq* default_instance_;
};
// -------------------------------------------------------------------

class deleteUserReceiverRes : public ::google::protobuf::Message {
 public:
  deleteUserReceiverRes();
  virtual ~deleteUserReceiverRes();

  deleteUserReceiverRes(const deleteUserReceiverRes& from);

  inline deleteUserReceiverRes& operator=(const deleteUserReceiverRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const deleteUserReceiverRes& default_instance();

  void Swap(deleteUserReceiverRes* other);

  // implements Message ----------------------------------------------

  deleteUserReceiverRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const deleteUserReceiverRes& from);
  void MergeFrom(const deleteUserReceiverRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .CS.ReceiverCmdResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::CS::ReceiverCmdResult result() const;
  inline void set_result(::CS::ReceiverCmdResult value);

  // @@protoc_insertion_point(class_scope:CS.deleteUserReceiverRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static deleteUserReceiverRes* default_instance_;
};
// -------------------------------------------------------------------

class Area : public ::google::protobuf::Message {
 public:
  Area();
  virtual ~Area();

  Area(const Area& from);

  inline Area& operator=(const Area& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Area& default_instance();

  void Swap(Area* other);

  // implements Message ----------------------------------------------

  Area* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Area& from);
  void MergeFrom(const Area& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string area_no = 1;
  inline bool has_area_no() const;
  inline void clear_area_no();
  static const int kAreaNoFieldNumber = 1;
  inline const ::std::string& area_no() const;
  inline void set_area_no(const ::std::string& value);
  inline void set_area_no(const char* value);
  inline void set_area_no(const char* value, size_t size);
  inline ::std::string* mutable_area_no();
  inline ::std::string* release_area_no();
  inline void set_allocated_area_no(::std::string* area_no);

  // optional string area_name = 2;
  inline bool has_area_name() const;
  inline void clear_area_name();
  static const int kAreaNameFieldNumber = 2;
  inline const ::std::string& area_name() const;
  inline void set_area_name(const ::std::string& value);
  inline void set_area_name(const char* value);
  inline void set_area_name(const char* value, size_t size);
  inline ::std::string* mutable_area_name();
  inline ::std::string* release_area_name();
  inline void set_allocated_area_name(::std::string* area_name);

  // @@protoc_insertion_point(class_scope:CS.Area)
 private:
  inline void set_has_area_no();
  inline void clear_has_area_no();
  inline void set_has_area_name();
  inline void clear_has_area_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* area_no_;
  ::std::string* area_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static Area* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaFirstReq : public ::google::protobuf::Message {
 public:
  queryAreaFirstReq();
  virtual ~queryAreaFirstReq();

  queryAreaFirstReq(const queryAreaFirstReq& from);

  inline queryAreaFirstReq& operator=(const queryAreaFirstReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaFirstReq& default_instance();

  void Swap(queryAreaFirstReq* other);

  // implements Message ----------------------------------------------

  queryAreaFirstReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaFirstReq& from);
  void MergeFrom(const queryAreaFirstReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string account_id = 1;
  inline bool has_account_id() const;
  inline void clear_account_id();
  static const int kAccountIdFieldNumber = 1;
  inline const ::std::string& account_id() const;
  inline void set_account_id(const ::std::string& value);
  inline void set_account_id(const char* value);
  inline void set_account_id(const char* value, size_t size);
  inline ::std::string* mutable_account_id();
  inline ::std::string* release_account_id();
  inline void set_allocated_account_id(::std::string* account_id);

  // @@protoc_insertion_point(class_scope:CS.queryAreaFirstReq)
 private:
  inline void set_has_account_id();
  inline void clear_has_account_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaFirstReq* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaFirstResp : public ::google::protobuf::Message {
 public:
  queryAreaFirstResp();
  virtual ~queryAreaFirstResp();

  queryAreaFirstResp(const queryAreaFirstResp& from);

  inline queryAreaFirstResp& operator=(const queryAreaFirstResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaFirstResp& default_instance();

  void Swap(queryAreaFirstResp* other);

  // implements Message ----------------------------------------------

  queryAreaFirstResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaFirstResp& from);
  void MergeFrom(const queryAreaFirstResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.Area area = 1;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 1;
  inline const ::CS::Area& area(int index) const;
  inline ::CS::Area* mutable_area(int index);
  inline ::CS::Area* add_area();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
      area() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
      mutable_area();

  // @@protoc_insertion_point(class_scope:CS.queryAreaFirstResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::Area > area_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaFirstResp* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaSecondReq : public ::google::protobuf::Message {
 public:
  queryAreaSecondReq();
  virtual ~queryAreaSecondReq();

  queryAreaSecondReq(const queryAreaSecondReq& from);

  inline queryAreaSecondReq& operator=(const queryAreaSecondReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaSecondReq& default_instance();

  void Swap(queryAreaSecondReq* other);

  // implements Message ----------------------------------------------

  queryAreaSecondReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaSecondReq& from);
  void MergeFrom(const queryAreaSecondReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string area_no = 1;
  inline bool has_area_no() const;
  inline void clear_area_no();
  static const int kAreaNoFieldNumber = 1;
  inline const ::std::string& area_no() const;
  inline void set_area_no(const ::std::string& value);
  inline void set_area_no(const char* value);
  inline void set_area_no(const char* value, size_t size);
  inline ::std::string* mutable_area_no();
  inline ::std::string* release_area_no();
  inline void set_allocated_area_no(::std::string* area_no);

  // @@protoc_insertion_point(class_scope:CS.queryAreaSecondReq)
 private:
  inline void set_has_area_no();
  inline void clear_has_area_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* area_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaSecondReq* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaSecondResp : public ::google::protobuf::Message {
 public:
  queryAreaSecondResp();
  virtual ~queryAreaSecondResp();

  queryAreaSecondResp(const queryAreaSecondResp& from);

  inline queryAreaSecondResp& operator=(const queryAreaSecondResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaSecondResp& default_instance();

  void Swap(queryAreaSecondResp* other);

  // implements Message ----------------------------------------------

  queryAreaSecondResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaSecondResp& from);
  void MergeFrom(const queryAreaSecondResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.Area area_list = 1;
  inline int area_list_size() const;
  inline void clear_area_list();
  static const int kAreaListFieldNumber = 1;
  inline const ::CS::Area& area_list(int index) const;
  inline ::CS::Area* mutable_area_list(int index);
  inline ::CS::Area* add_area_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
      area_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
      mutable_area_list();

  // @@protoc_insertion_point(class_scope:CS.queryAreaSecondResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::Area > area_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaSecondResp* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaThreeReq : public ::google::protobuf::Message {
 public:
  queryAreaThreeReq();
  virtual ~queryAreaThreeReq();

  queryAreaThreeReq(const queryAreaThreeReq& from);

  inline queryAreaThreeReq& operator=(const queryAreaThreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaThreeReq& default_instance();

  void Swap(queryAreaThreeReq* other);

  // implements Message ----------------------------------------------

  queryAreaThreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaThreeReq& from);
  void MergeFrom(const queryAreaThreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string area_no = 1;
  inline bool has_area_no() const;
  inline void clear_area_no();
  static const int kAreaNoFieldNumber = 1;
  inline const ::std::string& area_no() const;
  inline void set_area_no(const ::std::string& value);
  inline void set_area_no(const char* value);
  inline void set_area_no(const char* value, size_t size);
  inline ::std::string* mutable_area_no();
  inline ::std::string* release_area_no();
  inline void set_allocated_area_no(::std::string* area_no);

  // @@protoc_insertion_point(class_scope:CS.queryAreaThreeReq)
 private:
  inline void set_has_area_no();
  inline void clear_has_area_no();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* area_no_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaThreeReq* default_instance_;
};
// -------------------------------------------------------------------

class queryAreaThreeResp : public ::google::protobuf::Message {
 public:
  queryAreaThreeResp();
  virtual ~queryAreaThreeResp();

  queryAreaThreeResp(const queryAreaThreeResp& from);

  inline queryAreaThreeResp& operator=(const queryAreaThreeResp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const queryAreaThreeResp& default_instance();

  void Swap(queryAreaThreeResp* other);

  // implements Message ----------------------------------------------

  queryAreaThreeResp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const queryAreaThreeResp& from);
  void MergeFrom(const queryAreaThreeResp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CS.Area area_list = 1;
  inline int area_list_size() const;
  inline void clear_area_list();
  static const int kAreaListFieldNumber = 1;
  inline const ::CS::Area& area_list(int index) const;
  inline ::CS::Area* mutable_area_list(int index);
  inline ::CS::Area* add_area_list();
  inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
      area_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
      mutable_area_list();

  // @@protoc_insertion_point(class_scope:CS.queryAreaThreeResp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CS::Area > area_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fmsg_2eproto();
  friend void protobuf_AssignDesc_common_5fmsg_2eproto();
  friend void protobuf_ShutdownFile_common_5fmsg_2eproto();

  void InitAsDefaultInstance();
  static queryAreaThreeResp* default_instance_;
};
// ===================================================================


// ===================================================================

// MapPos

// required int32 x = 1;
inline bool MapPos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapPos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapPos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapPos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 MapPos::x() const {
  return x_;
}
inline void MapPos::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
}

// required int32 y = 2;
inline bool MapPos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapPos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapPos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapPos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 MapPos::y() const {
  return y_;
}
inline void MapPos::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
}

// required int32 z = 3;
inline bool MapPos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapPos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapPos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapPos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 MapPos::z() const {
  return z_;
}
inline void MapPos::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// OtherUserInfo

// required uint32 user_id = 1;
inline bool OtherUserInfo::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtherUserInfo::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtherUserInfo::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtherUserInfo::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 OtherUserInfo::user_id() const {
  return user_id_;
}
inline void OtherUserInfo::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string user_name = 2;
inline bool OtherUserInfo::has_user_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtherUserInfo::set_has_user_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtherUserInfo::clear_has_user_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtherUserInfo::clear_user_name() {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    user_name_->clear();
  }
  clear_has_user_name();
}
inline const ::std::string& OtherUserInfo::user_name() const {
  return *user_name_;
}
inline void OtherUserInfo::set_user_name(const ::std::string& value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void OtherUserInfo::set_user_name(const char* value) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(value);
}
inline void OtherUserInfo::set_user_name(const char* value, size_t size) {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  user_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OtherUserInfo::mutable_user_name() {
  set_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    user_name_ = new ::std::string;
  }
  return user_name_;
}
inline ::std::string* OtherUserInfo::release_user_name() {
  clear_has_user_name();
  if (user_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_name_;
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OtherUserInfo::set_allocated_user_name(::std::string* user_name) {
  if (user_name_ != &::google::protobuf::internal::kEmptyString) {
    delete user_name_;
  }
  if (user_name) {
    set_has_user_name();
    user_name_ = user_name;
  } else {
    clear_has_user_name();
    user_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .CS.MapPos cur_pos = 3;
inline bool OtherUserInfo::has_cur_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtherUserInfo::set_has_cur_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtherUserInfo::clear_has_cur_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtherUserInfo::clear_cur_pos() {
  if (cur_pos_ != NULL) cur_pos_->::CS::MapPos::Clear();
  clear_has_cur_pos();
}
inline const ::CS::MapPos& OtherUserInfo::cur_pos() const {
  return cur_pos_ != NULL ? *cur_pos_ : *default_instance_->cur_pos_;
}
inline ::CS::MapPos* OtherUserInfo::mutable_cur_pos() {
  set_has_cur_pos();
  if (cur_pos_ == NULL) cur_pos_ = new ::CS::MapPos;
  return cur_pos_;
}
inline ::CS::MapPos* OtherUserInfo::release_cur_pos() {
  clear_has_cur_pos();
  ::CS::MapPos* temp = cur_pos_;
  cur_pos_ = NULL;
  return temp;
}
inline void OtherUserInfo::set_allocated_cur_pos(::CS::MapPos* cur_pos) {
  delete cur_pos_;
  cur_pos_ = cur_pos;
  if (cur_pos) {
    set_has_cur_pos();
  } else {
    clear_has_cur_pos();
  }
}

// repeated .dgame.EquipmentData equipment_list = 4;
inline int OtherUserInfo::equipment_list_size() const {
  return equipment_list_.size();
}
inline void OtherUserInfo::clear_equipment_list() {
  equipment_list_.Clear();
}
inline const ::dgame::EquipmentData& OtherUserInfo::equipment_list(int index) const {
  return equipment_list_.Get(index);
}
inline ::dgame::EquipmentData* OtherUserInfo::mutable_equipment_list(int index) {
  return equipment_list_.Mutable(index);
}
inline ::dgame::EquipmentData* OtherUserInfo::add_equipment_list() {
  return equipment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
OtherUserInfo::equipment_list() const {
  return equipment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
OtherUserInfo::mutable_equipment_list() {
  return &equipment_list_;
}

// -------------------------------------------------------------------

// Msg_HeartBeat_C2S

// -------------------------------------------------------------------

// Msg_HeartBeat_S2C

// -------------------------------------------------------------------

// Msg_TargetServerInvalid_S2C

// optional string url_desc = 1;
inline bool Msg_TargetServerInvalid_S2C::has_url_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_TargetServerInvalid_S2C::set_has_url_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_TargetServerInvalid_S2C::clear_has_url_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_TargetServerInvalid_S2C::clear_url_desc() {
  if (url_desc_ != &::google::protobuf::internal::kEmptyString) {
    url_desc_->clear();
  }
  clear_has_url_desc();
}
inline const ::std::string& Msg_TargetServerInvalid_S2C::url_desc() const {
  return *url_desc_;
}
inline void Msg_TargetServerInvalid_S2C::set_url_desc(const ::std::string& value) {
  set_has_url_desc();
  if (url_desc_ == &::google::protobuf::internal::kEmptyString) {
    url_desc_ = new ::std::string;
  }
  url_desc_->assign(value);
}
inline void Msg_TargetServerInvalid_S2C::set_url_desc(const char* value) {
  set_has_url_desc();
  if (url_desc_ == &::google::protobuf::internal::kEmptyString) {
    url_desc_ = new ::std::string;
  }
  url_desc_->assign(value);
}
inline void Msg_TargetServerInvalid_S2C::set_url_desc(const char* value, size_t size) {
  set_has_url_desc();
  if (url_desc_ == &::google::protobuf::internal::kEmptyString) {
    url_desc_ = new ::std::string;
  }
  url_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_TargetServerInvalid_S2C::mutable_url_desc() {
  set_has_url_desc();
  if (url_desc_ == &::google::protobuf::internal::kEmptyString) {
    url_desc_ = new ::std::string;
  }
  return url_desc_;
}
inline ::std::string* Msg_TargetServerInvalid_S2C::release_url_desc() {
  clear_has_url_desc();
  if (url_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_desc_;
    url_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_TargetServerInvalid_S2C::set_allocated_url_desc(::std::string* url_desc) {
  if (url_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete url_desc_;
  }
  if (url_desc) {
    set_has_url_desc();
    url_desc_ = url_desc;
  } else {
    clear_has_url_desc();
    url_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 2;
inline bool Msg_TargetServerInvalid_S2C::has_url() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_TargetServerInvalid_S2C::set_has_url() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_TargetServerInvalid_S2C::clear_has_url() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_TargetServerInvalid_S2C::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& Msg_TargetServerInvalid_S2C::url() const {
  return *url_;
}
inline void Msg_TargetServerInvalid_S2C::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Msg_TargetServerInvalid_S2C::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void Msg_TargetServerInvalid_S2C::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_TargetServerInvalid_S2C::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* Msg_TargetServerInvalid_S2C::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_TargetServerInvalid_S2C::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_OtherUserList_G2C

// repeated .CS.OtherUserInfo user_list = 1;
inline int Msg_OtherUserList_G2C::user_list_size() const {
  return user_list_.size();
}
inline void Msg_OtherUserList_G2C::clear_user_list() {
  user_list_.Clear();
}
inline const ::CS::OtherUserInfo& Msg_OtherUserList_G2C::user_list(int index) const {
  return user_list_.Get(index);
}
inline ::CS::OtherUserInfo* Msg_OtherUserList_G2C::mutable_user_list(int index) {
  return user_list_.Mutable(index);
}
inline ::CS::OtherUserInfo* Msg_OtherUserList_G2C::add_user_list() {
  return user_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::OtherUserInfo >&
Msg_OtherUserList_G2C::user_list() const {
  return user_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::OtherUserInfo >*
Msg_OtherUserList_G2C::mutable_user_list() {
  return &user_list_;
}

// -------------------------------------------------------------------

// Msg_UserEnterScene_C2G

// required uint32 user_id = 1;
inline bool Msg_UserEnterScene_C2G::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserEnterScene_C2G::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserEnterScene_C2G::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserEnterScene_C2G::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Msg_UserEnterScene_C2G::user_id() const {
  return user_id_;
}
inline void Msg_UserEnterScene_C2G::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// Msg_UserLeaveScene_C2G

// -------------------------------------------------------------------

// Msg_UserLeaveScene_G2C

// required uint32 user_id = 1;
inline bool Msg_UserLeaveScene_G2C::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserLeaveScene_G2C::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserLeaveScene_G2C::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserLeaveScene_G2C::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Msg_UserLeaveScene_G2C::user_id() const {
  return user_id_;
}
inline void Msg_UserLeaveScene_G2C::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// -------------------------------------------------------------------

// Msg_Goto_C2G

// required .CS.MapPos from = 1;
inline bool Msg_Goto_C2G::has_from() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Goto_C2G::set_has_from() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Goto_C2G::clear_has_from() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Goto_C2G::clear_from() {
  if (from_ != NULL) from_->::CS::MapPos::Clear();
  clear_has_from();
}
inline const ::CS::MapPos& Msg_Goto_C2G::from() const {
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::CS::MapPos* Msg_Goto_C2G::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::CS::MapPos;
  return from_;
}
inline ::CS::MapPos* Msg_Goto_C2G::release_from() {
  clear_has_from();
  ::CS::MapPos* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Msg_Goto_C2G::set_allocated_from(::CS::MapPos* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
}

// required .CS.MapPos to = 2;
inline bool Msg_Goto_C2G::has_to() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Goto_C2G::set_has_to() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Goto_C2G::clear_has_to() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Goto_C2G::clear_to() {
  if (to_ != NULL) to_->::CS::MapPos::Clear();
  clear_has_to();
}
inline const ::CS::MapPos& Msg_Goto_C2G::to() const {
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
inline ::CS::MapPos* Msg_Goto_C2G::mutable_to() {
  set_has_to();
  if (to_ == NULL) to_ = new ::CS::MapPos;
  return to_;
}
inline ::CS::MapPos* Msg_Goto_C2G::release_to() {
  clear_has_to();
  ::CS::MapPos* temp = to_;
  to_ = NULL;
  return temp;
}
inline void Msg_Goto_C2G::set_allocated_to(::CS::MapPos* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
}

// -------------------------------------------------------------------

// Msg_Goto_G2C

// required uint32 user_id = 1;
inline bool Msg_Goto_G2C::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Goto_G2C::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Goto_G2C::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Goto_G2C::clear_user_id() {
  user_id_ = 0u;
  clear_has_user_id();
}
inline ::google::protobuf::uint32 Msg_Goto_G2C::user_id() const {
  return user_id_;
}
inline void Msg_Goto_G2C::set_user_id(::google::protobuf::uint32 value) {
  set_has_user_id();
  user_id_ = value;
}

// required .CS.MapPos from = 2;
inline bool Msg_Goto_G2C::has_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Goto_G2C::set_has_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Goto_G2C::clear_has_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Goto_G2C::clear_from() {
  if (from_ != NULL) from_->::CS::MapPos::Clear();
  clear_has_from();
}
inline const ::CS::MapPos& Msg_Goto_G2C::from() const {
  return from_ != NULL ? *from_ : *default_instance_->from_;
}
inline ::CS::MapPos* Msg_Goto_G2C::mutable_from() {
  set_has_from();
  if (from_ == NULL) from_ = new ::CS::MapPos;
  return from_;
}
inline ::CS::MapPos* Msg_Goto_G2C::release_from() {
  clear_has_from();
  ::CS::MapPos* temp = from_;
  from_ = NULL;
  return temp;
}
inline void Msg_Goto_G2C::set_allocated_from(::CS::MapPos* from) {
  delete from_;
  from_ = from;
  if (from) {
    set_has_from();
  } else {
    clear_has_from();
  }
}

// required .CS.MapPos to = 3;
inline bool Msg_Goto_G2C::has_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Goto_G2C::set_has_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Goto_G2C::clear_has_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Goto_G2C::clear_to() {
  if (to_ != NULL) to_->::CS::MapPos::Clear();
  clear_has_to();
}
inline const ::CS::MapPos& Msg_Goto_G2C::to() const {
  return to_ != NULL ? *to_ : *default_instance_->to_;
}
inline ::CS::MapPos* Msg_Goto_G2C::mutable_to() {
  set_has_to();
  if (to_ == NULL) to_ = new ::CS::MapPos;
  return to_;
}
inline ::CS::MapPos* Msg_Goto_G2C::release_to() {
  clear_has_to();
  ::CS::MapPos* temp = to_;
  to_ = NULL;
  return temp;
}
inline void Msg_Goto_G2C::set_allocated_to(::CS::MapPos* to) {
  delete to_;
  to_ = to;
  if (to) {
    set_has_to();
  } else {
    clear_has_to();
  }
}

// -------------------------------------------------------------------

// Msg_Equipment_C2S

// repeated .dgame.EquipmentData equipment_list = 1;
inline int Msg_Equipment_C2S::equipment_list_size() const {
  return equipment_list_.size();
}
inline void Msg_Equipment_C2S::clear_equipment_list() {
  equipment_list_.Clear();
}
inline const ::dgame::EquipmentData& Msg_Equipment_C2S::equipment_list(int index) const {
  return equipment_list_.Get(index);
}
inline ::dgame::EquipmentData* Msg_Equipment_C2S::mutable_equipment_list(int index) {
  return equipment_list_.Mutable(index);
}
inline ::dgame::EquipmentData* Msg_Equipment_C2S::add_equipment_list() {
  return equipment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >&
Msg_Equipment_C2S::equipment_list() const {
  return equipment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::EquipmentData >*
Msg_Equipment_C2S::mutable_equipment_list() {
  return &equipment_list_;
}

// -------------------------------------------------------------------

// Msg_Equipment_S2C

// -------------------------------------------------------------------

// Msg_GM_C2S

// required uint32 gm_id = 1;
inline bool Msg_GM_C2S::has_gm_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_GM_C2S::set_has_gm_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_GM_C2S::clear_has_gm_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_GM_C2S::clear_gm_id() {
  gm_id_ = 0u;
  clear_has_gm_id();
}
inline ::google::protobuf::uint32 Msg_GM_C2S::gm_id() const {
  return gm_id_;
}
inline void Msg_GM_C2S::set_gm_id(::google::protobuf::uint32 value) {
  set_has_gm_id();
  gm_id_ = value;
}

// required uint32 param1 = 2;
inline bool Msg_GM_C2S::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_GM_C2S::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_GM_C2S::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_GM_C2S::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 Msg_GM_C2S::param1() const {
  return param1_;
}
inline void Msg_GM_C2S::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// required uint32 param2 = 3;
inline bool Msg_GM_C2S::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_GM_C2S::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_GM_C2S::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_GM_C2S::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 Msg_GM_C2S::param2() const {
  return param2_;
}
inline void Msg_GM_C2S::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// Msg_UserBaseInfoModify_C2S

// optional uint32 head_img_id = 1;
inline bool Msg_UserBaseInfoModify_C2S::has_head_img_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserBaseInfoModify_C2S::set_has_head_img_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_has_head_img_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_head_img_id() {
  head_img_id_ = 0u;
  clear_has_head_img_id();
}
inline ::google::protobuf::uint32 Msg_UserBaseInfoModify_C2S::head_img_id() const {
  return head_img_id_;
}
inline void Msg_UserBaseInfoModify_C2S::set_head_img_id(::google::protobuf::uint32 value) {
  set_has_head_img_id();
  head_img_id_ = value;
}

// optional string nick_name = 2;
inline bool Msg_UserBaseInfoModify_C2S::has_nick_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_UserBaseInfoModify_C2S::set_has_nick_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& Msg_UserBaseInfoModify_C2S::nick_name() const {
  return *nick_name_;
}
inline void Msg_UserBaseInfoModify_C2S::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserBaseInfoModify_C2S::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserBaseInfoModify_C2S::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserBaseInfoModify_C2S::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* Msg_UserBaseInfoModify_C2S::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserBaseInfoModify_C2S::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 3;
inline bool Msg_UserBaseInfoModify_C2S::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_UserBaseInfoModify_C2S::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_UserBaseInfoModify_C2S::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& Msg_UserBaseInfoModify_C2S::sign() const {
  return *sign_;
}
inline void Msg_UserBaseInfoModify_C2S::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserBaseInfoModify_C2S::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserBaseInfoModify_C2S::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserBaseInfoModify_C2S::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* Msg_UserBaseInfoModify_C2S::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserBaseInfoModify_C2S::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_UserBaseInfoModify_S2C

// required uint32 error_code = 1;
inline bool Msg_UserBaseInfoModify_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserBaseInfoModify_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserBaseInfoModify_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserBaseInfoModify_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_UserBaseInfoModify_S2C::error_code() const {
  return error_code_;
}
inline void Msg_UserBaseInfoModify_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_UserInfoModify_C2S

// optional string email = 1;
inline bool Msg_UserInfoModify_C2S::has_email() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_email() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserInfoModify_C2S::clear_has_email() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserInfoModify_C2S::clear_email() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    email_->clear();
  }
  clear_has_email();
}
inline const ::std::string& Msg_UserInfoModify_C2S::email() const {
  return *email_;
}
inline void Msg_UserInfoModify_C2S::set_email(const ::std::string& value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_email(const char* value) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_email(const char* value, size_t size) {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  email_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfoModify_C2S::mutable_email() {
  set_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    email_ = new ::std::string;
  }
  return email_;
}
inline ::std::string* Msg_UserInfoModify_C2S::release_email() {
  clear_has_email();
  if (email_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = email_;
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfoModify_C2S::set_allocated_email(::std::string* email) {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (email) {
    set_has_email();
    email_ = email;
  } else {
    clear_has_email();
    email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 2;
inline bool Msg_UserInfoModify_C2S::has_sex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_sex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_UserInfoModify_C2S::clear_has_sex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_UserInfoModify_C2S::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::sex() const {
  return sex_;
}
inline void Msg_UserInfoModify_C2S::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 job = 3;
inline bool Msg_UserInfoModify_C2S::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_UserInfoModify_C2S::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_UserInfoModify_C2S::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::job() const {
  return job_;
}
inline void Msg_UserInfoModify_C2S::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 hobby = 4;
inline bool Msg_UserInfoModify_C2S::has_hobby() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_hobby() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_UserInfoModify_C2S::clear_has_hobby() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_UserInfoModify_C2S::clear_hobby() {
  hobby_ = 0u;
  clear_has_hobby();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::hobby() const {
  return hobby_;
}
inline void Msg_UserInfoModify_C2S::set_hobby(::google::protobuf::uint32 value) {
  set_has_hobby();
  hobby_ = value;
}

// optional uint32 skin = 5;
inline bool Msg_UserInfoModify_C2S::has_skin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_skin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_UserInfoModify_C2S::clear_has_skin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_UserInfoModify_C2S::clear_skin() {
  skin_ = 0u;
  clear_has_skin();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::skin() const {
  return skin_;
}
inline void Msg_UserInfoModify_C2S::set_skin(::google::protobuf::uint32 value) {
  set_has_skin();
  skin_ = value;
}

// repeated .dgame.SouvenirDate date_list = 6;
inline int Msg_UserInfoModify_C2S::date_list_size() const {
  return date_list_.size();
}
inline void Msg_UserInfoModify_C2S::clear_date_list() {
  date_list_.Clear();
}
inline const ::dgame::SouvenirDate& Msg_UserInfoModify_C2S::date_list(int index) const {
  return date_list_.Get(index);
}
inline ::dgame::SouvenirDate* Msg_UserInfoModify_C2S::mutable_date_list(int index) {
  return date_list_.Mutable(index);
}
inline ::dgame::SouvenirDate* Msg_UserInfoModify_C2S::add_date_list() {
  return date_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >&
Msg_UserInfoModify_C2S::date_list() const {
  return date_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::SouvenirDate >*
Msg_UserInfoModify_C2S::mutable_date_list() {
  return &date_list_;
}

// repeated uint32 brand_list = 7;
inline int Msg_UserInfoModify_C2S::brand_list_size() const {
  return brand_list_.size();
}
inline void Msg_UserInfoModify_C2S::clear_brand_list() {
  brand_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::brand_list(int index) const {
  return brand_list_.Get(index);
}
inline void Msg_UserInfoModify_C2S::set_brand_list(int index, ::google::protobuf::uint32 value) {
  brand_list_.Set(index, value);
}
inline void Msg_UserInfoModify_C2S::add_brand_list(::google::protobuf::uint32 value) {
  brand_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_UserInfoModify_C2S::brand_list() const {
  return brand_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_UserInfoModify_C2S::mutable_brand_list() {
  return &brand_list_;
}

// optional uint32 color = 8;
inline bool Msg_UserInfoModify_C2S::has_color() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_color() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg_UserInfoModify_C2S::clear_has_color() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg_UserInfoModify_C2S::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::color() const {
  return color_;
}
inline void Msg_UserInfoModify_C2S::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// repeated uint32 dressed_list = 9;
inline int Msg_UserInfoModify_C2S::dressed_list_size() const {
  return dressed_list_.size();
}
inline void Msg_UserInfoModify_C2S::clear_dressed_list() {
  dressed_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::dressed_list(int index) const {
  return dressed_list_.Get(index);
}
inline void Msg_UserInfoModify_C2S::set_dressed_list(int index, ::google::protobuf::uint32 value) {
  dressed_list_.Set(index, value);
}
inline void Msg_UserInfoModify_C2S::add_dressed_list(::google::protobuf::uint32 value) {
  dressed_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_UserInfoModify_C2S::dressed_list() const {
  return dressed_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_UserInfoModify_C2S::mutable_dressed_list() {
  return &dressed_list_;
}

// optional uint32 birthday = 10;
inline bool Msg_UserInfoModify_C2S::has_birthday() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_birthday() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Msg_UserInfoModify_C2S::clear_has_birthday() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Msg_UserInfoModify_C2S::clear_birthday() {
  birthday_ = 0u;
  clear_has_birthday();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::birthday() const {
  return birthday_;
}
inline void Msg_UserInfoModify_C2S::set_birthday(::google::protobuf::uint32 value) {
  set_has_birthday();
  birthday_ = value;
}

// optional uint32 head_img_id = 11;
inline bool Msg_UserInfoModify_C2S::has_head_img_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_head_img_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Msg_UserInfoModify_C2S::clear_has_head_img_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Msg_UserInfoModify_C2S::clear_head_img_id() {
  head_img_id_ = 0u;
  clear_has_head_img_id();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::head_img_id() const {
  return head_img_id_;
}
inline void Msg_UserInfoModify_C2S::set_head_img_id(::google::protobuf::uint32 value) {
  set_has_head_img_id();
  head_img_id_ = value;
}

// optional uint32 age = 12;
inline bool Msg_UserInfoModify_C2S::has_age() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_age() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Msg_UserInfoModify_C2S::clear_has_age() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Msg_UserInfoModify_C2S::clear_age() {
  age_ = 0u;
  clear_has_age();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::age() const {
  return age_;
}
inline void Msg_UserInfoModify_C2S::set_age(::google::protobuf::uint32 value) {
  set_has_age();
  age_ = value;
}

// optional uint32 zodiac = 13;
inline bool Msg_UserInfoModify_C2S::has_zodiac() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_zodiac() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Msg_UserInfoModify_C2S::clear_has_zodiac() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Msg_UserInfoModify_C2S::clear_zodiac() {
  zodiac_ = 0u;
  clear_has_zodiac();
}
inline ::google::protobuf::uint32 Msg_UserInfoModify_C2S::zodiac() const {
  return zodiac_;
}
inline void Msg_UserInfoModify_C2S::set_zodiac(::google::protobuf::uint32 value) {
  set_has_zodiac();
  zodiac_ = value;
}

// optional string nick_name = 14;
inline bool Msg_UserInfoModify_C2S::has_nick_name() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_nick_name() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Msg_UserInfoModify_C2S::clear_has_nick_name() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Msg_UserInfoModify_C2S::clear_nick_name() {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    nick_name_->clear();
  }
  clear_has_nick_name();
}
inline const ::std::string& Msg_UserInfoModify_C2S::nick_name() const {
  return *nick_name_;
}
inline void Msg_UserInfoModify_C2S::set_nick_name(const ::std::string& value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_nick_name(const char* value) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_nick_name(const char* value, size_t size) {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  nick_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfoModify_C2S::mutable_nick_name() {
  set_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    nick_name_ = new ::std::string;
  }
  return nick_name_;
}
inline ::std::string* Msg_UserInfoModify_C2S::release_nick_name() {
  clear_has_nick_name();
  if (nick_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_name_;
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfoModify_C2S::set_allocated_nick_name(::std::string* nick_name) {
  if (nick_name_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_name_;
  }
  if (nick_name) {
    set_has_nick_name();
    nick_name_ = nick_name;
  } else {
    clear_has_nick_name();
    nick_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 15;
inline bool Msg_UserInfoModify_C2S::has_sign() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Msg_UserInfoModify_C2S::set_has_sign() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Msg_UserInfoModify_C2S::clear_has_sign() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Msg_UserInfoModify_C2S::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& Msg_UserInfoModify_C2S::sign() const {
  return *sign_;
}
inline void Msg_UserInfoModify_C2S::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_UserInfoModify_C2S::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_UserInfoModify_C2S::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* Msg_UserInfoModify_C2S::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_UserInfoModify_C2S::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_UserInfoModify_S2C

// -------------------------------------------------------------------

// Msg_DesignProduct_C2S

// required .dgame.ProductData product = 1;
inline bool Msg_DesignProduct_C2S::has_product() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_DesignProduct_C2S::set_has_product() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_DesignProduct_C2S::clear_has_product() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_DesignProduct_C2S::clear_product() {
  if (product_ != NULL) product_->::dgame::ProductData::Clear();
  clear_has_product();
}
inline const ::dgame::ProductData& Msg_DesignProduct_C2S::product() const {
  return product_ != NULL ? *product_ : *default_instance_->product_;
}
inline ::dgame::ProductData* Msg_DesignProduct_C2S::mutable_product() {
  set_has_product();
  if (product_ == NULL) product_ = new ::dgame::ProductData;
  return product_;
}
inline ::dgame::ProductData* Msg_DesignProduct_C2S::release_product() {
  clear_has_product();
  ::dgame::ProductData* temp = product_;
  product_ = NULL;
  return temp;
}
inline void Msg_DesignProduct_C2S::set_allocated_product(::dgame::ProductData* product) {
  delete product_;
  product_ = product;
  if (product) {
    set_has_product();
  } else {
    clear_has_product();
  }
}

// -------------------------------------------------------------------

// Msg_DesignProduct_S2C

// optional uint32 id = 1;
inline bool Msg_DesignProduct_S2C::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_DesignProduct_S2C::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_DesignProduct_S2C::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_DesignProduct_S2C::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_DesignProduct_S2C::id() const {
  return id_;
}
inline void Msg_DesignProduct_S2C::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 error_code = 2;
inline bool Msg_DesignProduct_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_DesignProduct_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_DesignProduct_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_DesignProduct_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_DesignProduct_S2C::error_code() const {
  return error_code_;
}
inline void Msg_DesignProduct_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_UserProductList_C2S

// -------------------------------------------------------------------

// Msg_UserProductList_S2C

// repeated .dgame.ProductData product_list = 1;
inline int Msg_UserProductList_S2C::product_list_size() const {
  return product_list_.size();
}
inline void Msg_UserProductList_S2C::clear_product_list() {
  product_list_.Clear();
}
inline const ::dgame::ProductData& Msg_UserProductList_S2C::product_list(int index) const {
  return product_list_.Get(index);
}
inline ::dgame::ProductData* Msg_UserProductList_S2C::mutable_product_list(int index) {
  return product_list_.Mutable(index);
}
inline ::dgame::ProductData* Msg_UserProductList_S2C::add_product_list() {
  return product_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductData >&
Msg_UserProductList_S2C::product_list() const {
  return product_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductData >*
Msg_UserProductList_S2C::mutable_product_list() {
  return &product_list_;
}

// -------------------------------------------------------------------

// Msg_UserProductDetail_C2S

// required uint32 id = 1;
inline bool Msg_UserProductDetail_C2S::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserProductDetail_C2S::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserProductDetail_C2S::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserProductDetail_C2S::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_UserProductDetail_C2S::id() const {
  return id_;
}
inline void Msg_UserProductDetail_C2S::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Msg_UserProductDetail_S2C

// required .dgame.ProductDetailInfo detail = 1;
inline bool Msg_UserProductDetail_S2C::has_detail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_UserProductDetail_S2C::set_has_detail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_UserProductDetail_S2C::clear_has_detail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_UserProductDetail_S2C::clear_detail() {
  if (detail_ != NULL) detail_->::dgame::ProductDetailInfo::Clear();
  clear_has_detail();
}
inline const ::dgame::ProductDetailInfo& Msg_UserProductDetail_S2C::detail() const {
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::dgame::ProductDetailInfo* Msg_UserProductDetail_S2C::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::dgame::ProductDetailInfo;
  return detail_;
}
inline ::dgame::ProductDetailInfo* Msg_UserProductDetail_S2C::release_detail() {
  clear_has_detail();
  ::dgame::ProductDetailInfo* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Msg_UserProductDetail_S2C::set_allocated_detail(::dgame::ProductDetailInfo* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
}

// -------------------------------------------------------------------

// Msg_ServerTime_C2S

// -------------------------------------------------------------------

// Msg_ServerTime_S2C

// required uint32 server_time = 1;
inline bool Msg_ServerTime_S2C::has_server_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_ServerTime_S2C::set_has_server_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_ServerTime_S2C::clear_has_server_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_ServerTime_S2C::clear_server_time() {
  server_time_ = 0u;
  clear_has_server_time();
}
inline ::google::protobuf::uint32 Msg_ServerTime_S2C::server_time() const {
  return server_time_;
}
inline void Msg_ServerTime_S2C::set_server_time(::google::protobuf::uint32 value) {
  set_has_server_time();
  server_time_ = value;
}

// -------------------------------------------------------------------

// Msg_GoodsRecommend_C2S

// -------------------------------------------------------------------

// Msg_GoodsRecommend_S2C

// repeated uint32 goods_list = 1;
inline int Msg_GoodsRecommend_S2C::goods_list_size() const {
  return goods_list_.size();
}
inline void Msg_GoodsRecommend_S2C::clear_goods_list() {
  goods_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_GoodsRecommend_S2C::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline void Msg_GoodsRecommend_S2C::set_goods_list(int index, ::google::protobuf::uint32 value) {
  goods_list_.Set(index, value);
}
inline void Msg_GoodsRecommend_S2C::add_goods_list(::google::protobuf::uint32 value) {
  goods_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_GoodsRecommend_S2C::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_GoodsRecommend_S2C::mutable_goods_list() {
  return &goods_list_;
}

// -------------------------------------------------------------------

// Msg_GoodsSearch_C2S

// required uint32 type = 1;
inline bool Msg_GoodsSearch_C2S::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_GoodsSearch_C2S::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_GoodsSearch_C2S::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_GoodsSearch_C2S::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_GoodsSearch_C2S::type() const {
  return type_;
}
inline void Msg_GoodsSearch_C2S::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Msg_GoodsSearch_S2C

// required uint32 type = 1;
inline bool Msg_GoodsSearch_S2C::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_GoodsSearch_S2C::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_GoodsSearch_S2C::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_GoodsSearch_S2C::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_GoodsSearch_S2C::type() const {
  return type_;
}
inline void Msg_GoodsSearch_S2C::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// repeated uint32 goods_list = 2;
inline int Msg_GoodsSearch_S2C::goods_list_size() const {
  return goods_list_.size();
}
inline void Msg_GoodsSearch_S2C::clear_goods_list() {
  goods_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_GoodsSearch_S2C::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline void Msg_GoodsSearch_S2C::set_goods_list(int index, ::google::protobuf::uint32 value) {
  goods_list_.Set(index, value);
}
inline void Msg_GoodsSearch_S2C::add_goods_list(::google::protobuf::uint32 value) {
  goods_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_GoodsSearch_S2C::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_GoodsSearch_S2C::mutable_goods_list() {
  return &goods_list_;
}

// -------------------------------------------------------------------

// Msg_Chat_C2S

// required uint32 type = 1;
inline bool Msg_Chat_C2S::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Chat_C2S::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Chat_C2S::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Chat_C2S::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_Chat_C2S::type() const {
  return type_;
}
inline void Msg_Chat_C2S::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 target_id = 2;
inline bool Msg_Chat_C2S::has_target_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Chat_C2S::set_has_target_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Chat_C2S::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Chat_C2S::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 Msg_Chat_C2S::target_id() const {
  return target_id_;
}
inline void Msg_Chat_C2S::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string target_name = 3;
inline bool Msg_Chat_C2S::has_target_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Chat_C2S::set_has_target_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Chat_C2S::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Chat_C2S::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& Msg_Chat_C2S::target_name() const {
  return *target_name_;
}
inline void Msg_Chat_C2S::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void Msg_Chat_C2S::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void Msg_Chat_C2S::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_C2S::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* Msg_Chat_C2S::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_C2S::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string text = 4;
inline bool Msg_Chat_C2S::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_Chat_C2S::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_Chat_C2S::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_Chat_C2S::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Msg_Chat_C2S::text() const {
  return *text_;
}
inline void Msg_Chat_C2S::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Msg_Chat_C2S::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Msg_Chat_C2S::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_C2S::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Msg_Chat_C2S::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_C2S::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_Chat_S2C

// required uint32 error_code = 1;
inline bool Msg_Chat_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Chat_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Chat_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Chat_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_Chat_S2C::error_code() const {
  return error_code_;
}
inline void Msg_Chat_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_Chat_Notify_S2C

// required uint32 type = 1;
inline bool Msg_Chat_Notify_S2C::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Chat_Notify_S2C::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Chat_Notify_S2C::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_Chat_Notify_S2C::type() const {
  return type_;
}
inline void Msg_Chat_Notify_S2C::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 sender_id = 2;
inline bool Msg_Chat_Notify_S2C::has_sender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_sender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_Chat_Notify_S2C::clear_has_sender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_Chat_Notify_S2C::clear_sender_id() {
  sender_id_ = 0u;
  clear_has_sender_id();
}
inline ::google::protobuf::uint32 Msg_Chat_Notify_S2C::sender_id() const {
  return sender_id_;
}
inline void Msg_Chat_Notify_S2C::set_sender_id(::google::protobuf::uint32 value) {
  set_has_sender_id();
  sender_id_ = value;
}

// optional string sender_name = 3;
inline bool Msg_Chat_Notify_S2C::has_sender_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_sender_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_Chat_Notify_S2C::clear_has_sender_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_Chat_Notify_S2C::clear_sender_name() {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    sender_name_->clear();
  }
  clear_has_sender_name();
}
inline const ::std::string& Msg_Chat_Notify_S2C::sender_name() const {
  return *sender_name_;
}
inline void Msg_Chat_Notify_S2C::set_sender_name(const ::std::string& value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_sender_name(const char* value) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_sender_name(const char* value, size_t size) {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  sender_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_Notify_S2C::mutable_sender_name() {
  set_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    sender_name_ = new ::std::string;
  }
  return sender_name_;
}
inline ::std::string* Msg_Chat_Notify_S2C::release_sender_name() {
  clear_has_sender_name();
  if (sender_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_name_;
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_Notify_S2C::set_allocated_sender_name(::std::string* sender_name) {
  if (sender_name_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_name_;
  }
  if (sender_name) {
    set_has_sender_name();
    sender_name_ = sender_name;
  } else {
    clear_has_sender_name();
    sender_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 target_id = 4;
inline bool Msg_Chat_Notify_S2C::has_target_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_target_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_Chat_Notify_S2C::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_Chat_Notify_S2C::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 Msg_Chat_Notify_S2C::target_id() const {
  return target_id_;
}
inline void Msg_Chat_Notify_S2C::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional string target_name = 5;
inline bool Msg_Chat_Notify_S2C::has_target_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_target_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_Chat_Notify_S2C::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_Chat_Notify_S2C::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& Msg_Chat_Notify_S2C::target_name() const {
  return *target_name_;
}
inline void Msg_Chat_Notify_S2C::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_Notify_S2C::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* Msg_Chat_Notify_S2C::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_Notify_S2C::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string text = 6;
inline bool Msg_Chat_Notify_S2C::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_Chat_Notify_S2C::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_Chat_Notify_S2C::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_Chat_Notify_S2C::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Msg_Chat_Notify_S2C::text() const {
  return *text_;
}
inline void Msg_Chat_Notify_S2C::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Msg_Chat_Notify_S2C::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Chat_Notify_S2C::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Msg_Chat_Notify_S2C::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Chat_Notify_S2C::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_CreateOrder_C2S

// repeated .dgame.OrderItem item_list = 1;
inline int Msg_CreateOrder_C2S::item_list_size() const {
  return item_list_.size();
}
inline void Msg_CreateOrder_C2S::clear_item_list() {
  item_list_.Clear();
}
inline const ::dgame::OrderItem& Msg_CreateOrder_C2S::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::dgame::OrderItem* Msg_CreateOrder_C2S::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::dgame::OrderItem* Msg_CreateOrder_C2S::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >&
Msg_CreateOrder_C2S::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OrderItem >*
Msg_CreateOrder_C2S::mutable_item_list() {
  return &item_list_;
}

// required string adress = 2;
inline bool Msg_CreateOrder_C2S::has_adress() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_CreateOrder_C2S::set_has_adress() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_CreateOrder_C2S::clear_has_adress() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_CreateOrder_C2S::clear_adress() {
  if (adress_ != &::google::protobuf::internal::kEmptyString) {
    adress_->clear();
  }
  clear_has_adress();
}
inline const ::std::string& Msg_CreateOrder_C2S::adress() const {
  return *adress_;
}
inline void Msg_CreateOrder_C2S::set_adress(const ::std::string& value) {
  set_has_adress();
  if (adress_ == &::google::protobuf::internal::kEmptyString) {
    adress_ = new ::std::string;
  }
  adress_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_adress(const char* value) {
  set_has_adress();
  if (adress_ == &::google::protobuf::internal::kEmptyString) {
    adress_ = new ::std::string;
  }
  adress_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_adress(const char* value, size_t size) {
  set_has_adress();
  if (adress_ == &::google::protobuf::internal::kEmptyString) {
    adress_ = new ::std::string;
  }
  adress_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_CreateOrder_C2S::mutable_adress() {
  set_has_adress();
  if (adress_ == &::google::protobuf::internal::kEmptyString) {
    adress_ = new ::std::string;
  }
  return adress_;
}
inline ::std::string* Msg_CreateOrder_C2S::release_adress() {
  clear_has_adress();
  if (adress_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = adress_;
    adress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_CreateOrder_C2S::set_allocated_adress(::std::string* adress) {
  if (adress_ != &::google::protobuf::internal::kEmptyString) {
    delete adress_;
  }
  if (adress) {
    set_has_adress();
    adress_ = adress;
  } else {
    clear_has_adress();
    adress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 is_invoice = 3;
inline bool Msg_CreateOrder_C2S::has_is_invoice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_CreateOrder_C2S::set_has_is_invoice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_CreateOrder_C2S::clear_has_is_invoice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_CreateOrder_C2S::clear_is_invoice() {
  is_invoice_ = 0u;
  clear_has_is_invoice();
}
inline ::google::protobuf::uint32 Msg_CreateOrder_C2S::is_invoice() const {
  return is_invoice_;
}
inline void Msg_CreateOrder_C2S::set_is_invoice(::google::protobuf::uint32 value) {
  set_has_is_invoice();
  is_invoice_ = value;
}

// optional string invoice_title = 4;
inline bool Msg_CreateOrder_C2S::has_invoice_title() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_CreateOrder_C2S::set_has_invoice_title() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_CreateOrder_C2S::clear_has_invoice_title() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_CreateOrder_C2S::clear_invoice_title() {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    invoice_title_->clear();
  }
  clear_has_invoice_title();
}
inline const ::std::string& Msg_CreateOrder_C2S::invoice_title() const {
  return *invoice_title_;
}
inline void Msg_CreateOrder_C2S::set_invoice_title(const ::std::string& value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_invoice_title(const char* value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_invoice_title(const char* value, size_t size) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_CreateOrder_C2S::mutable_invoice_title() {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  return invoice_title_;
}
inline ::std::string* Msg_CreateOrder_C2S::release_invoice_title() {
  clear_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invoice_title_;
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_CreateOrder_C2S::set_allocated_invoice_title(::std::string* invoice_title) {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_title_;
  }
  if (invoice_title) {
    set_has_invoice_title();
    invoice_title_ = invoice_title;
  } else {
    clear_has_invoice_title();
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string tephone = 5;
inline bool Msg_CreateOrder_C2S::has_tephone() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_CreateOrder_C2S::set_has_tephone() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_CreateOrder_C2S::clear_has_tephone() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_CreateOrder_C2S::clear_tephone() {
  if (tephone_ != &::google::protobuf::internal::kEmptyString) {
    tephone_->clear();
  }
  clear_has_tephone();
}
inline const ::std::string& Msg_CreateOrder_C2S::tephone() const {
  return *tephone_;
}
inline void Msg_CreateOrder_C2S::set_tephone(const ::std::string& value) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_tephone(const char* value) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_tephone(const char* value, size_t size) {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  tephone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_CreateOrder_C2S::mutable_tephone() {
  set_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    tephone_ = new ::std::string;
  }
  return tephone_;
}
inline ::std::string* Msg_CreateOrder_C2S::release_tephone() {
  clear_has_tephone();
  if (tephone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tephone_;
    tephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_CreateOrder_C2S::set_allocated_tephone(::std::string* tephone) {
  if (tephone_ != &::google::protobuf::internal::kEmptyString) {
    delete tephone_;
  }
  if (tephone) {
    set_has_tephone();
    tephone_ = tephone;
  } else {
    clear_has_tephone();
    tephone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string receive_name = 6;
inline bool Msg_CreateOrder_C2S::has_receive_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_CreateOrder_C2S::set_has_receive_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_CreateOrder_C2S::clear_has_receive_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_CreateOrder_C2S::clear_receive_name() {
  if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
    receive_name_->clear();
  }
  clear_has_receive_name();
}
inline const ::std::string& Msg_CreateOrder_C2S::receive_name() const {
  return *receive_name_;
}
inline void Msg_CreateOrder_C2S::set_receive_name(const ::std::string& value) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_receive_name(const char* value) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(value);
}
inline void Msg_CreateOrder_C2S::set_receive_name(const char* value, size_t size) {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  receive_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_CreateOrder_C2S::mutable_receive_name() {
  set_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    receive_name_ = new ::std::string;
  }
  return receive_name_;
}
inline ::std::string* Msg_CreateOrder_C2S::release_receive_name() {
  clear_has_receive_name();
  if (receive_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receive_name_;
    receive_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_CreateOrder_C2S::set_allocated_receive_name(::std::string* receive_name) {
  if (receive_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receive_name_;
  }
  if (receive_name) {
    set_has_receive_name();
    receive_name_ = receive_name;
  } else {
    clear_has_receive_name();
    receive_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_CreateOrder_S2C

// required uint32 error_code = 1;
inline bool Msg_CreateOrder_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_CreateOrder_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_CreateOrder_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_CreateOrder_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_CreateOrder_S2C::error_code() const {
  return error_code_;
}
inline void Msg_CreateOrder_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_AddItemToShoppingCart_C2S

// required uint32 itme_id = 1;
inline bool Msg_AddItemToShoppingCart_C2S::has_itme_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_AddItemToShoppingCart_C2S::set_has_itme_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_AddItemToShoppingCart_C2S::clear_has_itme_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_AddItemToShoppingCart_C2S::clear_itme_id() {
  itme_id_ = 0u;
  clear_has_itme_id();
}
inline ::google::protobuf::uint32 Msg_AddItemToShoppingCart_C2S::itme_id() const {
  return itme_id_;
}
inline void Msg_AddItemToShoppingCart_C2S::set_itme_id(::google::protobuf::uint32 value) {
  set_has_itme_id();
  itme_id_ = value;
}

// -------------------------------------------------------------------

// Msg_AddItemToShoppingCart_S2C

// required uint32 error_code = 1;
inline bool Msg_AddItemToShoppingCart_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_AddItemToShoppingCart_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_AddItemToShoppingCart_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_AddItemToShoppingCart_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_AddItemToShoppingCart_S2C::error_code() const {
  return error_code_;
}
inline void Msg_AddItemToShoppingCart_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// required uint32 itme_id = 2;
inline bool Msg_AddItemToShoppingCart_S2C::has_itme_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_AddItemToShoppingCart_S2C::set_has_itme_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_AddItemToShoppingCart_S2C::clear_has_itme_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_AddItemToShoppingCart_S2C::clear_itme_id() {
  itme_id_ = 0u;
  clear_has_itme_id();
}
inline ::google::protobuf::uint32 Msg_AddItemToShoppingCart_S2C::itme_id() const {
  return itme_id_;
}
inline void Msg_AddItemToShoppingCart_S2C::set_itme_id(::google::protobuf::uint32 value) {
  set_has_itme_id();
  itme_id_ = value;
}

// -------------------------------------------------------------------

// Msg_ShoppingCartItemList_C2S

// -------------------------------------------------------------------

// Msg_ShoppingCartItemList_S2C

// repeated uint32 item_list = 1;
inline int Msg_ShoppingCartItemList_S2C::item_list_size() const {
  return item_list_.size();
}
inline void Msg_ShoppingCartItemList_S2C::clear_item_list() {
  item_list_.Clear();
}
inline ::google::protobuf::uint32 Msg_ShoppingCartItemList_S2C::item_list(int index) const {
  return item_list_.Get(index);
}
inline void Msg_ShoppingCartItemList_S2C::set_item_list(int index, ::google::protobuf::uint32 value) {
  item_list_.Set(index, value);
}
inline void Msg_ShoppingCartItemList_S2C::add_item_list(::google::protobuf::uint32 value) {
  item_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Msg_ShoppingCartItemList_S2C::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Msg_ShoppingCartItemList_S2C::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// Msg_Feedback_C2S

// required string desc = 1;
inline bool Msg_Feedback_C2S::has_desc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Feedback_C2S::set_has_desc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Feedback_C2S::clear_has_desc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Feedback_C2S::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& Msg_Feedback_C2S::desc() const {
  return *desc_;
}
inline void Msg_Feedback_C2S::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Msg_Feedback_C2S::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void Msg_Feedback_C2S::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_Feedback_C2S::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* Msg_Feedback_C2S::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_Feedback_C2S::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_Feedback_S2C

// required uint32 error_code = 1;
inline bool Msg_Feedback_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Feedback_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Feedback_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Feedback_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_Feedback_S2C::error_code() const {
  return error_code_;
}
inline void Msg_Feedback_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_DesignerApply_C2S

// optional uint32 designer_type = 1;
inline bool Msg_DesignerApply_C2S::has_designer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_DesignerApply_C2S::set_has_designer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_DesignerApply_C2S::clear_has_designer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_DesignerApply_C2S::clear_designer_type() {
  designer_type_ = 0u;
  clear_has_designer_type();
}
inline ::google::protobuf::uint32 Msg_DesignerApply_C2S::designer_type() const {
  return designer_type_;
}
inline void Msg_DesignerApply_C2S::set_designer_type(::google::protobuf::uint32 value) {
  set_has_designer_type();
  designer_type_ = value;
}

// optional string exp_desc = 2;
inline bool Msg_DesignerApply_C2S::has_exp_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_DesignerApply_C2S::set_has_exp_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_DesignerApply_C2S::clear_has_exp_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_DesignerApply_C2S::clear_exp_desc() {
  if (exp_desc_ != &::google::protobuf::internal::kEmptyString) {
    exp_desc_->clear();
  }
  clear_has_exp_desc();
}
inline const ::std::string& Msg_DesignerApply_C2S::exp_desc() const {
  return *exp_desc_;
}
inline void Msg_DesignerApply_C2S::set_exp_desc(const ::std::string& value) {
  set_has_exp_desc();
  if (exp_desc_ == &::google::protobuf::internal::kEmptyString) {
    exp_desc_ = new ::std::string;
  }
  exp_desc_->assign(value);
}
inline void Msg_DesignerApply_C2S::set_exp_desc(const char* value) {
  set_has_exp_desc();
  if (exp_desc_ == &::google::protobuf::internal::kEmptyString) {
    exp_desc_ = new ::std::string;
  }
  exp_desc_->assign(value);
}
inline void Msg_DesignerApply_C2S::set_exp_desc(const char* value, size_t size) {
  set_has_exp_desc();
  if (exp_desc_ == &::google::protobuf::internal::kEmptyString) {
    exp_desc_ = new ::std::string;
  }
  exp_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_DesignerApply_C2S::mutable_exp_desc() {
  set_has_exp_desc();
  if (exp_desc_ == &::google::protobuf::internal::kEmptyString) {
    exp_desc_ = new ::std::string;
  }
  return exp_desc_;
}
inline ::std::string* Msg_DesignerApply_C2S::release_exp_desc() {
  clear_has_exp_desc();
  if (exp_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = exp_desc_;
    exp_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_DesignerApply_C2S::set_allocated_exp_desc(::std::string* exp_desc) {
  if (exp_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete exp_desc_;
  }
  if (exp_desc) {
    set_has_exp_desc();
    exp_desc_ = exp_desc;
  } else {
    clear_has_exp_desc();
    exp_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string certificate_url = 3;
inline bool Msg_DesignerApply_C2S::has_certificate_url() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_DesignerApply_C2S::set_has_certificate_url() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_DesignerApply_C2S::clear_has_certificate_url() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_DesignerApply_C2S::clear_certificate_url() {
  if (certificate_url_ != &::google::protobuf::internal::kEmptyString) {
    certificate_url_->clear();
  }
  clear_has_certificate_url();
}
inline const ::std::string& Msg_DesignerApply_C2S::certificate_url() const {
  return *certificate_url_;
}
inline void Msg_DesignerApply_C2S::set_certificate_url(const ::std::string& value) {
  set_has_certificate_url();
  if (certificate_url_ == &::google::protobuf::internal::kEmptyString) {
    certificate_url_ = new ::std::string;
  }
  certificate_url_->assign(value);
}
inline void Msg_DesignerApply_C2S::set_certificate_url(const char* value) {
  set_has_certificate_url();
  if (certificate_url_ == &::google::protobuf::internal::kEmptyString) {
    certificate_url_ = new ::std::string;
  }
  certificate_url_->assign(value);
}
inline void Msg_DesignerApply_C2S::set_certificate_url(const char* value, size_t size) {
  set_has_certificate_url();
  if (certificate_url_ == &::google::protobuf::internal::kEmptyString) {
    certificate_url_ = new ::std::string;
  }
  certificate_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_DesignerApply_C2S::mutable_certificate_url() {
  set_has_certificate_url();
  if (certificate_url_ == &::google::protobuf::internal::kEmptyString) {
    certificate_url_ = new ::std::string;
  }
  return certificate_url_;
}
inline ::std::string* Msg_DesignerApply_C2S::release_certificate_url() {
  clear_has_certificate_url();
  if (certificate_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = certificate_url_;
    certificate_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_DesignerApply_C2S::set_allocated_certificate_url(::std::string* certificate_url) {
  if (certificate_url_ != &::google::protobuf::internal::kEmptyString) {
    delete certificate_url_;
  }
  if (certificate_url) {
    set_has_certificate_url();
    certificate_url_ = certificate_url;
  } else {
    clear_has_certificate_url();
    certificate_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .dgame.ProductSketchInfo sketch_info = 4;
inline bool Msg_DesignerApply_C2S::has_sketch_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_DesignerApply_C2S::set_has_sketch_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_DesignerApply_C2S::clear_has_sketch_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_DesignerApply_C2S::clear_sketch_info() {
  if (sketch_info_ != NULL) sketch_info_->::dgame::ProductSketchInfo::Clear();
  clear_has_sketch_info();
}
inline const ::dgame::ProductSketchInfo& Msg_DesignerApply_C2S::sketch_info() const {
  return sketch_info_ != NULL ? *sketch_info_ : *default_instance_->sketch_info_;
}
inline ::dgame::ProductSketchInfo* Msg_DesignerApply_C2S::mutable_sketch_info() {
  set_has_sketch_info();
  if (sketch_info_ == NULL) sketch_info_ = new ::dgame::ProductSketchInfo;
  return sketch_info_;
}
inline ::dgame::ProductSketchInfo* Msg_DesignerApply_C2S::release_sketch_info() {
  clear_has_sketch_info();
  ::dgame::ProductSketchInfo* temp = sketch_info_;
  sketch_info_ = NULL;
  return temp;
}
inline void Msg_DesignerApply_C2S::set_allocated_sketch_info(::dgame::ProductSketchInfo* sketch_info) {
  delete sketch_info_;
  sketch_info_ = sketch_info;
  if (sketch_info) {
    set_has_sketch_info();
  } else {
    clear_has_sketch_info();
  }
}

// -------------------------------------------------------------------

// Msg_DesignerApply_S2C

// required uint32 error_code = 1;
inline bool Msg_DesignerApply_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_DesignerApply_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_DesignerApply_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_DesignerApply_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_DesignerApply_S2C::error_code() const {
  return error_code_;
}
inline void Msg_DesignerApply_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_ProductSketchUpload_C2S

// required .dgame.ProductSketchInfo sketch_info = 1;
inline bool Msg_ProductSketchUpload_C2S::has_sketch_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_ProductSketchUpload_C2S::set_has_sketch_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_ProductSketchUpload_C2S::clear_has_sketch_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_ProductSketchUpload_C2S::clear_sketch_info() {
  if (sketch_info_ != NULL) sketch_info_->::dgame::ProductSketchInfo::Clear();
  clear_has_sketch_info();
}
inline const ::dgame::ProductSketchInfo& Msg_ProductSketchUpload_C2S::sketch_info() const {
  return sketch_info_ != NULL ? *sketch_info_ : *default_instance_->sketch_info_;
}
inline ::dgame::ProductSketchInfo* Msg_ProductSketchUpload_C2S::mutable_sketch_info() {
  set_has_sketch_info();
  if (sketch_info_ == NULL) sketch_info_ = new ::dgame::ProductSketchInfo;
  return sketch_info_;
}
inline ::dgame::ProductSketchInfo* Msg_ProductSketchUpload_C2S::release_sketch_info() {
  clear_has_sketch_info();
  ::dgame::ProductSketchInfo* temp = sketch_info_;
  sketch_info_ = NULL;
  return temp;
}
inline void Msg_ProductSketchUpload_C2S::set_allocated_sketch_info(::dgame::ProductSketchInfo* sketch_info) {
  delete sketch_info_;
  sketch_info_ = sketch_info;
  if (sketch_info) {
    set_has_sketch_info();
  } else {
    clear_has_sketch_info();
  }
}

// -------------------------------------------------------------------

// Msg_ProductSketchUpload_S2C

// required uint32 error_code = 1;
inline bool Msg_ProductSketchUpload_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_ProductSketchUpload_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_ProductSketchUpload_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_ProductSketchUpload_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_ProductSketchUpload_S2C::error_code() const {
  return error_code_;
}
inline void Msg_ProductSketchUpload_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_PointSourceList_C2S

// -------------------------------------------------------------------

// Msg_PointSourceList_S2C

// repeated .dgame.PointSourceInfo point_list = 1;
inline int Msg_PointSourceList_S2C::point_list_size() const {
  return point_list_.size();
}
inline void Msg_PointSourceList_S2C::clear_point_list() {
  point_list_.Clear();
}
inline const ::dgame::PointSourceInfo& Msg_PointSourceList_S2C::point_list(int index) const {
  return point_list_.Get(index);
}
inline ::dgame::PointSourceInfo* Msg_PointSourceList_S2C::mutable_point_list(int index) {
  return point_list_.Mutable(index);
}
inline ::dgame::PointSourceInfo* Msg_PointSourceList_S2C::add_point_list() {
  return point_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::PointSourceInfo >&
Msg_PointSourceList_S2C::point_list() const {
  return point_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::PointSourceInfo >*
Msg_PointSourceList_S2C::mutable_point_list() {
  return &point_list_;
}

// -------------------------------------------------------------------

// Msg_WithdrawMoney_C2S

// required float money = 1;
inline bool Msg_WithdrawMoney_C2S::has_money() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_WithdrawMoney_C2S::set_has_money() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_WithdrawMoney_C2S::clear_has_money() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_WithdrawMoney_C2S::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline float Msg_WithdrawMoney_C2S::money() const {
  return money_;
}
inline void Msg_WithdrawMoney_C2S::set_money(float value) {
  set_has_money();
  money_ = value;
}

// -------------------------------------------------------------------

// Msg_WithdrawMoney_S2C

// required uint32 error_code = 1;
inline bool Msg_WithdrawMoney_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_WithdrawMoney_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_WithdrawMoney_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_WithdrawMoney_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_WithdrawMoney_S2C::error_code() const {
  return error_code_;
}
inline void Msg_WithdrawMoney_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_MyOriginalProductList_C2S

// optional uint32 type = 1;
inline bool Msg_MyOriginalProductList_C2S::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_MyOriginalProductList_C2S::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_MyOriginalProductList_C2S::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_MyOriginalProductList_C2S::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_MyOriginalProductList_C2S::type() const {
  return type_;
}
inline void Msg_MyOriginalProductList_C2S::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 index = 2;
inline bool Msg_MyOriginalProductList_C2S::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_MyOriginalProductList_C2S::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_MyOriginalProductList_C2S::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_MyOriginalProductList_C2S::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Msg_MyOriginalProductList_C2S::index() const {
  return index_;
}
inline void Msg_MyOriginalProductList_C2S::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// Msg_MyOriginalProductList_S2C

// optional uint32 type = 1;
inline bool Msg_MyOriginalProductList_S2C::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_MyOriginalProductList_S2C::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_MyOriginalProductList_S2C::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_MyOriginalProductList_S2C::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Msg_MyOriginalProductList_S2C::type() const {
  return type_;
}
inline void Msg_MyOriginalProductList_S2C::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 cur_index = 2;
inline bool Msg_MyOriginalProductList_S2C::has_cur_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_MyOriginalProductList_S2C::set_has_cur_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_MyOriginalProductList_S2C::clear_has_cur_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_MyOriginalProductList_S2C::clear_cur_index() {
  cur_index_ = 0u;
  clear_has_cur_index();
}
inline ::google::protobuf::uint32 Msg_MyOriginalProductList_S2C::cur_index() const {
  return cur_index_;
}
inline void Msg_MyOriginalProductList_S2C::set_cur_index(::google::protobuf::uint32 value) {
  set_has_cur_index();
  cur_index_ = value;
}

// optional uint32 total_index = 3;
inline bool Msg_MyOriginalProductList_S2C::has_total_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_MyOriginalProductList_S2C::set_has_total_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_MyOriginalProductList_S2C::clear_has_total_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_MyOriginalProductList_S2C::clear_total_index() {
  total_index_ = 0u;
  clear_has_total_index();
}
inline ::google::protobuf::uint32 Msg_MyOriginalProductList_S2C::total_index() const {
  return total_index_;
}
inline void Msg_MyOriginalProductList_S2C::set_total_index(::google::protobuf::uint32 value) {
  set_has_total_index();
  total_index_ = value;
}

// repeated .dgame.OriginalProductInfo product_list = 4;
inline int Msg_MyOriginalProductList_S2C::product_list_size() const {
  return product_list_.size();
}
inline void Msg_MyOriginalProductList_S2C::clear_product_list() {
  product_list_.Clear();
}
inline const ::dgame::OriginalProductInfo& Msg_MyOriginalProductList_S2C::product_list(int index) const {
  return product_list_.Get(index);
}
inline ::dgame::OriginalProductInfo* Msg_MyOriginalProductList_S2C::mutable_product_list(int index) {
  return product_list_.Mutable(index);
}
inline ::dgame::OriginalProductInfo* Msg_MyOriginalProductList_S2C::add_product_list() {
  return product_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductInfo >&
Msg_MyOriginalProductList_S2C::product_list() const {
  return product_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductInfo >*
Msg_MyOriginalProductList_S2C::mutable_product_list() {
  return &product_list_;
}

// -------------------------------------------------------------------

// Msg_BindBankAccount_C2S

// required string account_name = 1;
inline bool Msg_BindBankAccount_C2S::has_account_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_BindBankAccount_C2S::set_has_account_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_BindBankAccount_C2S::clear_has_account_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_BindBankAccount_C2S::clear_account_name() {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    account_name_->clear();
  }
  clear_has_account_name();
}
inline const ::std::string& Msg_BindBankAccount_C2S::account_name() const {
  return *account_name_;
}
inline void Msg_BindBankAccount_C2S::set_account_name(const ::std::string& value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void Msg_BindBankAccount_C2S::set_account_name(const char* value) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(value);
}
inline void Msg_BindBankAccount_C2S::set_account_name(const char* value, size_t size) {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  account_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_BindBankAccount_C2S::mutable_account_name() {
  set_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    account_name_ = new ::std::string;
  }
  return account_name_;
}
inline ::std::string* Msg_BindBankAccount_C2S::release_account_name() {
  clear_has_account_name();
  if (account_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_name_;
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_BindBankAccount_C2S::set_allocated_account_name(::std::string* account_name) {
  if (account_name_ != &::google::protobuf::internal::kEmptyString) {
    delete account_name_;
  }
  if (account_name) {
    set_has_account_name();
    account_name_ = account_name;
  } else {
    clear_has_account_name();
    account_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string card_number = 2;
inline bool Msg_BindBankAccount_C2S::has_card_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_BindBankAccount_C2S::set_has_card_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_BindBankAccount_C2S::clear_has_card_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_BindBankAccount_C2S::clear_card_number() {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    card_number_->clear();
  }
  clear_has_card_number();
}
inline const ::std::string& Msg_BindBankAccount_C2S::card_number() const {
  return *card_number_;
}
inline void Msg_BindBankAccount_C2S::set_card_number(const ::std::string& value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void Msg_BindBankAccount_C2S::set_card_number(const char* value) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(value);
}
inline void Msg_BindBankAccount_C2S::set_card_number(const char* value, size_t size) {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  card_number_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_BindBankAccount_C2S::mutable_card_number() {
  set_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    card_number_ = new ::std::string;
  }
  return card_number_;
}
inline ::std::string* Msg_BindBankAccount_C2S::release_card_number() {
  clear_has_card_number();
  if (card_number_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = card_number_;
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_BindBankAccount_C2S::set_allocated_card_number(::std::string* card_number) {
  if (card_number_ != &::google::protobuf::internal::kEmptyString) {
    delete card_number_;
  }
  if (card_number) {
    set_has_card_number();
    card_number_ = card_number;
  } else {
    clear_has_card_number();
    card_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_BindBankAccount_S2C

// required uint32 error_code = 1;
inline bool Msg_BindBankAccount_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_BindBankAccount_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_BindBankAccount_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_BindBankAccount_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_BindBankAccount_S2C::error_code() const {
  return error_code_;
}
inline void Msg_BindBankAccount_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_BindBankAccountList_C2S

// -------------------------------------------------------------------

// Msg_BindBankAccountList_S2C

// repeated .dgame.BindBankAccountInfo bank_list = 1;
inline int Msg_BindBankAccountList_S2C::bank_list_size() const {
  return bank_list_.size();
}
inline void Msg_BindBankAccountList_S2C::clear_bank_list() {
  bank_list_.Clear();
}
inline const ::dgame::BindBankAccountInfo& Msg_BindBankAccountList_S2C::bank_list(int index) const {
  return bank_list_.Get(index);
}
inline ::dgame::BindBankAccountInfo* Msg_BindBankAccountList_S2C::mutable_bank_list(int index) {
  return bank_list_.Mutable(index);
}
inline ::dgame::BindBankAccountInfo* Msg_BindBankAccountList_S2C::add_bank_list() {
  return bank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::BindBankAccountInfo >&
Msg_BindBankAccountList_S2C::bank_list() const {
  return bank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::BindBankAccountInfo >*
Msg_BindBankAccountList_S2C::mutable_bank_list() {
  return &bank_list_;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitList_C2S

// required uint32 index = 1;
inline bool Msg_OriginalProductProfitList_C2S::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitList_C2S::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitList_C2S::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitList_C2S::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitList_C2S::index() const {
  return index_;
}
inline void Msg_OriginalProductProfitList_C2S::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitList_S2C

// optional uint32 total_profit = 1;
inline bool Msg_OriginalProductProfitList_S2C::has_total_profit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitList_S2C::set_has_total_profit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_total_profit() {
  total_profit_ = 0u;
  clear_has_total_profit();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitList_S2C::total_profit() const {
  return total_profit_;
}
inline void Msg_OriginalProductProfitList_S2C::set_total_profit(::google::protobuf::uint32 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional uint32 total_count = 2;
inline bool Msg_OriginalProductProfitList_S2C::has_total_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_OriginalProductProfitList_S2C::set_has_total_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitList_S2C::total_count() const {
  return total_count_;
}
inline void Msg_OriginalProductProfitList_S2C::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// optional uint32 cur_index = 3;
inline bool Msg_OriginalProductProfitList_S2C::has_cur_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_OriginalProductProfitList_S2C::set_has_cur_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_has_cur_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_cur_index() {
  cur_index_ = 0u;
  clear_has_cur_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitList_S2C::cur_index() const {
  return cur_index_;
}
inline void Msg_OriginalProductProfitList_S2C::set_cur_index(::google::protobuf::uint32 value) {
  set_has_cur_index();
  cur_index_ = value;
}

// optional uint32 total_index = 4;
inline bool Msg_OriginalProductProfitList_S2C::has_total_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_OriginalProductProfitList_S2C::set_has_total_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_has_total_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_OriginalProductProfitList_S2C::clear_total_index() {
  total_index_ = 0u;
  clear_has_total_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitList_S2C::total_index() const {
  return total_index_;
}
inline void Msg_OriginalProductProfitList_S2C::set_total_index(::google::protobuf::uint32 value) {
  set_has_total_index();
  total_index_ = value;
}

// repeated .dgame.OriginalProductProfitBaseInfo profit_list = 5;
inline int Msg_OriginalProductProfitList_S2C::profit_list_size() const {
  return profit_list_.size();
}
inline void Msg_OriginalProductProfitList_S2C::clear_profit_list() {
  profit_list_.Clear();
}
inline const ::dgame::OriginalProductProfitBaseInfo& Msg_OriginalProductProfitList_S2C::profit_list(int index) const {
  return profit_list_.Get(index);
}
inline ::dgame::OriginalProductProfitBaseInfo* Msg_OriginalProductProfitList_S2C::mutable_profit_list(int index) {
  return profit_list_.Mutable(index);
}
inline ::dgame::OriginalProductProfitBaseInfo* Msg_OriginalProductProfitList_S2C::add_profit_list() {
  return profit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitBaseInfo >&
Msg_OriginalProductProfitList_S2C::profit_list() const {
  return profit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::OriginalProductProfitBaseInfo >*
Msg_OriginalProductProfitList_S2C::mutable_profit_list() {
  return &profit_list_;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitDetailList_C2S

// required uint32 index = 1;
inline bool Msg_OriginalProductProfitDetailList_C2S::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitDetailList_C2S::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitDetailList_C2S::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitDetailList_C2S::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetailList_C2S::index() const {
  return index_;
}
inline void Msg_OriginalProductProfitDetailList_C2S::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitDetailList_S2C

// optional uint32 total_profit = 1;
inline bool Msg_OriginalProductProfitDetailList_S2C::has_total_profit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_has_total_profit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_total_profit() {
  total_profit_ = 0u;
  clear_has_total_profit();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetailList_S2C::total_profit() const {
  return total_profit_;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_total_profit(::google::protobuf::uint32 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional uint32 cur_index = 2;
inline bool Msg_OriginalProductProfitDetailList_S2C::has_cur_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_has_cur_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_has_cur_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_cur_index() {
  cur_index_ = 0u;
  clear_has_cur_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetailList_S2C::cur_index() const {
  return cur_index_;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_cur_index(::google::protobuf::uint32 value) {
  set_has_cur_index();
  cur_index_ = value;
}

// optional uint32 total_index = 3;
inline bool Msg_OriginalProductProfitDetailList_S2C::has_total_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_has_total_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_has_total_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_total_index() {
  total_index_ = 0u;
  clear_has_total_index();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetailList_S2C::total_index() const {
  return total_index_;
}
inline void Msg_OriginalProductProfitDetailList_S2C::set_total_index(::google::protobuf::uint32 value) {
  set_has_total_index();
  total_index_ = value;
}

// repeated .dgame.DayOriginalProductProfit profit_list = 4;
inline int Msg_OriginalProductProfitDetailList_S2C::profit_list_size() const {
  return profit_list_.size();
}
inline void Msg_OriginalProductProfitDetailList_S2C::clear_profit_list() {
  profit_list_.Clear();
}
inline const ::dgame::DayOriginalProductProfit& Msg_OriginalProductProfitDetailList_S2C::profit_list(int index) const {
  return profit_list_.Get(index);
}
inline ::dgame::DayOriginalProductProfit* Msg_OriginalProductProfitDetailList_S2C::mutable_profit_list(int index) {
  return profit_list_.Mutable(index);
}
inline ::dgame::DayOriginalProductProfit* Msg_OriginalProductProfitDetailList_S2C::add_profit_list() {
  return profit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfit >&
Msg_OriginalProductProfitDetailList_S2C::profit_list() const {
  return profit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfit >*
Msg_OriginalProductProfitDetailList_S2C::mutable_profit_list() {
  return &profit_list_;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitDetail_C2S

// optional uint32 id = 1;
inline bool Msg_OriginalProductProfitDetail_C2S::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitDetail_C2S::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitDetail_C2S::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitDetail_C2S::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetail_C2S::id() const {
  return id_;
}
inline void Msg_OriginalProductProfitDetail_C2S::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Msg_OriginalProductProfitDetail_S2C

// optional uint32 id = 1;
inline bool Msg_OriginalProductProfitDetail_S2C::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetail_S2C::id() const {
  return id_;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool Msg_OriginalProductProfitDetail_S2C::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Msg_OriginalProductProfitDetail_S2C::name() const {
  return *name_;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Msg_OriginalProductProfitDetail_S2C::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Msg_OriginalProductProfitDetail_S2C::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_OriginalProductProfitDetail_S2C::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Msg_OriginalProductProfitDetail_S2C::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_OriginalProductProfitDetail_S2C::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 total_profit = 3;
inline bool Msg_OriginalProductProfitDetail_S2C::has_total_profit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_has_total_profit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_total_profit() {
  total_profit_ = 0u;
  clear_has_total_profit();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetail_S2C::total_profit() const {
  return total_profit_;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_total_profit(::google::protobuf::uint32 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// optional uint32 total_count = 4;
inline bool Msg_OriginalProductProfitDetail_S2C::has_total_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_has_total_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_has_total_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_total_count() {
  total_count_ = 0u;
  clear_has_total_count();
}
inline ::google::protobuf::uint32 Msg_OriginalProductProfitDetail_S2C::total_count() const {
  return total_count_;
}
inline void Msg_OriginalProductProfitDetail_S2C::set_total_count(::google::protobuf::uint32 value) {
  set_has_total_count();
  total_count_ = value;
}

// repeated .dgame.DayOriginalProductProfitBase profit_base_list = 5;
inline int Msg_OriginalProductProfitDetail_S2C::profit_base_list_size() const {
  return profit_base_list_.size();
}
inline void Msg_OriginalProductProfitDetail_S2C::clear_profit_base_list() {
  profit_base_list_.Clear();
}
inline const ::dgame::DayOriginalProductProfitBase& Msg_OriginalProductProfitDetail_S2C::profit_base_list(int index) const {
  return profit_base_list_.Get(index);
}
inline ::dgame::DayOriginalProductProfitBase* Msg_OriginalProductProfitDetail_S2C::mutable_profit_base_list(int index) {
  return profit_base_list_.Mutable(index);
}
inline ::dgame::DayOriginalProductProfitBase* Msg_OriginalProductProfitDetail_S2C::add_profit_base_list() {
  return profit_base_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfitBase >&
Msg_OriginalProductProfitDetail_S2C::profit_base_list() const {
  return profit_base_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::DayOriginalProductProfitBase >*
Msg_OriginalProductProfitDetail_S2C::mutable_profit_base_list() {
  return &profit_base_list_;
}

// -------------------------------------------------------------------

// Msg_OriginalProductDetail_C2S

// required uint32 id = 1;
inline bool Msg_OriginalProductDetail_C2S::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductDetail_C2S::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductDetail_C2S::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductDetail_C2S::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_OriginalProductDetail_C2S::id() const {
  return id_;
}
inline void Msg_OriginalProductDetail_C2S::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Msg_OriginalProductDetail_S2C

// optional .dgame.OriginalProductDetail product_detail = 1;
inline bool Msg_OriginalProductDetail_S2C::has_product_detail() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductDetail_S2C::set_has_product_detail() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductDetail_S2C::clear_has_product_detail() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductDetail_S2C::clear_product_detail() {
  if (product_detail_ != NULL) product_detail_->::dgame::OriginalProductDetail::Clear();
  clear_has_product_detail();
}
inline const ::dgame::OriginalProductDetail& Msg_OriginalProductDetail_S2C::product_detail() const {
  return product_detail_ != NULL ? *product_detail_ : *default_instance_->product_detail_;
}
inline ::dgame::OriginalProductDetail* Msg_OriginalProductDetail_S2C::mutable_product_detail() {
  set_has_product_detail();
  if (product_detail_ == NULL) product_detail_ = new ::dgame::OriginalProductDetail;
  return product_detail_;
}
inline ::dgame::OriginalProductDetail* Msg_OriginalProductDetail_S2C::release_product_detail() {
  clear_has_product_detail();
  ::dgame::OriginalProductDetail* temp = product_detail_;
  product_detail_ = NULL;
  return temp;
}
inline void Msg_OriginalProductDetail_S2C::set_allocated_product_detail(::dgame::OriginalProductDetail* product_detail) {
  delete product_detail_;
  product_detail_ = product_detail;
  if (product_detail) {
    set_has_product_detail();
  } else {
    clear_has_product_detail();
  }
}

// -------------------------------------------------------------------

// Msg_OriginalProductModify_C2S

// optional uint32 operation = 1;
inline bool Msg_OriginalProductModify_C2S::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductModify_C2S::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductModify_C2S::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductModify_C2S::clear_operation() {
  operation_ = 0u;
  clear_has_operation();
}
inline ::google::protobuf::uint32 Msg_OriginalProductModify_C2S::operation() const {
  return operation_;
}
inline void Msg_OriginalProductModify_C2S::set_operation(::google::protobuf::uint32 value) {
  set_has_operation();
  operation_ = value;
}

// optional uint32 id = 2;
inline bool Msg_OriginalProductModify_C2S::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_OriginalProductModify_C2S::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_OriginalProductModify_C2S::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_OriginalProductModify_C2S::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_OriginalProductModify_C2S::id() const {
  return id_;
}
inline void Msg_OriginalProductModify_C2S::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional .dgame.OriginalProductDetail product = 3;
inline bool Msg_OriginalProductModify_C2S::has_product() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_OriginalProductModify_C2S::set_has_product() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_OriginalProductModify_C2S::clear_has_product() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_OriginalProductModify_C2S::clear_product() {
  if (product_ != NULL) product_->::dgame::OriginalProductDetail::Clear();
  clear_has_product();
}
inline const ::dgame::OriginalProductDetail& Msg_OriginalProductModify_C2S::product() const {
  return product_ != NULL ? *product_ : *default_instance_->product_;
}
inline ::dgame::OriginalProductDetail* Msg_OriginalProductModify_C2S::mutable_product() {
  set_has_product();
  if (product_ == NULL) product_ = new ::dgame::OriginalProductDetail;
  return product_;
}
inline ::dgame::OriginalProductDetail* Msg_OriginalProductModify_C2S::release_product() {
  clear_has_product();
  ::dgame::OriginalProductDetail* temp = product_;
  product_ = NULL;
  return temp;
}
inline void Msg_OriginalProductModify_C2S::set_allocated_product(::dgame::OriginalProductDetail* product) {
  delete product_;
  product_ = product;
  if (product) {
    set_has_product();
  } else {
    clear_has_product();
  }
}

// -------------------------------------------------------------------

// Msg_OriginalProductModify_S2C

// optional uint32 operation = 1;
inline bool Msg_OriginalProductModify_S2C::has_operation() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_OriginalProductModify_S2C::set_has_operation() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_OriginalProductModify_S2C::clear_has_operation() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_OriginalProductModify_S2C::clear_operation() {
  operation_ = 0u;
  clear_has_operation();
}
inline ::google::protobuf::uint32 Msg_OriginalProductModify_S2C::operation() const {
  return operation_;
}
inline void Msg_OriginalProductModify_S2C::set_operation(::google::protobuf::uint32 value) {
  set_has_operation();
  operation_ = value;
}

// optional uint32 error_code = 2;
inline bool Msg_OriginalProductModify_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_OriginalProductModify_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_OriginalProductModify_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_OriginalProductModify_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_OriginalProductModify_S2C::error_code() const {
  return error_code_;
}
inline void Msg_OriginalProductModify_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// optional uint32 id = 3;
inline bool Msg_OriginalProductModify_S2C::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_OriginalProductModify_S2C::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_OriginalProductModify_S2C::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_OriginalProductModify_S2C::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Msg_OriginalProductModify_S2C::id() const {
  return id_;
}
inline void Msg_OriginalProductModify_S2C::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Msg_ProfitList_C2S

// -------------------------------------------------------------------

// Msg_ProfitList_S2C

// required uint32 balance = 1;
inline bool Msg_ProfitList_S2C::has_balance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_ProfitList_S2C::set_has_balance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_ProfitList_S2C::clear_has_balance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_ProfitList_S2C::clear_balance() {
  balance_ = 0u;
  clear_has_balance();
}
inline ::google::protobuf::uint32 Msg_ProfitList_S2C::balance() const {
  return balance_;
}
inline void Msg_ProfitList_S2C::set_balance(::google::protobuf::uint32 value) {
  set_has_balance();
  balance_ = value;
}

// required uint32 total_profit = 2;
inline bool Msg_ProfitList_S2C::has_total_profit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_ProfitList_S2C::set_has_total_profit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_ProfitList_S2C::clear_has_total_profit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_ProfitList_S2C::clear_total_profit() {
  total_profit_ = 0u;
  clear_has_total_profit();
}
inline ::google::protobuf::uint32 Msg_ProfitList_S2C::total_profit() const {
  return total_profit_;
}
inline void Msg_ProfitList_S2C::set_total_profit(::google::protobuf::uint32 value) {
  set_has_total_profit();
  total_profit_ = value;
}

// required uint32 total_withdraw = 3;
inline bool Msg_ProfitList_S2C::has_total_withdraw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_ProfitList_S2C::set_has_total_withdraw() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_ProfitList_S2C::clear_has_total_withdraw() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_ProfitList_S2C::clear_total_withdraw() {
  total_withdraw_ = 0u;
  clear_has_total_withdraw();
}
inline ::google::protobuf::uint32 Msg_ProfitList_S2C::total_withdraw() const {
  return total_withdraw_;
}
inline void Msg_ProfitList_S2C::set_total_withdraw(::google::protobuf::uint32 value) {
  set_has_total_withdraw();
  total_withdraw_ = value;
}

// repeated .dgame.ProfitData profit_list = 4;
inline int Msg_ProfitList_S2C::profit_list_size() const {
  return profit_list_.size();
}
inline void Msg_ProfitList_S2C::clear_profit_list() {
  profit_list_.Clear();
}
inline const ::dgame::ProfitData& Msg_ProfitList_S2C::profit_list(int index) const {
  return profit_list_.Get(index);
}
inline ::dgame::ProfitData* Msg_ProfitList_S2C::mutable_profit_list(int index) {
  return profit_list_.Mutable(index);
}
inline ::dgame::ProfitData* Msg_ProfitList_S2C::add_profit_list() {
  return profit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProfitData >&
Msg_ProfitList_S2C::profit_list() const {
  return profit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::ProfitData >*
Msg_ProfitList_S2C::mutable_profit_list() {
  return &profit_list_;
}

// -------------------------------------------------------------------

// Msg_Gold2Money_C2S

// required uint32 gold = 1;
inline bool Msg_Gold2Money_C2S::has_gold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Gold2Money_C2S::set_has_gold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Gold2Money_C2S::clear_has_gold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Gold2Money_C2S::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 Msg_Gold2Money_C2S::gold() const {
  return gold_;
}
inline void Msg_Gold2Money_C2S::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// -------------------------------------------------------------------

// Msg_Gold2Money_S2C

// required uint32 error_code = 1;
inline bool Msg_Gold2Money_S2C::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_Gold2Money_S2C::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_Gold2Money_S2C::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_Gold2Money_S2C::clear_error_code() {
  error_code_ = 0u;
  clear_has_error_code();
}
inline ::google::protobuf::uint32 Msg_Gold2Money_S2C::error_code() const {
  return error_code_;
}
inline void Msg_Gold2Money_S2C::set_error_code(::google::protobuf::uint32 value) {
  set_has_error_code();
  error_code_ = value;
}

// -------------------------------------------------------------------

// Msg_CouponList_C2S

// -------------------------------------------------------------------

// Msg_CouponList_S2C

// repeated .dgame.CouponData coupon_list = 1;
inline int Msg_CouponList_S2C::coupon_list_size() const {
  return coupon_list_.size();
}
inline void Msg_CouponList_S2C::clear_coupon_list() {
  coupon_list_.Clear();
}
inline const ::dgame::CouponData& Msg_CouponList_S2C::coupon_list(int index) const {
  return coupon_list_.Get(index);
}
inline ::dgame::CouponData* Msg_CouponList_S2C::mutable_coupon_list(int index) {
  return coupon_list_.Mutable(index);
}
inline ::dgame::CouponData* Msg_CouponList_S2C::add_coupon_list() {
  return coupon_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::CouponData >&
Msg_CouponList_S2C::coupon_list() const {
  return coupon_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::CouponData >*
Msg_CouponList_S2C::mutable_coupon_list() {
  return &coupon_list_;
}

// -------------------------------------------------------------------

// Msg_GlodPercent_C2S

// -------------------------------------------------------------------

// Msg_GlodPercent_S2C

// required float pecent = 1;
inline bool Msg_GlodPercent_S2C::has_pecent() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_GlodPercent_S2C::set_has_pecent() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_GlodPercent_S2C::clear_has_pecent() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_GlodPercent_S2C::clear_pecent() {
  pecent_ = 0;
  clear_has_pecent();
}
inline float Msg_GlodPercent_S2C::pecent() const {
  return pecent_;
}
inline void Msg_GlodPercent_S2C::set_pecent(float value) {
  set_has_pecent();
  pecent_ = value;
}

// -------------------------------------------------------------------

// Msg_TradeDetailList_C2S

// -------------------------------------------------------------------

// Msg_TradeDetailList_S2C

// optional uint32 pop = 1;
inline bool Msg_TradeDetailList_S2C::has_pop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_TradeDetailList_S2C::set_has_pop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_TradeDetailList_S2C::clear_has_pop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_TradeDetailList_S2C::clear_pop() {
  pop_ = 0u;
  clear_has_pop();
}
inline ::google::protobuf::uint32 Msg_TradeDetailList_S2C::pop() const {
  return pop_;
}
inline void Msg_TradeDetailList_S2C::set_pop(::google::protobuf::uint32 value) {
  set_has_pop();
  pop_ = value;
}

// optional uint32 push = 2;
inline bool Msg_TradeDetailList_S2C::has_push() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_TradeDetailList_S2C::set_has_push() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_TradeDetailList_S2C::clear_has_push() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_TradeDetailList_S2C::clear_push() {
  push_ = 0u;
  clear_has_push();
}
inline ::google::protobuf::uint32 Msg_TradeDetailList_S2C::push() const {
  return push_;
}
inline void Msg_TradeDetailList_S2C::set_push(::google::protobuf::uint32 value) {
  set_has_push();
  push_ = value;
}

// repeated .dgame.TradeInfo trade_list = 3;
inline int Msg_TradeDetailList_S2C::trade_list_size() const {
  return trade_list_.size();
}
inline void Msg_TradeDetailList_S2C::clear_trade_list() {
  trade_list_.Clear();
}
inline const ::dgame::TradeInfo& Msg_TradeDetailList_S2C::trade_list(int index) const {
  return trade_list_.Get(index);
}
inline ::dgame::TradeInfo* Msg_TradeDetailList_S2C::mutable_trade_list(int index) {
  return trade_list_.Mutable(index);
}
inline ::dgame::TradeInfo* Msg_TradeDetailList_S2C::add_trade_list() {
  return trade_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::TradeInfo >&
Msg_TradeDetailList_S2C::trade_list() const {
  return trade_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::TradeInfo >*
Msg_TradeDetailList_S2C::mutable_trade_list() {
  return &trade_list_;
}

// -------------------------------------------------------------------

// Msg_PrePayOrderCreate_C2S

// optional uint32 total_fee = 1;
inline bool Msg_PrePayOrderCreate_C2S::has_total_fee() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_PrePayOrderCreate_C2S::set_has_total_fee() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_PrePayOrderCreate_C2S::clear_has_total_fee() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_PrePayOrderCreate_C2S::clear_total_fee() {
  total_fee_ = 0u;
  clear_has_total_fee();
}
inline ::google::protobuf::uint32 Msg_PrePayOrderCreate_C2S::total_fee() const {
  return total_fee_;
}
inline void Msg_PrePayOrderCreate_C2S::set_total_fee(::google::protobuf::uint32 value) {
  set_has_total_fee();
  total_fee_ = value;
}

// optional uint32 platform = 2;
inline bool Msg_PrePayOrderCreate_C2S::has_platform() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_PrePayOrderCreate_C2S::set_has_platform() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_PrePayOrderCreate_C2S::clear_has_platform() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_PrePayOrderCreate_C2S::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 Msg_PrePayOrderCreate_C2S::platform() const {
  return platform_;
}
inline void Msg_PrePayOrderCreate_C2S::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
}

// -------------------------------------------------------------------

// Msg_PrePayOrderCreate_S2C

// optional uint32 return_code = 1;
inline bool Msg_PrePayOrderCreate_S2C::has_return_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_return_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_return_code() {
  return_code_ = 0u;
  clear_has_return_code();
}
inline ::google::protobuf::uint32 Msg_PrePayOrderCreate_S2C::return_code() const {
  return return_code_;
}
inline void Msg_PrePayOrderCreate_S2C::set_return_code(::google::protobuf::uint32 value) {
  set_has_return_code();
  return_code_ = value;
}

// optional string prepay_id = 2;
inline bool Msg_PrePayOrderCreate_S2C::has_prepay_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_prepay_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_prepay_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_prepay_id() {
  if (prepay_id_ != &::google::protobuf::internal::kEmptyString) {
    prepay_id_->clear();
  }
  clear_has_prepay_id();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::prepay_id() const {
  return *prepay_id_;
}
inline void Msg_PrePayOrderCreate_S2C::set_prepay_id(const ::std::string& value) {
  set_has_prepay_id();
  if (prepay_id_ == &::google::protobuf::internal::kEmptyString) {
    prepay_id_ = new ::std::string;
  }
  prepay_id_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_prepay_id(const char* value) {
  set_has_prepay_id();
  if (prepay_id_ == &::google::protobuf::internal::kEmptyString) {
    prepay_id_ = new ::std::string;
  }
  prepay_id_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_prepay_id(const char* value, size_t size) {
  set_has_prepay_id();
  if (prepay_id_ == &::google::protobuf::internal::kEmptyString) {
    prepay_id_ = new ::std::string;
  }
  prepay_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_prepay_id() {
  set_has_prepay_id();
  if (prepay_id_ == &::google::protobuf::internal::kEmptyString) {
    prepay_id_ = new ::std::string;
  }
  return prepay_id_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_prepay_id() {
  clear_has_prepay_id();
  if (prepay_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prepay_id_;
    prepay_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_prepay_id(::std::string* prepay_id) {
  if (prepay_id_ != &::google::protobuf::internal::kEmptyString) {
    delete prepay_id_;
  }
  if (prepay_id) {
    set_has_prepay_id();
    prepay_id_ = prepay_id;
  } else {
    clear_has_prepay_id();
    prepay_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 3;
inline bool Msg_PrePayOrderCreate_S2C::has_sign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_sign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_sign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::sign() const {
  return *sign_;
}
inline void Msg_PrePayOrderCreate_S2C::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string appid = 4;
inline bool Msg_PrePayOrderCreate_S2C::has_appid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_appid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_appid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_appid() {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    appid_->clear();
  }
  clear_has_appid();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::appid() const {
  return *appid_;
}
inline void Msg_PrePayOrderCreate_S2C::set_appid(const ::std::string& value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_appid(const char* value) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_appid(const char* value, size_t size) {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  appid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_appid() {
  set_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    appid_ = new ::std::string;
  }
  return appid_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_appid() {
  clear_has_appid();
  if (appid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appid_;
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_appid(::std::string* appid) {
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (appid) {
    set_has_appid();
    appid_ = appid;
  } else {
    clear_has_appid();
    appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string nonce_str = 5;
inline bool Msg_PrePayOrderCreate_S2C::has_nonce_str() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_nonce_str() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_nonce_str() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_nonce_str() {
  if (nonce_str_ != &::google::protobuf::internal::kEmptyString) {
    nonce_str_->clear();
  }
  clear_has_nonce_str();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::nonce_str() const {
  return *nonce_str_;
}
inline void Msg_PrePayOrderCreate_S2C::set_nonce_str(const ::std::string& value) {
  set_has_nonce_str();
  if (nonce_str_ == &::google::protobuf::internal::kEmptyString) {
    nonce_str_ = new ::std::string;
  }
  nonce_str_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_nonce_str(const char* value) {
  set_has_nonce_str();
  if (nonce_str_ == &::google::protobuf::internal::kEmptyString) {
    nonce_str_ = new ::std::string;
  }
  nonce_str_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_nonce_str(const char* value, size_t size) {
  set_has_nonce_str();
  if (nonce_str_ == &::google::protobuf::internal::kEmptyString) {
    nonce_str_ = new ::std::string;
  }
  nonce_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_nonce_str() {
  set_has_nonce_str();
  if (nonce_str_ == &::google::protobuf::internal::kEmptyString) {
    nonce_str_ = new ::std::string;
  }
  return nonce_str_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_nonce_str() {
  clear_has_nonce_str();
  if (nonce_str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nonce_str_;
    nonce_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_nonce_str(::std::string* nonce_str) {
  if (nonce_str_ != &::google::protobuf::internal::kEmptyString) {
    delete nonce_str_;
  }
  if (nonce_str) {
    set_has_nonce_str();
    nonce_str_ = nonce_str;
  } else {
    clear_has_nonce_str();
    nonce_str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string timestamp = 6;
inline bool Msg_PrePayOrderCreate_S2C::has_timestamp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_timestamp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_timestamp() {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    timestamp_->clear();
  }
  clear_has_timestamp();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::timestamp() const {
  return *timestamp_;
}
inline void Msg_PrePayOrderCreate_S2C::set_timestamp(const ::std::string& value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_timestamp(const char* value) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_timestamp(const char* value, size_t size) {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_timestamp() {
  clear_has_timestamp();
  if (timestamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timestamp_;
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp_ != &::google::protobuf::internal::kEmptyString) {
    delete timestamp_;
  }
  if (timestamp) {
    set_has_timestamp();
    timestamp_ = timestamp;
  } else {
    clear_has_timestamp();
    timestamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mch_id = 7;
inline bool Msg_PrePayOrderCreate_S2C::has_mch_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_mch_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_mch_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_mch_id() {
  if (mch_id_ != &::google::protobuf::internal::kEmptyString) {
    mch_id_->clear();
  }
  clear_has_mch_id();
}
inline const ::std::string& Msg_PrePayOrderCreate_S2C::mch_id() const {
  return *mch_id_;
}
inline void Msg_PrePayOrderCreate_S2C::set_mch_id(const ::std::string& value) {
  set_has_mch_id();
  if (mch_id_ == &::google::protobuf::internal::kEmptyString) {
    mch_id_ = new ::std::string;
  }
  mch_id_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_mch_id(const char* value) {
  set_has_mch_id();
  if (mch_id_ == &::google::protobuf::internal::kEmptyString) {
    mch_id_ = new ::std::string;
  }
  mch_id_->assign(value);
}
inline void Msg_PrePayOrderCreate_S2C::set_mch_id(const char* value, size_t size) {
  set_has_mch_id();
  if (mch_id_ == &::google::protobuf::internal::kEmptyString) {
    mch_id_ = new ::std::string;
  }
  mch_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::mutable_mch_id() {
  set_has_mch_id();
  if (mch_id_ == &::google::protobuf::internal::kEmptyString) {
    mch_id_ = new ::std::string;
  }
  return mch_id_;
}
inline ::std::string* Msg_PrePayOrderCreate_S2C::release_mch_id() {
  clear_has_mch_id();
  if (mch_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mch_id_;
    mch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Msg_PrePayOrderCreate_S2C::set_allocated_mch_id(::std::string* mch_id) {
  if (mch_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mch_id_;
  }
  if (mch_id) {
    set_has_mch_id();
    mch_id_ = mch_id;
  } else {
    clear_has_mch_id();
    mch_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 platform = 8;
inline bool Msg_PrePayOrderCreate_S2C::has_platform() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Msg_PrePayOrderCreate_S2C::set_has_platform() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_has_platform() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Msg_PrePayOrderCreate_S2C::clear_platform() {
  platform_ = 0u;
  clear_has_platform();
}
inline ::google::protobuf::uint32 Msg_PrePayOrderCreate_S2C::platform() const {
  return platform_;
}
inline void Msg_PrePayOrderCreate_S2C::set_platform(::google::protobuf::uint32 value) {
  set_has_platform();
  platform_ = value;
}

// -------------------------------------------------------------------

// Msg_ProductSpace_C2S

// repeated .dgame.ProductSpaceCategoryInfo Category_list = 1;
inline int Msg_ProductSpace_C2S::category_list_size() const {
  return category_list_.size();
}
inline void Msg_ProductSpace_C2S::clear_category_list() {
  category_list_.Clear();
}
inline const ::dgame::ProductSpaceCategoryInfo& Msg_ProductSpace_C2S::category_list(int index) const {
  return category_list_.Get(index);
}
inline ::dgame::ProductSpaceCategoryInfo* Msg_ProductSpace_C2S::mutable_category_list(int index) {
  return category_list_.Mutable(index);
}
inline ::dgame::ProductSpaceCategoryInfo* Msg_ProductSpace_C2S::add_category_list() {
  return category_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceCategoryInfo >&
Msg_ProductSpace_C2S::category_list() const {
  return category_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceCategoryInfo >*
Msg_ProductSpace_C2S::mutable_category_list() {
  return &category_list_;
}

// -------------------------------------------------------------------

// Msg_ProductSpace_S2C

// optional uint32 return_code = 1;
inline bool Msg_ProductSpace_S2C::has_return_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_ProductSpace_S2C::set_has_return_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_ProductSpace_S2C::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_ProductSpace_S2C::clear_return_code() {
  return_code_ = 0u;
  clear_has_return_code();
}
inline ::google::protobuf::uint32 Msg_ProductSpace_S2C::return_code() const {
  return return_code_;
}
inline void Msg_ProductSpace_S2C::set_return_code(::google::protobuf::uint32 value) {
  set_has_return_code();
  return_code_ = value;
}

// repeated .dgame.ProductSpaceProductInfo Product_list = 2;
inline int Msg_ProductSpace_S2C::product_list_size() const {
  return product_list_.size();
}
inline void Msg_ProductSpace_S2C::clear_product_list() {
  product_list_.Clear();
}
inline const ::dgame::ProductSpaceProductInfo& Msg_ProductSpace_S2C::product_list(int index) const {
  return product_list_.Get(index);
}
inline ::dgame::ProductSpaceProductInfo* Msg_ProductSpace_S2C::mutable_product_list(int index) {
  return product_list_.Mutable(index);
}
inline ::dgame::ProductSpaceProductInfo* Msg_ProductSpace_S2C::add_product_list() {
  return product_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceProductInfo >&
Msg_ProductSpace_S2C::product_list() const {
  return product_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::ProductSpaceProductInfo >*
Msg_ProductSpace_S2C::mutable_product_list() {
  return &product_list_;
}

// -------------------------------------------------------------------

// OrderInfo

// optional .CS.Order order = 1;
inline bool OrderInfo::has_order() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderInfo::set_has_order() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderInfo::clear_has_order() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderInfo::clear_order() {
  if (order_ != NULL) order_->::CS::Order::Clear();
  clear_has_order();
}
inline const ::CS::Order& OrderInfo::order() const {
  return order_ != NULL ? *order_ : *default_instance_->order_;
}
inline ::CS::Order* OrderInfo::mutable_order() {
  set_has_order();
  if (order_ == NULL) order_ = new ::CS::Order;
  return order_;
}
inline ::CS::Order* OrderInfo::release_order() {
  clear_has_order();
  ::CS::Order* temp = order_;
  order_ = NULL;
  return temp;
}
inline void OrderInfo::set_allocated_order(::CS::Order* order) {
  delete order_;
  order_ = order;
  if (order) {
    set_has_order();
  } else {
    clear_has_order();
  }
}

// optional .CS.OrderReceiver order_receiver = 2;
inline bool OrderInfo::has_order_receiver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderInfo::set_has_order_receiver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderInfo::clear_has_order_receiver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderInfo::clear_order_receiver() {
  if (order_receiver_ != NULL) order_receiver_->::CS::OrderReceiver::Clear();
  clear_has_order_receiver();
}
inline const ::CS::OrderReceiver& OrderInfo::order_receiver() const {
  return order_receiver_ != NULL ? *order_receiver_ : *default_instance_->order_receiver_;
}
inline ::CS::OrderReceiver* OrderInfo::mutable_order_receiver() {
  set_has_order_receiver();
  if (order_receiver_ == NULL) order_receiver_ = new ::CS::OrderReceiver;
  return order_receiver_;
}
inline ::CS::OrderReceiver* OrderInfo::release_order_receiver() {
  clear_has_order_receiver();
  ::CS::OrderReceiver* temp = order_receiver_;
  order_receiver_ = NULL;
  return temp;
}
inline void OrderInfo::set_allocated_order_receiver(::CS::OrderReceiver* order_receiver) {
  delete order_receiver_;
  order_receiver_ = order_receiver;
  if (order_receiver) {
    set_has_order_receiver();
  } else {
    clear_has_order_receiver();
  }
}

// optional bool has_invoice = 3;
inline bool OrderInfo::has_has_invoice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderInfo::set_has_has_invoice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderInfo::clear_has_has_invoice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderInfo::clear_has_invoice() {
  has_invoice_ = false;
  clear_has_has_invoice();
}
inline bool OrderInfo::has_invoice() const {
  return has_invoice_;
}
inline void OrderInfo::set_has_invoice(bool value) {
  set_has_has_invoice();
  has_invoice_ = value;
}

// optional .CS.OrderInvoice order_invoice = 4;
inline bool OrderInfo::has_order_invoice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderInfo::set_has_order_invoice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderInfo::clear_has_order_invoice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderInfo::clear_order_invoice() {
  if (order_invoice_ != NULL) order_invoice_->::CS::OrderInvoice::Clear();
  clear_has_order_invoice();
}
inline const ::CS::OrderInvoice& OrderInfo::order_invoice() const {
  return order_invoice_ != NULL ? *order_invoice_ : *default_instance_->order_invoice_;
}
inline ::CS::OrderInvoice* OrderInfo::mutable_order_invoice() {
  set_has_order_invoice();
  if (order_invoice_ == NULL) order_invoice_ = new ::CS::OrderInvoice;
  return order_invoice_;
}
inline ::CS::OrderInvoice* OrderInfo::release_order_invoice() {
  clear_has_order_invoice();
  ::CS::OrderInvoice* temp = order_invoice_;
  order_invoice_ = NULL;
  return temp;
}
inline void OrderInfo::set_allocated_order_invoice(::CS::OrderInvoice* order_invoice) {
  delete order_invoice_;
  order_invoice_ = order_invoice;
  if (order_invoice) {
    set_has_order_invoice();
  } else {
    clear_has_order_invoice();
  }
}

// repeated .CS.OrderLog order_log = 5;
inline int OrderInfo::order_log_size() const {
  return order_log_.size();
}
inline void OrderInfo::clear_order_log() {
  order_log_.Clear();
}
inline const ::CS::OrderLog& OrderInfo::order_log(int index) const {
  return order_log_.Get(index);
}
inline ::CS::OrderLog* OrderInfo::mutable_order_log(int index) {
  return order_log_.Mutable(index);
}
inline ::CS::OrderLog* OrderInfo::add_order_log() {
  return order_log_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::OrderLog >&
OrderInfo::order_log() const {
  return order_log_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::OrderLog >*
OrderInfo::mutable_order_log() {
  return &order_log_;
}

// -------------------------------------------------------------------

// Order

// required uint32 id = 1;
inline bool Order::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Order::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Order::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Order::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Order::id() const {
  return id_;
}
inline void Order::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string order_code = 2;
inline bool Order::has_order_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Order::set_has_order_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Order::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Order::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& Order::order_code() const {
  return *order_code_;
}
inline void Order::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void Order::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void Order::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Order::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* Order::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Order::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 status = 3;
inline bool Order::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Order::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Order::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Order::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 Order::status() const {
  return status_;
}
inline void Order::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional int64 order_time = 4;
inline bool Order::has_order_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Order::set_has_order_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Order::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Order::clear_order_time() {
  order_time_ = GOOGLE_LONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::int64 Order::order_time() const {
  return order_time_;
}
inline void Order::set_order_time(::google::protobuf::int64 value) {
  set_has_order_time();
  order_time_ = value;
}

// repeated .CS.OrderGoods goods_list = 5;
inline int Order::goods_list_size() const {
  return goods_list_.size();
}
inline void Order::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::CS::OrderGoods& Order::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::CS::OrderGoods* Order::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::CS::OrderGoods* Order::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::OrderGoods >&
Order::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::OrderGoods >*
Order::mutable_goods_list() {
  return &goods_list_;
}

// optional string act_id = 6;
inline bool Order::has_act_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Order::set_has_act_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Order::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Order::clear_act_id() {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    act_id_->clear();
  }
  clear_has_act_id();
}
inline const ::std::string& Order::act_id() const {
  return *act_id_;
}
inline void Order::set_act_id(const ::std::string& value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void Order::set_act_id(const char* value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void Order::set_act_id(const char* value, size_t size) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Order::mutable_act_id() {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  return act_id_;
}
inline ::std::string* Order::release_act_id() {
  clear_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_id_;
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Order::set_allocated_act_id(::std::string* act_id) {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    delete act_id_;
  }
  if (act_id) {
    set_has_act_id();
    act_id_ = act_id;
  } else {
    clear_has_act_id();
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float total_price = 7;
inline bool Order::has_total_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Order::set_has_total_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Order::clear_has_total_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Order::clear_total_price() {
  total_price_ = 0;
  clear_has_total_price();
}
inline float Order::total_price() const {
  return total_price_;
}
inline void Order::set_total_price(float value) {
  set_has_total_price();
  total_price_ = value;
}

// optional uint32 total_num = 8;
inline bool Order::has_total_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Order::set_has_total_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Order::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Order::clear_total_num() {
  total_num_ = 0u;
  clear_has_total_num();
}
inline ::google::protobuf::uint32 Order::total_num() const {
  return total_num_;
}
inline void Order::set_total_num(::google::protobuf::uint32 value) {
  set_has_total_num();
  total_num_ = value;
}

// -------------------------------------------------------------------

// OrderGoods

// required uint32 id = 1;
inline bool OrderGoods::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderGoods::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderGoods::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderGoods::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OrderGoods::id() const {
  return id_;
}
inline void OrderGoods::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool OrderGoods::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderGoods::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderGoods::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderGoods::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OrderGoods::name() const {
  return *name_;
}
inline void OrderGoods::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OrderGoods::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OrderGoods::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OrderGoods::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float price = 3;
inline bool OrderGoods::has_price() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderGoods::set_has_price() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderGoods::clear_has_price() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderGoods::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float OrderGoods::price() const {
  return price_;
}
inline void OrderGoods::set_price(float value) {
  set_has_price();
  price_ = value;
}

// optional uint32 num = 4;
inline bool OrderGoods::has_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OrderGoods::set_has_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OrderGoods::clear_has_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OrderGoods::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 OrderGoods::num() const {
  return num_;
}
inline void OrderGoods::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional string image_url = 5;
inline bool OrderGoods::has_image_url() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OrderGoods::set_has_image_url() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OrderGoods::clear_has_image_url() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OrderGoods::clear_image_url() {
  if (image_url_ != &::google::protobuf::internal::kEmptyString) {
    image_url_->clear();
  }
  clear_has_image_url();
}
inline const ::std::string& OrderGoods::image_url() const {
  return *image_url_;
}
inline void OrderGoods::set_image_url(const ::std::string& value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void OrderGoods::set_image_url(const char* value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void OrderGoods::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_image_url() {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  return image_url_;
}
inline ::std::string* OrderGoods::release_image_url() {
  clear_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_url_;
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_image_url(::std::string* image_url) {
  if (image_url_ != &::google::protobuf::internal::kEmptyString) {
    delete image_url_;
  }
  if (image_url) {
    set_has_image_url();
    image_url_ = image_url;
  } else {
    clear_has_image_url();
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string shape = 6;
inline bool OrderGoods::has_shape() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OrderGoods::set_has_shape() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OrderGoods::clear_has_shape() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OrderGoods::clear_shape() {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    shape_->clear();
  }
  clear_has_shape();
}
inline const ::std::string& OrderGoods::shape() const {
  return *shape_;
}
inline void OrderGoods::set_shape(const ::std::string& value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
}
inline void OrderGoods::set_shape(const char* value) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(value);
}
inline void OrderGoods::set_shape(const char* value, size_t size) {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  shape_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_shape() {
  set_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    shape_ = new ::std::string;
  }
  return shape_;
}
inline ::std::string* OrderGoods::release_shape() {
  clear_has_shape();
  if (shape_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shape_;
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_shape(::std::string* shape) {
  if (shape_ != &::google::protobuf::internal::kEmptyString) {
    delete shape_;
  }
  if (shape) {
    set_has_shape();
    shape_ = shape;
  } else {
    clear_has_shape();
    shape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sign = 7;
inline bool OrderGoods::has_sign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OrderGoods::set_has_sign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OrderGoods::clear_has_sign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OrderGoods::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& OrderGoods::sign() const {
  return *sign_;
}
inline void OrderGoods::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void OrderGoods::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void OrderGoods::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* OrderGoods::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string product_id = 8;
inline bool OrderGoods::has_product_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OrderGoods::set_has_product_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OrderGoods::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OrderGoods::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& OrderGoods::product_id() const {
  return *product_id_;
}
inline void OrderGoods::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void OrderGoods::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void OrderGoods::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* OrderGoods::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opus_id = 9;
inline bool OrderGoods::has_opus_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OrderGoods::set_has_opus_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OrderGoods::clear_has_opus_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OrderGoods::clear_opus_id() {
  if (opus_id_ != &::google::protobuf::internal::kEmptyString) {
    opus_id_->clear();
  }
  clear_has_opus_id();
}
inline const ::std::string& OrderGoods::opus_id() const {
  return *opus_id_;
}
inline void OrderGoods::set_opus_id(const ::std::string& value) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(value);
}
inline void OrderGoods::set_opus_id(const char* value) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(value);
}
inline void OrderGoods::set_opus_id(const char* value, size_t size) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_opus_id() {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  return opus_id_;
}
inline ::std::string* OrderGoods::release_opus_id() {
  clear_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opus_id_;
    opus_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_opus_id(::std::string* opus_id) {
  if (opus_id_ != &::google::protobuf::internal::kEmptyString) {
    delete opus_id_;
  }
  if (opus_id) {
    set_has_opus_id();
    opus_id_ = opus_id;
  } else {
    clear_has_opus_id();
    opus_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ware_id = 10;
inline bool OrderGoods::has_ware_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OrderGoods::set_has_ware_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OrderGoods::clear_has_ware_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OrderGoods::clear_ware_id() {
  if (ware_id_ != &::google::protobuf::internal::kEmptyString) {
    ware_id_->clear();
  }
  clear_has_ware_id();
}
inline const ::std::string& OrderGoods::ware_id() const {
  return *ware_id_;
}
inline void OrderGoods::set_ware_id(const ::std::string& value) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(value);
}
inline void OrderGoods::set_ware_id(const char* value) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(value);
}
inline void OrderGoods::set_ware_id(const char* value, size_t size) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderGoods::mutable_ware_id() {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  return ware_id_;
}
inline ::std::string* OrderGoods::release_ware_id() {
  clear_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ware_id_;
    ware_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderGoods::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ware_id_;
  }
  if (ware_id) {
    set_has_ware_id();
    ware_id_ = ware_id;
  } else {
    clear_has_ware_id();
    ware_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CS.GoodsPart goods_part_list = 11;
inline int OrderGoods::goods_part_list_size() const {
  return goods_part_list_.size();
}
inline void OrderGoods::clear_goods_part_list() {
  goods_part_list_.Clear();
}
inline const ::CS::GoodsPart& OrderGoods::goods_part_list(int index) const {
  return goods_part_list_.Get(index);
}
inline ::CS::GoodsPart* OrderGoods::mutable_goods_part_list(int index) {
  return goods_part_list_.Mutable(index);
}
inline ::CS::GoodsPart* OrderGoods::add_goods_part_list() {
  return goods_part_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >&
OrderGoods::goods_part_list() const {
  return goods_part_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >*
OrderGoods::mutable_goods_part_list() {
  return &goods_part_list_;
}

// -------------------------------------------------------------------

// OrderReceiver

// optional string name = 1;
inline bool OrderReceiver::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderReceiver::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderReceiver::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderReceiver::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OrderReceiver::name() const {
  return *name_;
}
inline void OrderReceiver::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OrderReceiver::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OrderReceiver::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderReceiver::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OrderReceiver::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderReceiver::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone = 2;
inline bool OrderReceiver::has_phone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderReceiver::set_has_phone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderReceiver::clear_has_phone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderReceiver::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& OrderReceiver::phone() const {
  return *phone_;
}
inline void OrderReceiver::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OrderReceiver::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void OrderReceiver::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderReceiver::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* OrderReceiver::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderReceiver::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 3;
inline bool OrderReceiver::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OrderReceiver::set_has_address() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OrderReceiver::clear_has_address() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OrderReceiver::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& OrderReceiver::address() const {
  return *address_;
}
inline void OrderReceiver::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void OrderReceiver::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void OrderReceiver::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderReceiver::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* OrderReceiver::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderReceiver::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OrderInvoice

// optional string title = 1;
inline bool OrderInvoice::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderInvoice::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderInvoice::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderInvoice::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& OrderInvoice::title() const {
  return *title_;
}
inline void OrderInvoice::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void OrderInvoice::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void OrderInvoice::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInvoice::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* OrderInvoice::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInvoice::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 2;
inline bool OrderInvoice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderInvoice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderInvoice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderInvoice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OrderInvoice::content() const {
  return *content_;
}
inline void OrderInvoice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OrderInvoice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OrderInvoice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderInvoice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OrderInvoice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderInvoice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OrderLog

// optional int64 create_date = 1;
inline bool OrderLog::has_create_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderLog::set_has_create_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderLog::clear_has_create_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderLog::clear_create_date() {
  create_date_ = GOOGLE_LONGLONG(0);
  clear_has_create_date();
}
inline ::google::protobuf::int64 OrderLog::create_date() const {
  return create_date_;
}
inline void OrderLog::set_create_date(::google::protobuf::int64 value) {
  set_has_create_date();
  create_date_ = value;
}

// optional string content = 2;
inline bool OrderLog::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OrderLog::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OrderLog::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OrderLog::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OrderLog::content() const {
  return *content_;
}
inline void OrderLog::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OrderLog::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void OrderLog::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OrderLog::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* OrderLog::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OrderLog::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OrderQuery

// optional uint32 status = 1;
inline bool OrderQuery::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OrderQuery::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OrderQuery::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OrderQuery::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 OrderQuery::status() const {
  return status_;
}
inline void OrderQuery::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// query_all_order_req

// optional uint32 cur_page = 1;
inline bool query_all_order_req::has_cur_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_all_order_req::set_has_cur_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_all_order_req::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_all_order_req::clear_cur_page() {
  cur_page_ = 0u;
  clear_has_cur_page();
}
inline ::google::protobuf::uint32 query_all_order_req::cur_page() const {
  return cur_page_;
}
inline void query_all_order_req::set_cur_page(::google::protobuf::uint32 value) {
  set_has_cur_page();
  cur_page_ = value;
}

// optional uint32 page_size = 2;
inline bool query_all_order_req::has_page_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_all_order_req::set_has_page_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_all_order_req::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_all_order_req::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
inline ::google::protobuf::uint32 query_all_order_req::page_size() const {
  return page_size_;
}
inline void query_all_order_req::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
}

// -------------------------------------------------------------------

// query_all_order_res

// repeated .CS.Order order_list = 1;
inline int query_all_order_res::order_list_size() const {
  return order_list_.size();
}
inline void query_all_order_res::clear_order_list() {
  order_list_.Clear();
}
inline const ::CS::Order& query_all_order_res::order_list(int index) const {
  return order_list_.Get(index);
}
inline ::CS::Order* query_all_order_res::mutable_order_list(int index) {
  return order_list_.Mutable(index);
}
inline ::CS::Order* query_all_order_res::add_order_list() {
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Order >&
query_all_order_res::order_list() const {
  return order_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Order >*
query_all_order_res::mutable_order_list() {
  return &order_list_;
}

// optional uint32 total_page = 2;
inline bool query_all_order_res::has_total_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_all_order_res::set_has_total_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_all_order_res::clear_has_total_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_all_order_res::clear_total_page() {
  total_page_ = 0u;
  clear_has_total_page();
}
inline ::google::protobuf::uint32 query_all_order_res::total_page() const {
  return total_page_;
}
inline void query_all_order_res::set_total_page(::google::protobuf::uint32 value) {
  set_has_total_page();
  total_page_ = value;
}

// optional string result_code = 3;
inline bool query_all_order_res::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_all_order_res::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_all_order_res::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_all_order_res::clear_result_code() {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    result_code_->clear();
  }
  clear_has_result_code();
}
inline const ::std::string& query_all_order_res::result_code() const {
  return *result_code_;
}
inline void query_all_order_res::set_result_code(const ::std::string& value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_all_order_res::set_result_code(const char* value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_all_order_res::set_result_code(const char* value, size_t size) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_all_order_res::mutable_result_code() {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  return result_code_;
}
inline ::std::string* query_all_order_res::release_result_code() {
  clear_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_code_;
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_all_order_res::set_allocated_result_code(::std::string* result_code) {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    delete result_code_;
  }
  if (result_code) {
    set_has_result_code();
    result_code_ = result_code;
  } else {
    clear_has_result_code();
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result_des = 4;
inline bool query_all_order_res::has_result_des() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void query_all_order_res::set_has_result_des() {
  _has_bits_[0] |= 0x00000008u;
}
inline void query_all_order_res::clear_has_result_des() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void query_all_order_res::clear_result_des() {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    result_des_->clear();
  }
  clear_has_result_des();
}
inline const ::std::string& query_all_order_res::result_des() const {
  return *result_des_;
}
inline void query_all_order_res::set_result_des(const ::std::string& value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_all_order_res::set_result_des(const char* value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_all_order_res::set_result_des(const char* value, size_t size) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_all_order_res::mutable_result_des() {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  return result_des_;
}
inline ::std::string* query_all_order_res::release_result_des() {
  clear_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_des_;
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_all_order_res::set_allocated_result_des(::std::string* result_des) {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    delete result_des_;
  }
  if (result_des) {
    set_has_result_des();
    result_des_ = result_des;
  } else {
    clear_has_result_des();
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 total_num = 5;
inline bool query_all_order_res::has_total_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void query_all_order_res::set_has_total_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void query_all_order_res::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void query_all_order_res::clear_total_num() {
  total_num_ = 0u;
  clear_has_total_num();
}
inline ::google::protobuf::uint32 query_all_order_res::total_num() const {
  return total_num_;
}
inline void query_all_order_res::set_total_num(::google::protobuf::uint32 value) {
  set_has_total_num();
  total_num_ = value;
}

// -------------------------------------------------------------------

// query_con_order_req

// optional uint32 cur_page = 1;
inline bool query_con_order_req::has_cur_page() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_con_order_req::set_has_cur_page() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_con_order_req::clear_has_cur_page() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_con_order_req::clear_cur_page() {
  cur_page_ = 0u;
  clear_has_cur_page();
}
inline ::google::protobuf::uint32 query_con_order_req::cur_page() const {
  return cur_page_;
}
inline void query_con_order_req::set_cur_page(::google::protobuf::uint32 value) {
  set_has_cur_page();
  cur_page_ = value;
}

// optional uint32 page_size = 2;
inline bool query_con_order_req::has_page_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_con_order_req::set_has_page_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_con_order_req::clear_has_page_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_con_order_req::clear_page_size() {
  page_size_ = 0u;
  clear_has_page_size();
}
inline ::google::protobuf::uint32 query_con_order_req::page_size() const {
  return page_size_;
}
inline void query_con_order_req::set_page_size(::google::protobuf::uint32 value) {
  set_has_page_size();
  page_size_ = value;
}

// optional .CS.OrderQuery order_query = 3;
inline bool query_con_order_req::has_order_query() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_con_order_req::set_has_order_query() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_con_order_req::clear_has_order_query() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_con_order_req::clear_order_query() {
  if (order_query_ != NULL) order_query_->::CS::OrderQuery::Clear();
  clear_has_order_query();
}
inline const ::CS::OrderQuery& query_con_order_req::order_query() const {
  return order_query_ != NULL ? *order_query_ : *default_instance_->order_query_;
}
inline ::CS::OrderQuery* query_con_order_req::mutable_order_query() {
  set_has_order_query();
  if (order_query_ == NULL) order_query_ = new ::CS::OrderQuery;
  return order_query_;
}
inline ::CS::OrderQuery* query_con_order_req::release_order_query() {
  clear_has_order_query();
  ::CS::OrderQuery* temp = order_query_;
  order_query_ = NULL;
  return temp;
}
inline void query_con_order_req::set_allocated_order_query(::CS::OrderQuery* order_query) {
  delete order_query_;
  order_query_ = order_query;
  if (order_query) {
    set_has_order_query();
  } else {
    clear_has_order_query();
  }
}

// -------------------------------------------------------------------

// query_con_order_res

// repeated .CS.Order order_list = 1;
inline int query_con_order_res::order_list_size() const {
  return order_list_.size();
}
inline void query_con_order_res::clear_order_list() {
  order_list_.Clear();
}
inline const ::CS::Order& query_con_order_res::order_list(int index) const {
  return order_list_.Get(index);
}
inline ::CS::Order* query_con_order_res::mutable_order_list(int index) {
  return order_list_.Mutable(index);
}
inline ::CS::Order* query_con_order_res::add_order_list() {
  return order_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Order >&
query_con_order_res::order_list() const {
  return order_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Order >*
query_con_order_res::mutable_order_list() {
  return &order_list_;
}

// optional uint32 total_page = 2;
inline bool query_con_order_res::has_total_page() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_con_order_res::set_has_total_page() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_con_order_res::clear_has_total_page() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_con_order_res::clear_total_page() {
  total_page_ = 0u;
  clear_has_total_page();
}
inline ::google::protobuf::uint32 query_con_order_res::total_page() const {
  return total_page_;
}
inline void query_con_order_res::set_total_page(::google::protobuf::uint32 value) {
  set_has_total_page();
  total_page_ = value;
}

// optional string result_code = 3;
inline bool query_con_order_res::has_result_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_con_order_res::set_has_result_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_con_order_res::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_con_order_res::clear_result_code() {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    result_code_->clear();
  }
  clear_has_result_code();
}
inline const ::std::string& query_con_order_res::result_code() const {
  return *result_code_;
}
inline void query_con_order_res::set_result_code(const ::std::string& value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_con_order_res::set_result_code(const char* value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_con_order_res::set_result_code(const char* value, size_t size) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_con_order_res::mutable_result_code() {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  return result_code_;
}
inline ::std::string* query_con_order_res::release_result_code() {
  clear_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_code_;
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_con_order_res::set_allocated_result_code(::std::string* result_code) {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    delete result_code_;
  }
  if (result_code) {
    set_has_result_code();
    result_code_ = result_code;
  } else {
    clear_has_result_code();
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result_des = 4;
inline bool query_con_order_res::has_result_des() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void query_con_order_res::set_has_result_des() {
  _has_bits_[0] |= 0x00000008u;
}
inline void query_con_order_res::clear_has_result_des() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void query_con_order_res::clear_result_des() {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    result_des_->clear();
  }
  clear_has_result_des();
}
inline const ::std::string& query_con_order_res::result_des() const {
  return *result_des_;
}
inline void query_con_order_res::set_result_des(const ::std::string& value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_con_order_res::set_result_des(const char* value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_con_order_res::set_result_des(const char* value, size_t size) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_con_order_res::mutable_result_des() {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  return result_des_;
}
inline ::std::string* query_con_order_res::release_result_des() {
  clear_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_des_;
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_con_order_res::set_allocated_result_des(::std::string* result_des) {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    delete result_des_;
  }
  if (result_des) {
    set_has_result_des();
    result_des_ = result_des;
  } else {
    clear_has_result_des();
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 total_num = 5;
inline bool query_con_order_res::has_total_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void query_con_order_res::set_has_total_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void query_con_order_res::clear_has_total_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void query_con_order_res::clear_total_num() {
  total_num_ = 0u;
  clear_has_total_num();
}
inline ::google::protobuf::uint32 query_con_order_res::total_num() const {
  return total_num_;
}
inline void query_con_order_res::set_total_num(::google::protobuf::uint32 value) {
  set_has_total_num();
  total_num_ = value;
}

// -------------------------------------------------------------------

// query_single_order_req

// optional string order_code = 1;
inline bool query_single_order_req::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_single_order_req::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_single_order_req::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_single_order_req::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& query_single_order_req::order_code() const {
  return *order_code_;
}
inline void query_single_order_req::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void query_single_order_req::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void query_single_order_req::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_single_order_req::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* query_single_order_req::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_single_order_req::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// query_single_order_res

// optional .CS.OrderInfo orderInfo = 1;
inline bool query_single_order_res::has_orderinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void query_single_order_res::set_has_orderinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void query_single_order_res::clear_has_orderinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void query_single_order_res::clear_orderinfo() {
  if (orderinfo_ != NULL) orderinfo_->::CS::OrderInfo::Clear();
  clear_has_orderinfo();
}
inline const ::CS::OrderInfo& query_single_order_res::orderinfo() const {
  return orderinfo_ != NULL ? *orderinfo_ : *default_instance_->orderinfo_;
}
inline ::CS::OrderInfo* query_single_order_res::mutable_orderinfo() {
  set_has_orderinfo();
  if (orderinfo_ == NULL) orderinfo_ = new ::CS::OrderInfo;
  return orderinfo_;
}
inline ::CS::OrderInfo* query_single_order_res::release_orderinfo() {
  clear_has_orderinfo();
  ::CS::OrderInfo* temp = orderinfo_;
  orderinfo_ = NULL;
  return temp;
}
inline void query_single_order_res::set_allocated_orderinfo(::CS::OrderInfo* orderinfo) {
  delete orderinfo_;
  orderinfo_ = orderinfo;
  if (orderinfo) {
    set_has_orderinfo();
  } else {
    clear_has_orderinfo();
  }
}

// optional string result_code = 2;
inline bool query_single_order_res::has_result_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void query_single_order_res::set_has_result_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void query_single_order_res::clear_has_result_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void query_single_order_res::clear_result_code() {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    result_code_->clear();
  }
  clear_has_result_code();
}
inline const ::std::string& query_single_order_res::result_code() const {
  return *result_code_;
}
inline void query_single_order_res::set_result_code(const ::std::string& value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_single_order_res::set_result_code(const char* value) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(value);
}
inline void query_single_order_res::set_result_code(const char* value, size_t size) {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  result_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_single_order_res::mutable_result_code() {
  set_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    result_code_ = new ::std::string;
  }
  return result_code_;
}
inline ::std::string* query_single_order_res::release_result_code() {
  clear_has_result_code();
  if (result_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_code_;
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_single_order_res::set_allocated_result_code(::std::string* result_code) {
  if (result_code_ != &::google::protobuf::internal::kEmptyString) {
    delete result_code_;
  }
  if (result_code) {
    set_has_result_code();
    result_code_ = result_code;
  } else {
    clear_has_result_code();
    result_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string result_des = 3;
inline bool query_single_order_res::has_result_des() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void query_single_order_res::set_has_result_des() {
  _has_bits_[0] |= 0x00000004u;
}
inline void query_single_order_res::clear_has_result_des() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void query_single_order_res::clear_result_des() {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    result_des_->clear();
  }
  clear_has_result_des();
}
inline const ::std::string& query_single_order_res::result_des() const {
  return *result_des_;
}
inline void query_single_order_res::set_result_des(const ::std::string& value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_single_order_res::set_result_des(const char* value) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(value);
}
inline void query_single_order_res::set_result_des(const char* value, size_t size) {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  result_des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* query_single_order_res::mutable_result_des() {
  set_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    result_des_ = new ::std::string;
  }
  return result_des_;
}
inline ::std::string* query_single_order_res::release_result_des() {
  clear_has_result_des();
  if (result_des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_des_;
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void query_single_order_res::set_allocated_result_des(::std::string* result_des) {
  if (result_des_ != &::google::protobuf::internal::kEmptyString) {
    delete result_des_;
  }
  if (result_des) {
    set_has_result_des();
    result_des_ = result_des;
  } else {
    clear_has_result_des();
    result_des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Msg_CooperationProductSpace_C2S

// -------------------------------------------------------------------

// Msg_CooperationProductSpace_S2C

// optional uint32 return_code = 1;
inline bool Msg_CooperationProductSpace_S2C::has_return_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Msg_CooperationProductSpace_S2C::set_has_return_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Msg_CooperationProductSpace_S2C::clear_has_return_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Msg_CooperationProductSpace_S2C::clear_return_code() {
  return_code_ = 0u;
  clear_has_return_code();
}
inline ::google::protobuf::uint32 Msg_CooperationProductSpace_S2C::return_code() const {
  return return_code_;
}
inline void Msg_CooperationProductSpace_S2C::set_return_code(::google::protobuf::uint32 value) {
  set_has_return_code();
  return_code_ = value;
}

// repeated .dgame.CooperationProductInfo Product_list = 2;
inline int Msg_CooperationProductSpace_S2C::product_list_size() const {
  return product_list_.size();
}
inline void Msg_CooperationProductSpace_S2C::clear_product_list() {
  product_list_.Clear();
}
inline const ::dgame::CooperationProductInfo& Msg_CooperationProductSpace_S2C::product_list(int index) const {
  return product_list_.Get(index);
}
inline ::dgame::CooperationProductInfo* Msg_CooperationProductSpace_S2C::mutable_product_list(int index) {
  return product_list_.Mutable(index);
}
inline ::dgame::CooperationProductInfo* Msg_CooperationProductSpace_S2C::add_product_list() {
  return product_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dgame::CooperationProductInfo >&
Msg_CooperationProductSpace_S2C::product_list() const {
  return product_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::dgame::CooperationProductInfo >*
Msg_CooperationProductSpace_S2C::mutable_product_list() {
  return &product_list_;
}

// -------------------------------------------------------------------

// PayReq

// required uint32 type = 1;
inline bool PayReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 PayReq::type() const {
  return type_;
}
inline void PayReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string ip = 2;
inline bool PayReq::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PayReq::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PayReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PayReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& PayReq::ip() const {
  return *ip_;
}
inline void PayReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PayReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void PayReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* PayReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string subject = 3;
inline bool PayReq::has_subject() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PayReq::set_has_subject() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PayReq::clear_has_subject() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PayReq::clear_subject() {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    subject_->clear();
  }
  clear_has_subject();
}
inline const ::std::string& PayReq::subject() const {
  return *subject_;
}
inline void PayReq::set_subject(const ::std::string& value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void PayReq::set_subject(const char* value) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(value);
}
inline void PayReq::set_subject(const char* value, size_t size) {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  subject_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_subject() {
  set_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    subject_ = new ::std::string;
  }
  return subject_;
}
inline ::std::string* PayReq::release_subject() {
  clear_has_subject();
  if (subject_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = subject_;
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_subject(::std::string* subject) {
  if (subject_ != &::google::protobuf::internal::kEmptyString) {
    delete subject_;
  }
  if (subject) {
    set_has_subject();
    subject_ = subject;
  } else {
    clear_has_subject();
    subject_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string body = 4;
inline bool PayReq::has_body() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PayReq::set_has_body() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PayReq::clear_has_body() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PayReq::clear_body() {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    body_->clear();
  }
  clear_has_body();
}
inline const ::std::string& PayReq::body() const {
  return *body_;
}
inline void PayReq::set_body(const ::std::string& value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PayReq::set_body(const char* value) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(value);
}
inline void PayReq::set_body(const char* value, size_t size) {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  body_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_body() {
  set_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    body_ = new ::std::string;
  }
  return body_;
}
inline ::std::string* PayReq::release_body() {
  clear_has_body();
  if (body_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = body_;
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_body(::std::string* body) {
  if (body_ != &::google::protobuf::internal::kEmptyString) {
    delete body_;
  }
  if (body) {
    set_has_body();
    body_ = body;
  } else {
    clear_has_body();
    body_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 totalFee = 5;
inline bool PayReq::has_totalfee() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PayReq::set_has_totalfee() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PayReq::clear_has_totalfee() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PayReq::clear_totalfee() {
  totalfee_ = 0u;
  clear_has_totalfee();
}
inline ::google::protobuf::uint32 PayReq::totalfee() const {
  return totalfee_;
}
inline void PayReq::set_totalfee(::google::protobuf::uint32 value) {
  set_has_totalfee();
  totalfee_ = value;
}

// optional string appenv = 6;
inline bool PayReq::has_appenv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PayReq::set_has_appenv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PayReq::clear_has_appenv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PayReq::clear_appenv() {
  if (appenv_ != &::google::protobuf::internal::kEmptyString) {
    appenv_->clear();
  }
  clear_has_appenv();
}
inline const ::std::string& PayReq::appenv() const {
  return *appenv_;
}
inline void PayReq::set_appenv(const ::std::string& value) {
  set_has_appenv();
  if (appenv_ == &::google::protobuf::internal::kEmptyString) {
    appenv_ = new ::std::string;
  }
  appenv_->assign(value);
}
inline void PayReq::set_appenv(const char* value) {
  set_has_appenv();
  if (appenv_ == &::google::protobuf::internal::kEmptyString) {
    appenv_ = new ::std::string;
  }
  appenv_->assign(value);
}
inline void PayReq::set_appenv(const char* value, size_t size) {
  set_has_appenv();
  if (appenv_ == &::google::protobuf::internal::kEmptyString) {
    appenv_ = new ::std::string;
  }
  appenv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_appenv() {
  set_has_appenv();
  if (appenv_ == &::google::protobuf::internal::kEmptyString) {
    appenv_ = new ::std::string;
  }
  return appenv_;
}
inline ::std::string* PayReq::release_appenv() {
  clear_has_appenv();
  if (appenv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = appenv_;
    appenv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_appenv(::std::string* appenv) {
  if (appenv_ != &::google::protobuf::internal::kEmptyString) {
    delete appenv_;
  }
  if (appenv) {
    set_has_appenv();
    appenv_ = appenv;
  } else {
    clear_has_appenv();
    appenv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string outContext = 7;
inline bool PayReq::has_outcontext() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PayReq::set_has_outcontext() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PayReq::clear_has_outcontext() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PayReq::clear_outcontext() {
  if (outcontext_ != &::google::protobuf::internal::kEmptyString) {
    outcontext_->clear();
  }
  clear_has_outcontext();
}
inline const ::std::string& PayReq::outcontext() const {
  return *outcontext_;
}
inline void PayReq::set_outcontext(const ::std::string& value) {
  set_has_outcontext();
  if (outcontext_ == &::google::protobuf::internal::kEmptyString) {
    outcontext_ = new ::std::string;
  }
  outcontext_->assign(value);
}
inline void PayReq::set_outcontext(const char* value) {
  set_has_outcontext();
  if (outcontext_ == &::google::protobuf::internal::kEmptyString) {
    outcontext_ = new ::std::string;
  }
  outcontext_->assign(value);
}
inline void PayReq::set_outcontext(const char* value, size_t size) {
  set_has_outcontext();
  if (outcontext_ == &::google::protobuf::internal::kEmptyString) {
    outcontext_ = new ::std::string;
  }
  outcontext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_outcontext() {
  set_has_outcontext();
  if (outcontext_ == &::google::protobuf::internal::kEmptyString) {
    outcontext_ = new ::std::string;
  }
  return outcontext_;
}
inline ::std::string* PayReq::release_outcontext() {
  clear_has_outcontext();
  if (outcontext_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = outcontext_;
    outcontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_outcontext(::std::string* outcontext) {
  if (outcontext_ != &::google::protobuf::internal::kEmptyString) {
    delete outcontext_;
  }
  if (outcontext) {
    set_has_outcontext();
    outcontext_ = outcontext;
  } else {
    clear_has_outcontext();
    outcontext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string orderSn = 8;
inline bool PayReq::has_ordersn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PayReq::set_has_ordersn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PayReq::clear_has_ordersn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PayReq::clear_ordersn() {
  if (ordersn_ != &::google::protobuf::internal::kEmptyString) {
    ordersn_->clear();
  }
  clear_has_ordersn();
}
inline const ::std::string& PayReq::ordersn() const {
  return *ordersn_;
}
inline void PayReq::set_ordersn(const ::std::string& value) {
  set_has_ordersn();
  if (ordersn_ == &::google::protobuf::internal::kEmptyString) {
    ordersn_ = new ::std::string;
  }
  ordersn_->assign(value);
}
inline void PayReq::set_ordersn(const char* value) {
  set_has_ordersn();
  if (ordersn_ == &::google::protobuf::internal::kEmptyString) {
    ordersn_ = new ::std::string;
  }
  ordersn_->assign(value);
}
inline void PayReq::set_ordersn(const char* value, size_t size) {
  set_has_ordersn();
  if (ordersn_ == &::google::protobuf::internal::kEmptyString) {
    ordersn_ = new ::std::string;
  }
  ordersn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayReq::mutable_ordersn() {
  set_has_ordersn();
  if (ordersn_ == &::google::protobuf::internal::kEmptyString) {
    ordersn_ = new ::std::string;
  }
  return ordersn_;
}
inline ::std::string* PayReq::release_ordersn() {
  clear_has_ordersn();
  if (ordersn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ordersn_;
    ordersn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayReq::set_allocated_ordersn(::std::string* ordersn) {
  if (ordersn_ != &::google::protobuf::internal::kEmptyString) {
    delete ordersn_;
  }
  if (ordersn) {
    set_has_ordersn();
    ordersn_ = ordersn;
  } else {
    clear_has_ordersn();
    ordersn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PayResp

// required string data = 1;
inline bool PayResp::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PayResp::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PayResp::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PayResp::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PayResp::data() const {
  return *data_;
}
inline void PayResp::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PayResp::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PayResp::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PayResp::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PayResp::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PayResp::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateOrderReq

// optional int64 order_time = 1;
inline bool CreateOrderReq::has_order_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrderReq::set_has_order_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrderReq::clear_has_order_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrderReq::clear_order_time() {
  order_time_ = GOOGLE_LONGLONG(0);
  clear_has_order_time();
}
inline ::google::protobuf::int64 CreateOrderReq::order_time() const {
  return order_time_;
}
inline void CreateOrderReq::set_order_time(::google::protobuf::int64 value) {
  set_has_order_time();
  order_time_ = value;
}

// required string act_id = 2;
inline bool CreateOrderReq::has_act_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateOrderReq::set_has_act_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateOrderReq::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateOrderReq::clear_act_id() {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    act_id_->clear();
  }
  clear_has_act_id();
}
inline const ::std::string& CreateOrderReq::act_id() const {
  return *act_id_;
}
inline void CreateOrderReq::set_act_id(const ::std::string& value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void CreateOrderReq::set_act_id(const char* value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void CreateOrderReq::set_act_id(const char* value, size_t size) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_act_id() {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  return act_id_;
}
inline ::std::string* CreateOrderReq::release_act_id() {
  clear_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_id_;
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_act_id(::std::string* act_id) {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    delete act_id_;
  }
  if (act_id) {
    set_has_act_id();
    act_id_ = act_id;
  } else {
    clear_has_act_id();
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receiver_name = 3;
inline bool CreateOrderReq::has_receiver_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateOrderReq::set_has_receiver_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateOrderReq::clear_has_receiver_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateOrderReq::clear_receiver_name() {
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    receiver_name_->clear();
  }
  clear_has_receiver_name();
}
inline const ::std::string& CreateOrderReq::receiver_name() const {
  return *receiver_name_;
}
inline void CreateOrderReq::set_receiver_name(const ::std::string& value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void CreateOrderReq::set_receiver_name(const char* value) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(value);
}
inline void CreateOrderReq::set_receiver_name(const char* value, size_t size) {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  receiver_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_receiver_name() {
  set_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    receiver_name_ = new ::std::string;
  }
  return receiver_name_;
}
inline ::std::string* CreateOrderReq::release_receiver_name() {
  clear_has_receiver_name();
  if (receiver_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_name_;
    receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_receiver_name(::std::string* receiver_name) {
  if (receiver_name_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_name_;
  }
  if (receiver_name) {
    set_has_receiver_name();
    receiver_name_ = receiver_name;
  } else {
    clear_has_receiver_name();
    receiver_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receiver_phone = 4;
inline bool CreateOrderReq::has_receiver_phone() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateOrderReq::set_has_receiver_phone() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateOrderReq::clear_has_receiver_phone() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateOrderReq::clear_receiver_phone() {
  if (receiver_phone_ != &::google::protobuf::internal::kEmptyString) {
    receiver_phone_->clear();
  }
  clear_has_receiver_phone();
}
inline const ::std::string& CreateOrderReq::receiver_phone() const {
  return *receiver_phone_;
}
inline void CreateOrderReq::set_receiver_phone(const ::std::string& value) {
  set_has_receiver_phone();
  if (receiver_phone_ == &::google::protobuf::internal::kEmptyString) {
    receiver_phone_ = new ::std::string;
  }
  receiver_phone_->assign(value);
}
inline void CreateOrderReq::set_receiver_phone(const char* value) {
  set_has_receiver_phone();
  if (receiver_phone_ == &::google::protobuf::internal::kEmptyString) {
    receiver_phone_ = new ::std::string;
  }
  receiver_phone_->assign(value);
}
inline void CreateOrderReq::set_receiver_phone(const char* value, size_t size) {
  set_has_receiver_phone();
  if (receiver_phone_ == &::google::protobuf::internal::kEmptyString) {
    receiver_phone_ = new ::std::string;
  }
  receiver_phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_receiver_phone() {
  set_has_receiver_phone();
  if (receiver_phone_ == &::google::protobuf::internal::kEmptyString) {
    receiver_phone_ = new ::std::string;
  }
  return receiver_phone_;
}
inline ::std::string* CreateOrderReq::release_receiver_phone() {
  clear_has_receiver_phone();
  if (receiver_phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_phone_;
    receiver_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_receiver_phone(::std::string* receiver_phone) {
  if (receiver_phone_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_phone_;
  }
  if (receiver_phone) {
    set_has_receiver_phone();
    receiver_phone_ = receiver_phone;
  } else {
    clear_has_receiver_phone();
    receiver_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string receiver_address = 5;
inline bool CreateOrderReq::has_receiver_address() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateOrderReq::set_has_receiver_address() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateOrderReq::clear_has_receiver_address() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateOrderReq::clear_receiver_address() {
  if (receiver_address_ != &::google::protobuf::internal::kEmptyString) {
    receiver_address_->clear();
  }
  clear_has_receiver_address();
}
inline const ::std::string& CreateOrderReq::receiver_address() const {
  return *receiver_address_;
}
inline void CreateOrderReq::set_receiver_address(const ::std::string& value) {
  set_has_receiver_address();
  if (receiver_address_ == &::google::protobuf::internal::kEmptyString) {
    receiver_address_ = new ::std::string;
  }
  receiver_address_->assign(value);
}
inline void CreateOrderReq::set_receiver_address(const char* value) {
  set_has_receiver_address();
  if (receiver_address_ == &::google::protobuf::internal::kEmptyString) {
    receiver_address_ = new ::std::string;
  }
  receiver_address_->assign(value);
}
inline void CreateOrderReq::set_receiver_address(const char* value, size_t size) {
  set_has_receiver_address();
  if (receiver_address_ == &::google::protobuf::internal::kEmptyString) {
    receiver_address_ = new ::std::string;
  }
  receiver_address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_receiver_address() {
  set_has_receiver_address();
  if (receiver_address_ == &::google::protobuf::internal::kEmptyString) {
    receiver_address_ = new ::std::string;
  }
  return receiver_address_;
}
inline ::std::string* CreateOrderReq::release_receiver_address() {
  clear_has_receiver_address();
  if (receiver_address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = receiver_address_;
    receiver_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_receiver_address(::std::string* receiver_address) {
  if (receiver_address_ != &::google::protobuf::internal::kEmptyString) {
    delete receiver_address_;
  }
  if (receiver_address) {
    set_has_receiver_address();
    receiver_address_ = receiver_address;
  } else {
    clear_has_receiver_address();
    receiver_address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool has_invoice = 6;
inline bool CreateOrderReq::has_has_invoice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateOrderReq::set_has_has_invoice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateOrderReq::clear_has_has_invoice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateOrderReq::clear_has_invoice() {
  has_invoice_ = false;
  clear_has_has_invoice();
}
inline bool CreateOrderReq::has_invoice() const {
  return has_invoice_;
}
inline void CreateOrderReq::set_has_invoice(bool value) {
  set_has_has_invoice();
  has_invoice_ = value;
}

// optional string invoice_title = 7;
inline bool CreateOrderReq::has_invoice_title() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateOrderReq::set_has_invoice_title() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateOrderReq::clear_has_invoice_title() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateOrderReq::clear_invoice_title() {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    invoice_title_->clear();
  }
  clear_has_invoice_title();
}
inline const ::std::string& CreateOrderReq::invoice_title() const {
  return *invoice_title_;
}
inline void CreateOrderReq::set_invoice_title(const ::std::string& value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void CreateOrderReq::set_invoice_title(const char* value) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(value);
}
inline void CreateOrderReq::set_invoice_title(const char* value, size_t size) {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  invoice_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_invoice_title() {
  set_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    invoice_title_ = new ::std::string;
  }
  return invoice_title_;
}
inline ::std::string* CreateOrderReq::release_invoice_title() {
  clear_has_invoice_title();
  if (invoice_title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invoice_title_;
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_invoice_title(::std::string* invoice_title) {
  if (invoice_title_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_title_;
  }
  if (invoice_title) {
    set_has_invoice_title();
    invoice_title_ = invoice_title;
  } else {
    clear_has_invoice_title();
    invoice_title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string invoice_content = 8;
inline bool CreateOrderReq::has_invoice_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CreateOrderReq::set_has_invoice_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CreateOrderReq::clear_has_invoice_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CreateOrderReq::clear_invoice_content() {
  if (invoice_content_ != &::google::protobuf::internal::kEmptyString) {
    invoice_content_->clear();
  }
  clear_has_invoice_content();
}
inline const ::std::string& CreateOrderReq::invoice_content() const {
  return *invoice_content_;
}
inline void CreateOrderReq::set_invoice_content(const ::std::string& value) {
  set_has_invoice_content();
  if (invoice_content_ == &::google::protobuf::internal::kEmptyString) {
    invoice_content_ = new ::std::string;
  }
  invoice_content_->assign(value);
}
inline void CreateOrderReq::set_invoice_content(const char* value) {
  set_has_invoice_content();
  if (invoice_content_ == &::google::protobuf::internal::kEmptyString) {
    invoice_content_ = new ::std::string;
  }
  invoice_content_->assign(value);
}
inline void CreateOrderReq::set_invoice_content(const char* value, size_t size) {
  set_has_invoice_content();
  if (invoice_content_ == &::google::protobuf::internal::kEmptyString) {
    invoice_content_ = new ::std::string;
  }
  invoice_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_invoice_content() {
  set_has_invoice_content();
  if (invoice_content_ == &::google::protobuf::internal::kEmptyString) {
    invoice_content_ = new ::std::string;
  }
  return invoice_content_;
}
inline ::std::string* CreateOrderReq::release_invoice_content() {
  clear_has_invoice_content();
  if (invoice_content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invoice_content_;
    invoice_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_invoice_content(::std::string* invoice_content) {
  if (invoice_content_ != &::google::protobuf::internal::kEmptyString) {
    delete invoice_content_;
  }
  if (invoice_content) {
    set_has_invoice_content();
    invoice_content_ = invoice_content;
  } else {
    clear_has_invoice_content();
    invoice_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.CreateOrderReq.PayType pay_way = 9;
inline bool CreateOrderReq::has_pay_way() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CreateOrderReq::set_has_pay_way() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CreateOrderReq::clear_has_pay_way() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CreateOrderReq::clear_pay_way() {
  pay_way_ = 1;
  clear_has_pay_way();
}
inline ::CS::CreateOrderReq_PayType CreateOrderReq::pay_way() const {
  return static_cast< ::CS::CreateOrderReq_PayType >(pay_way_);
}
inline void CreateOrderReq::set_pay_way(::CS::CreateOrderReq_PayType value) {
  assert(::CS::CreateOrderReq_PayType_IsValid(value));
  set_has_pay_way();
  pay_way_ = value;
}

// repeated .CS.Goods goods_list = 10;
inline int CreateOrderReq::goods_list_size() const {
  return goods_list_.size();
}
inline void CreateOrderReq::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::CS::Goods& CreateOrderReq::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::CS::Goods* CreateOrderReq::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::CS::Goods* CreateOrderReq::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Goods >&
CreateOrderReq::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Goods >*
CreateOrderReq::mutable_goods_list() {
  return &goods_list_;
}

// optional string desc = 11;
inline bool CreateOrderReq::has_desc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CreateOrderReq::set_has_desc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CreateOrderReq::clear_has_desc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CreateOrderReq::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& CreateOrderReq::desc() const {
  return *desc_;
}
inline void CreateOrderReq::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CreateOrderReq::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void CreateOrderReq::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* CreateOrderReq::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string zip_code = 12;
inline bool CreateOrderReq::has_zip_code() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CreateOrderReq::set_has_zip_code() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CreateOrderReq::clear_has_zip_code() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CreateOrderReq::clear_zip_code() {
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    zip_code_->clear();
  }
  clear_has_zip_code();
}
inline const ::std::string& CreateOrderReq::zip_code() const {
  return *zip_code_;
}
inline void CreateOrderReq::set_zip_code(const ::std::string& value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void CreateOrderReq::set_zip_code(const char* value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void CreateOrderReq::set_zip_code(const char* value, size_t size) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderReq::mutable_zip_code() {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  return zip_code_;
}
inline ::std::string* CreateOrderReq::release_zip_code() {
  clear_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zip_code_;
    zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderReq::set_allocated_zip_code(::std::string* zip_code) {
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_code_;
  }
  if (zip_code) {
    set_has_zip_code();
    zip_code_ = zip_code;
  } else {
    clear_has_zip_code();
    zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Goods

// optional string name = 1;
inline bool Goods::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Goods::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Goods::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Goods::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Goods::name() const {
  return *name_;
}
inline void Goods::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Goods::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Goods::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Goods::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Goods::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Goods::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float price = 2;
inline bool Goods::has_price() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Goods::set_has_price() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Goods::clear_has_price() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Goods::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline float Goods::price() const {
  return price_;
}
inline void Goods::set_price(float value) {
  set_has_price();
  price_ = value;
}

// optional uint32 num = 3;
inline bool Goods::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Goods::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Goods::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Goods::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Goods::num() const {
  return num_;
}
inline void Goods::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional string image_url = 4;
inline bool Goods::has_image_url() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Goods::set_has_image_url() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Goods::clear_has_image_url() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Goods::clear_image_url() {
  if (image_url_ != &::google::protobuf::internal::kEmptyString) {
    image_url_->clear();
  }
  clear_has_image_url();
}
inline const ::std::string& Goods::image_url() const {
  return *image_url_;
}
inline void Goods::set_image_url(const ::std::string& value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void Goods::set_image_url(const char* value) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(value);
}
inline void Goods::set_image_url(const char* value, size_t size) {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  image_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Goods::mutable_image_url() {
  set_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    image_url_ = new ::std::string;
  }
  return image_url_;
}
inline ::std::string* Goods::release_image_url() {
  clear_has_image_url();
  if (image_url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = image_url_;
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Goods::set_allocated_image_url(::std::string* image_url) {
  if (image_url_ != &::google::protobuf::internal::kEmptyString) {
    delete image_url_;
  }
  if (image_url) {
    set_has_image_url();
    image_url_ = image_url;
  } else {
    clear_has_image_url();
    image_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string product_id = 5;
inline bool Goods::has_product_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Goods::set_has_product_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Goods::clear_has_product_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Goods::clear_product_id() {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    product_id_->clear();
  }
  clear_has_product_id();
}
inline const ::std::string& Goods::product_id() const {
  return *product_id_;
}
inline void Goods::set_product_id(const ::std::string& value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void Goods::set_product_id(const char* value) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(value);
}
inline void Goods::set_product_id(const char* value, size_t size) {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  product_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Goods::mutable_product_id() {
  set_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    product_id_ = new ::std::string;
  }
  return product_id_;
}
inline ::std::string* Goods::release_product_id() {
  clear_has_product_id();
  if (product_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = product_id_;
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Goods::set_allocated_product_id(::std::string* product_id) {
  if (product_id_ != &::google::protobuf::internal::kEmptyString) {
    delete product_id_;
  }
  if (product_id) {
    set_has_product_id();
    product_id_ = product_id;
  } else {
    clear_has_product_id();
    product_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opus_id = 6;
inline bool Goods::has_opus_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Goods::set_has_opus_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Goods::clear_has_opus_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Goods::clear_opus_id() {
  if (opus_id_ != &::google::protobuf::internal::kEmptyString) {
    opus_id_->clear();
  }
  clear_has_opus_id();
}
inline const ::std::string& Goods::opus_id() const {
  return *opus_id_;
}
inline void Goods::set_opus_id(const ::std::string& value) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(value);
}
inline void Goods::set_opus_id(const char* value) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(value);
}
inline void Goods::set_opus_id(const char* value, size_t size) {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  opus_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Goods::mutable_opus_id() {
  set_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    opus_id_ = new ::std::string;
  }
  return opus_id_;
}
inline ::std::string* Goods::release_opus_id() {
  clear_has_opus_id();
  if (opus_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opus_id_;
    opus_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Goods::set_allocated_opus_id(::std::string* opus_id) {
  if (opus_id_ != &::google::protobuf::internal::kEmptyString) {
    delete opus_id_;
  }
  if (opus_id) {
    set_has_opus_id();
    opus_id_ = opus_id;
  } else {
    clear_has_opus_id();
    opus_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ware_id = 7;
inline bool Goods::has_ware_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Goods::set_has_ware_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Goods::clear_has_ware_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Goods::clear_ware_id() {
  if (ware_id_ != &::google::protobuf::internal::kEmptyString) {
    ware_id_->clear();
  }
  clear_has_ware_id();
}
inline const ::std::string& Goods::ware_id() const {
  return *ware_id_;
}
inline void Goods::set_ware_id(const ::std::string& value) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(value);
}
inline void Goods::set_ware_id(const char* value) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(value);
}
inline void Goods::set_ware_id(const char* value, size_t size) {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  ware_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Goods::mutable_ware_id() {
  set_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    ware_id_ = new ::std::string;
  }
  return ware_id_;
}
inline ::std::string* Goods::release_ware_id() {
  clear_has_ware_id();
  if (ware_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ware_id_;
    ware_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Goods::set_allocated_ware_id(::std::string* ware_id) {
  if (ware_id_ != &::google::protobuf::internal::kEmptyString) {
    delete ware_id_;
  }
  if (ware_id) {
    set_has_ware_id();
    ware_id_ = ware_id;
  } else {
    clear_has_ware_id();
    ware_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CS.GoodsPart goods_part_list = 8;
inline int Goods::goods_part_list_size() const {
  return goods_part_list_.size();
}
inline void Goods::clear_goods_part_list() {
  goods_part_list_.Clear();
}
inline const ::CS::GoodsPart& Goods::goods_part_list(int index) const {
  return goods_part_list_.Get(index);
}
inline ::CS::GoodsPart* Goods::mutable_goods_part_list(int index) {
  return goods_part_list_.Mutable(index);
}
inline ::CS::GoodsPart* Goods::add_goods_part_list() {
  return goods_part_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >&
Goods::goods_part_list() const {
  return goods_part_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsPart >*
Goods::mutable_goods_part_list() {
  return &goods_part_list_;
}

// -------------------------------------------------------------------

// GoodsPart

// optional string part_id = 1;
inline bool GoodsPart::has_part_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsPart::set_has_part_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsPart::clear_has_part_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsPart::clear_part_id() {
  if (part_id_ != &::google::protobuf::internal::kEmptyString) {
    part_id_->clear();
  }
  clear_has_part_id();
}
inline const ::std::string& GoodsPart::part_id() const {
  return *part_id_;
}
inline void GoodsPart::set_part_id(const ::std::string& value) {
  set_has_part_id();
  if (part_id_ == &::google::protobuf::internal::kEmptyString) {
    part_id_ = new ::std::string;
  }
  part_id_->assign(value);
}
inline void GoodsPart::set_part_id(const char* value) {
  set_has_part_id();
  if (part_id_ == &::google::protobuf::internal::kEmptyString) {
    part_id_ = new ::std::string;
  }
  part_id_->assign(value);
}
inline void GoodsPart::set_part_id(const char* value, size_t size) {
  set_has_part_id();
  if (part_id_ == &::google::protobuf::internal::kEmptyString) {
    part_id_ = new ::std::string;
  }
  part_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsPart::mutable_part_id() {
  set_has_part_id();
  if (part_id_ == &::google::protobuf::internal::kEmptyString) {
    part_id_ = new ::std::string;
  }
  return part_id_;
}
inline ::std::string* GoodsPart::release_part_id() {
  clear_has_part_id();
  if (part_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = part_id_;
    part_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsPart::set_allocated_part_id(::std::string* part_id) {
  if (part_id_ != &::google::protobuf::internal::kEmptyString) {
    delete part_id_;
  }
  if (part_id) {
    set_has_part_id();
    part_id_ = part_id;
  } else {
    clear_has_part_id();
    part_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string mat_id = 2;
inline bool GoodsPart::has_mat_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsPart::set_has_mat_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsPart::clear_has_mat_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsPart::clear_mat_id() {
  if (mat_id_ != &::google::protobuf::internal::kEmptyString) {
    mat_id_->clear();
  }
  clear_has_mat_id();
}
inline const ::std::string& GoodsPart::mat_id() const {
  return *mat_id_;
}
inline void GoodsPart::set_mat_id(const ::std::string& value) {
  set_has_mat_id();
  if (mat_id_ == &::google::protobuf::internal::kEmptyString) {
    mat_id_ = new ::std::string;
  }
  mat_id_->assign(value);
}
inline void GoodsPart::set_mat_id(const char* value) {
  set_has_mat_id();
  if (mat_id_ == &::google::protobuf::internal::kEmptyString) {
    mat_id_ = new ::std::string;
  }
  mat_id_->assign(value);
}
inline void GoodsPart::set_mat_id(const char* value, size_t size) {
  set_has_mat_id();
  if (mat_id_ == &::google::protobuf::internal::kEmptyString) {
    mat_id_ = new ::std::string;
  }
  mat_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsPart::mutable_mat_id() {
  set_has_mat_id();
  if (mat_id_ == &::google::protobuf::internal::kEmptyString) {
    mat_id_ = new ::std::string;
  }
  return mat_id_;
}
inline ::std::string* GoodsPart::release_mat_id() {
  clear_has_mat_id();
  if (mat_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mat_id_;
    mat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsPart::set_allocated_mat_id(::std::string* mat_id) {
  if (mat_id_ != &::google::protobuf::internal::kEmptyString) {
    delete mat_id_;
  }
  if (mat_id) {
    set_has_mat_id();
    mat_id_ = mat_id;
  } else {
    clear_has_mat_id();
    mat_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateOrderRes

// optional string order_code = 1;
inline bool CreateOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& CreateOrderRes::order_code() const {
  return *order_code_;
}
inline void CreateOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CreateOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CreateOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* CreateOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GoodsProductStatusReq

// required uint32 goods_id = 1;
inline bool GoodsProductStatusReq::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsProductStatusReq::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsProductStatusReq::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsProductStatusReq::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 GoodsProductStatusReq::goods_id() const {
  return goods_id_;
}
inline void GoodsProductStatusReq::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// -------------------------------------------------------------------

// GoodsProductStatusRes

// optional string goods_name = 1;
inline bool GoodsProductStatusRes::has_goods_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsProductStatusRes::set_has_goods_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsProductStatusRes::clear_has_goods_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsProductStatusRes::clear_goods_name() {
  if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
    goods_name_->clear();
  }
  clear_has_goods_name();
}
inline const ::std::string& GoodsProductStatusRes::goods_name() const {
  return *goods_name_;
}
inline void GoodsProductStatusRes::set_goods_name(const ::std::string& value) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(value);
}
inline void GoodsProductStatusRes::set_goods_name(const char* value) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(value);
}
inline void GoodsProductStatusRes::set_goods_name(const char* value, size_t size) {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  goods_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsProductStatusRes::mutable_goods_name() {
  set_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    goods_name_ = new ::std::string;
  }
  return goods_name_;
}
inline ::std::string* GoodsProductStatusRes::release_goods_name() {
  clear_has_goods_name();
  if (goods_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goods_name_;
    goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsProductStatusRes::set_allocated_goods_name(::std::string* goods_name) {
  if (goods_name_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_name_;
  }
  if (goods_name) {
    set_has_goods_name();
    goods_name_ = goods_name;
  } else {
    clear_has_goods_name();
    goods_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.GoodsProductStatusRes.ProductStatus goods_status = 2;
inline bool GoodsProductStatusRes::has_goods_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsProductStatusRes::set_has_goods_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsProductStatusRes::clear_has_goods_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsProductStatusRes::clear_goods_status() {
  goods_status_ = 1;
  clear_has_goods_status();
}
inline ::CS::GoodsProductStatusRes_ProductStatus GoodsProductStatusRes::goods_status() const {
  return static_cast< ::CS::GoodsProductStatusRes_ProductStatus >(goods_status_);
}
inline void GoodsProductStatusRes::set_goods_status(::CS::GoodsProductStatusRes_ProductStatus value) {
  assert(::CS::GoodsProductStatusRes_ProductStatus_IsValid(value));
  set_has_goods_status();
  goods_status_ = value;
}

// -------------------------------------------------------------------

// ChooseOrderPayWayReq

// required string order_code = 1;
inline bool ChooseOrderPayWayReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChooseOrderPayWayReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChooseOrderPayWayReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChooseOrderPayWayReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& ChooseOrderPayWayReq::order_code() const {
  return *order_code_;
}
inline void ChooseOrderPayWayReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ChooseOrderPayWayReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ChooseOrderPayWayReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChooseOrderPayWayReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* ChooseOrderPayWayReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChooseOrderPayWayReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.ChooseOrderPayWayReq.PayType pay_way = 2;
inline bool ChooseOrderPayWayReq::has_pay_way() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChooseOrderPayWayReq::set_has_pay_way() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChooseOrderPayWayReq::clear_has_pay_way() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChooseOrderPayWayReq::clear_pay_way() {
  pay_way_ = 1;
  clear_has_pay_way();
}
inline ::CS::ChooseOrderPayWayReq_PayType ChooseOrderPayWayReq::pay_way() const {
  return static_cast< ::CS::ChooseOrderPayWayReq_PayType >(pay_way_);
}
inline void ChooseOrderPayWayReq::set_pay_way(::CS::ChooseOrderPayWayReq_PayType value) {
  assert(::CS::ChooseOrderPayWayReq_PayType_IsValid(value));
  set_has_pay_way();
  pay_way_ = value;
}

// -------------------------------------------------------------------

// ChooseOrderPayWayRes

// optional string order_code = 1;
inline bool ChooseOrderPayWayRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChooseOrderPayWayRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChooseOrderPayWayRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChooseOrderPayWayRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& ChooseOrderPayWayRes::order_code() const {
  return *order_code_;
}
inline void ChooseOrderPayWayRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ChooseOrderPayWayRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ChooseOrderPayWayRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChooseOrderPayWayRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* ChooseOrderPayWayRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChooseOrderPayWayRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteOrderReq

// required string order_code = 1;
inline bool DeleteOrderReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteOrderReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteOrderReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteOrderReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& DeleteOrderReq::order_code() const {
  return *order_code_;
}
inline void DeleteOrderReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DeleteOrderReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DeleteOrderReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteOrderReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* DeleteOrderReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteOrderReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteOrderRes

// optional string order_code = 1;
inline bool DeleteOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& DeleteOrderRes::order_code() const {
  return *order_code_;
}
inline void DeleteOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DeleteOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DeleteOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* DeleteOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.OrderCmdResult result = 2;
inline bool DeleteOrderRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteOrderRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteOrderRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteOrderRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::OrderCmdResult DeleteOrderRes::result() const {
  return static_cast< ::CS::OrderCmdResult >(result_);
}
inline void DeleteOrderRes::set_result(::CS::OrderCmdResult value) {
  assert(::CS::OrderCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// CancelOrderReq

// required string order_code = 1;
inline bool CancelOrderReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelOrderReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelOrderReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelOrderReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& CancelOrderReq::order_code() const {
  return *order_code_;
}
inline void CancelOrderReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CancelOrderReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CancelOrderReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancelOrderReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* CancelOrderReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CancelOrderReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .dgame.OrderCancelReason cancel_reason = 2;
inline bool CancelOrderReq::has_cancel_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CancelOrderReq::set_has_cancel_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CancelOrderReq::clear_has_cancel_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CancelOrderReq::clear_cancel_reason() {
  cancel_reason_ = 1;
  clear_has_cancel_reason();
}
inline ::dgame::OrderCancelReason CancelOrderReq::cancel_reason() const {
  return static_cast< ::dgame::OrderCancelReason >(cancel_reason_);
}
inline void CancelOrderReq::set_cancel_reason(::dgame::OrderCancelReason value) {
  assert(::dgame::OrderCancelReason_IsValid(value));
  set_has_cancel_reason();
  cancel_reason_ = value;
}

// -------------------------------------------------------------------

// CancelOrderRes

// optional string order_code = 1;
inline bool CancelOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& CancelOrderRes::order_code() const {
  return *order_code_;
}
inline void CancelOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CancelOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void CancelOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CancelOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* CancelOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CancelOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.OrderCmdResult result = 2;
inline bool CancelOrderRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CancelOrderRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CancelOrderRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CancelOrderRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::OrderCmdResult CancelOrderRes::result() const {
  return static_cast< ::CS::OrderCmdResult >(result_);
}
inline void CancelOrderRes::set_result(::CS::OrderCmdResult value) {
  assert(::CS::OrderCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// ConfirmGrOrderReq

// required string order_code = 1;
inline bool ConfirmGrOrderReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmGrOrderReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmGrOrderReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmGrOrderReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& ConfirmGrOrderReq::order_code() const {
  return *order_code_;
}
inline void ConfirmGrOrderReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ConfirmGrOrderReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ConfirmGrOrderReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfirmGrOrderReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* ConfirmGrOrderReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfirmGrOrderReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ConfirmGrOrderRes

// optional string order_code = 1;
inline bool ConfirmGrOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfirmGrOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfirmGrOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfirmGrOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& ConfirmGrOrderRes::order_code() const {
  return *order_code_;
}
inline void ConfirmGrOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ConfirmGrOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void ConfirmGrOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ConfirmGrOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* ConfirmGrOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ConfirmGrOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.OrderCmdResult result = 2;
inline bool ConfirmGrOrderRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfirmGrOrderRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfirmGrOrderRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfirmGrOrderRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::OrderCmdResult ConfirmGrOrderRes::result() const {
  return static_cast< ::CS::OrderCmdResult >(result_);
}
inline void ConfirmGrOrderRes::set_result(::CS::OrderCmdResult value) {
  assert(::CS::OrderCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// JudgeOrderReq

// required string order_code = 1;
inline bool JudgeOrderReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JudgeOrderReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JudgeOrderReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JudgeOrderReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& JudgeOrderReq::order_code() const {
  return *order_code_;
}
inline void JudgeOrderReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void JudgeOrderReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void JudgeOrderReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JudgeOrderReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* JudgeOrderReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JudgeOrderReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 judge_time = 2;
inline bool JudgeOrderReq::has_judge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JudgeOrderReq::set_has_judge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JudgeOrderReq::clear_has_judge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JudgeOrderReq::clear_judge_time() {
  judge_time_ = GOOGLE_LONGLONG(0);
  clear_has_judge_time();
}
inline ::google::protobuf::int64 JudgeOrderReq::judge_time() const {
  return judge_time_;
}
inline void JudgeOrderReq::set_judge_time(::google::protobuf::int64 value) {
  set_has_judge_time();
  judge_time_ = value;
}

// repeated .CS.GoodsJudge goods_judge_list = 3;
inline int JudgeOrderReq::goods_judge_list_size() const {
  return goods_judge_list_.size();
}
inline void JudgeOrderReq::clear_goods_judge_list() {
  goods_judge_list_.Clear();
}
inline const ::CS::GoodsJudge& JudgeOrderReq::goods_judge_list(int index) const {
  return goods_judge_list_.Get(index);
}
inline ::CS::GoodsJudge* JudgeOrderReq::mutable_goods_judge_list(int index) {
  return goods_judge_list_.Mutable(index);
}
inline ::CS::GoodsJudge* JudgeOrderReq::add_goods_judge_list() {
  return goods_judge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::GoodsJudge >&
JudgeOrderReq::goods_judge_list() const {
  return goods_judge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::GoodsJudge >*
JudgeOrderReq::mutable_goods_judge_list() {
  return &goods_judge_list_;
}

// -------------------------------------------------------------------

// JudgeOrderRes

// optional string order_code = 1;
inline bool JudgeOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JudgeOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JudgeOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JudgeOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& JudgeOrderRes::order_code() const {
  return *order_code_;
}
inline void JudgeOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void JudgeOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void JudgeOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* JudgeOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* JudgeOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void JudgeOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.OrderCmdResult result = 2;
inline bool JudgeOrderRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JudgeOrderRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JudgeOrderRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JudgeOrderRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::OrderCmdResult JudgeOrderRes::result() const {
  return static_cast< ::CS::OrderCmdResult >(result_);
}
inline void JudgeOrderRes::set_result(::CS::OrderCmdResult value) {
  assert(::CS::OrderCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// GoodsJudge

// optional string content = 1;
inline bool GoodsJudge::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoodsJudge::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoodsJudge::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoodsJudge::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GoodsJudge::content() const {
  return *content_;
}
inline void GoodsJudge::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GoodsJudge::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void GoodsJudge::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsJudge::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* GoodsJudge::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsJudge::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 judge_time = 2;
inline bool GoodsJudge::has_judge_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoodsJudge::set_has_judge_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoodsJudge::clear_has_judge_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoodsJudge::clear_judge_time() {
  judge_time_ = GOOGLE_LONGLONG(0);
  clear_has_judge_time();
}
inline ::google::protobuf::int64 GoodsJudge::judge_time() const {
  return judge_time_;
}
inline void GoodsJudge::set_judge_time(::google::protobuf::int64 value) {
  set_has_judge_time();
  judge_time_ = value;
}

// optional int32 level = 3;
inline bool GoodsJudge::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GoodsJudge::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GoodsJudge::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GoodsJudge::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 GoodsJudge::level() const {
  return level_;
}
inline void GoodsJudge::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required string goods_id = 4;
inline bool GoodsJudge::has_goods_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GoodsJudge::set_has_goods_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GoodsJudge::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GoodsJudge::clear_goods_id() {
  if (goods_id_ != &::google::protobuf::internal::kEmptyString) {
    goods_id_->clear();
  }
  clear_has_goods_id();
}
inline const ::std::string& GoodsJudge::goods_id() const {
  return *goods_id_;
}
inline void GoodsJudge::set_goods_id(const ::std::string& value) {
  set_has_goods_id();
  if (goods_id_ == &::google::protobuf::internal::kEmptyString) {
    goods_id_ = new ::std::string;
  }
  goods_id_->assign(value);
}
inline void GoodsJudge::set_goods_id(const char* value) {
  set_has_goods_id();
  if (goods_id_ == &::google::protobuf::internal::kEmptyString) {
    goods_id_ = new ::std::string;
  }
  goods_id_->assign(value);
}
inline void GoodsJudge::set_goods_id(const char* value, size_t size) {
  set_has_goods_id();
  if (goods_id_ == &::google::protobuf::internal::kEmptyString) {
    goods_id_ = new ::std::string;
  }
  goods_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GoodsJudge::mutable_goods_id() {
  set_has_goods_id();
  if (goods_id_ == &::google::protobuf::internal::kEmptyString) {
    goods_id_ = new ::std::string;
  }
  return goods_id_;
}
inline ::std::string* GoodsJudge::release_goods_id() {
  clear_has_goods_id();
  if (goods_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goods_id_;
    goods_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GoodsJudge::set_allocated_goods_id(::std::string* goods_id) {
  if (goods_id_ != &::google::protobuf::internal::kEmptyString) {
    delete goods_id_;
  }
  if (goods_id) {
    set_has_goods_id();
    goods_id_ = goods_id;
  } else {
    clear_has_goods_id();
    goods_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DelayOrderReq

// required string order_code = 1;
inline bool DelayOrderReq::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayOrderReq::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayOrderReq::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayOrderReq::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& DelayOrderReq::order_code() const {
  return *order_code_;
}
inline void DelayOrderReq::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DelayOrderReq::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DelayOrderReq::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelayOrderReq::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* DelayOrderReq::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelayOrderReq::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string reason = 2;
inline bool DelayOrderReq::has_reason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayOrderReq::set_has_reason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayOrderReq::clear_has_reason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayOrderReq::clear_reason() {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    reason_->clear();
  }
  clear_has_reason();
}
inline const ::std::string& DelayOrderReq::reason() const {
  return *reason_;
}
inline void DelayOrderReq::set_reason(const ::std::string& value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DelayOrderReq::set_reason(const char* value) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(value);
}
inline void DelayOrderReq::set_reason(const char* value, size_t size) {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelayOrderReq::mutable_reason() {
  set_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    reason_ = new ::std::string;
  }
  return reason_;
}
inline ::std::string* DelayOrderReq::release_reason() {
  clear_has_reason();
  if (reason_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reason_;
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelayOrderReq::set_allocated_reason(::std::string* reason) {
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (reason) {
    set_has_reason();
    reason_ = reason;
  } else {
    clear_has_reason();
    reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DelayOrderRes

// optional string order_code = 1;
inline bool DelayOrderRes::has_order_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelayOrderRes::set_has_order_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelayOrderRes::clear_has_order_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelayOrderRes::clear_order_code() {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    order_code_->clear();
  }
  clear_has_order_code();
}
inline const ::std::string& DelayOrderRes::order_code() const {
  return *order_code_;
}
inline void DelayOrderRes::set_order_code(const ::std::string& value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DelayOrderRes::set_order_code(const char* value) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(value);
}
inline void DelayOrderRes::set_order_code(const char* value, size_t size) {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  order_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DelayOrderRes::mutable_order_code() {
  set_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    order_code_ = new ::std::string;
  }
  return order_code_;
}
inline ::std::string* DelayOrderRes::release_order_code() {
  clear_has_order_code();
  if (order_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = order_code_;
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DelayOrderRes::set_allocated_order_code(::std::string* order_code) {
  if (order_code_ != &::google::protobuf::internal::kEmptyString) {
    delete order_code_;
  }
  if (order_code) {
    set_has_order_code();
    order_code_ = order_code;
  } else {
    clear_has_order_code();
    order_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .CS.OrderCmdResult result = 2;
inline bool DelayOrderRes::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelayOrderRes::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelayOrderRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelayOrderRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::OrderCmdResult DelayOrderRes::result() const {
  return static_cast< ::CS::OrderCmdResult >(result_);
}
inline void DelayOrderRes::set_result(::CS::OrderCmdResult value) {
  assert(::CS::OrderCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// OpusReq

// required int64 opusId = 1;
inline bool OpusReq::has_opusid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpusReq::set_has_opusid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpusReq::clear_has_opusid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpusReq::clear_opusid() {
  opusid_ = GOOGLE_LONGLONG(0);
  clear_has_opusid();
}
inline ::google::protobuf::int64 OpusReq::opusid() const {
  return opusid_;
}
inline void OpusReq::set_opusid(::google::protobuf::int64 value) {
  set_has_opusid();
  opusid_ = value;
}

// optional string retCode = 2;
inline bool OpusReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpusReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpusReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpusReq::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& OpusReq::retcode() const {
  return *retcode_;
}
inline void OpusReq::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusReq::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusReq::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusReq::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* OpusReq::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusReq::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OwnOpusReq

// required int64 userId = 1;
inline bool OwnOpusReq::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OwnOpusReq::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OwnOpusReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OwnOpusReq::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 OwnOpusReq::userid() const {
  return userid_;
}
inline void OwnOpusReq::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string retCode = 2;
inline bool OwnOpusReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OwnOpusReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OwnOpusReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OwnOpusReq::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& OwnOpusReq::retcode() const {
  return *retcode_;
}
inline void OwnOpusReq::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OwnOpusReq::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OwnOpusReq::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OwnOpusReq::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* OwnOpusReq::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OwnOpusReq::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OpusBo

// optional int64 id = 1;
inline bool OpusBo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpusBo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpusBo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpusBo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OpusBo::id() const {
  return id_;
}
inline void OpusBo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool OpusBo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpusBo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpusBo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpusBo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OpusBo::name() const {
  return *name_;
}
inline void OpusBo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpusBo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpusBo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OpusBo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sn = 3;
inline bool OpusBo::has_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpusBo::set_has_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpusBo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpusBo::clear_sn() {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& OpusBo::sn() const {
  return *sn_;
}
inline void OpusBo::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void OpusBo::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
}
inline void OpusBo::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    sn_ = new ::std::string;
  }
  return sn_;
}
inline ::std::string* OpusBo::release_sn() {
  clear_has_sn();
  if (sn_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google::protobuf::internal::kEmptyString) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string style = 4;
inline bool OpusBo::has_style() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpusBo::set_has_style() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpusBo::clear_has_style() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpusBo::clear_style() {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    style_->clear();
  }
  clear_has_style();
}
inline const ::std::string& OpusBo::style() const {
  return *style_;
}
inline void OpusBo::set_style(const ::std::string& value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void OpusBo::set_style(const char* value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void OpusBo::set_style(const char* value, size_t size) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_style() {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  return style_;
}
inline ::std::string* OpusBo::release_style() {
  clear_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = style_;
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_style(::std::string* style) {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    delete style_;
  }
  if (style) {
    set_has_style();
    style_ = style;
  } else {
    clear_has_style();
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string size = 5;
inline bool OpusBo::has_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpusBo::set_has_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpusBo::clear_has_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpusBo::clear_size() {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    size_->clear();
  }
  clear_has_size();
}
inline const ::std::string& OpusBo::size() const {
  return *size_;
}
inline void OpusBo::set_size(const ::std::string& value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void OpusBo::set_size(const char* value) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(value);
}
inline void OpusBo::set_size(const char* value, size_t size) {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_size() {
  set_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    size_ = new ::std::string;
  }
  return size_;
}
inline ::std::string* OpusBo::release_size() {
  clear_has_size();
  if (size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = size_;
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_size(::std::string* size) {
  if (size_ != &::google::protobuf::internal::kEmptyString) {
    delete size_;
  }
  if (size) {
    set_has_size();
    size_ = size;
  } else {
    clear_has_size();
    size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isRecommend = 6;
inline bool OpusBo::has_isrecommend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpusBo::set_has_isrecommend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpusBo::clear_has_isrecommend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpusBo::clear_isrecommend() {
  isrecommend_ = 0;
  clear_has_isrecommend();
}
inline ::google::protobuf::int32 OpusBo::isrecommend() const {
  return isrecommend_;
}
inline void OpusBo::set_isrecommend(::google::protobuf::int32 value) {
  set_has_isrecommend();
  isrecommend_ = value;
}

// optional string partAttribute = 7;
inline bool OpusBo::has_partattribute() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpusBo::set_has_partattribute() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpusBo::clear_has_partattribute() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpusBo::clear_partattribute() {
  if (partattribute_ != &::google::protobuf::internal::kEmptyString) {
    partattribute_->clear();
  }
  clear_has_partattribute();
}
inline const ::std::string& OpusBo::partattribute() const {
  return *partattribute_;
}
inline void OpusBo::set_partattribute(const ::std::string& value) {
  set_has_partattribute();
  if (partattribute_ == &::google::protobuf::internal::kEmptyString) {
    partattribute_ = new ::std::string;
  }
  partattribute_->assign(value);
}
inline void OpusBo::set_partattribute(const char* value) {
  set_has_partattribute();
  if (partattribute_ == &::google::protobuf::internal::kEmptyString) {
    partattribute_ = new ::std::string;
  }
  partattribute_->assign(value);
}
inline void OpusBo::set_partattribute(const char* value, size_t size) {
  set_has_partattribute();
  if (partattribute_ == &::google::protobuf::internal::kEmptyString) {
    partattribute_ = new ::std::string;
  }
  partattribute_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_partattribute() {
  set_has_partattribute();
  if (partattribute_ == &::google::protobuf::internal::kEmptyString) {
    partattribute_ = new ::std::string;
  }
  return partattribute_;
}
inline ::std::string* OpusBo::release_partattribute() {
  clear_has_partattribute();
  if (partattribute_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = partattribute_;
    partattribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_partattribute(::std::string* partattribute) {
  if (partattribute_ != &::google::protobuf::internal::kEmptyString) {
    delete partattribute_;
  }
  if (partattribute) {
    set_has_partattribute();
    partattribute_ = partattribute;
  } else {
    clear_has_partattribute();
    partattribute_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isGoods = 8;
inline bool OpusBo::has_isgoods() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpusBo::set_has_isgoods() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpusBo::clear_has_isgoods() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpusBo::clear_isgoods() {
  isgoods_ = 0;
  clear_has_isgoods();
}
inline ::google::protobuf::int32 OpusBo::isgoods() const {
  return isgoods_;
}
inline void OpusBo::set_isgoods(::google::protobuf::int32 value) {
  set_has_isgoods();
  isgoods_ = value;
}

// optional string description = 9;
inline bool OpusBo::has_description() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpusBo::set_has_description() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpusBo::clear_has_description() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpusBo::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& OpusBo::description() const {
  return *description_;
}
inline void OpusBo::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void OpusBo::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void OpusBo::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* OpusBo::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string opusShot = 10;
inline bool OpusBo::has_opusshot() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpusBo::set_has_opusshot() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpusBo::clear_has_opusshot() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpusBo::clear_opusshot() {
  if (opusshot_ != &::google::protobuf::internal::kEmptyString) {
    opusshot_->clear();
  }
  clear_has_opusshot();
}
inline const ::std::string& OpusBo::opusshot() const {
  return *opusshot_;
}
inline void OpusBo::set_opusshot(const ::std::string& value) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(value);
}
inline void OpusBo::set_opusshot(const char* value) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(value);
}
inline void OpusBo::set_opusshot(const char* value, size_t size) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_opusshot() {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  return opusshot_;
}
inline ::std::string* OpusBo::release_opusshot() {
  clear_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opusshot_;
    opusshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_opusshot(::std::string* opusshot) {
  if (opusshot_ != &::google::protobuf::internal::kEmptyString) {
    delete opusshot_;
  }
  if (opusshot) {
    set_has_opusshot();
    opusshot_ = opusshot;
  } else {
    clear_has_opusshot();
    opusshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userId = 11;
inline bool OpusBo::has_userid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpusBo::set_has_userid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpusBo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpusBo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 OpusBo::userid() const {
  return userid_;
}
inline void OpusBo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 17;
inline bool OpusBo::has_username() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpusBo::set_has_username() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpusBo::clear_has_username() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpusBo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& OpusBo::username() const {
  return *username_;
}
inline void OpusBo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OpusBo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OpusBo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* OpusBo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string createDate = 12;
inline bool OpusBo::has_createdate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpusBo::set_has_createdate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpusBo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpusBo::clear_createdate() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    createdate_->clear();
  }
  clear_has_createdate();
}
inline const ::std::string& OpusBo::createdate() const {
  return *createdate_;
}
inline void OpusBo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void OpusBo::set_createdate(const char* value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void OpusBo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_createdate() {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  return createdate_;
}
inline ::std::string* OpusBo::release_createdate() {
  clear_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdate_;
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_createdate(::std::string* createdate) {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (createdate) {
    set_has_createdate();
    createdate_ = createdate;
  } else {
    clear_has_createdate();
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 status = 15;
inline bool OpusBo::has_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OpusBo::set_has_status() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OpusBo::clear_has_status() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OpusBo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 OpusBo::status() const {
  return status_;
}
inline void OpusBo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string remark = 16;
inline bool OpusBo::has_remark() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OpusBo::set_has_remark() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OpusBo::clear_has_remark() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OpusBo::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& OpusBo::remark() const {
  return *remark_;
}
inline void OpusBo::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void OpusBo::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void OpusBo::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* OpusBo::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CS.OpusBo opusList = 13;
inline int OpusBo::opuslist_size() const {
  return opuslist_.size();
}
inline void OpusBo::clear_opuslist() {
  opuslist_.Clear();
}
inline const ::CS::OpusBo& OpusBo::opuslist(int index) const {
  return opuslist_.Get(index);
}
inline ::CS::OpusBo* OpusBo::mutable_opuslist(int index) {
  return opuslist_.Mutable(index);
}
inline ::CS::OpusBo* OpusBo::add_opuslist() {
  return opuslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::OpusBo >&
OpusBo::opuslist() const {
  return opuslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::OpusBo >*
OpusBo::mutable_opuslist() {
  return &opuslist_;
}

// optional string code = 14;
inline bool OpusBo::has_code() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OpusBo::set_has_code() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OpusBo::clear_has_code() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OpusBo::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& OpusBo::code() const {
  return *code_;
}
inline void OpusBo::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpusBo::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpusBo::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* OpusBo::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string retCode = 18;
inline bool OpusBo::has_retcode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OpusBo::set_has_retcode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OpusBo::clear_has_retcode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OpusBo::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& OpusBo::retcode() const {
  return *retcode_;
}
inline void OpusBo::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusBo::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusBo::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusBo::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* OpusBo::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusBo::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OpusCoopReq

// optional string actId = 1;
inline bool OpusCoopReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpusCoopReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpusCoopReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpusCoopReq::clear_actid() {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    actid_->clear();
  }
  clear_has_actid();
}
inline const ::std::string& OpusCoopReq::actid() const {
  return *actid_;
}
inline void OpusCoopReq::set_actid(const ::std::string& value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void OpusCoopReq::set_actid(const char* value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void OpusCoopReq::set_actid(const char* value, size_t size) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopReq::mutable_actid() {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  return actid_;
}
inline ::std::string* OpusCoopReq::release_actid() {
  clear_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actid_;
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopReq::set_allocated_actid(::std::string* actid) {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    delete actid_;
  }
  if (actid) {
    set_has_actid();
    actid_ = actid;
  } else {
    clear_has_actid();
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 categoryId = 2;
inline bool OpusCoopReq::has_categoryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpusCoopReq::set_has_categoryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpusCoopReq::clear_has_categoryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpusCoopReq::clear_categoryid() {
  categoryid_ = GOOGLE_LONGLONG(0);
  clear_has_categoryid();
}
inline ::google::protobuf::int64 OpusCoopReq::categoryid() const {
  return categoryid_;
}
inline void OpusCoopReq::set_categoryid(::google::protobuf::int64 value) {
  set_has_categoryid();
  categoryid_ = value;
}

// optional string style = 3;
inline bool OpusCoopReq::has_style() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpusCoopReq::set_has_style() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpusCoopReq::clear_has_style() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpusCoopReq::clear_style() {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    style_->clear();
  }
  clear_has_style();
}
inline const ::std::string& OpusCoopReq::style() const {
  return *style_;
}
inline void OpusCoopReq::set_style(const ::std::string& value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void OpusCoopReq::set_style(const char* value) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(value);
}
inline void OpusCoopReq::set_style(const char* value, size_t size) {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  style_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopReq::mutable_style() {
  set_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    style_ = new ::std::string;
  }
  return style_;
}
inline ::std::string* OpusCoopReq::release_style() {
  clear_has_style();
  if (style_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = style_;
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopReq::set_allocated_style(::std::string* style) {
  if (style_ != &::google::protobuf::internal::kEmptyString) {
    delete style_;
  }
  if (style) {
    set_has_style();
    style_ = style;
  } else {
    clear_has_style();
    style_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string retCode = 4;
inline bool OpusCoopReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpusCoopReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpusCoopReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpusCoopReq::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& OpusCoopReq::retcode() const {
  return *retcode_;
}
inline void OpusCoopReq::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusCoopReq::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusCoopReq::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopReq::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* OpusCoopReq::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopReq::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PublishOpusCoopReq

// required string actId = 1;
inline bool PublishOpusCoopReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PublishOpusCoopReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PublishOpusCoopReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PublishOpusCoopReq::clear_actid() {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    actid_->clear();
  }
  clear_has_actid();
}
inline const ::std::string& PublishOpusCoopReq::actid() const {
  return *actid_;
}
inline void PublishOpusCoopReq::set_actid(const ::std::string& value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void PublishOpusCoopReq::set_actid(const char* value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void PublishOpusCoopReq::set_actid(const char* value, size_t size) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishOpusCoopReq::mutable_actid() {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  return actid_;
}
inline ::std::string* PublishOpusCoopReq::release_actid() {
  clear_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actid_;
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishOpusCoopReq::set_allocated_actid(::std::string* actid) {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    delete actid_;
  }
  if (actid) {
    set_has_actid();
    actid_ = actid;
  } else {
    clear_has_actid();
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 opusId = 2;
inline bool PublishOpusCoopReq::has_opusid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PublishOpusCoopReq::set_has_opusid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PublishOpusCoopReq::clear_has_opusid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PublishOpusCoopReq::clear_opusid() {
  opusid_ = GOOGLE_LONGLONG(0);
  clear_has_opusid();
}
inline ::google::protobuf::int64 PublishOpusCoopReq::opusid() const {
  return opusid_;
}
inline void PublishOpusCoopReq::set_opusid(::google::protobuf::int64 value) {
  set_has_opusid();
  opusid_ = value;
}

// required int64 userId = 3;
inline bool PublishOpusCoopReq::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PublishOpusCoopReq::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PublishOpusCoopReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PublishOpusCoopReq::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 PublishOpusCoopReq::userid() const {
  return userid_;
}
inline void PublishOpusCoopReq::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// required string remark = 4;
inline bool PublishOpusCoopReq::has_remark() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PublishOpusCoopReq::set_has_remark() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PublishOpusCoopReq::clear_has_remark() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PublishOpusCoopReq::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& PublishOpusCoopReq::remark() const {
  return *remark_;
}
inline void PublishOpusCoopReq::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void PublishOpusCoopReq::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void PublishOpusCoopReq::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishOpusCoopReq::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* PublishOpusCoopReq::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishOpusCoopReq::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string retCode = 5;
inline bool PublishOpusCoopReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PublishOpusCoopReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PublishOpusCoopReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PublishOpusCoopReq::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& PublishOpusCoopReq::retcode() const {
  return *retcode_;
}
inline void PublishOpusCoopReq::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void PublishOpusCoopReq::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void PublishOpusCoopReq::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PublishOpusCoopReq::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* PublishOpusCoopReq::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PublishOpusCoopReq::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AddOpusCoopReq

// required string actId = 1;
inline bool AddOpusCoopReq::has_actid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddOpusCoopReq::set_has_actid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddOpusCoopReq::clear_has_actid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddOpusCoopReq::clear_actid() {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    actid_->clear();
  }
  clear_has_actid();
}
inline const ::std::string& AddOpusCoopReq::actid() const {
  return *actid_;
}
inline void AddOpusCoopReq::set_actid(const ::std::string& value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void AddOpusCoopReq::set_actid(const char* value) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(value);
}
inline void AddOpusCoopReq::set_actid(const char* value, size_t size) {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  actid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddOpusCoopReq::mutable_actid() {
  set_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    actid_ = new ::std::string;
  }
  return actid_;
}
inline ::std::string* AddOpusCoopReq::release_actid() {
  clear_has_actid();
  if (actid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actid_;
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddOpusCoopReq::set_allocated_actid(::std::string* actid) {
  if (actid_ != &::google::protobuf::internal::kEmptyString) {
    delete actid_;
  }
  if (actid) {
    set_has_actid();
    actid_ = actid;
  } else {
    clear_has_actid();
    actid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 opusId = 2;
inline bool AddOpusCoopReq::has_opusid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddOpusCoopReq::set_has_opusid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddOpusCoopReq::clear_has_opusid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddOpusCoopReq::clear_opusid() {
  opusid_ = GOOGLE_LONGLONG(0);
  clear_has_opusid();
}
inline ::google::protobuf::int64 AddOpusCoopReq::opusid() const {
  return opusid_;
}
inline void AddOpusCoopReq::set_opusid(::google::protobuf::int64 value) {
  set_has_opusid();
  opusid_ = value;
}

// required int64 userId = 3;
inline bool AddOpusCoopReq::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddOpusCoopReq::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddOpusCoopReq::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddOpusCoopReq::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 AddOpusCoopReq::userid() const {
  return userid_;
}
inline void AddOpusCoopReq::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string retCode = 4;
inline bool AddOpusCoopReq::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddOpusCoopReq::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddOpusCoopReq::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddOpusCoopReq::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& AddOpusCoopReq::retcode() const {
  return *retcode_;
}
inline void AddOpusCoopReq::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void AddOpusCoopReq::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void AddOpusCoopReq::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddOpusCoopReq::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* AddOpusCoopReq::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddOpusCoopReq::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// OpusCoopBo

// optional int64 id = 1;
inline bool OpusCoopBo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpusCoopBo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpusCoopBo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpusCoopBo::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 OpusCoopBo::id() const {
  return id_;
}
inline void OpusCoopBo::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool OpusCoopBo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpusCoopBo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpusCoopBo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpusCoopBo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& OpusCoopBo::name() const {
  return *name_;
}
inline void OpusCoopBo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpusCoopBo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void OpusCoopBo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* OpusCoopBo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 opusId = 3;
inline bool OpusCoopBo::has_opusid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpusCoopBo::set_has_opusid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpusCoopBo::clear_has_opusid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpusCoopBo::clear_opusid() {
  opusid_ = GOOGLE_LONGLONG(0);
  clear_has_opusid();
}
inline ::google::protobuf::int64 OpusCoopBo::opusid() const {
  return opusid_;
}
inline void OpusCoopBo::set_opusid(::google::protobuf::int64 value) {
  set_has_opusid();
  opusid_ = value;
}

// optional string opusShot = 14;
inline bool OpusCoopBo::has_opusshot() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpusCoopBo::set_has_opusshot() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpusCoopBo::clear_has_opusshot() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpusCoopBo::clear_opusshot() {
  if (opusshot_ != &::google::protobuf::internal::kEmptyString) {
    opusshot_->clear();
  }
  clear_has_opusshot();
}
inline const ::std::string& OpusCoopBo::opusshot() const {
  return *opusshot_;
}
inline void OpusCoopBo::set_opusshot(const ::std::string& value) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(value);
}
inline void OpusCoopBo::set_opusshot(const char* value) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(value);
}
inline void OpusCoopBo::set_opusshot(const char* value, size_t size) {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  opusshot_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_opusshot() {
  set_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    opusshot_ = new ::std::string;
  }
  return opusshot_;
}
inline ::std::string* OpusCoopBo::release_opusshot() {
  clear_has_opusshot();
  if (opusshot_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opusshot_;
    opusshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_opusshot(::std::string* opusshot) {
  if (opusshot_ != &::google::protobuf::internal::kEmptyString) {
    delete opusshot_;
  }
  if (opusshot) {
    set_has_opusshot();
    opusshot_ = opusshot;
  } else {
    clear_has_opusshot();
    opusshot_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 userId = 4;
inline bool OpusCoopBo::has_userid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OpusCoopBo::set_has_userid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OpusCoopBo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OpusCoopBo::clear_userid() {
  userid_ = GOOGLE_LONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::int64 OpusCoopBo::userid() const {
  return userid_;
}
inline void OpusCoopBo::set_userid(::google::protobuf::int64 value) {
  set_has_userid();
  userid_ = value;
}

// optional string userName = 12;
inline bool OpusCoopBo::has_username() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OpusCoopBo::set_has_username() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OpusCoopBo::clear_has_username() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OpusCoopBo::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& OpusCoopBo::username() const {
  return *username_;
}
inline void OpusCoopBo::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OpusCoopBo::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void OpusCoopBo::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* OpusCoopBo::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 coopUserId = 5;
inline bool OpusCoopBo::has_coopuserid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OpusCoopBo::set_has_coopuserid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OpusCoopBo::clear_has_coopuserid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OpusCoopBo::clear_coopuserid() {
  coopuserid_ = GOOGLE_LONGLONG(0);
  clear_has_coopuserid();
}
inline ::google::protobuf::int64 OpusCoopBo::coopuserid() const {
  return coopuserid_;
}
inline void OpusCoopBo::set_coopuserid(::google::protobuf::int64 value) {
  set_has_coopuserid();
  coopuserid_ = value;
}

// optional string coopUserName = 13;
inline bool OpusCoopBo::has_coopusername() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OpusCoopBo::set_has_coopusername() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OpusCoopBo::clear_has_coopusername() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OpusCoopBo::clear_coopusername() {
  if (coopusername_ != &::google::protobuf::internal::kEmptyString) {
    coopusername_->clear();
  }
  clear_has_coopusername();
}
inline const ::std::string& OpusCoopBo::coopusername() const {
  return *coopusername_;
}
inline void OpusCoopBo::set_coopusername(const ::std::string& value) {
  set_has_coopusername();
  if (coopusername_ == &::google::protobuf::internal::kEmptyString) {
    coopusername_ = new ::std::string;
  }
  coopusername_->assign(value);
}
inline void OpusCoopBo::set_coopusername(const char* value) {
  set_has_coopusername();
  if (coopusername_ == &::google::protobuf::internal::kEmptyString) {
    coopusername_ = new ::std::string;
  }
  coopusername_->assign(value);
}
inline void OpusCoopBo::set_coopusername(const char* value, size_t size) {
  set_has_coopusername();
  if (coopusername_ == &::google::protobuf::internal::kEmptyString) {
    coopusername_ = new ::std::string;
  }
  coopusername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_coopusername() {
  set_has_coopusername();
  if (coopusername_ == &::google::protobuf::internal::kEmptyString) {
    coopusername_ = new ::std::string;
  }
  return coopusername_;
}
inline ::std::string* OpusCoopBo::release_coopusername() {
  clear_has_coopusername();
  if (coopusername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = coopusername_;
    coopusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_coopusername(::std::string* coopusername) {
  if (coopusername_ != &::google::protobuf::internal::kEmptyString) {
    delete coopusername_;
  }
  if (coopusername) {
    set_has_coopusername();
    coopusername_ = coopusername;
  } else {
    clear_has_coopusername();
    coopusername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 status = 6;
inline bool OpusCoopBo::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OpusCoopBo::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OpusCoopBo::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OpusCoopBo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 OpusCoopBo::status() const {
  return status_;
}
inline void OpusCoopBo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 type = 7;
inline bool OpusCoopBo::has_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OpusCoopBo::set_has_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OpusCoopBo::clear_has_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OpusCoopBo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 OpusCoopBo::type() const {
  return type_;
}
inline void OpusCoopBo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string remark = 8;
inline bool OpusCoopBo::has_remark() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OpusCoopBo::set_has_remark() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OpusCoopBo::clear_has_remark() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OpusCoopBo::clear_remark() {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    remark_->clear();
  }
  clear_has_remark();
}
inline const ::std::string& OpusCoopBo::remark() const {
  return *remark_;
}
inline void OpusCoopBo::set_remark(const ::std::string& value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void OpusCoopBo::set_remark(const char* value) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(value);
}
inline void OpusCoopBo::set_remark(const char* value, size_t size) {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  remark_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_remark() {
  set_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    remark_ = new ::std::string;
  }
  return remark_;
}
inline ::std::string* OpusCoopBo::release_remark() {
  clear_has_remark();
  if (remark_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = remark_;
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_remark(::std::string* remark) {
  if (remark_ != &::google::protobuf::internal::kEmptyString) {
    delete remark_;
  }
  if (remark) {
    set_has_remark();
    remark_ = remark;
  } else {
    clear_has_remark();
    remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string createDate = 9;
inline bool OpusCoopBo::has_createdate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OpusCoopBo::set_has_createdate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OpusCoopBo::clear_has_createdate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OpusCoopBo::clear_createdate() {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    createdate_->clear();
  }
  clear_has_createdate();
}
inline const ::std::string& OpusCoopBo::createdate() const {
  return *createdate_;
}
inline void OpusCoopBo::set_createdate(const ::std::string& value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void OpusCoopBo::set_createdate(const char* value) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(value);
}
inline void OpusCoopBo::set_createdate(const char* value, size_t size) {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  createdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_createdate() {
  set_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    createdate_ = new ::std::string;
  }
  return createdate_;
}
inline ::std::string* OpusCoopBo::release_createdate() {
  clear_has_createdate();
  if (createdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createdate_;
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_createdate(::std::string* createdate) {
  if (createdate_ != &::google::protobuf::internal::kEmptyString) {
    delete createdate_;
  }
  if (createdate) {
    set_has_createdate();
    createdate_ = createdate;
  } else {
    clear_has_createdate();
    createdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string updateDate = 16;
inline bool OpusCoopBo::has_updatedate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OpusCoopBo::set_has_updatedate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OpusCoopBo::clear_has_updatedate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OpusCoopBo::clear_updatedate() {
  if (updatedate_ != &::google::protobuf::internal::kEmptyString) {
    updatedate_->clear();
  }
  clear_has_updatedate();
}
inline const ::std::string& OpusCoopBo::updatedate() const {
  return *updatedate_;
}
inline void OpusCoopBo::set_updatedate(const ::std::string& value) {
  set_has_updatedate();
  if (updatedate_ == &::google::protobuf::internal::kEmptyString) {
    updatedate_ = new ::std::string;
  }
  updatedate_->assign(value);
}
inline void OpusCoopBo::set_updatedate(const char* value) {
  set_has_updatedate();
  if (updatedate_ == &::google::protobuf::internal::kEmptyString) {
    updatedate_ = new ::std::string;
  }
  updatedate_->assign(value);
}
inline void OpusCoopBo::set_updatedate(const char* value, size_t size) {
  set_has_updatedate();
  if (updatedate_ == &::google::protobuf::internal::kEmptyString) {
    updatedate_ = new ::std::string;
  }
  updatedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_updatedate() {
  set_has_updatedate();
  if (updatedate_ == &::google::protobuf::internal::kEmptyString) {
    updatedate_ = new ::std::string;
  }
  return updatedate_;
}
inline ::std::string* OpusCoopBo::release_updatedate() {
  clear_has_updatedate();
  if (updatedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = updatedate_;
    updatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_updatedate(::std::string* updatedate) {
  if (updatedate_ != &::google::protobuf::internal::kEmptyString) {
    delete updatedate_;
  }
  if (updatedate) {
    set_has_updatedate();
    updatedate_ = updatedate;
  } else {
    clear_has_updatedate();
    updatedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CS.OpusCoopBo opusCoopList = 10;
inline int OpusCoopBo::opuscooplist_size() const {
  return opuscooplist_.size();
}
inline void OpusCoopBo::clear_opuscooplist() {
  opuscooplist_.Clear();
}
inline const ::CS::OpusCoopBo& OpusCoopBo::opuscooplist(int index) const {
  return opuscooplist_.Get(index);
}
inline ::CS::OpusCoopBo* OpusCoopBo::mutable_opuscooplist(int index) {
  return opuscooplist_.Mutable(index);
}
inline ::CS::OpusCoopBo* OpusCoopBo::add_opuscooplist() {
  return opuscooplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::OpusCoopBo >&
OpusCoopBo::opuscooplist() const {
  return opuscooplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::OpusCoopBo >*
OpusCoopBo::mutable_opuscooplist() {
  return &opuscooplist_;
}

// optional string code = 11;
inline bool OpusCoopBo::has_code() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OpusCoopBo::set_has_code() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OpusCoopBo::clear_has_code() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OpusCoopBo::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& OpusCoopBo::code() const {
  return *code_;
}
inline void OpusCoopBo::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpusCoopBo::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void OpusCoopBo::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* OpusCoopBo::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string retCode = 15;
inline bool OpusCoopBo::has_retcode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OpusCoopBo::set_has_retcode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OpusCoopBo::clear_has_retcode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OpusCoopBo::clear_retcode() {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    retcode_->clear();
  }
  clear_has_retcode();
}
inline const ::std::string& OpusCoopBo::retcode() const {
  return *retcode_;
}
inline void OpusCoopBo::set_retcode(const ::std::string& value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusCoopBo::set_retcode(const char* value) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(value);
}
inline void OpusCoopBo::set_retcode(const char* value, size_t size) {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  retcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* OpusCoopBo::mutable_retcode() {
  set_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    retcode_ = new ::std::string;
  }
  return retcode_;
}
inline ::std::string* OpusCoopBo::release_retcode() {
  clear_has_retcode();
  if (retcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = retcode_;
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void OpusCoopBo::set_allocated_retcode(::std::string* retcode) {
  if (retcode_ != &::google::protobuf::internal::kEmptyString) {
    delete retcode_;
  }
  if (retcode) {
    set_has_retcode();
    retcode_ = retcode;
  } else {
    clear_has_retcode();
    retcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PaySyncResultReq

// required string resultStatus = 1;
inline bool PaySyncResultReq::has_resultstatus() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaySyncResultReq::set_has_resultstatus() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaySyncResultReq::clear_has_resultstatus() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaySyncResultReq::clear_resultstatus() {
  if (resultstatus_ != &::google::protobuf::internal::kEmptyString) {
    resultstatus_->clear();
  }
  clear_has_resultstatus();
}
inline const ::std::string& PaySyncResultReq::resultstatus() const {
  return *resultstatus_;
}
inline void PaySyncResultReq::set_resultstatus(const ::std::string& value) {
  set_has_resultstatus();
  if (resultstatus_ == &::google::protobuf::internal::kEmptyString) {
    resultstatus_ = new ::std::string;
  }
  resultstatus_->assign(value);
}
inline void PaySyncResultReq::set_resultstatus(const char* value) {
  set_has_resultstatus();
  if (resultstatus_ == &::google::protobuf::internal::kEmptyString) {
    resultstatus_ = new ::std::string;
  }
  resultstatus_->assign(value);
}
inline void PaySyncResultReq::set_resultstatus(const char* value, size_t size) {
  set_has_resultstatus();
  if (resultstatus_ == &::google::protobuf::internal::kEmptyString) {
    resultstatus_ = new ::std::string;
  }
  resultstatus_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaySyncResultReq::mutable_resultstatus() {
  set_has_resultstatus();
  if (resultstatus_ == &::google::protobuf::internal::kEmptyString) {
    resultstatus_ = new ::std::string;
  }
  return resultstatus_;
}
inline ::std::string* PaySyncResultReq::release_resultstatus() {
  clear_has_resultstatus();
  if (resultstatus_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = resultstatus_;
    resultstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaySyncResultReq::set_allocated_resultstatus(::std::string* resultstatus) {
  if (resultstatus_ != &::google::protobuf::internal::kEmptyString) {
    delete resultstatus_;
  }
  if (resultstatus) {
    set_has_resultstatus();
    resultstatus_ = resultstatus;
  } else {
    clear_has_resultstatus();
    resultstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string result = 2;
inline bool PaySyncResultReq::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PaySyncResultReq::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PaySyncResultReq::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PaySyncResultReq::clear_result() {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& PaySyncResultReq::result() const {
  return *result_;
}
inline void PaySyncResultReq::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void PaySyncResultReq::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(value);
}
inline void PaySyncResultReq::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaySyncResultReq::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    result_ = new ::std::string;
  }
  return result_;
}
inline ::std::string* PaySyncResultReq::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaySyncResultReq::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::kEmptyString) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PaySyncResultResp

// required string data = 1;
inline bool PaySyncResultResp::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PaySyncResultResp::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PaySyncResultResp::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PaySyncResultResp::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& PaySyncResultResp::data() const {
  return *data_;
}
inline void PaySyncResultResp::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PaySyncResultResp::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void PaySyncResultResp::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PaySyncResultResp::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* PaySyncResultResp::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PaySyncResultResp::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// UserReceiver

// optional int64 id = 1;
inline bool UserReceiver::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UserReceiver::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UserReceiver::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UserReceiver::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 UserReceiver::id() const {
  return id_;
}
inline void UserReceiver::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool UserReceiver::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UserReceiver::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UserReceiver::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UserReceiver::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& UserReceiver::name() const {
  return *name_;
}
inline void UserReceiver::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserReceiver::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void UserReceiver::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* UserReceiver::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string phone = 3;
inline bool UserReceiver::has_phone() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UserReceiver::set_has_phone() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UserReceiver::clear_has_phone() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UserReceiver::clear_phone() {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    phone_->clear();
  }
  clear_has_phone();
}
inline const ::std::string& UserReceiver::phone() const {
  return *phone_;
}
inline void UserReceiver::set_phone(const ::std::string& value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void UserReceiver::set_phone(const char* value) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(value);
}
inline void UserReceiver::set_phone(const char* value, size_t size) {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  phone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_phone() {
  set_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    phone_ = new ::std::string;
  }
  return phone_;
}
inline ::std::string* UserReceiver::release_phone() {
  clear_has_phone();
  if (phone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = phone_;
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_phone(::std::string* phone) {
  if (phone_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_;
  }
  if (phone) {
    set_has_phone();
    phone_ = phone;
  } else {
    clear_has_phone();
    phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string zip_code = 4;
inline bool UserReceiver::has_zip_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UserReceiver::set_has_zip_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UserReceiver::clear_has_zip_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UserReceiver::clear_zip_code() {
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    zip_code_->clear();
  }
  clear_has_zip_code();
}
inline const ::std::string& UserReceiver::zip_code() const {
  return *zip_code_;
}
inline void UserReceiver::set_zip_code(const ::std::string& value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void UserReceiver::set_zip_code(const char* value) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(value);
}
inline void UserReceiver::set_zip_code(const char* value, size_t size) {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  zip_code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_zip_code() {
  set_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    zip_code_ = new ::std::string;
  }
  return zip_code_;
}
inline ::std::string* UserReceiver::release_zip_code() {
  clear_has_zip_code();
  if (zip_code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zip_code_;
    zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_zip_code(::std::string* zip_code) {
  if (zip_code_ != &::google::protobuf::internal::kEmptyString) {
    delete zip_code_;
  }
  if (zip_code) {
    set_has_zip_code();
    zip_code_ = zip_code;
  } else {
    clear_has_zip_code();
    zip_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string area = 5;
inline bool UserReceiver::has_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UserReceiver::set_has_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UserReceiver::clear_has_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UserReceiver::clear_area() {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    area_->clear();
  }
  clear_has_area();
}
inline const ::std::string& UserReceiver::area() const {
  return *area_;
}
inline void UserReceiver::set_area(const ::std::string& value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void UserReceiver::set_area(const char* value) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(value);
}
inline void UserReceiver::set_area(const char* value, size_t size) {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  area_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_area() {
  set_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    area_ = new ::std::string;
  }
  return area_;
}
inline ::std::string* UserReceiver::release_area() {
  clear_has_area();
  if (area_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_;
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_area(::std::string* area) {
  if (area_ != &::google::protobuf::internal::kEmptyString) {
    delete area_;
  }
  if (area) {
    set_has_area();
    area_ = area;
  } else {
    clear_has_area();
    area_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address = 6;
inline bool UserReceiver::has_address() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UserReceiver::set_has_address() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UserReceiver::clear_has_address() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UserReceiver::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& UserReceiver::address() const {
  return *address_;
}
inline void UserReceiver::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UserReceiver::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void UserReceiver::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* UserReceiver::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string area_store = 7;
inline bool UserReceiver::has_area_store() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UserReceiver::set_has_area_store() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UserReceiver::clear_has_area_store() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UserReceiver::clear_area_store() {
  if (area_store_ != &::google::protobuf::internal::kEmptyString) {
    area_store_->clear();
  }
  clear_has_area_store();
}
inline const ::std::string& UserReceiver::area_store() const {
  return *area_store_;
}
inline void UserReceiver::set_area_store(const ::std::string& value) {
  set_has_area_store();
  if (area_store_ == &::google::protobuf::internal::kEmptyString) {
    area_store_ = new ::std::string;
  }
  area_store_->assign(value);
}
inline void UserReceiver::set_area_store(const char* value) {
  set_has_area_store();
  if (area_store_ == &::google::protobuf::internal::kEmptyString) {
    area_store_ = new ::std::string;
  }
  area_store_->assign(value);
}
inline void UserReceiver::set_area_store(const char* value, size_t size) {
  set_has_area_store();
  if (area_store_ == &::google::protobuf::internal::kEmptyString) {
    area_store_ = new ::std::string;
  }
  area_store_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_area_store() {
  set_has_area_store();
  if (area_store_ == &::google::protobuf::internal::kEmptyString) {
    area_store_ = new ::std::string;
  }
  return area_store_;
}
inline ::std::string* UserReceiver::release_area_store() {
  clear_has_area_store();
  if (area_store_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_store_;
    area_store_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_area_store(::std::string* area_store) {
  if (area_store_ != &::google::protobuf::internal::kEmptyString) {
    delete area_store_;
  }
  if (area_store) {
    set_has_area_store();
    area_store_ = area_store;
  } else {
    clear_has_area_store();
    area_store_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_default = 8;
inline bool UserReceiver::has_is_default() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UserReceiver::set_has_is_default() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UserReceiver::clear_has_is_default() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UserReceiver::clear_is_default() {
  is_default_ = false;
  clear_has_is_default();
}
inline bool UserReceiver::is_default() const {
  return is_default_;
}
inline void UserReceiver::set_is_default(bool value) {
  set_has_is_default();
  is_default_ = value;
}

// optional string act_id = 9;
inline bool UserReceiver::has_act_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UserReceiver::set_has_act_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UserReceiver::clear_has_act_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UserReceiver::clear_act_id() {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    act_id_->clear();
  }
  clear_has_act_id();
}
inline const ::std::string& UserReceiver::act_id() const {
  return *act_id_;
}
inline void UserReceiver::set_act_id(const ::std::string& value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void UserReceiver::set_act_id(const char* value) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(value);
}
inline void UserReceiver::set_act_id(const char* value, size_t size) {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  act_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_act_id() {
  set_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    act_id_ = new ::std::string;
  }
  return act_id_;
}
inline ::std::string* UserReceiver::release_act_id() {
  clear_has_act_id();
  if (act_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = act_id_;
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_act_id(::std::string* act_id) {
  if (act_id_ != &::google::protobuf::internal::kEmptyString) {
    delete act_id_;
  }
  if (act_id) {
    set_has_act_id();
    act_id_ = act_id;
  } else {
    clear_has_act_id();
    act_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string street = 10;
inline bool UserReceiver::has_street() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UserReceiver::set_has_street() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UserReceiver::clear_has_street() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UserReceiver::clear_street() {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    street_->clear();
  }
  clear_has_street();
}
inline const ::std::string& UserReceiver::street() const {
  return *street_;
}
inline void UserReceiver::set_street(const ::std::string& value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void UserReceiver::set_street(const char* value) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(value);
}
inline void UserReceiver::set_street(const char* value, size_t size) {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  street_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_street() {
  set_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    street_ = new ::std::string;
  }
  return street_;
}
inline ::std::string* UserReceiver::release_street() {
  clear_has_street();
  if (street_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = street_;
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_street(::std::string* street) {
  if (street_ != &::google::protobuf::internal::kEmptyString) {
    delete street_;
  }
  if (street) {
    set_has_street();
    street_ = street;
  } else {
    clear_has_street();
    street_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string address_detail = 11;
inline bool UserReceiver::has_address_detail() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UserReceiver::set_has_address_detail() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UserReceiver::clear_has_address_detail() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UserReceiver::clear_address_detail() {
  if (address_detail_ != &::google::protobuf::internal::kEmptyString) {
    address_detail_->clear();
  }
  clear_has_address_detail();
}
inline const ::std::string& UserReceiver::address_detail() const {
  return *address_detail_;
}
inline void UserReceiver::set_address_detail(const ::std::string& value) {
  set_has_address_detail();
  if (address_detail_ == &::google::protobuf::internal::kEmptyString) {
    address_detail_ = new ::std::string;
  }
  address_detail_->assign(value);
}
inline void UserReceiver::set_address_detail(const char* value) {
  set_has_address_detail();
  if (address_detail_ == &::google::protobuf::internal::kEmptyString) {
    address_detail_ = new ::std::string;
  }
  address_detail_->assign(value);
}
inline void UserReceiver::set_address_detail(const char* value, size_t size) {
  set_has_address_detail();
  if (address_detail_ == &::google::protobuf::internal::kEmptyString) {
    address_detail_ = new ::std::string;
  }
  address_detail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserReceiver::mutable_address_detail() {
  set_has_address_detail();
  if (address_detail_ == &::google::protobuf::internal::kEmptyString) {
    address_detail_ = new ::std::string;
  }
  return address_detail_;
}
inline ::std::string* UserReceiver::release_address_detail() {
  clear_has_address_detail();
  if (address_detail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_detail_;
    address_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void UserReceiver::set_allocated_address_detail(::std::string* address_detail) {
  if (address_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete address_detail_;
  }
  if (address_detail) {
    set_has_address_detail();
    address_detail_ = address_detail;
  } else {
    clear_has_address_detail();
    address_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryUserReceiverReq

// required string account_id = 1;
inline bool queryUserReceiverReq::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryUserReceiverReq::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryUserReceiverReq::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryUserReceiverReq::clear_account_id() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    account_id_->clear();
  }
  clear_has_account_id();
}
inline const ::std::string& queryUserReceiverReq::account_id() const {
  return *account_id_;
}
inline void queryUserReceiverReq::set_account_id(const ::std::string& value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void queryUserReceiverReq::set_account_id(const char* value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void queryUserReceiverReq::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryUserReceiverReq::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  return account_id_;
}
inline ::std::string* queryUserReceiverReq::release_account_id() {
  clear_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_id_;
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void queryUserReceiverReq::set_allocated_account_id(::std::string* account_id) {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (account_id) {
    set_has_account_id();
    account_id_ = account_id;
  } else {
    clear_has_account_id();
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryUserReceiverRes

// repeated .CS.UserReceiver receiver_list = 1;
inline int queryUserReceiverRes::receiver_list_size() const {
  return receiver_list_.size();
}
inline void queryUserReceiverRes::clear_receiver_list() {
  receiver_list_.Clear();
}
inline const ::CS::UserReceiver& queryUserReceiverRes::receiver_list(int index) const {
  return receiver_list_.Get(index);
}
inline ::CS::UserReceiver* queryUserReceiverRes::mutable_receiver_list(int index) {
  return receiver_list_.Mutable(index);
}
inline ::CS::UserReceiver* queryUserReceiverRes::add_receiver_list() {
  return receiver_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::UserReceiver >&
queryUserReceiverRes::receiver_list() const {
  return receiver_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::UserReceiver >*
queryUserReceiverRes::mutable_receiver_list() {
  return &receiver_list_;
}

// -------------------------------------------------------------------

// createUserReceiverReq

// required .CS.UserReceiver user_receiver = 1;
inline bool createUserReceiverReq::has_user_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void createUserReceiverReq::set_has_user_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void createUserReceiverReq::clear_has_user_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void createUserReceiverReq::clear_user_receiver() {
  if (user_receiver_ != NULL) user_receiver_->::CS::UserReceiver::Clear();
  clear_has_user_receiver();
}
inline const ::CS::UserReceiver& createUserReceiverReq::user_receiver() const {
  return user_receiver_ != NULL ? *user_receiver_ : *default_instance_->user_receiver_;
}
inline ::CS::UserReceiver* createUserReceiverReq::mutable_user_receiver() {
  set_has_user_receiver();
  if (user_receiver_ == NULL) user_receiver_ = new ::CS::UserReceiver;
  return user_receiver_;
}
inline ::CS::UserReceiver* createUserReceiverReq::release_user_receiver() {
  clear_has_user_receiver();
  ::CS::UserReceiver* temp = user_receiver_;
  user_receiver_ = NULL;
  return temp;
}
inline void createUserReceiverReq::set_allocated_user_receiver(::CS::UserReceiver* user_receiver) {
  delete user_receiver_;
  user_receiver_ = user_receiver;
  if (user_receiver) {
    set_has_user_receiver();
  } else {
    clear_has_user_receiver();
  }
}

// -------------------------------------------------------------------

// createUserReceiverRes

// required .CS.ReceiverCmdResult result = 1;
inline bool createUserReceiverRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void createUserReceiverRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void createUserReceiverRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void createUserReceiverRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::ReceiverCmdResult createUserReceiverRes::result() const {
  return static_cast< ::CS::ReceiverCmdResult >(result_);
}
inline void createUserReceiverRes::set_result(::CS::ReceiverCmdResult value) {
  assert(::CS::ReceiverCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// updateUserReceiverReq

// required .CS.UserReceiver user_receiver = 1;
inline bool updateUserReceiverReq::has_user_receiver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateUserReceiverReq::set_has_user_receiver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateUserReceiverReq::clear_has_user_receiver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateUserReceiverReq::clear_user_receiver() {
  if (user_receiver_ != NULL) user_receiver_->::CS::UserReceiver::Clear();
  clear_has_user_receiver();
}
inline const ::CS::UserReceiver& updateUserReceiverReq::user_receiver() const {
  return user_receiver_ != NULL ? *user_receiver_ : *default_instance_->user_receiver_;
}
inline ::CS::UserReceiver* updateUserReceiverReq::mutable_user_receiver() {
  set_has_user_receiver();
  if (user_receiver_ == NULL) user_receiver_ = new ::CS::UserReceiver;
  return user_receiver_;
}
inline ::CS::UserReceiver* updateUserReceiverReq::release_user_receiver() {
  clear_has_user_receiver();
  ::CS::UserReceiver* temp = user_receiver_;
  user_receiver_ = NULL;
  return temp;
}
inline void updateUserReceiverReq::set_allocated_user_receiver(::CS::UserReceiver* user_receiver) {
  delete user_receiver_;
  user_receiver_ = user_receiver;
  if (user_receiver) {
    set_has_user_receiver();
  } else {
    clear_has_user_receiver();
  }
}

// -------------------------------------------------------------------

// updateUserReceiverRes

// required .CS.ReceiverCmdResult result = 1;
inline bool updateUserReceiverRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void updateUserReceiverRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void updateUserReceiverRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void updateUserReceiverRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::ReceiverCmdResult updateUserReceiverRes::result() const {
  return static_cast< ::CS::ReceiverCmdResult >(result_);
}
inline void updateUserReceiverRes::set_result(::CS::ReceiverCmdResult value) {
  assert(::CS::ReceiverCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// createDefaultUserReceiverReq

// required int32 id = 1;
inline bool createDefaultUserReceiverReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void createDefaultUserReceiverReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void createDefaultUserReceiverReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void createDefaultUserReceiverReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 createDefaultUserReceiverReq::id() const {
  return id_;
}
inline void createDefaultUserReceiverReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// createDefaultUserReceiverRes

// required .CS.ReceiverCmdResult result = 1;
inline bool createDefaultUserReceiverRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void createDefaultUserReceiverRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void createDefaultUserReceiverRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void createDefaultUserReceiverRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::ReceiverCmdResult createDefaultUserReceiverRes::result() const {
  return static_cast< ::CS::ReceiverCmdResult >(result_);
}
inline void createDefaultUserReceiverRes::set_result(::CS::ReceiverCmdResult value) {
  assert(::CS::ReceiverCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// deleteUserReceiverReq

// required int32 id = 1;
inline bool deleteUserReceiverReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteUserReceiverReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteUserReceiverReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteUserReceiverReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 deleteUserReceiverReq::id() const {
  return id_;
}
inline void deleteUserReceiverReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// deleteUserReceiverRes

// required .CS.ReceiverCmdResult result = 1;
inline bool deleteUserReceiverRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void deleteUserReceiverRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void deleteUserReceiverRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void deleteUserReceiverRes::clear_result() {
  result_ = 200;
  clear_has_result();
}
inline ::CS::ReceiverCmdResult deleteUserReceiverRes::result() const {
  return static_cast< ::CS::ReceiverCmdResult >(result_);
}
inline void deleteUserReceiverRes::set_result(::CS::ReceiverCmdResult value) {
  assert(::CS::ReceiverCmdResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// Area

// optional string area_no = 1;
inline bool Area::has_area_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Area::set_has_area_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Area::clear_has_area_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Area::clear_area_no() {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    area_no_->clear();
  }
  clear_has_area_no();
}
inline const ::std::string& Area::area_no() const {
  return *area_no_;
}
inline void Area::set_area_no(const ::std::string& value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void Area::set_area_no(const char* value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void Area::set_area_no(const char* value, size_t size) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Area::mutable_area_no() {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  return area_no_;
}
inline ::std::string* Area::release_area_no() {
  clear_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_no_;
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Area::set_allocated_area_no(::std::string* area_no) {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    delete area_no_;
  }
  if (area_no) {
    set_has_area_no();
    area_no_ = area_no;
  } else {
    clear_has_area_no();
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string area_name = 2;
inline bool Area::has_area_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Area::set_has_area_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Area::clear_has_area_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Area::clear_area_name() {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    area_name_->clear();
  }
  clear_has_area_name();
}
inline const ::std::string& Area::area_name() const {
  return *area_name_;
}
inline void Area::set_area_name(const ::std::string& value) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(value);
}
inline void Area::set_area_name(const char* value) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(value);
}
inline void Area::set_area_name(const char* value, size_t size) {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  area_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Area::mutable_area_name() {
  set_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    area_name_ = new ::std::string;
  }
  return area_name_;
}
inline ::std::string* Area::release_area_name() {
  clear_has_area_name();
  if (area_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_name_;
    area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Area::set_allocated_area_name(::std::string* area_name) {
  if (area_name_ != &::google::protobuf::internal::kEmptyString) {
    delete area_name_;
  }
  if (area_name) {
    set_has_area_name();
    area_name_ = area_name;
  } else {
    clear_has_area_name();
    area_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryAreaFirstReq

// required string account_id = 1;
inline bool queryAreaFirstReq::has_account_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryAreaFirstReq::set_has_account_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryAreaFirstReq::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryAreaFirstReq::clear_account_id() {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    account_id_->clear();
  }
  clear_has_account_id();
}
inline const ::std::string& queryAreaFirstReq::account_id() const {
  return *account_id_;
}
inline void queryAreaFirstReq::set_account_id(const ::std::string& value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void queryAreaFirstReq::set_account_id(const char* value) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(value);
}
inline void queryAreaFirstReq::set_account_id(const char* value, size_t size) {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  account_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryAreaFirstReq::mutable_account_id() {
  set_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    account_id_ = new ::std::string;
  }
  return account_id_;
}
inline ::std::string* queryAreaFirstReq::release_account_id() {
  clear_has_account_id();
  if (account_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_id_;
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void queryAreaFirstReq::set_allocated_account_id(::std::string* account_id) {
  if (account_id_ != &::google::protobuf::internal::kEmptyString) {
    delete account_id_;
  }
  if (account_id) {
    set_has_account_id();
    account_id_ = account_id;
  } else {
    clear_has_account_id();
    account_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryAreaFirstResp

// repeated .CS.Area area = 1;
inline int queryAreaFirstResp::area_size() const {
  return area_.size();
}
inline void queryAreaFirstResp::clear_area() {
  area_.Clear();
}
inline const ::CS::Area& queryAreaFirstResp::area(int index) const {
  return area_.Get(index);
}
inline ::CS::Area* queryAreaFirstResp::mutable_area(int index) {
  return area_.Mutable(index);
}
inline ::CS::Area* queryAreaFirstResp::add_area() {
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
queryAreaFirstResp::area() const {
  return area_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
queryAreaFirstResp::mutable_area() {
  return &area_;
}

// -------------------------------------------------------------------

// queryAreaSecondReq

// required string area_no = 1;
inline bool queryAreaSecondReq::has_area_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryAreaSecondReq::set_has_area_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryAreaSecondReq::clear_has_area_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryAreaSecondReq::clear_area_no() {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    area_no_->clear();
  }
  clear_has_area_no();
}
inline const ::std::string& queryAreaSecondReq::area_no() const {
  return *area_no_;
}
inline void queryAreaSecondReq::set_area_no(const ::std::string& value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void queryAreaSecondReq::set_area_no(const char* value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void queryAreaSecondReq::set_area_no(const char* value, size_t size) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryAreaSecondReq::mutable_area_no() {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  return area_no_;
}
inline ::std::string* queryAreaSecondReq::release_area_no() {
  clear_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_no_;
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void queryAreaSecondReq::set_allocated_area_no(::std::string* area_no) {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    delete area_no_;
  }
  if (area_no) {
    set_has_area_no();
    area_no_ = area_no;
  } else {
    clear_has_area_no();
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryAreaSecondResp

// repeated .CS.Area area_list = 1;
inline int queryAreaSecondResp::area_list_size() const {
  return area_list_.size();
}
inline void queryAreaSecondResp::clear_area_list() {
  area_list_.Clear();
}
inline const ::CS::Area& queryAreaSecondResp::area_list(int index) const {
  return area_list_.Get(index);
}
inline ::CS::Area* queryAreaSecondResp::mutable_area_list(int index) {
  return area_list_.Mutable(index);
}
inline ::CS::Area* queryAreaSecondResp::add_area_list() {
  return area_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
queryAreaSecondResp::area_list() const {
  return area_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
queryAreaSecondResp::mutable_area_list() {
  return &area_list_;
}

// -------------------------------------------------------------------

// queryAreaThreeReq

// required string area_no = 1;
inline bool queryAreaThreeReq::has_area_no() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void queryAreaThreeReq::set_has_area_no() {
  _has_bits_[0] |= 0x00000001u;
}
inline void queryAreaThreeReq::clear_has_area_no() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void queryAreaThreeReq::clear_area_no() {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    area_no_->clear();
  }
  clear_has_area_no();
}
inline const ::std::string& queryAreaThreeReq::area_no() const {
  return *area_no_;
}
inline void queryAreaThreeReq::set_area_no(const ::std::string& value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void queryAreaThreeReq::set_area_no(const char* value) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(value);
}
inline void queryAreaThreeReq::set_area_no(const char* value, size_t size) {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  area_no_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* queryAreaThreeReq::mutable_area_no() {
  set_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    area_no_ = new ::std::string;
  }
  return area_no_;
}
inline ::std::string* queryAreaThreeReq::release_area_no() {
  clear_has_area_no();
  if (area_no_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = area_no_;
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void queryAreaThreeReq::set_allocated_area_no(::std::string* area_no) {
  if (area_no_ != &::google::protobuf::internal::kEmptyString) {
    delete area_no_;
  }
  if (area_no) {
    set_has_area_no();
    area_no_ = area_no;
  } else {
    clear_has_area_no();
    area_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// queryAreaThreeResp

// repeated .CS.Area area_list = 1;
inline int queryAreaThreeResp::area_list_size() const {
  return area_list_.size();
}
inline void queryAreaThreeResp::clear_area_list() {
  area_list_.Clear();
}
inline const ::CS::Area& queryAreaThreeResp::area_list(int index) const {
  return area_list_.Get(index);
}
inline ::CS::Area* queryAreaThreeResp::mutable_area_list(int index) {
  return area_list_.Mutable(index);
}
inline ::CS::Area* queryAreaThreeResp::add_area_list() {
  return area_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CS::Area >&
queryAreaThreeResp::area_list() const {
  return area_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::CS::Area >*
queryAreaThreeResp::mutable_area_list() {
  return &area_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::CreateOrderReq_PayType>() {
  return ::CS::CreateOrderReq_PayType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::GoodsProductStatusRes_ProductStatus>() {
  return ::CS::GoodsProductStatusRes_ProductStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::ChooseOrderPayWayReq_PayType>() {
  return ::CS::ChooseOrderPayWayReq_PayType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::OrderCmdResult>() {
  return ::CS::OrderCmdResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::ReceiverCmdResult>() {
  return ::CS::ReceiverCmdResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::CS::AreaResult>() {
  return ::CS::AreaResult_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_5fmsg_2eproto__INCLUDED
