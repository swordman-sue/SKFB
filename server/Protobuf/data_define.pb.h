// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_define.proto

#ifndef PROTOBUF_data_5fdefine_2eproto__INCLUDED
#define PROTOBUF_data_5fdefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PB {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_5fdefine_2eproto();
void protobuf_AssignDesc_data_5fdefine_2eproto();
void protobuf_ShutdownFile_data_5fdefine_2eproto();

class Item;
class Equipment;
class Treasure;
class fairy;
class Card;
class HeroTrainData;
class RecordData;
class Hero;
class MonsterData;
class ArenaRankData;
class ArenaRankDataList;
class role_rank_data;
class role_rank_list;
class all_server_role_rank_list;
class GuildRankData;
class Property;
class FormationProperty;
class GuideData;
class PlayerPVPData;
class RoleBaseInfo;
class RolePVPData;
class TitleData;
class RoleTitleInfo;
class RoleEndlessLandInfo;
class RoleGuildData;
class LuxurySignInData;
class PlayerLuxurySignInData;
class Gem;
class PlayerGemInfo;
class RoleEquipmentInfo;
class Formation;
class RoleHeroInfo;
class RoleTreasureInfo;
class RoleItemInfo;
class EmailContext;
class EmailInfo;
class RoleEmailInfo;
class MapData;
class ChapterData;
class MainFBData;
class HeroMapData;
class HeroFBChapter;
class HeroFBData;
class DailyChapterData;
class DailyFBData;
class EliteMapEnemyData;
class EliteFBChapter;
class EliteFBData;
class TowerFBData;
class RoleFBInfo;
class ShopGoods;
class HeroShopData;
class GuildShopData;
class MallShopData;
class TowerShopData;
class ArenaShopData;
class AwakenShopData;
class FairyShopData;
class ScoreMatchShopData;
class SevenDayShopData;
class LevelGiftShopData;
class EndlessLandShopData;
class DirectBuyShopData;
class ExchangeShopData;
class RecommendShopData;
class TeamDungeonShop;
class ChristmasShop;
class CrystalShop;
class ResourceWarShop;
class GMShopData;
class RoleShopInfo;
class SpiritData;
class SpiritPokedex;
class RoleSpiritInfo;
class FriendData;
class RoleFriendData;
class RoleRebelInfo;
class RoleDuobaoInfo;
class AchievementData;
class RoleAchievemntInfo;
class DailyMission;
class RoleDailyMissionInfo;
class SkillData;
class RoleGuildSkillInfo;
class RoleSignInData;
class LoginRewardData;
class RoleKingMatchData;
class PlayerTeamDungeonData;
class CardGroupData;
class CollectionGroup;
class CollectionBook;
class RoleZhanBuData;
class WorldLevelTaskData;
class RoleWorldLevelTaskInfo;
class RoleHangUpDropData;
class RoleSecondInfo;
class RewardData;
class RoleRewardData;
class YCSData;
class TQTData;
class SevenDayTargetData;
class LevelShopActivityData;
class Gift;
class VipGiftData;
class CommonRecharge;
class MonthCardData;
class RoleRechargeData;
class OpenServerFundData;
class AllPeopleWelfareData;
class LimitActivityData;
class SuperDiscountData;
class ActivityTarget;
class FestivalActivity;
class RoleFestivalActivityInfo;
class AccurateRecommendGoods;
class RoleAccurateRecommendData;
class RoleChristmasData;
class OnlineRewardRecord;
class OnlineRewardData;
class SevenDayLoginData;
class RecallFriendData;
class FacebookActivityData;
class RechargeRewardData;
class TotalRechargeRewardData;
class HotSaleGoods;
class RoleHotSaleGoodsData;
class RoleCampRecruitData;
class UnlockActivityData;
class RechargeAndCostRankData;
class RoleActivityData;
class LandPatrolEvent;
class LandCityData;
class GuildBaseData;
class GuildMember;
class GuildEvent;
class GuildLeaveMessage;
class ChatRecord;
class GuildCampMonster;
class GuildFBBox;
class GuildCampBox;
class GuildMapRewardRecord;
class GuildMonsterDamageRecord;
class GuildInfo;
class MapComment;
class MapComments;
class RoleTempData;
class RoleTempDatas;
class KingMatchBattleTarget;
class KingMatchStage;
class RoleSeasonRank;
class SeasonRankData;
class KingMatchData;
class TeamDungeonMember;
class TeamDungeonRoleRank;
class TeamDungeonRank;
class TeamDungeonLotteryRecord;
class TeamDungeonData;
class TurntableLotteryRecord;
class TurntableData;
class AllServerTurntableData;
class ScoreMatchTarget;
class RoleScoreMatchData;
class ScoreMatchData;
class RoleResourceWarData;
class ResourceWarEnemy;
class ResourceWarBattleRecord;
class ResourceWarResourceData;
class ResourceWarData;
class StarDefenderInfo;
class StarTowerInfo;
class GuildWarScore;
class StarInfo;
class RoleGuildWarData;
class GuildWarData;

// ===================================================================

class Item : public ::google::protobuf::Message {
 public:
  Item();
  virtual ~Item();

  Item(const Item& from);

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Item& default_instance();

  void Swap(Item* other);

  // implements Message ----------------------------------------------

  Item* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Item& from);
  void MergeFrom(const Item& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // required uint32 item_num = 2;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Item)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Item* default_instance_;
};
// -------------------------------------------------------------------

class Equipment : public ::google::protobuf::Message {
 public:
  Equipment();
  virtual ~Equipment();

  Equipment(const Equipment& from);

  inline Equipment& operator=(const Equipment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Equipment& default_instance();

  void Swap(Equipment* other);

  // implements Message ----------------------------------------------

  Equipment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Equipment& from);
  void MergeFrom(const Equipment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 enhance_level = 3;
  inline bool has_enhance_level() const;
  inline void clear_enhance_level();
  static const int kEnhanceLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 enhance_level() const;
  inline void set_enhance_level(::google::protobuf::uint32 value);

  // required uint32 refine_level = 4;
  inline bool has_refine_level() const;
  inline void clear_refine_level();
  static const int kRefineLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 refine_level() const;
  inline void set_refine_level(::google::protobuf::uint32 value);

  // required uint32 refine_exp = 5;
  inline bool has_refine_exp() const;
  inline void clear_refine_exp();
  static const int kRefineExpFieldNumber = 5;
  inline ::google::protobuf::uint32 refine_exp() const;
  inline void set_refine_exp(::google::protobuf::uint32 value);

  // required uint32 enhance_cost_gold = 6;
  inline bool has_enhance_cost_gold() const;
  inline void clear_enhance_cost_gold();
  static const int kEnhanceCostGoldFieldNumber = 6;
  inline ::google::protobuf::uint32 enhance_cost_gold() const;
  inline void set_enhance_cost_gold(::google::protobuf::uint32 value);

  // repeated .PB.Item refine_cost_item_list = 7;
  inline int refine_cost_item_list_size() const;
  inline void clear_refine_cost_item_list();
  static const int kRefineCostItemListFieldNumber = 7;
  inline const ::PB::Item& refine_cost_item_list(int index) const;
  inline ::PB::Item* mutable_refine_cost_item_list(int index);
  inline ::PB::Item* add_refine_cost_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Item >&
      refine_cost_item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Item >*
      mutable_refine_cost_item_list();

  // optional uint32 star = 8;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 8;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 star_level = 9;
  inline bool has_star_level() const;
  inline void clear_star_level();
  static const int kStarLevelFieldNumber = 9;
  inline ::google::protobuf::uint32 star_level() const;
  inline void set_star_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Equipment)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_enhance_level();
  inline void clear_has_enhance_level();
  inline void set_has_refine_level();
  inline void clear_has_refine_level();
  inline void set_has_refine_exp();
  inline void clear_has_refine_exp();
  inline void set_has_enhance_cost_gold();
  inline void clear_has_enhance_cost_gold();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_star_level();
  inline void clear_has_star_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 enhance_level_;
  ::google::protobuf::uint32 refine_level_;
  ::google::protobuf::uint32 refine_exp_;
  ::google::protobuf::uint32 enhance_cost_gold_;
  ::google::protobuf::RepeatedPtrField< ::PB::Item > refine_cost_item_list_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 star_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Equipment* default_instance_;
};
// -------------------------------------------------------------------

class Treasure : public ::google::protobuf::Message {
 public:
  Treasure();
  virtual ~Treasure();

  Treasure(const Treasure& from);

  inline Treasure& operator=(const Treasure& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Treasure& default_instance();

  void Swap(Treasure* other);

  // implements Message ----------------------------------------------

  Treasure* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Treasure& from);
  void MergeFrom(const Treasure& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 enhance_level = 3;
  inline bool has_enhance_level() const;
  inline void clear_enhance_level();
  static const int kEnhanceLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 enhance_level() const;
  inline void set_enhance_level(::google::protobuf::uint32 value);

  // required uint32 enhance_exp = 4;
  inline bool has_enhance_exp() const;
  inline void clear_enhance_exp();
  static const int kEnhanceExpFieldNumber = 4;
  inline ::google::protobuf::uint32 enhance_exp() const;
  inline void set_enhance_exp(::google::protobuf::uint32 value);

  // required uint32 refine_level = 5;
  inline bool has_refine_level() const;
  inline void clear_refine_level();
  static const int kRefineLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 refine_level() const;
  inline void set_refine_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Treasure)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_enhance_level();
  inline void clear_has_enhance_level();
  inline void set_has_enhance_exp();
  inline void clear_has_enhance_exp();
  inline void set_has_refine_level();
  inline void clear_has_refine_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 enhance_level_;
  ::google::protobuf::uint32 enhance_exp_;
  ::google::protobuf::uint32 refine_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Treasure* default_instance_;
};
// -------------------------------------------------------------------

class fairy : public ::google::protobuf::Message {
 public:
  fairy();
  virtual ~fairy();

  fairy(const fairy& from);

  inline fairy& operator=(const fairy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fairy& default_instance();

  void Swap(fairy* other);

  // implements Message ----------------------------------------------

  fairy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fairy& from);
  void MergeFrom(const fairy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 break_level = 5;
  inline bool has_break_level() const;
  inline void clear_break_level();
  static const int kBreakLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 break_level() const;
  inline void set_break_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.fairy)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_break_level();
  inline void clear_has_break_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 break_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static fairy* default_instance_;
};
// -------------------------------------------------------------------

class Card : public ::google::protobuf::Message {
 public:
  Card();
  virtual ~Card();

  Card(const Card& from);

  inline Card& operator=(const Card& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Card& default_instance();

  void Swap(Card* other);

  // implements Message ----------------------------------------------

  Card* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Card& from);
  void MergeFrom(const Card& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 break_level = 5;
  inline bool has_break_level() const;
  inline void clear_break_level();
  static const int kBreakLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 break_level() const;
  inline void set_break_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Card)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_break_level();
  inline void clear_has_break_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 break_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Card* default_instance_;
};
// -------------------------------------------------------------------

class HeroTrainData : public ::google::protobuf::Message {
 public:
  HeroTrainData();
  virtual ~HeroTrainData();

  HeroTrainData(const HeroTrainData& from);

  inline HeroTrainData& operator=(const HeroTrainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroTrainData& default_instance();

  void Swap(HeroTrainData* other);

  // implements Message ----------------------------------------------

  HeroTrainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroTrainData& from);
  void MergeFrom(const HeroTrainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 pro_type = 1;
  inline bool has_pro_type() const;
  inline void clear_pro_type();
  static const int kProTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 pro_type() const;
  inline void set_pro_type(::google::protobuf::uint32 value);

  // required uint32 pro_value = 2;
  inline bool has_pro_value() const;
  inline void clear_pro_value();
  static const int kProValueFieldNumber = 2;
  inline ::google::protobuf::uint32 pro_value() const;
  inline void set_pro_value(::google::protobuf::uint32 value);

  // required uint32 pro_level = 3;
  inline bool has_pro_level() const;
  inline void clear_pro_level();
  static const int kProLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 pro_level() const;
  inline void set_pro_level(::google::protobuf::uint32 value);

  // required uint32 tmp_pro_value = 4;
  inline bool has_tmp_pro_value() const;
  inline void clear_tmp_pro_value();
  static const int kTmpProValueFieldNumber = 4;
  inline ::google::protobuf::uint32 tmp_pro_value() const;
  inline void set_tmp_pro_value(::google::protobuf::uint32 value);

  // required uint32 reward_flag = 5;
  inline bool has_reward_flag() const;
  inline void clear_reward_flag();
  static const int kRewardFlagFieldNumber = 5;
  inline ::google::protobuf::uint32 reward_flag() const;
  inline void set_reward_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HeroTrainData)
 private:
  inline void set_has_pro_type();
  inline void clear_has_pro_type();
  inline void set_has_pro_value();
  inline void clear_has_pro_value();
  inline void set_has_pro_level();
  inline void clear_has_pro_level();
  inline void set_has_tmp_pro_value();
  inline void clear_has_tmp_pro_value();
  inline void set_has_reward_flag();
  inline void clear_has_reward_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pro_type_;
  ::google::protobuf::uint32 pro_value_;
  ::google::protobuf::uint32 pro_level_;
  ::google::protobuf::uint32 tmp_pro_value_;
  ::google::protobuf::uint32 reward_flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HeroTrainData* default_instance_;
};
// -------------------------------------------------------------------

class RecordData : public ::google::protobuf::Message {
 public:
  RecordData();
  virtual ~RecordData();

  RecordData(const RecordData& from);

  inline RecordData& operator=(const RecordData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordData& default_instance();

  void Swap(RecordData* other);

  // implements Message ----------------------------------------------

  RecordData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordData& from);
  void MergeFrom(const RecordData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RecordData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RecordData* default_instance_;
};
// -------------------------------------------------------------------

class Hero : public ::google::protobuf::Message {
 public:
  Hero();
  virtual ~Hero();

  Hero(const Hero& from);

  inline Hero& operator=(const Hero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Hero& default_instance();

  void Swap(Hero* other);

  // implements Message ----------------------------------------------

  Hero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Hero& from);
  void MergeFrom(const Hero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 quality = 5;
  inline bool has_quality() const;
  inline void clear_quality();
  static const int kQualityFieldNumber = 5;
  inline ::google::protobuf::uint32 quality() const;
  inline void set_quality(::google::protobuf::uint32 value);

  // required uint32 break_level = 6;
  inline bool has_break_level() const;
  inline void clear_break_level();
  static const int kBreakLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 break_level() const;
  inline void set_break_level(::google::protobuf::uint32 value);

  // required uint32 destiny_level = 7;
  inline bool has_destiny_level() const;
  inline void clear_destiny_level();
  static const int kDestinyLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 destiny_level() const;
  inline void set_destiny_level(::google::protobuf::uint32 value);

  // required uint32 destiny_exp = 8;
  inline bool has_destiny_exp() const;
  inline void clear_destiny_exp();
  static const int kDestinyExpFieldNumber = 8;
  inline ::google::protobuf::uint32 destiny_exp() const;
  inline void set_destiny_exp(::google::protobuf::uint32 value);

  // required uint32 awaken_star = 9;
  inline bool has_awaken_star() const;
  inline void clear_awaken_star();
  static const int kAwakenStarFieldNumber = 9;
  inline ::google::protobuf::uint32 awaken_star() const;
  inline void set_awaken_star(::google::protobuf::uint32 value);

  // required uint32 awaken_level = 10;
  inline bool has_awaken_level() const;
  inline void clear_awaken_level();
  static const int kAwakenLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 awaken_level() const;
  inline void set_awaken_level(::google::protobuf::uint32 value);

  // repeated uint32 awaken_item_list = 11;
  inline int awaken_item_list_size() const;
  inline void clear_awaken_item_list();
  static const int kAwakenItemListFieldNumber = 11;
  inline ::google::protobuf::uint32 awaken_item_list(int index) const;
  inline void set_awaken_item_list(int index, ::google::protobuf::uint32 value);
  inline void add_awaken_item_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      awaken_item_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_awaken_item_list();

  // repeated .PB.HeroTrainData train_data_list = 12;
  inline int train_data_list_size() const;
  inline void clear_train_data_list();
  static const int kTrainDataListFieldNumber = 12;
  inline const ::PB::HeroTrainData& train_data_list(int index) const;
  inline ::PB::HeroTrainData* mutable_train_data_list(int index);
  inline ::PB::HeroTrainData* add_train_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroTrainData >&
      train_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::HeroTrainData >*
      mutable_train_data_list();

  // required uint32 train_cost_item_num = 13;
  inline bool has_train_cost_item_num() const;
  inline void clear_train_cost_item_num();
  static const int kTrainCostItemNumFieldNumber = 13;
  inline ::google::protobuf::uint32 train_cost_item_num() const;
  inline void set_train_cost_item_num(::google::protobuf::uint32 value);

  // required uint32 destiny_cost_item_num = 14;
  inline bool has_destiny_cost_item_num() const;
  inline void clear_destiny_cost_item_num();
  static const int kDestinyCostItemNumFieldNumber = 14;
  inline ::google::protobuf::uint32 destiny_cost_item_num() const;
  inline void set_destiny_cost_item_num(::google::protobuf::uint32 value);

  // required uint32 train_cost_diamond = 15;
  inline bool has_train_cost_diamond() const;
  inline void clear_train_cost_diamond();
  static const int kTrainCostDiamondFieldNumber = 15;
  inline ::google::protobuf::uint32 train_cost_diamond() const;
  inline void set_train_cost_diamond(::google::protobuf::uint32 value);

  // required uint32 train_cost_gold = 16;
  inline bool has_train_cost_gold() const;
  inline void clear_train_cost_gold();
  static const int kTrainCostGoldFieldNumber = 16;
  inline ::google::protobuf::uint32 train_cost_gold() const;
  inline void set_train_cost_gold(::google::protobuf::uint32 value);

  // optional uint32 quality_stage = 17;
  inline bool has_quality_stage() const;
  inline void clear_quality_stage();
  static const int kQualityStageFieldNumber = 17;
  inline ::google::protobuf::uint32 quality_stage() const;
  inline void set_quality_stage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Hero)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_quality();
  inline void clear_has_quality();
  inline void set_has_break_level();
  inline void clear_has_break_level();
  inline void set_has_destiny_level();
  inline void clear_has_destiny_level();
  inline void set_has_destiny_exp();
  inline void clear_has_destiny_exp();
  inline void set_has_awaken_star();
  inline void clear_has_awaken_star();
  inline void set_has_awaken_level();
  inline void clear_has_awaken_level();
  inline void set_has_train_cost_item_num();
  inline void clear_has_train_cost_item_num();
  inline void set_has_destiny_cost_item_num();
  inline void clear_has_destiny_cost_item_num();
  inline void set_has_train_cost_diamond();
  inline void clear_has_train_cost_diamond();
  inline void set_has_train_cost_gold();
  inline void clear_has_train_cost_gold();
  inline void set_has_quality_stage();
  inline void clear_has_quality_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 quality_;
  ::google::protobuf::uint32 break_level_;
  ::google::protobuf::uint32 destiny_level_;
  ::google::protobuf::uint32 destiny_exp_;
  ::google::protobuf::uint32 awaken_star_;
  ::google::protobuf::uint32 awaken_level_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > awaken_item_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::HeroTrainData > train_data_list_;
  ::google::protobuf::uint32 train_cost_item_num_;
  ::google::protobuf::uint32 destiny_cost_item_num_;
  ::google::protobuf::uint32 train_cost_diamond_;
  ::google::protobuf::uint32 train_cost_gold_;
  ::google::protobuf::uint32 quality_stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Hero* default_instance_;
};
// -------------------------------------------------------------------

class MonsterData : public ::google::protobuf::Message {
 public:
  MonsterData();
  virtual ~MonsterData();

  MonsterData(const MonsterData& from);

  inline MonsterData& operator=(const MonsterData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterData& default_instance();

  void Swap(MonsterData* other);

  // implements Message ----------------------------------------------

  MonsterData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonsterData& from);
  void MergeFrom(const MonsterData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // required uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // required uint32 total_hp = 3;
  inline bool has_total_hp() const;
  inline void clear_total_hp();
  static const int kTotalHpFieldNumber = 3;
  inline ::google::protobuf::uint32 total_hp() const;
  inline void set_total_hp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.MonsterData)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_total_hp();
  inline void clear_has_total_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 total_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MonsterData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRankData : public ::google::protobuf::Message {
 public:
  ArenaRankData();
  virtual ~ArenaRankData();

  ArenaRankData(const ArenaRankData& from);

  inline ArenaRankData& operator=(const ArenaRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRankData& default_instance();

  void Swap(ArenaRankData* other);

  // implements Message ----------------------------------------------

  ArenaRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRankData& from);
  void MergeFrom(const ArenaRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 cur_rank = 2;
  inline bool has_cur_rank() const;
  inline void clear_cur_rank();
  static const int kCurRankFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_rank() const;
  inline void set_cur_rank(::google::protobuf::uint32 value);

  // required uint32 history_rank = 3;
  inline bool has_history_rank() const;
  inline void clear_history_rank();
  static const int kHistoryRankFieldNumber = 3;
  inline ::google::protobuf::uint32 history_rank() const;
  inline void set_history_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ArenaRankData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_cur_rank();
  inline void clear_has_cur_rank();
  inline void set_has_history_rank();
  inline void clear_has_history_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 cur_rank_;
  ::google::protobuf::uint32 history_rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ArenaRankData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaRankDataList : public ::google::protobuf::Message {
 public:
  ArenaRankDataList();
  virtual ~ArenaRankDataList();

  ArenaRankDataList(const ArenaRankDataList& from);

  inline ArenaRankDataList& operator=(const ArenaRankDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaRankDataList& default_instance();

  void Swap(ArenaRankDataList* other);

  // implements Message ----------------------------------------------

  ArenaRankDataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaRankDataList& from);
  void MergeFrom(const ArenaRankDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ArenaRankData rank_list = 1;
  inline int rank_list_size() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 1;
  inline const ::PB::ArenaRankData& rank_list(int index) const;
  inline ::PB::ArenaRankData* mutable_rank_list(int index);
  inline ::PB::ArenaRankData* add_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ArenaRankData >&
      rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ArenaRankData >*
      mutable_rank_list();

  // @@protoc_insertion_point(class_scope:PB.ArenaRankDataList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ArenaRankData > rank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ArenaRankDataList* default_instance_;
};
// -------------------------------------------------------------------

class role_rank_data : public ::google::protobuf::Message {
 public:
  role_rank_data();
  virtual ~role_rank_data();

  role_rank_data(const role_rank_data& from);

  inline role_rank_data& operator=(const role_rank_data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_rank_data& default_instance();

  void Swap(role_rank_data* other);

  // implements Message ----------------------------------------------

  role_rank_data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_rank_data& from);
  void MergeFrom(const role_rank_data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required uint32 param1 = 5;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 5;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // required uint32 update_time = 6;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // optional uint32 server_id = 7;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 7;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 param2 = 8;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 8;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.role_rank_data)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_update_time();
  inline void clear_has_update_time();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 update_time_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static role_rank_data* default_instance_;
};
// -------------------------------------------------------------------

class role_rank_list : public ::google::protobuf::Message {
 public:
  role_rank_list();
  virtual ~role_rank_list();

  role_rank_list(const role_rank_list& from);

  inline role_rank_list& operator=(const role_rank_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const role_rank_list& default_instance();

  void Swap(role_rank_list* other);

  // implements Message ----------------------------------------------

  role_rank_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const role_rank_list& from);
  void MergeFrom(const role_rank_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // repeated .PB.role_rank_data rank_list = 2;
  inline int rank_list_size() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 2;
  inline const ::PB::role_rank_data& rank_list(int index) const;
  inline ::PB::role_rank_data* mutable_rank_list(int index);
  inline ::PB::role_rank_data* add_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::role_rank_data >&
      rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::role_rank_data >*
      mutable_rank_list();

  // @@protoc_insertion_point(class_scope:PB.role_rank_list)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::role_rank_data > rank_list_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static role_rank_list* default_instance_;
};
// -------------------------------------------------------------------

class all_server_role_rank_list : public ::google::protobuf::Message {
 public:
  all_server_role_rank_list();
  virtual ~all_server_role_rank_list();

  all_server_role_rank_list(const all_server_role_rank_list& from);

  inline all_server_role_rank_list& operator=(const all_server_role_rank_list& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const all_server_role_rank_list& default_instance();

  void Swap(all_server_role_rank_list* other);

  // implements Message ----------------------------------------------

  all_server_role_rank_list* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const all_server_role_rank_list& from);
  void MergeFrom(const all_server_role_rank_list& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rank_type = 1;
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 rank_type() const;
  inline void set_rank_type(::google::protobuf::uint32 value);

  // repeated .PB.role_rank_list all_rank_list = 2;
  inline int all_rank_list_size() const;
  inline void clear_all_rank_list();
  static const int kAllRankListFieldNumber = 2;
  inline const ::PB::role_rank_list& all_rank_list(int index) const;
  inline ::PB::role_rank_list* mutable_all_rank_list(int index);
  inline ::PB::role_rank_list* add_all_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::role_rank_list >&
      all_rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::role_rank_list >*
      mutable_all_rank_list();

  // @@protoc_insertion_point(class_scope:PB.all_server_role_rank_list)
 private:
  inline void set_has_rank_type();
  inline void clear_has_rank_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::role_rank_list > all_rank_list_;
  ::google::protobuf::uint32 rank_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static all_server_role_rank_list* default_instance_;
};
// -------------------------------------------------------------------

class GuildRankData : public ::google::protobuf::Message {
 public:
  GuildRankData();
  virtual ~GuildRankData();

  GuildRankData(const GuildRankData& from);

  inline GuildRankData& operator=(const GuildRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildRankData& default_instance();

  void Swap(GuildRankData* other);

  // implements Message ----------------------------------------------

  GuildRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildRankData& from);
  void MergeFrom(const GuildRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // required uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // required uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required uint32 update_time = 4;
  inline bool has_update_time() const;
  inline void clear_update_time();
  static const int kUpdateTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 update_time() const;
  inline void set_update_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildRankData)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_update_time();
  inline void clear_has_update_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 update_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildRankData* default_instance_;
};
// -------------------------------------------------------------------

class Property : public ::google::protobuf::Message {
 public:
  Property();
  virtual ~Property();

  Property(const Property& from);

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Property& default_instance();

  void Swap(Property* other);

  // implements Message ----------------------------------------------

  Property* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Property& from);
  void MergeFrom(const Property& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Property)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Property* default_instance_;
};
// -------------------------------------------------------------------

class FormationProperty : public ::google::protobuf::Message {
 public:
  FormationProperty();
  virtual ~FormationProperty();

  FormationProperty(const FormationProperty& from);

  inline FormationProperty& operator=(const FormationProperty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FormationProperty& default_instance();

  void Swap(FormationProperty* other);

  // implements Message ----------------------------------------------

  FormationProperty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FormationProperty& from);
  void MergeFrom(const FormationProperty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 slot = 1;
  inline bool has_slot() const;
  inline void clear_slot();
  static const int kSlotFieldNumber = 1;
  inline ::google::protobuf::uint32 slot() const;
  inline void set_slot(::google::protobuf::uint32 value);

  // repeated .PB.Property pro_list = 2;
  inline int pro_list_size() const;
  inline void clear_pro_list();
  static const int kProListFieldNumber = 2;
  inline const ::PB::Property& pro_list(int index) const;
  inline ::PB::Property* mutable_pro_list(int index);
  inline ::PB::Property* add_pro_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Property >&
      pro_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Property >*
      mutable_pro_list();

  // @@protoc_insertion_point(class_scope:PB.FormationProperty)
 private:
  inline void set_has_slot();
  inline void clear_has_slot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Property > pro_list_;
  ::google::protobuf::uint32 slot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static FormationProperty* default_instance_;
};
// -------------------------------------------------------------------

class GuideData : public ::google::protobuf::Message {
 public:
  GuideData();
  virtual ~GuideData();

  GuideData(const GuideData& from);

  inline GuideData& operator=(const GuideData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuideData& default_instance();

  void Swap(GuideData* other);

  // implements Message ----------------------------------------------

  GuideData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuideData& from);
  void MergeFrom(const GuideData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuideData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 key_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuideData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPVPData : public ::google::protobuf::Message {
 public:
  PlayerPVPData();
  virtual ~PlayerPVPData();

  PlayerPVPData(const PlayerPVPData& from);

  inline PlayerPVPData& operator=(const PlayerPVPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPVPData& default_instance();

  void Swap(PlayerPVPData* other);

  // implements Message ----------------------------------------------

  PlayerPVPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPVPData& from);
  void MergeFrom(const PlayerPVPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 today_battle_times = 1;
  inline bool has_today_battle_times() const;
  inline void clear_today_battle_times();
  static const int kTodayBattleTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 today_battle_times() const;
  inline void set_today_battle_times(::google::protobuf::uint32 value);

  // optional uint32 week_battle_times = 2;
  inline bool has_week_battle_times() const;
  inline void clear_week_battle_times();
  static const int kWeekBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 week_battle_times() const;
  inline void set_week_battle_times(::google::protobuf::uint32 value);

  // repeated uint32 daily_reward_take_record = 3;
  inline int daily_reward_take_record_size() const;
  inline void clear_daily_reward_take_record();
  static const int kDailyRewardTakeRecordFieldNumber = 3;
  inline ::google::protobuf::uint32 daily_reward_take_record(int index) const;
  inline void set_daily_reward_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_daily_reward_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      daily_reward_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_daily_reward_take_record();

  // repeated uint32 week_reward_take_record = 4;
  inline int week_reward_take_record_size() const;
  inline void clear_week_reward_take_record();
  static const int kWeekRewardTakeRecordFieldNumber = 4;
  inline ::google::protobuf::uint32 week_reward_take_record(int index) const;
  inline void set_week_reward_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_week_reward_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      week_reward_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_week_reward_take_record();

  // @@protoc_insertion_point(class_scope:PB.PlayerPVPData)
 private:
  inline void set_has_today_battle_times();
  inline void clear_has_today_battle_times();
  inline void set_has_week_battle_times();
  inline void clear_has_week_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 today_battle_times_;
  ::google::protobuf::uint32 week_battle_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > daily_reward_take_record_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > week_reward_take_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerPVPData* default_instance_;
};
// -------------------------------------------------------------------

class RoleBaseInfo : public ::google::protobuf::Message {
 public:
  RoleBaseInfo();
  virtual ~RoleBaseInfo();

  RoleBaseInfo(const RoleBaseInfo& from);

  inline RoleBaseInfo& operator=(const RoleBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleBaseInfo& default_instance();

  void Swap(RoleBaseInfo* other);

  // implements Message ----------------------------------------------

  RoleBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleBaseInfo& from);
  void MergeFrom(const RoleBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // required string account = 3;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 3;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 stamina = 4;
  inline bool has_stamina() const;
  inline void clear_stamina();
  static const int kStaminaFieldNumber = 4;
  inline ::google::protobuf::uint32 stamina() const;
  inline void set_stamina(::google::protobuf::uint32 value);

  // optional uint32 energy = 5;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 5;
  inline ::google::protobuf::uint32 energy() const;
  inline void set_energy(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 daily_init_level = 8;
  inline bool has_daily_init_level() const;
  inline void clear_daily_init_level();
  static const int kDailyInitLevelFieldNumber = 8;
  inline ::google::protobuf::uint32 daily_init_level() const;
  inline void set_daily_init_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 9;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 9;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 gold = 10;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 10;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional uint32 diamond = 11;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 11;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // optional uint32 head_image_id = 12;
  inline bool has_head_image_id() const;
  inline void clear_head_image_id();
  static const int kHeadImageIdFieldNumber = 12;
  inline ::google::protobuf::uint32 head_image_id() const;
  inline void set_head_image_id(::google::protobuf::uint32 value);

  // optional uint32 vip_level = 13;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 13;
  inline ::google::protobuf::uint32 vip_level() const;
  inline void set_vip_level(::google::protobuf::uint32 value);

  // optional uint32 vip_exp = 14;
  inline bool has_vip_exp() const;
  inline void clear_vip_exp();
  static const int kVipExpFieldNumber = 14;
  inline ::google::protobuf::uint32 vip_exp() const;
  inline void set_vip_exp(::google::protobuf::uint32 value);

  // optional uint32 riot_suppress_times = 15;
  inline bool has_riot_suppress_times() const;
  inline void clear_riot_suppress_times();
  static const int kRiotSuppressTimesFieldNumber = 15;
  inline ::google::protobuf::uint32 riot_suppress_times() const;
  inline void set_riot_suppress_times(::google::protobuf::uint32 value);

  // optional uint32 hero_soul = 16;
  inline bool has_hero_soul() const;
  inline void clear_hero_soul();
  static const int kHeroSoulFieldNumber = 16;
  inline ::google::protobuf::uint32 hero_soul() const;
  inline void set_hero_soul(::google::protobuf::uint32 value);

  // optional uint32 god_soul = 17;
  inline bool has_god_soul() const;
  inline void clear_god_soul();
  static const int kGodSoulFieldNumber = 17;
  inline ::google::protobuf::uint32 god_soul() const;
  inline void set_god_soul(::google::protobuf::uint32 value);

  // optional uint32 fairy_soul = 18;
  inline bool has_fairy_soul() const;
  inline void clear_fairy_soul();
  static const int kFairySoulFieldNumber = 18;
  inline ::google::protobuf::uint32 fairy_soul() const;
  inline void set_fairy_soul(::google::protobuf::uint32 value);

  // optional uint32 arena_prestige = 19;
  inline bool has_arena_prestige() const;
  inline void clear_arena_prestige();
  static const int kArenaPrestigeFieldNumber = 19;
  inline ::google::protobuf::uint32 arena_prestige() const;
  inline void set_arena_prestige(::google::protobuf::uint32 value);

  // optional uint32 tower_prestige = 20;
  inline bool has_tower_prestige() const;
  inline void clear_tower_prestige();
  static const int kTowerPrestigeFieldNumber = 20;
  inline ::google::protobuf::uint32 tower_prestige() const;
  inline void set_tower_prestige(::google::protobuf::uint32 value);

  // optional uint32 fighting_power = 21;
  inline bool has_fighting_power() const;
  inline void clear_fighting_power();
  static const int kFightingPowerFieldNumber = 21;
  inline ::google::protobuf::uint32 fighting_power() const;
  inline void set_fighting_power(::google::protobuf::uint32 value);

  // optional uint32 wanted = 22;
  inline bool has_wanted() const;
  inline void clear_wanted();
  static const int kWantedFieldNumber = 22;
  inline ::google::protobuf::uint32 wanted() const;
  inline void set_wanted(::google::protobuf::uint32 value);

  // optional uint32 rebel_value = 23;
  inline bool has_rebel_value() const;
  inline void clear_rebel_value();
  static const int kRebelValueFieldNumber = 23;
  inline ::google::protobuf::uint32 rebel_value() const;
  inline void set_rebel_value(::google::protobuf::uint32 value);

  // optional uint32 honor = 24;
  inline bool has_honor() const;
  inline void clear_honor();
  static const int kHonorFieldNumber = 24;
  inline ::google::protobuf::uint32 honor() const;
  inline void set_honor(::google::protobuf::uint32 value);

  // optional uint32 cur_contribution = 25;
  inline bool has_cur_contribution() const;
  inline void clear_cur_contribution();
  static const int kCurContributionFieldNumber = 25;
  inline ::google::protobuf::uint32 cur_contribution() const;
  inline void set_cur_contribution(::google::protobuf::uint32 value);

  // optional uint32 world_boss_battle_times = 26;
  inline bool has_world_boss_battle_times() const;
  inline void clear_world_boss_battle_times();
  static const int kWorldBossBattleTimesFieldNumber = 26;
  inline ::google::protobuf::uint32 world_boss_battle_times() const;
  inline void set_world_boss_battle_times(::google::protobuf::uint32 value);

  // optional uint32 guild_fb_reward_chapter = 27;
  inline bool has_guild_fb_reward_chapter() const;
  inline void clear_guild_fb_reward_chapter();
  static const int kGuildFbRewardChapterFieldNumber = 27;
  inline ::google::protobuf::uint32 guild_fb_reward_chapter() const;
  inline void set_guild_fb_reward_chapter(::google::protobuf::uint32 value);

  // optional string last_login_time = 28;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 28;
  inline const ::std::string& last_login_time() const;
  inline void set_last_login_time(const ::std::string& value);
  inline void set_last_login_time(const char* value);
  inline void set_last_login_time(const char* value, size_t size);
  inline ::std::string* mutable_last_login_time();
  inline ::std::string* release_last_login_time();
  inline void set_allocated_last_login_time(::std::string* last_login_time);

  // optional string last_logout_time = 29;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 29;
  inline const ::std::string& last_logout_time() const;
  inline void set_last_logout_time(const ::std::string& value);
  inline void set_last_logout_time(const char* value);
  inline void set_last_logout_time(const char* value, size_t size);
  inline ::std::string* mutable_last_logout_time();
  inline ::std::string* release_last_logout_time();
  inline void set_allocated_last_logout_time(::std::string* last_logout_time);

  // optional uint32 total_online_time = 30;
  inline bool has_total_online_time() const;
  inline void clear_total_online_time();
  static const int kTotalOnlineTimeFieldNumber = 30;
  inline ::google::protobuf::uint32 total_online_time() const;
  inline void set_total_online_time(::google::protobuf::uint32 value);

  // optional uint32 login_times = 31;
  inline bool has_login_times() const;
  inline void clear_login_times();
  static const int kLoginTimesFieldNumber = 31;
  inline ::google::protobuf::uint32 login_times() const;
  inline void set_login_times(::google::protobuf::uint32 value);

  // optional uint32 last_stamina_recover_time = 32;
  inline bool has_last_stamina_recover_time() const;
  inline void clear_last_stamina_recover_time();
  static const int kLastStaminaRecoverTimeFieldNumber = 32;
  inline ::google::protobuf::uint32 last_stamina_recover_time() const;
  inline void set_last_stamina_recover_time(::google::protobuf::uint32 value);

  // optional uint32 last_energy_recover_time = 33;
  inline bool has_last_energy_recover_time() const;
  inline void clear_last_energy_recover_time();
  static const int kLastEnergyRecoverTimeFieldNumber = 33;
  inline ::google::protobuf::uint32 last_energy_recover_time() const;
  inline void set_last_energy_recover_time(::google::protobuf::uint32 value);

  // optional uint32 last_wanted_recover_time = 34;
  inline bool has_last_wanted_recover_time() const;
  inline void clear_last_wanted_recover_time();
  static const int kLastWantedRecoverTimeFieldNumber = 34;
  inline ::google::protobuf::uint32 last_wanted_recover_time() const;
  inline void set_last_wanted_recover_time(::google::protobuf::uint32 value);

  // repeated .PB.FormationProperty formation_pro_list = 35;
  inline int formation_pro_list_size() const;
  inline void clear_formation_pro_list();
  static const int kFormationProListFieldNumber = 35;
  inline const ::PB::FormationProperty& formation_pro_list(int index) const;
  inline ::PB::FormationProperty* mutable_formation_pro_list(int index);
  inline ::PB::FormationProperty* add_formation_pro_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::FormationProperty >&
      formation_pro_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::FormationProperty >*
      mutable_formation_pro_list();

  // optional uint32 once_flag_list = 36;
  inline bool has_once_flag_list() const;
  inline void clear_once_flag_list();
  static const int kOnceFlagListFieldNumber = 36;
  inline ::google::protobuf::uint32 once_flag_list() const;
  inline void set_once_flag_list(::google::protobuf::uint32 value);

  // optional uint32 guide_x = 37;
  inline bool has_guide_x() const;
  inline void clear_guide_x();
  static const int kGuideXFieldNumber = 37;
  inline ::google::protobuf::uint32 guide_x() const;
  inline void set_guide_x(::google::protobuf::uint32 value);

  // optional uint32 guide_y = 38;
  inline bool has_guide_y() const;
  inline void clear_guide_y();
  static const int kGuideYFieldNumber = 38;
  inline ::google::protobuf::uint32 guide_y() const;
  inline void set_guide_y(::google::protobuf::uint32 value);

  // repeated .PB.GuideData guide_list = 39;
  inline int guide_list_size() const;
  inline void clear_guide_list();
  static const int kGuideListFieldNumber = 39;
  inline const ::PB::GuideData& guide_list(int index) const;
  inline ::PB::GuideData* mutable_guide_list(int index);
  inline ::PB::GuideData* add_guide_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuideData >&
      guide_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuideData >*
      mutable_guide_list();

  // optional uint32 duobao_peace_over_time = 40;
  inline bool has_duobao_peace_over_time() const;
  inline void clear_duobao_peace_over_time();
  static const int kDuobaoPeaceOverTimeFieldNumber = 40;
  inline ::google::protobuf::uint32 duobao_peace_over_time() const;
  inline void set_duobao_peace_over_time(::google::protobuf::uint32 value);

  // optional uint32 leave_guild_time = 41;
  inline bool has_leave_guild_time() const;
  inline void clear_leave_guild_time();
  static const int kLeaveGuildTimeFieldNumber = 41;
  inline ::google::protobuf::uint32 leave_guild_time() const;
  inline void set_leave_guild_time(::google::protobuf::uint32 value);

  // optional uint32 last_activity_notice_id = 42;
  inline bool has_last_activity_notice_id() const;
  inline void clear_last_activity_notice_id();
  static const int kLastActivityNoticeIdFieldNumber = 42;
  inline ::google::protobuf::uint32 last_activity_notice_id() const;
  inline void set_last_activity_notice_id(::google::protobuf::uint32 value);

  // repeated uint32 activation_code_take_record = 43;
  inline int activation_code_take_record_size() const;
  inline void clear_activation_code_take_record();
  static const int kActivationCodeTakeRecordFieldNumber = 43;
  inline ::google::protobuf::uint32 activation_code_take_record(int index) const;
  inline void set_activation_code_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_activation_code_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activation_code_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activation_code_take_record();

  // optional uint32 friendship_point = 44;
  inline bool has_friendship_point() const;
  inline void clear_friendship_point();
  static const int kFriendshipPointFieldNumber = 44;
  inline ::google::protobuf::uint32 friendship_point() const;
  inline void set_friendship_point(::google::protobuf::uint32 value);

  // optional uint32 today_friendship_point = 45;
  inline bool has_today_friendship_point() const;
  inline void clear_today_friendship_point();
  static const int kTodayFriendshipPointFieldNumber = 45;
  inline ::google::protobuf::uint32 today_friendship_point() const;
  inline void set_today_friendship_point(::google::protobuf::uint32 value);

  // optional uint32 endless_stone = 46;
  inline bool has_endless_stone() const;
  inline void clear_endless_stone();
  static const int kEndlessStoneFieldNumber = 46;
  inline ::google::protobuf::uint32 endless_stone() const;
  inline void set_endless_stone(::google::protobuf::uint32 value);

  // optional uint32 nobility_level = 47;
  inline bool has_nobility_level() const;
  inline void clear_nobility_level();
  static const int kNobilityLevelFieldNumber = 47;
  inline ::google::protobuf::uint32 nobility_level() const;
  inline void set_nobility_level(::google::protobuf::uint32 value);

  // optional uint32 update_times = 48;
  inline bool has_update_times() const;
  inline void clear_update_times();
  static const int kUpdateTimesFieldNumber = 48;
  inline ::google::protobuf::uint32 update_times() const;
  inline void set_update_times(::google::protobuf::uint32 value);

  // optional uint32 total_recharge_amount = 49;
  inline bool has_total_recharge_amount() const;
  inline void clear_total_recharge_amount();
  static const int kTotalRechargeAmountFieldNumber = 49;
  inline ::google::protobuf::uint32 total_recharge_amount() const;
  inline void set_total_recharge_amount(::google::protobuf::uint32 value);

  // optional uint32 gem_coin = 50;
  inline bool has_gem_coin() const;
  inline void clear_gem_coin();
  static const int kGemCoinFieldNumber = 50;
  inline ::google::protobuf::uint32 gem_coin() const;
  inline void set_gem_coin(::google::protobuf::uint32 value);

  // optional uint32 destiny_coin = 51;
  inline bool has_destiny_coin() const;
  inline void clear_destiny_coin();
  static const int kDestinyCoinFieldNumber = 51;
  inline ::google::protobuf::uint32 destiny_coin() const;
  inline void set_destiny_coin(::google::protobuf::uint32 value);

  // optional uint32 star_soul = 52;
  inline bool has_star_soul() const;
  inline void clear_star_soul();
  static const int kStarSoulFieldNumber = 52;
  inline ::google::protobuf::uint32 star_soul() const;
  inline void set_star_soul(::google::protobuf::uint32 value);

  // optional uint32 turntable_score = 53;
  inline bool has_turntable_score() const;
  inline void clear_turntable_score();
  static const int kTurntableScoreFieldNumber = 53;
  inline ::google::protobuf::uint32 turntable_score() const;
  inline void set_turntable_score(::google::protobuf::uint32 value);

  // optional uint32 turntable_activity_data_id = 54;
  inline bool has_turntable_activity_data_id() const;
  inline void clear_turntable_activity_data_id();
  static const int kTurntableActivityDataIdFieldNumber = 54;
  inline ::google::protobuf::uint32 turntable_activity_data_id() const;
  inline void set_turntable_activity_data_id(::google::protobuf::uint32 value);

  // optional uint32 today_used_help_battle_times = 55;
  inline bool has_today_used_help_battle_times() const;
  inline void clear_today_used_help_battle_times();
  static const int kTodayUsedHelpBattleTimesFieldNumber = 55;
  inline ::google::protobuf::uint32 today_used_help_battle_times() const;
  inline void set_today_used_help_battle_times(::google::protobuf::uint32 value);

  // optional uint32 role_login_days = 56;
  inline bool has_role_login_days() const;
  inline void clear_role_login_days();
  static const int kRoleLoginDaysFieldNumber = 56;
  inline ::google::protobuf::uint32 role_login_days() const;
  inline void set_role_login_days(::google::protobuf::uint32 value);

  // optional uint32 crystal = 57;
  inline bool has_crystal() const;
  inline void clear_crystal();
  static const int kCrystalFieldNumber = 57;
  inline ::google::protobuf::uint32 crystal() const;
  inline void set_crystal(::google::protobuf::uint32 value);

  // optional uint32 last_login_time_ex = 58;
  inline bool has_last_login_time_ex() const;
  inline void clear_last_login_time_ex();
  static const int kLastLoginTimeExFieldNumber = 58;
  inline ::google::protobuf::uint32 last_login_time_ex() const;
  inline void set_last_login_time_ex(::google::protobuf::uint32 value);

  // optional uint32 last_logout_time_ex = 59;
  inline bool has_last_logout_time_ex() const;
  inline void clear_last_logout_time_ex();
  static const int kLastLogoutTimeExFieldNumber = 59;
  inline ::google::protobuf::uint32 last_logout_time_ex() const;
  inline void set_last_logout_time_ex(::google::protobuf::uint32 value);

  // optional uint32 create_role_time = 60;
  inline bool has_create_role_time() const;
  inline void clear_create_role_time();
  static const int kCreateRoleTimeFieldNumber = 60;
  inline ::google::protobuf::uint32 create_role_time() const;
  inline void set_create_role_time(::google::protobuf::uint32 value);

  // optional uint32 is_already_take_closed_test_rebate = 61;
  inline bool has_is_already_take_closed_test_rebate() const;
  inline void clear_is_already_take_closed_test_rebate();
  static const int kIsAlreadyTakeClosedTestRebateFieldNumber = 61;
  inline ::google::protobuf::uint32 is_already_take_closed_test_rebate() const;
  inline void set_is_already_take_closed_test_rebate(::google::protobuf::uint32 value);

  // optional uint32 score_match_honor = 62;
  inline bool has_score_match_honor() const;
  inline void clear_score_match_honor();
  static const int kScoreMatchHonorFieldNumber = 62;
  inline ::google::protobuf::uint32 score_match_honor() const;
  inline void set_score_match_honor(::google::protobuf::uint32 value);

  // optional uint32 resource_war_score = 63;
  inline bool has_resource_war_score() const;
  inline void clear_resource_war_score();
  static const int kResourceWarScoreFieldNumber = 63;
  inline ::google::protobuf::uint32 resource_war_score() const;
  inline void set_resource_war_score(::google::protobuf::uint32 value);

  // optional uint32 ycoin = 64;
  inline bool has_ycoin() const;
  inline void clear_ycoin();
  static const int kYcoinFieldNumber = 64;
  inline ::google::protobuf::uint32 ycoin() const;
  inline void set_ycoin(::google::protobuf::uint32 value);

  // optional uint32 today_chat_times = 65;
  inline bool has_today_chat_times() const;
  inline void clear_today_chat_times();
  static const int kTodayChatTimesFieldNumber = 65;
  inline ::google::protobuf::uint32 today_chat_times() const;
  inline void set_today_chat_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleBaseInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_stamina();
  inline void clear_has_stamina();
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_daily_init_level();
  inline void clear_has_daily_init_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_diamond();
  inline void clear_has_diamond();
  inline void set_has_head_image_id();
  inline void clear_has_head_image_id();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_vip_exp();
  inline void clear_has_vip_exp();
  inline void set_has_riot_suppress_times();
  inline void clear_has_riot_suppress_times();
  inline void set_has_hero_soul();
  inline void clear_has_hero_soul();
  inline void set_has_god_soul();
  inline void clear_has_god_soul();
  inline void set_has_fairy_soul();
  inline void clear_has_fairy_soul();
  inline void set_has_arena_prestige();
  inline void clear_has_arena_prestige();
  inline void set_has_tower_prestige();
  inline void clear_has_tower_prestige();
  inline void set_has_fighting_power();
  inline void clear_has_fighting_power();
  inline void set_has_wanted();
  inline void clear_has_wanted();
  inline void set_has_rebel_value();
  inline void clear_has_rebel_value();
  inline void set_has_honor();
  inline void clear_has_honor();
  inline void set_has_cur_contribution();
  inline void clear_has_cur_contribution();
  inline void set_has_world_boss_battle_times();
  inline void clear_has_world_boss_battle_times();
  inline void set_has_guild_fb_reward_chapter();
  inline void clear_has_guild_fb_reward_chapter();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_total_online_time();
  inline void clear_has_total_online_time();
  inline void set_has_login_times();
  inline void clear_has_login_times();
  inline void set_has_last_stamina_recover_time();
  inline void clear_has_last_stamina_recover_time();
  inline void set_has_last_energy_recover_time();
  inline void clear_has_last_energy_recover_time();
  inline void set_has_last_wanted_recover_time();
  inline void clear_has_last_wanted_recover_time();
  inline void set_has_once_flag_list();
  inline void clear_has_once_flag_list();
  inline void set_has_guide_x();
  inline void clear_has_guide_x();
  inline void set_has_guide_y();
  inline void clear_has_guide_y();
  inline void set_has_duobao_peace_over_time();
  inline void clear_has_duobao_peace_over_time();
  inline void set_has_leave_guild_time();
  inline void clear_has_leave_guild_time();
  inline void set_has_last_activity_notice_id();
  inline void clear_has_last_activity_notice_id();
  inline void set_has_friendship_point();
  inline void clear_has_friendship_point();
  inline void set_has_today_friendship_point();
  inline void clear_has_today_friendship_point();
  inline void set_has_endless_stone();
  inline void clear_has_endless_stone();
  inline void set_has_nobility_level();
  inline void clear_has_nobility_level();
  inline void set_has_update_times();
  inline void clear_has_update_times();
  inline void set_has_total_recharge_amount();
  inline void clear_has_total_recharge_amount();
  inline void set_has_gem_coin();
  inline void clear_has_gem_coin();
  inline void set_has_destiny_coin();
  inline void clear_has_destiny_coin();
  inline void set_has_star_soul();
  inline void clear_has_star_soul();
  inline void set_has_turntable_score();
  inline void clear_has_turntable_score();
  inline void set_has_turntable_activity_data_id();
  inline void clear_has_turntable_activity_data_id();
  inline void set_has_today_used_help_battle_times();
  inline void clear_has_today_used_help_battle_times();
  inline void set_has_role_login_days();
  inline void clear_has_role_login_days();
  inline void set_has_crystal();
  inline void clear_has_crystal();
  inline void set_has_last_login_time_ex();
  inline void clear_has_last_login_time_ex();
  inline void set_has_last_logout_time_ex();
  inline void clear_has_last_logout_time_ex();
  inline void set_has_create_role_time();
  inline void clear_has_create_role_time();
  inline void set_has_is_already_take_closed_test_rebate();
  inline void clear_has_is_already_take_closed_test_rebate();
  inline void set_has_score_match_honor();
  inline void clear_has_score_match_honor();
  inline void set_has_resource_war_score();
  inline void clear_has_resource_war_score();
  inline void set_has_ycoin();
  inline void clear_has_ycoin();
  inline void set_has_today_chat_times();
  inline void clear_has_today_chat_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 stamina_;
  ::std::string* account_;
  ::google::protobuf::uint32 energy_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 daily_init_level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 diamond_;
  ::google::protobuf::uint32 head_image_id_;
  ::google::protobuf::uint32 vip_level_;
  ::google::protobuf::uint32 vip_exp_;
  ::google::protobuf::uint32 riot_suppress_times_;
  ::google::protobuf::uint32 hero_soul_;
  ::google::protobuf::uint32 god_soul_;
  ::google::protobuf::uint32 fairy_soul_;
  ::google::protobuf::uint32 arena_prestige_;
  ::google::protobuf::uint32 tower_prestige_;
  ::google::protobuf::uint32 fighting_power_;
  ::google::protobuf::uint32 wanted_;
  ::google::protobuf::uint32 rebel_value_;
  ::google::protobuf::uint32 honor_;
  ::google::protobuf::uint32 cur_contribution_;
  ::google::protobuf::uint32 world_boss_battle_times_;
  ::std::string* last_login_time_;
  ::google::protobuf::uint32 guild_fb_reward_chapter_;
  ::google::protobuf::uint32 total_online_time_;
  ::std::string* last_logout_time_;
  ::google::protobuf::uint32 login_times_;
  ::google::protobuf::uint32 last_stamina_recover_time_;
  ::google::protobuf::uint32 last_energy_recover_time_;
  ::google::protobuf::uint32 last_wanted_recover_time_;
  ::google::protobuf::RepeatedPtrField< ::PB::FormationProperty > formation_pro_list_;
  ::google::protobuf::uint32 once_flag_list_;
  ::google::protobuf::uint32 guide_x_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuideData > guide_list_;
  ::google::protobuf::uint32 guide_y_;
  ::google::protobuf::uint32 duobao_peace_over_time_;
  ::google::protobuf::uint32 leave_guild_time_;
  ::google::protobuf::uint32 last_activity_notice_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activation_code_take_record_;
  ::google::protobuf::uint32 friendship_point_;
  ::google::protobuf::uint32 today_friendship_point_;
  ::google::protobuf::uint32 endless_stone_;
  ::google::protobuf::uint32 nobility_level_;
  ::google::protobuf::uint32 update_times_;
  ::google::protobuf::uint32 total_recharge_amount_;
  ::google::protobuf::uint32 gem_coin_;
  ::google::protobuf::uint32 destiny_coin_;
  ::google::protobuf::uint32 star_soul_;
  ::google::protobuf::uint32 turntable_score_;
  ::google::protobuf::uint32 turntable_activity_data_id_;
  ::google::protobuf::uint32 today_used_help_battle_times_;
  ::google::protobuf::uint32 role_login_days_;
  ::google::protobuf::uint32 crystal_;
  ::google::protobuf::uint32 last_login_time_ex_;
  ::google::protobuf::uint32 last_logout_time_ex_;
  ::google::protobuf::uint32 create_role_time_;
  ::google::protobuf::uint32 is_already_take_closed_test_rebate_;
  ::google::protobuf::uint32 score_match_honor_;
  ::google::protobuf::uint32 resource_war_score_;
  ::google::protobuf::uint32 ycoin_;
  ::google::protobuf::uint32 today_chat_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(65 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class RolePVPData : public ::google::protobuf::Message {
 public:
  RolePVPData();
  virtual ~RolePVPData();

  RolePVPData(const RolePVPData& from);

  inline RolePVPData& operator=(const RolePVPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RolePVPData& default_instance();

  void Swap(RolePVPData* other);

  // implements Message ----------------------------------------------

  RolePVPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RolePVPData& from);
  void MergeFrom(const RolePVPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 today_battle_times = 1;
  inline bool has_today_battle_times() const;
  inline void clear_today_battle_times();
  static const int kTodayBattleTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 today_battle_times() const;
  inline void set_today_battle_times(::google::protobuf::uint32 value);

  // optional uint32 week_battle_times = 2;
  inline bool has_week_battle_times() const;
  inline void clear_week_battle_times();
  static const int kWeekBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 week_battle_times() const;
  inline void set_week_battle_times(::google::protobuf::uint32 value);

  // optional uint32 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 win_times = 4;
  inline bool has_win_times() const;
  inline void clear_win_times();
  static const int kWinTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 win_times() const;
  inline void set_win_times(::google::protobuf::uint32 value);

  // optional uint32 total_battle_times = 5;
  inline bool has_total_battle_times() const;
  inline void clear_total_battle_times();
  static const int kTotalBattleTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 total_battle_times() const;
  inline void set_total_battle_times(::google::protobuf::uint32 value);

  // repeated uint32 daily_reward_take_record = 6;
  inline int daily_reward_take_record_size() const;
  inline void clear_daily_reward_take_record();
  static const int kDailyRewardTakeRecordFieldNumber = 6;
  inline ::google::protobuf::uint32 daily_reward_take_record(int index) const;
  inline void set_daily_reward_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_daily_reward_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      daily_reward_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_daily_reward_take_record();

  // repeated uint32 weekly_reward_take_record = 7;
  inline int weekly_reward_take_record_size() const;
  inline void clear_weekly_reward_take_record();
  static const int kWeeklyRewardTakeRecordFieldNumber = 7;
  inline ::google::protobuf::uint32 weekly_reward_take_record(int index) const;
  inline void set_weekly_reward_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_weekly_reward_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      weekly_reward_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_weekly_reward_take_record();

  // optional uint32 last_week_rank = 8;
  inline bool has_last_week_rank() const;
  inline void clear_last_week_rank();
  static const int kLastWeekRankFieldNumber = 8;
  inline ::google::protobuf::uint32 last_week_rank() const;
  inline void set_last_week_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RolePVPData)
 private:
  inline void set_has_today_battle_times();
  inline void clear_has_today_battle_times();
  inline void set_has_week_battle_times();
  inline void clear_has_week_battle_times();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_win_times();
  inline void clear_has_win_times();
  inline void set_has_total_battle_times();
  inline void clear_has_total_battle_times();
  inline void set_has_last_week_rank();
  inline void clear_has_last_week_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 today_battle_times_;
  ::google::protobuf::uint32 week_battle_times_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 win_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > daily_reward_take_record_;
  ::google::protobuf::uint32 total_battle_times_;
  ::google::protobuf::uint32 last_week_rank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > weekly_reward_take_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RolePVPData* default_instance_;
};
// -------------------------------------------------------------------

class TitleData : public ::google::protobuf::Message {
 public:
  TitleData();
  virtual ~TitleData();

  TitleData(const TitleData& from);

  inline TitleData& operator=(const TitleData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TitleData& default_instance();

  void Swap(TitleData* other);

  // implements Message ----------------------------------------------

  TitleData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TitleData& from);
  void MergeFrom(const TitleData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 over_time = 2;
  inline bool has_over_time() const;
  inline void clear_over_time();
  static const int kOverTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 over_time() const;
  inline void set_over_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.TitleData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_over_time();
  inline void clear_has_over_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 over_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TitleData* default_instance_;
};
// -------------------------------------------------------------------

class RoleTitleInfo : public ::google::protobuf::Message {
 public:
  RoleTitleInfo();
  virtual ~RoleTitleInfo();

  RoleTitleInfo(const RoleTitleInfo& from);

  inline RoleTitleInfo& operator=(const RoleTitleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleTitleInfo& default_instance();

  void Swap(RoleTitleInfo* other);

  // implements Message ----------------------------------------------

  RoleTitleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleTitleInfo& from);
  void MergeFrom(const RoleTitleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_use_title_id = 1;
  inline bool has_cur_use_title_id() const;
  inline void clear_cur_use_title_id();
  static const int kCurUseTitleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_use_title_id() const;
  inline void set_cur_use_title_id(::google::protobuf::uint32 value);

  // repeated .PB.TitleData title_list = 2;
  inline int title_list_size() const;
  inline void clear_title_list();
  static const int kTitleListFieldNumber = 2;
  inline const ::PB::TitleData& title_list(int index) const;
  inline ::PB::TitleData* mutable_title_list(int index);
  inline ::PB::TitleData* add_title_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TitleData >&
      title_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TitleData >*
      mutable_title_list();

  // optional uint32 cur_use_nickname_id = 3;
  inline bool has_cur_use_nickname_id() const;
  inline void clear_cur_use_nickname_id();
  static const int kCurUseNicknameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_use_nickname_id() const;
  inline void set_cur_use_nickname_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleTitleInfo)
 private:
  inline void set_has_cur_use_title_id();
  inline void clear_has_cur_use_title_id();
  inline void set_has_cur_use_nickname_id();
  inline void clear_has_cur_use_nickname_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::TitleData > title_list_;
  ::google::protobuf::uint32 cur_use_title_id_;
  ::google::protobuf::uint32 cur_use_nickname_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleTitleInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleEndlessLandInfo : public ::google::protobuf::Message {
 public:
  RoleEndlessLandInfo();
  virtual ~RoleEndlessLandInfo();

  RoleEndlessLandInfo(const RoleEndlessLandInfo& from);

  inline RoleEndlessLandInfo& operator=(const RoleEndlessLandInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEndlessLandInfo& default_instance();

  void Swap(RoleEndlessLandInfo* other);

  // implements Message ----------------------------------------------

  RoleEndlessLandInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEndlessLandInfo& from);
  void MergeFrom(const RoleEndlessLandInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_today_first_battle = 1;
  inline bool has_is_today_first_battle() const;
  inline void clear_is_today_first_battle();
  static const int kIsTodayFirstBattleFieldNumber = 1;
  inline ::google::protobuf::uint32 is_today_first_battle() const;
  inline void set_is_today_first_battle(::google::protobuf::uint32 value);

  // optional uint32 cur_wave = 2;
  inline bool has_cur_wave() const;
  inline void clear_cur_wave();
  static const int kCurWaveFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_wave() const;
  inline void set_cur_wave(::google::protobuf::uint32 value);

  // optional uint32 today_wave_record = 3;
  inline bool has_today_wave_record() const;
  inline void clear_today_wave_record();
  static const int kTodayWaveRecordFieldNumber = 3;
  inline ::google::protobuf::uint32 today_wave_record() const;
  inline void set_today_wave_record(::google::protobuf::uint32 value);

  // optional uint32 cur_wave_kill_num = 4;
  inline bool has_cur_wave_kill_num() const;
  inline void clear_cur_wave_kill_num();
  static const int kCurWaveKillNumFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_wave_kill_num() const;
  inline void set_cur_wave_kill_num(::google::protobuf::uint32 value);

  // optional uint32 history_wave_record = 5;
  inline bool has_history_wave_record() const;
  inline void clear_history_wave_record();
  static const int kHistoryWaveRecordFieldNumber = 5;
  inline ::google::protobuf::uint32 history_wave_record() const;
  inline void set_history_wave_record(::google::protobuf::uint32 value);

  // optional uint32 cur_keep_kill_num = 6;
  inline bool has_cur_keep_kill_num() const;
  inline void clear_cur_keep_kill_num();
  static const int kCurKeepKillNumFieldNumber = 6;
  inline ::google::protobuf::uint32 cur_keep_kill_num() const;
  inline void set_cur_keep_kill_num(::google::protobuf::uint32 value);

  // optional uint32 keep_kill_num_record = 7;
  inline bool has_keep_kill_num_record() const;
  inline void clear_keep_kill_num_record();
  static const int kKeepKillNumRecordFieldNumber = 7;
  inline ::google::protobuf::uint32 keep_kill_num_record() const;
  inline void set_keep_kill_num_record(::google::protobuf::uint32 value);

  // optional uint32 today_collision_reward_times = 8;
  inline bool has_today_collision_reward_times() const;
  inline void clear_today_collision_reward_times();
  static const int kTodayCollisionRewardTimesFieldNumber = 8;
  inline ::google::protobuf::uint32 today_collision_reward_times() const;
  inline void set_today_collision_reward_times(::google::protobuf::uint32 value);

  // repeated uint32 keep_kill_reward_record = 9;
  inline int keep_kill_reward_record_size() const;
  inline void clear_keep_kill_reward_record();
  static const int kKeepKillRewardRecordFieldNumber = 9;
  inline ::google::protobuf::uint32 keep_kill_reward_record(int index) const;
  inline void set_keep_kill_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_keep_kill_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      keep_kill_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_keep_kill_reward_record();

  // optional uint32 last_take_continue_kill_reward = 10;
  inline bool has_last_take_continue_kill_reward() const;
  inline void clear_last_take_continue_kill_reward();
  static const int kLastTakeContinueKillRewardFieldNumber = 10;
  inline ::google::protobuf::uint32 last_take_continue_kill_reward() const;
  inline void set_last_take_continue_kill_reward(::google::protobuf::uint32 value);

  // optional uint32 is_first_battle = 11;
  inline bool has_is_first_battle() const;
  inline void clear_is_first_battle();
  static const int kIsFirstBattleFieldNumber = 11;
  inline ::google::protobuf::uint32 is_first_battle() const;
  inline void set_is_first_battle(::google::protobuf::uint32 value);

  // optional uint32 today_battle_times = 12;
  inline bool has_today_battle_times() const;
  inline void clear_today_battle_times();
  static const int kTodayBattleTimesFieldNumber = 12;
  inline ::google::protobuf::uint32 today_battle_times() const;
  inline void set_today_battle_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleEndlessLandInfo)
 private:
  inline void set_has_is_today_first_battle();
  inline void clear_has_is_today_first_battle();
  inline void set_has_cur_wave();
  inline void clear_has_cur_wave();
  inline void set_has_today_wave_record();
  inline void clear_has_today_wave_record();
  inline void set_has_cur_wave_kill_num();
  inline void clear_has_cur_wave_kill_num();
  inline void set_has_history_wave_record();
  inline void clear_has_history_wave_record();
  inline void set_has_cur_keep_kill_num();
  inline void clear_has_cur_keep_kill_num();
  inline void set_has_keep_kill_num_record();
  inline void clear_has_keep_kill_num_record();
  inline void set_has_today_collision_reward_times();
  inline void clear_has_today_collision_reward_times();
  inline void set_has_last_take_continue_kill_reward();
  inline void clear_has_last_take_continue_kill_reward();
  inline void set_has_is_first_battle();
  inline void clear_has_is_first_battle();
  inline void set_has_today_battle_times();
  inline void clear_has_today_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_today_first_battle_;
  ::google::protobuf::uint32 cur_wave_;
  ::google::protobuf::uint32 today_wave_record_;
  ::google::protobuf::uint32 cur_wave_kill_num_;
  ::google::protobuf::uint32 history_wave_record_;
  ::google::protobuf::uint32 cur_keep_kill_num_;
  ::google::protobuf::uint32 keep_kill_num_record_;
  ::google::protobuf::uint32 today_collision_reward_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > keep_kill_reward_record_;
  ::google::protobuf::uint32 last_take_continue_kill_reward_;
  ::google::protobuf::uint32 is_first_battle_;
  ::google::protobuf::uint32 today_battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleEndlessLandInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleGuildData : public ::google::protobuf::Message {
 public:
  RoleGuildData();
  virtual ~RoleGuildData();

  RoleGuildData(const RoleGuildData& from);

  inline RoleGuildData& operator=(const RoleGuildData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleGuildData& default_instance();

  void Swap(RoleGuildData* other);

  // implements Message ----------------------------------------------

  RoleGuildData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleGuildData& from);
  void MergeFrom(const RoleGuildData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 take_chapter_reward_record = 1;
  inline int take_chapter_reward_record_size() const;
  inline void clear_take_chapter_reward_record();
  static const int kTakeChapterRewardRecordFieldNumber = 1;
  inline ::google::protobuf::uint32 take_chapter_reward_record(int index) const;
  inline void set_take_chapter_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_take_chapter_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      take_chapter_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_take_chapter_reward_record();

  // @@protoc_insertion_point(class_scope:PB.RoleGuildData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > take_chapter_reward_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleGuildData* default_instance_;
};
// -------------------------------------------------------------------

class LuxurySignInData : public ::google::protobuf::Message {
 public:
  LuxurySignInData();
  virtual ~LuxurySignInData();

  LuxurySignInData(const LuxurySignInData& from);

  inline LuxurySignInData& operator=(const LuxurySignInData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LuxurySignInData& default_instance();

  void Swap(LuxurySignInData* other);

  // implements Message ----------------------------------------------

  LuxurySignInData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LuxurySignInData& from);
  void MergeFrom(const LuxurySignInData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 sign_in_id = 1;
  inline bool has_sign_in_id() const;
  inline void clear_sign_in_id();
  static const int kSignInIdFieldNumber = 1;
  inline ::google::protobuf::uint32 sign_in_id() const;
  inline void set_sign_in_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 rewar_id = 3;
  inline bool has_rewar_id() const;
  inline void clear_rewar_id();
  static const int kRewarIdFieldNumber = 3;
  inline ::google::protobuf::uint32 rewar_id() const;
  inline void set_rewar_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.LuxurySignInData)
 private:
  inline void set_has_sign_in_id();
  inline void clear_has_sign_in_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_rewar_id();
  inline void clear_has_rewar_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 sign_in_id_;
  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 rewar_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LuxurySignInData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLuxurySignInData : public ::google::protobuf::Message {
 public:
  PlayerLuxurySignInData();
  virtual ~PlayerLuxurySignInData();

  PlayerLuxurySignInData(const PlayerLuxurySignInData& from);

  inline PlayerLuxurySignInData& operator=(const PlayerLuxurySignInData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLuxurySignInData& default_instance();

  void Swap(PlayerLuxurySignInData* other);

  // implements Message ----------------------------------------------

  PlayerLuxurySignInData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLuxurySignInData& from);
  void MergeFrom(const PlayerLuxurySignInData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.LuxurySignInData sign_in_data_list = 1;
  inline int sign_in_data_list_size() const;
  inline void clear_sign_in_data_list();
  static const int kSignInDataListFieldNumber = 1;
  inline const ::PB::LuxurySignInData& sign_in_data_list(int index) const;
  inline ::PB::LuxurySignInData* mutable_sign_in_data_list(int index);
  inline ::PB::LuxurySignInData* add_sign_in_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::LuxurySignInData >&
      sign_in_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::LuxurySignInData >*
      mutable_sign_in_data_list();

  // @@protoc_insertion_point(class_scope:PB.PlayerLuxurySignInData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::LuxurySignInData > sign_in_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerLuxurySignInData* default_instance_;
};
// -------------------------------------------------------------------

class Gem : public ::google::protobuf::Message {
 public:
  Gem();
  virtual ~Gem();

  Gem(const Gem& from);

  inline Gem& operator=(const Gem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gem& default_instance();

  void Swap(Gem* other);

  // implements Message ----------------------------------------------

  Gem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gem& from);
  void MergeFrom(const Gem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Gem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Gem* default_instance_;
};
// -------------------------------------------------------------------

class PlayerGemInfo : public ::google::protobuf::Message {
 public:
  PlayerGemInfo();
  virtual ~PlayerGemInfo();

  PlayerGemInfo(const PlayerGemInfo& from);

  inline PlayerGemInfo& operator=(const PlayerGemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerGemInfo& default_instance();

  void Swap(PlayerGemInfo* other);

  // implements Message ----------------------------------------------

  PlayerGemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerGemInfo& from);
  void MergeFrom(const PlayerGemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.Gem gem_list = 1;
  inline int gem_list_size() const;
  inline void clear_gem_list();
  static const int kGemListFieldNumber = 1;
  inline const ::PB::Gem& gem_list(int index) const;
  inline ::PB::Gem* mutable_gem_list(int index);
  inline ::PB::Gem* add_gem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Gem >&
      gem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Gem >*
      mutable_gem_list();

  // repeated uint32 hole_open_list = 2;
  inline int hole_open_list_size() const;
  inline void clear_hole_open_list();
  static const int kHoleOpenListFieldNumber = 2;
  inline ::google::protobuf::uint32 hole_open_list(int index) const;
  inline void set_hole_open_list(int index, ::google::protobuf::uint32 value);
  inline void add_hole_open_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hole_open_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hole_open_list();

  // optional uint32 hole_init_time = 3;
  inline bool has_hole_init_time() const;
  inline void clear_hole_init_time();
  static const int kHoleInitTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 hole_init_time() const;
  inline void set_hole_init_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.PlayerGemInfo)
 private:
  inline void set_has_hole_init_time();
  inline void clear_has_hole_init_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Gem > gem_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hole_open_list_;
  ::google::protobuf::uint32 hole_init_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerGemInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleEquipmentInfo : public ::google::protobuf::Message {
 public:
  RoleEquipmentInfo();
  virtual ~RoleEquipmentInfo();

  RoleEquipmentInfo(const RoleEquipmentInfo& from);

  inline RoleEquipmentInfo& operator=(const RoleEquipmentInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEquipmentInfo& default_instance();

  void Swap(RoleEquipmentInfo* other);

  // implements Message ----------------------------------------------

  RoleEquipmentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEquipmentInfo& from);
  void MergeFrom(const RoleEquipmentInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.Equipment equipment_list = 1;
  inline int equipment_list_size() const;
  inline void clear_equipment_list();
  static const int kEquipmentListFieldNumber = 1;
  inline const ::PB::Equipment& equipment_list(int index) const;
  inline ::PB::Equipment* mutable_equipment_list(int index);
  inline ::PB::Equipment* add_equipment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Equipment >&
      equipment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Equipment >*
      mutable_equipment_list();

  // @@protoc_insertion_point(class_scope:PB.RoleEquipmentInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Equipment > equipment_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleEquipmentInfo* default_instance_;
};
// -------------------------------------------------------------------

class Formation : public ::google::protobuf::Message {
 public:
  Formation();
  virtual ~Formation();

  Formation(const Formation& from);

  inline Formation& operator=(const Formation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Formation& default_instance();

  void Swap(Formation* other);

  // implements Message ----------------------------------------------

  Formation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Formation& from);
  void MergeFrom(const Formation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 hero_id = 1;
  inline bool has_hero_id() const;
  inline void clear_hero_id();
  static const int kHeroIdFieldNumber = 1;
  inline ::google::protobuf::uint32 hero_id() const;
  inline void set_hero_id(::google::protobuf::uint32 value);

  // repeated uint32 equipment_list = 2;
  inline int equipment_list_size() const;
  inline void clear_equipment_list();
  static const int kEquipmentListFieldNumber = 2;
  inline ::google::protobuf::uint32 equipment_list(int index) const;
  inline void set_equipment_list(int index, ::google::protobuf::uint32 value);
  inline void add_equipment_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      equipment_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_equipment_list();

  // repeated uint32 treasure_list = 3;
  inline int treasure_list_size() const;
  inline void clear_treasure_list();
  static const int kTreasureListFieldNumber = 3;
  inline ::google::protobuf::uint32 treasure_list(int index) const;
  inline void set_treasure_list(int index, ::google::protobuf::uint32 value);
  inline void add_treasure_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      treasure_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_treasure_list();

  // repeated uint32 gem_list = 4;
  inline int gem_list_size() const;
  inline void clear_gem_list();
  static const int kGemListFieldNumber = 4;
  inline ::google::protobuf::uint32 gem_list(int index) const;
  inline void set_gem_list(int index, ::google::protobuf::uint32 value);
  inline void add_gem_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gem_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gem_list();

  // repeated uint32 card_list = 5;
  inline int card_list_size() const;
  inline void clear_card_list();
  static const int kCardListFieldNumber = 5;
  inline ::google::protobuf::uint32 card_list(int index) const;
  inline void set_card_list(int index, ::google::protobuf::uint32 value);
  inline void add_card_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      card_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_card_list();

  // optional uint32 bless_sprite_id = 6;
  inline bool has_bless_sprite_id() const;
  inline void clear_bless_sprite_id();
  static const int kBlessSpriteIdFieldNumber = 6;
  inline ::google::protobuf::uint32 bless_sprite_id() const;
  inline void set_bless_sprite_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Formation)
 private:
  inline void set_has_hero_id();
  inline void clear_has_hero_id();
  inline void set_has_bless_sprite_id();
  inline void clear_has_bless_sprite_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > equipment_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > treasure_list_;
  ::google::protobuf::uint32 hero_id_;
  ::google::protobuf::uint32 bless_sprite_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gem_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > card_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Formation* default_instance_;
};
// -------------------------------------------------------------------

class RoleHeroInfo : public ::google::protobuf::Message {
 public:
  RoleHeroInfo();
  virtual ~RoleHeroInfo();

  RoleHeroInfo(const RoleHeroInfo& from);

  inline RoleHeroInfo& operator=(const RoleHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHeroInfo& default_instance();

  void Swap(RoleHeroInfo* other);

  // implements Message ----------------------------------------------

  RoleHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHeroInfo& from);
  void MergeFrom(const RoleHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 normal_free_summon_times = 1;
  inline bool has_normal_free_summon_times() const;
  inline void clear_normal_free_summon_times();
  static const int kNormalFreeSummonTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 normal_free_summon_times() const;
  inline void set_normal_free_summon_times(::google::protobuf::uint32 value);

  // required uint32 normal_free_summon_time = 2;
  inline bool has_normal_free_summon_time() const;
  inline void clear_normal_free_summon_time();
  static const int kNormalFreeSummonTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 normal_free_summon_time() const;
  inline void set_normal_free_summon_time(::google::protobuf::uint32 value);

  // required uint32 high_free_summon_time = 3;
  inline bool has_high_free_summon_time() const;
  inline void clear_high_free_summon_time();
  static const int kHighFreeSummonTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 high_free_summon_time() const;
  inline void set_high_free_summon_time(::google::protobuf::uint32 value);

  // required uint32 high_summon_times = 4;
  inline bool has_high_summon_times() const;
  inline void clear_high_summon_times();
  static const int kHighSummonTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 high_summon_times() const;
  inline void set_high_summon_times(::google::protobuf::uint32 value);

  // repeated .PB.Hero hero_list = 5;
  inline int hero_list_size() const;
  inline void clear_hero_list();
  static const int kHeroListFieldNumber = 5;
  inline const ::PB::Hero& hero_list(int index) const;
  inline ::PB::Hero* mutable_hero_list(int index);
  inline ::PB::Hero* add_hero_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Hero >&
      hero_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Hero >*
      mutable_hero_list();

  // repeated uint32 collection_list = 6;
  inline int collection_list_size() const;
  inline void clear_collection_list();
  static const int kCollectionListFieldNumber = 6;
  inline ::google::protobuf::uint32 collection_list(int index) const;
  inline void set_collection_list(int index, ::google::protobuf::uint32 value);
  inline void add_collection_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      collection_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_collection_list();

  // repeated uint32 reinforcement_list = 7;
  inline int reinforcement_list_size() const;
  inline void clear_reinforcement_list();
  static const int kReinforcementListFieldNumber = 7;
  inline ::google::protobuf::uint32 reinforcement_list(int index) const;
  inline void set_reinforcement_list(int index, ::google::protobuf::uint32 value);
  inline void add_reinforcement_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reinforcement_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reinforcement_list();

  // repeated .PB.Formation formation_list = 8;
  inline int formation_list_size() const;
  inline void clear_formation_list();
  static const int kFormationListFieldNumber = 8;
  inline const ::PB::Formation& formation_list(int index) const;
  inline ::PB::Formation* mutable_formation_list(int index);
  inline ::PB::Formation* add_formation_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Formation >&
      formation_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Formation >*
      mutable_formation_list();

  // optional uint32 train_times = 9;
  inline bool has_train_times() const;
  inline void clear_train_times();
  static const int kTrainTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 train_times() const;
  inline void set_train_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleHeroInfo)
 private:
  inline void set_has_normal_free_summon_times();
  inline void clear_has_normal_free_summon_times();
  inline void set_has_normal_free_summon_time();
  inline void clear_has_normal_free_summon_time();
  inline void set_has_high_free_summon_time();
  inline void clear_has_high_free_summon_time();
  inline void set_has_high_summon_times();
  inline void clear_has_high_summon_times();
  inline void set_has_train_times();
  inline void clear_has_train_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 normal_free_summon_times_;
  ::google::protobuf::uint32 normal_free_summon_time_;
  ::google::protobuf::uint32 high_free_summon_time_;
  ::google::protobuf::uint32 high_summon_times_;
  ::google::protobuf::RepeatedPtrField< ::PB::Hero > hero_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > collection_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reinforcement_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::Formation > formation_list_;
  ::google::protobuf::uint32 train_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleTreasureInfo : public ::google::protobuf::Message {
 public:
  RoleTreasureInfo();
  virtual ~RoleTreasureInfo();

  RoleTreasureInfo(const RoleTreasureInfo& from);

  inline RoleTreasureInfo& operator=(const RoleTreasureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleTreasureInfo& default_instance();

  void Swap(RoleTreasureInfo* other);

  // implements Message ----------------------------------------------

  RoleTreasureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleTreasureInfo& from);
  void MergeFrom(const RoleTreasureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.Treasure treasure_list = 1;
  inline int treasure_list_size() const;
  inline void clear_treasure_list();
  static const int kTreasureListFieldNumber = 1;
  inline const ::PB::Treasure& treasure_list(int index) const;
  inline ::PB::Treasure* mutable_treasure_list(int index);
  inline ::PB::Treasure* add_treasure_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Treasure >&
      treasure_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Treasure >*
      mutable_treasure_list();

  // @@protoc_insertion_point(class_scope:PB.RoleTreasureInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Treasure > treasure_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleTreasureInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleItemInfo : public ::google::protobuf::Message {
 public:
  RoleItemInfo();
  virtual ~RoleItemInfo();

  RoleItemInfo(const RoleItemInfo& from);

  inline RoleItemInfo& operator=(const RoleItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleItemInfo& default_instance();

  void Swap(RoleItemInfo* other);

  // implements Message ----------------------------------------------

  RoleItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleItemInfo& from);
  void MergeFrom(const RoleItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.Item item_list = 1;
  inline int item_list_size() const;
  inline void clear_item_list();
  static const int kItemListFieldNumber = 1;
  inline const ::PB::Item& item_list(int index) const;
  inline ::PB::Item* mutable_item_list(int index);
  inline ::PB::Item* add_item_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Item >&
      item_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Item >*
      mutable_item_list();

  // @@protoc_insertion_point(class_scope:PB.RoleItemInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Item > item_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class EmailContext : public ::google::protobuf::Message {
 public:
  EmailContext();
  virtual ~EmailContext();

  EmailContext(const EmailContext& from);

  inline EmailContext& operator=(const EmailContext& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailContext& default_instance();

  void Swap(EmailContext* other);

  // implements Message ----------------------------------------------

  EmailContext* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailContext& from);
  void MergeFrom(const EmailContext& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:PB.EmailContext)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EmailContext* default_instance_;
};
// -------------------------------------------------------------------

class EmailInfo : public ::google::protobuf::Message {
 public:
  EmailInfo();
  virtual ~EmailInfo();

  EmailInfo(const EmailInfo& from);

  inline EmailInfo& operator=(const EmailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmailInfo& default_instance();

  void Swap(EmailInfo* other);

  // implements Message ----------------------------------------------

  EmailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmailInfo& from);
  void MergeFrom(const EmailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // required uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // required uint32 receive_time = 3;
  inline bool has_receive_time() const;
  inline void clear_receive_time();
  static const int kReceiveTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 receive_time() const;
  inline void set_receive_time(::google::protobuf::uint32 value);

  // repeated .PB.EmailContext context_list = 4;
  inline int context_list_size() const;
  inline void clear_context_list();
  static const int kContextListFieldNumber = 4;
  inline const ::PB::EmailContext& context_list(int index) const;
  inline ::PB::EmailContext* mutable_context_list(int index);
  inline ::PB::EmailContext* add_context_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::EmailContext >&
      context_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::EmailContext >*
      mutable_context_list();

  // optional string title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:PB.EmailInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_receive_time();
  inline void clear_has_receive_time();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::RepeatedPtrField< ::PB::EmailContext > context_list_;
  ::std::string* title_;
  ::std::string* text_;
  ::google::protobuf::uint32 receive_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EmailInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleEmailInfo : public ::google::protobuf::Message {
 public:
  RoleEmailInfo();
  virtual ~RoleEmailInfo();

  RoleEmailInfo(const RoleEmailInfo& from);

  inline RoleEmailInfo& operator=(const RoleEmailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEmailInfo& default_instance();

  void Swap(RoleEmailInfo* other);

  // implements Message ----------------------------------------------

  RoleEmailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEmailInfo& from);
  void MergeFrom(const RoleEmailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.EmailInfo email_list = 1;
  inline int email_list_size() const;
  inline void clear_email_list();
  static const int kEmailListFieldNumber = 1;
  inline const ::PB::EmailInfo& email_list(int index) const;
  inline ::PB::EmailInfo* mutable_email_list(int index);
  inline ::PB::EmailInfo* add_email_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::EmailInfo >&
      email_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::EmailInfo >*
      mutable_email_list();

  // optional uint32 is_have_new_email = 2;
  inline bool has_is_have_new_email() const;
  inline void clear_is_have_new_email();
  static const int kIsHaveNewEmailFieldNumber = 2;
  inline ::google::protobuf::uint32 is_have_new_email() const;
  inline void set_is_have_new_email(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleEmailInfo)
 private:
  inline void set_has_is_have_new_email();
  inline void clear_has_is_have_new_email();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::EmailInfo > email_list_;
  ::google::protobuf::uint32 is_have_new_email_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleEmailInfo* default_instance_;
};
// -------------------------------------------------------------------

class MapData : public ::google::protobuf::Message {
 public:
  MapData();
  virtual ~MapData();

  MapData(const MapData& from);

  inline MapData& operator=(const MapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapData& default_instance();

  void Swap(MapData* other);

  // implements Message ----------------------------------------------

  MapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapData& from);
  void MergeFrom(const MapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 star = 1;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 1;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // required uint32 battle_times = 2;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // required uint32 reset_times = 3;
  inline bool has_reset_times() const;
  inline void clear_reset_times();
  static const int kResetTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 reset_times() const;
  inline void set_reset_times(::google::protobuf::uint32 value);

  // required uint32 is_get_reward = 4;
  inline bool has_is_get_reward() const;
  inline void clear_is_get_reward();
  static const int kIsGetRewardFieldNumber = 4;
  inline ::google::protobuf::uint32 is_get_reward() const;
  inline void set_is_get_reward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.MapData)
 private:
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_battle_times();
  inline void clear_has_battle_times();
  inline void set_has_reset_times();
  inline void clear_has_reset_times();
  inline void set_has_is_get_reward();
  inline void clear_has_is_get_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 battle_times_;
  ::google::protobuf::uint32 reset_times_;
  ::google::protobuf::uint32 is_get_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MapData* default_instance_;
};
// -------------------------------------------------------------------

class ChapterData : public ::google::protobuf::Message {
 public:
  ChapterData();
  virtual ~ChapterData();

  ChapterData(const ChapterData& from);

  inline ChapterData& operator=(const ChapterData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChapterData& default_instance();

  void Swap(ChapterData* other);

  // implements Message ----------------------------------------------

  ChapterData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChapterData& from);
  void MergeFrom(const ChapterData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.MapData map_list = 1;
  inline int map_list_size() const;
  inline void clear_map_list();
  static const int kMapListFieldNumber = 1;
  inline const ::PB::MapData& map_list(int index) const;
  inline ::PB::MapData* mutable_map_list(int index);
  inline ::PB::MapData* add_map_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MapData >&
      map_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MapData >*
      mutable_map_list();

  // repeated uint32 star_reward_list = 2;
  inline int star_reward_list_size() const;
  inline void clear_star_reward_list();
  static const int kStarRewardListFieldNumber = 2;
  inline ::google::protobuf::uint32 star_reward_list(int index) const;
  inline void set_star_reward_list(int index, ::google::protobuf::uint32 value);
  inline void add_star_reward_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      star_reward_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_star_reward_list();

  // @@protoc_insertion_point(class_scope:PB.ChapterData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::MapData > map_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > star_reward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ChapterData* default_instance_;
};
// -------------------------------------------------------------------

class MainFBData : public ::google::protobuf::Message {
 public:
  MainFBData();
  virtual ~MainFBData();

  MainFBData(const MainFBData& from);

  inline MainFBData& operator=(const MainFBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MainFBData& default_instance();

  void Swap(MainFBData* other);

  // implements Message ----------------------------------------------

  MainFBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MainFBData& from);
  void MergeFrom(const MainFBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ChapterData chapter_list = 1;
  inline int chapter_list_size() const;
  inline void clear_chapter_list();
  static const int kChapterListFieldNumber = 1;
  inline const ::PB::ChapterData& chapter_list(int index) const;
  inline ::PB::ChapterData* mutable_chapter_list(int index);
  inline ::PB::ChapterData* add_chapter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ChapterData >&
      chapter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ChapterData >*
      mutable_chapter_list();

  // optional uint32 take_chapter_reward_record = 2;
  inline bool has_take_chapter_reward_record() const;
  inline void clear_take_chapter_reward_record();
  static const int kTakeChapterRewardRecordFieldNumber = 2;
  inline ::google::protobuf::uint32 take_chapter_reward_record() const;
  inline void set_take_chapter_reward_record(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.MainFBData)
 private:
  inline void set_has_take_chapter_reward_record();
  inline void clear_has_take_chapter_reward_record();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ChapterData > chapter_list_;
  ::google::protobuf::uint32 take_chapter_reward_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MainFBData* default_instance_;
};
// -------------------------------------------------------------------

class HeroMapData : public ::google::protobuf::Message {
 public:
  HeroMapData();
  virtual ~HeroMapData();

  HeroMapData(const HeroMapData& from);

  inline HeroMapData& operator=(const HeroMapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroMapData& default_instance();

  void Swap(HeroMapData* other);

  // implements Message ----------------------------------------------

  HeroMapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroMapData& from);
  void MergeFrom(const HeroMapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 battle_times = 1;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // required uint32 is_get_reward = 2;
  inline bool has_is_get_reward() const;
  inline void clear_is_get_reward();
  static const int kIsGetRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 is_get_reward() const;
  inline void set_is_get_reward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HeroMapData)
 private:
  inline void set_has_battle_times();
  inline void clear_has_battle_times();
  inline void set_has_is_get_reward();
  inline void clear_has_is_get_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 battle_times_;
  ::google::protobuf::uint32 is_get_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HeroMapData* default_instance_;
};
// -------------------------------------------------------------------

class HeroFBChapter : public ::google::protobuf::Message {
 public:
  HeroFBChapter();
  virtual ~HeroFBChapter();

  HeroFBChapter(const HeroFBChapter& from);

  inline HeroFBChapter& operator=(const HeroFBChapter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroFBChapter& default_instance();

  void Swap(HeroFBChapter* other);

  // implements Message ----------------------------------------------

  HeroFBChapter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroFBChapter& from);
  void MergeFrom(const HeroFBChapter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.HeroMapData map_list = 1;
  inline int map_list_size() const;
  inline void clear_map_list();
  static const int kMapListFieldNumber = 1;
  inline const ::PB::HeroMapData& map_list(int index) const;
  inline ::PB::HeroMapData* mutable_map_list(int index);
  inline ::PB::HeroMapData* add_map_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroMapData >&
      map_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::HeroMapData >*
      mutable_map_list();

  // required uint32 is_pass_extra_map = 2;
  inline bool has_is_pass_extra_map() const;
  inline void clear_is_pass_extra_map();
  static const int kIsPassExtraMapFieldNumber = 2;
  inline ::google::protobuf::uint32 is_pass_extra_map() const;
  inline void set_is_pass_extra_map(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HeroFBChapter)
 private:
  inline void set_has_is_pass_extra_map();
  inline void clear_has_is_pass_extra_map();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::HeroMapData > map_list_;
  ::google::protobuf::uint32 is_pass_extra_map_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HeroFBChapter* default_instance_;
};
// -------------------------------------------------------------------

class HeroFBData : public ::google::protobuf::Message {
 public:
  HeroFBData();
  virtual ~HeroFBData();

  HeroFBData(const HeroFBData& from);

  inline HeroFBData& operator=(const HeroFBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroFBData& default_instance();

  void Swap(HeroFBData* other);

  // implements Message ----------------------------------------------

  HeroFBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroFBData& from);
  void MergeFrom(const HeroFBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.HeroFBChapter chapter_list = 1;
  inline int chapter_list_size() const;
  inline void clear_chapter_list();
  static const int kChapterListFieldNumber = 1;
  inline const ::PB::HeroFBChapter& chapter_list(int index) const;
  inline ::PB::HeroFBChapter* mutable_chapter_list(int index);
  inline ::PB::HeroFBChapter* add_chapter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroFBChapter >&
      chapter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::HeroFBChapter >*
      mutable_chapter_list();

  // required uint32 battle_times = 2;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HeroFBData)
 private:
  inline void set_has_battle_times();
  inline void clear_has_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::HeroFBChapter > chapter_list_;
  ::google::protobuf::uint32 battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HeroFBData* default_instance_;
};
// -------------------------------------------------------------------

class DailyChapterData : public ::google::protobuf::Message {
 public:
  DailyChapterData();
  virtual ~DailyChapterData();

  DailyChapterData(const DailyChapterData& from);

  inline DailyChapterData& operator=(const DailyChapterData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyChapterData& default_instance();

  void Swap(DailyChapterData* other);

  // implements Message ----------------------------------------------

  DailyChapterData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyChapterData& from);
  void MergeFrom(const DailyChapterData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chapter = 1;
  inline bool has_chapter() const;
  inline void clear_chapter();
  static const int kChapterFieldNumber = 1;
  inline ::google::protobuf::uint32 chapter() const;
  inline void set_chapter(::google::protobuf::uint32 value);

  // optional int32 max_idx_record = 2;
  inline bool has_max_idx_record() const;
  inline void clear_max_idx_record();
  static const int kMaxIdxRecordFieldNumber = 2;
  inline ::google::protobuf::int32 max_idx_record() const;
  inline void set_max_idx_record(::google::protobuf::int32 value);

  // optional uint32 battle_times = 3;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.DailyChapterData)
 private:
  inline void set_has_chapter();
  inline void clear_has_chapter();
  inline void set_has_max_idx_record();
  inline void clear_has_max_idx_record();
  inline void set_has_battle_times();
  inline void clear_has_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 chapter_;
  ::google::protobuf::int32 max_idx_record_;
  ::google::protobuf::uint32 battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DailyChapterData* default_instance_;
};
// -------------------------------------------------------------------

class DailyFBData : public ::google::protobuf::Message {
 public:
  DailyFBData();
  virtual ~DailyFBData();

  DailyFBData(const DailyFBData& from);

  inline DailyFBData& operator=(const DailyFBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyFBData& default_instance();

  void Swap(DailyFBData* other);

  // implements Message ----------------------------------------------

  DailyFBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyFBData& from);
  void MergeFrom(const DailyFBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.DailyChapterData chapter_list = 1;
  inline int chapter_list_size() const;
  inline void clear_chapter_list();
  static const int kChapterListFieldNumber = 1;
  inline const ::PB::DailyChapterData& chapter_list(int index) const;
  inline ::PB::DailyChapterData* mutable_chapter_list(int index);
  inline ::PB::DailyChapterData* add_chapter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::DailyChapterData >&
      chapter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::DailyChapterData >*
      mutable_chapter_list();

  // @@protoc_insertion_point(class_scope:PB.DailyFBData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::DailyChapterData > chapter_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DailyFBData* default_instance_;
};
// -------------------------------------------------------------------

class EliteMapEnemyData : public ::google::protobuf::Message {
 public:
  EliteMapEnemyData();
  virtual ~EliteMapEnemyData();

  EliteMapEnemyData(const EliteMapEnemyData& from);

  inline EliteMapEnemyData& operator=(const EliteMapEnemyData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteMapEnemyData& default_instance();

  void Swap(EliteMapEnemyData* other);

  // implements Message ----------------------------------------------

  EliteMapEnemyData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteMapEnemyData& from);
  void MergeFrom(const EliteMapEnemyData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // repeated .PB.MonsterData monster_list = 2;
  inline int monster_list_size() const;
  inline void clear_monster_list();
  static const int kMonsterListFieldNumber = 2;
  inline const ::PB::MonsterData& monster_list(int index) const;
  inline ::PB::MonsterData* mutable_monster_list(int index);
  inline ::PB::MonsterData* add_monster_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >&
      monster_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >*
      mutable_monster_list();

  // optional uint32 is_dead = 3;
  inline bool has_is_dead() const;
  inline void clear_is_dead();
  static const int kIsDeadFieldNumber = 3;
  inline ::google::protobuf::uint32 is_dead() const;
  inline void set_is_dead(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.EliteMapEnemyData)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();
  inline void set_has_is_dead();
  inline void clear_has_is_dead();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::MonsterData > monster_list_;
  ::google::protobuf::uint32 map_id_;
  ::google::protobuf::uint32 is_dead_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EliteMapEnemyData* default_instance_;
};
// -------------------------------------------------------------------

class EliteFBChapter : public ::google::protobuf::Message {
 public:
  EliteFBChapter();
  virtual ~EliteFBChapter();

  EliteFBChapter(const EliteFBChapter& from);

  inline EliteFBChapter& operator=(const EliteFBChapter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteFBChapter& default_instance();

  void Swap(EliteFBChapter* other);

  // implements Message ----------------------------------------------

  EliteFBChapter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteFBChapter& from);
  void MergeFrom(const EliteFBChapter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.MapData map_list = 1;
  inline int map_list_size() const;
  inline void clear_map_list();
  static const int kMapListFieldNumber = 1;
  inline const ::PB::MapData& map_list(int index) const;
  inline ::PB::MapData* mutable_map_list(int index);
  inline ::PB::MapData* add_map_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MapData >&
      map_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MapData >*
      mutable_map_list();

  // repeated uint32 star_reward_list = 2;
  inline int star_reward_list_size() const;
  inline void clear_star_reward_list();
  static const int kStarRewardListFieldNumber = 2;
  inline ::google::protobuf::uint32 star_reward_list(int index) const;
  inline void set_star_reward_list(int index, ::google::protobuf::uint32 value);
  inline void add_star_reward_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      star_reward_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_star_reward_list();

  // required .PB.EliteMapEnemyData enemy_data = 3;
  inline bool has_enemy_data() const;
  inline void clear_enemy_data();
  static const int kEnemyDataFieldNumber = 3;
  inline const ::PB::EliteMapEnemyData& enemy_data() const;
  inline ::PB::EliteMapEnemyData* mutable_enemy_data();
  inline ::PB::EliteMapEnemyData* release_enemy_data();
  inline void set_allocated_enemy_data(::PB::EliteMapEnemyData* enemy_data);

  // @@protoc_insertion_point(class_scope:PB.EliteFBChapter)
 private:
  inline void set_has_enemy_data();
  inline void clear_has_enemy_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::MapData > map_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > star_reward_list_;
  ::PB::EliteMapEnemyData* enemy_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EliteFBChapter* default_instance_;
};
// -------------------------------------------------------------------

class EliteFBData : public ::google::protobuf::Message {
 public:
  EliteFBData();
  virtual ~EliteFBData();

  EliteFBData(const EliteFBData& from);

  inline EliteFBData& operator=(const EliteFBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EliteFBData& default_instance();

  void Swap(EliteFBData* other);

  // implements Message ----------------------------------------------

  EliteFBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EliteFBData& from);
  void MergeFrom(const EliteFBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.EliteFBChapter chapter_list = 1;
  inline int chapter_list_size() const;
  inline void clear_chapter_list();
  static const int kChapterListFieldNumber = 1;
  inline const ::PB::EliteFBChapter& chapter_list(int index) const;
  inline ::PB::EliteFBChapter* mutable_chapter_list(int index);
  inline ::PB::EliteFBChapter* add_chapter_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::EliteFBChapter >&
      chapter_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::EliteFBChapter >*
      mutable_chapter_list();

  // optional uint32 last_refresh_enemy_time = 2;
  inline bool has_last_refresh_enemy_time() const;
  inline void clear_last_refresh_enemy_time();
  static const int kLastRefreshEnemyTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_refresh_enemy_time() const;
  inline void set_last_refresh_enemy_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.EliteFBData)
 private:
  inline void set_has_last_refresh_enemy_time();
  inline void clear_has_last_refresh_enemy_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::EliteFBChapter > chapter_list_;
  ::google::protobuf::uint32 last_refresh_enemy_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EliteFBData* default_instance_;
};
// -------------------------------------------------------------------

class TowerFBData : public ::google::protobuf::Message {
 public:
  TowerFBData();
  virtual ~TowerFBData();

  TowerFBData(const TowerFBData& from);

  inline TowerFBData& operator=(const TowerFBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TowerFBData& default_instance();

  void Swap(TowerFBData* other);

  // implements Message ----------------------------------------------

  TowerFBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TowerFBData& from);
  void MergeFrom(const TowerFBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 map_star_list = 1;
  inline int map_star_list_size() const;
  inline void clear_map_star_list();
  static const int kMapStarListFieldNumber = 1;
  inline ::google::protobuf::uint32 map_star_list(int index) const;
  inline void set_map_star_list(int index, ::google::protobuf::uint32 value);
  inline void add_map_star_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      map_star_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_map_star_list();

  // required uint32 map_level_record = 2;
  inline bool has_map_level_record() const;
  inline void clear_map_level_record();
  static const int kMapLevelRecordFieldNumber = 2;
  inline ::google::protobuf::uint32 map_level_record() const;
  inline void set_map_level_record(::google::protobuf::uint32 value);

  // required uint32 keep_best_star_passed_record = 3;
  inline bool has_keep_best_star_passed_record() const;
  inline void clear_keep_best_star_passed_record();
  static const int kKeepBestStarPassedRecordFieldNumber = 3;
  inline ::google::protobuf::uint32 keep_best_star_passed_record() const;
  inline void set_keep_best_star_passed_record(::google::protobuf::uint32 value);

  // repeated .PB.Property select_pro_list = 4;
  inline int select_pro_list_size() const;
  inline void clear_select_pro_list();
  static const int kSelectProListFieldNumber = 4;
  inline const ::PB::Property& select_pro_list(int index) const;
  inline ::PB::Property* mutable_select_pro_list(int index);
  inline ::PB::Property* add_select_pro_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Property >&
      select_pro_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Property >*
      mutable_select_pro_list();

  // required uint32 is_buy_star_goods = 5;
  inline bool has_is_buy_star_goods() const;
  inline void clear_is_buy_star_goods();
  static const int kIsBuyStarGoodsFieldNumber = 5;
  inline ::google::protobuf::uint32 is_buy_star_goods() const;
  inline void set_is_buy_star_goods(::google::protobuf::uint32 value);

  // required uint32 star_goods_idx = 6;
  inline bool has_star_goods_idx() const;
  inline void clear_star_goods_idx();
  static const int kStarGoodsIdxFieldNumber = 6;
  inline ::google::protobuf::uint32 star_goods_idx() const;
  inline void set_star_goods_idx(::google::protobuf::uint32 value);

  // required uint32 is_need_reset = 7;
  inline bool has_is_need_reset() const;
  inline void clear_is_need_reset();
  static const int kIsNeedResetFieldNumber = 7;
  inline ::google::protobuf::uint32 is_need_reset() const;
  inline void set_is_need_reset(::google::protobuf::uint32 value);

  // required uint32 today_reset_times = 8;
  inline bool has_today_reset_times() const;
  inline void clear_today_reset_times();
  static const int kTodayResetTimesFieldNumber = 8;
  inline ::google::protobuf::uint32 today_reset_times() const;
  inline void set_today_reset_times(::google::protobuf::uint32 value);

  // required uint32 cur_star = 9;
  inline bool has_cur_star() const;
  inline void clear_cur_star();
  static const int kCurStarFieldNumber = 9;
  inline ::google::protobuf::uint32 cur_star() const;
  inline void set_cur_star(::google::protobuf::uint32 value);

  // required uint32 star_max_record = 10;
  inline bool has_star_max_record() const;
  inline void clear_star_max_record();
  static const int kStarMaxRecordFieldNumber = 10;
  inline ::google::protobuf::uint32 star_max_record() const;
  inline void set_star_max_record(::google::protobuf::uint32 value);

  // required uint32 elite_map_level = 11;
  inline bool has_elite_map_level() const;
  inline void clear_elite_map_level();
  static const int kEliteMapLevelFieldNumber = 11;
  inline ::google::protobuf::uint32 elite_map_level() const;
  inline void set_elite_map_level(::google::protobuf::uint32 value);

  // required uint32 elite_map_battle_times = 12;
  inline bool has_elite_map_battle_times() const;
  inline void clear_elite_map_battle_times();
  static const int kEliteMapBattleTimesFieldNumber = 12;
  inline ::google::protobuf::uint32 elite_map_battle_times() const;
  inline void set_elite_map_battle_times(::google::protobuf::uint32 value);

  // required uint32 buy_elite_map_battle_times = 13;
  inline bool has_buy_elite_map_battle_times() const;
  inline void clear_buy_elite_map_battle_times();
  static const int kBuyEliteMapBattleTimesFieldNumber = 13;
  inline ::google::protobuf::uint32 buy_elite_map_battle_times() const;
  inline void set_buy_elite_map_battle_times(::google::protobuf::uint32 value);

  // repeated uint32 rand_pro_idx_list = 14;
  inline int rand_pro_idx_list_size() const;
  inline void clear_rand_pro_idx_list();
  static const int kRandProIdxListFieldNumber = 14;
  inline ::google::protobuf::uint32 rand_pro_idx_list(int index) const;
  inline void set_rand_pro_idx_list(int index, ::google::protobuf::uint32 value);
  inline void add_rand_pro_idx_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rand_pro_idx_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rand_pro_idx_list();

  // @@protoc_insertion_point(class_scope:PB.TowerFBData)
 private:
  inline void set_has_map_level_record();
  inline void clear_has_map_level_record();
  inline void set_has_keep_best_star_passed_record();
  inline void clear_has_keep_best_star_passed_record();
  inline void set_has_is_buy_star_goods();
  inline void clear_has_is_buy_star_goods();
  inline void set_has_star_goods_idx();
  inline void clear_has_star_goods_idx();
  inline void set_has_is_need_reset();
  inline void clear_has_is_need_reset();
  inline void set_has_today_reset_times();
  inline void clear_has_today_reset_times();
  inline void set_has_cur_star();
  inline void clear_has_cur_star();
  inline void set_has_star_max_record();
  inline void clear_has_star_max_record();
  inline void set_has_elite_map_level();
  inline void clear_has_elite_map_level();
  inline void set_has_elite_map_battle_times();
  inline void clear_has_elite_map_battle_times();
  inline void set_has_buy_elite_map_battle_times();
  inline void clear_has_buy_elite_map_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > map_star_list_;
  ::google::protobuf::uint32 map_level_record_;
  ::google::protobuf::uint32 keep_best_star_passed_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::Property > select_pro_list_;
  ::google::protobuf::uint32 is_buy_star_goods_;
  ::google::protobuf::uint32 star_goods_idx_;
  ::google::protobuf::uint32 is_need_reset_;
  ::google::protobuf::uint32 today_reset_times_;
  ::google::protobuf::uint32 cur_star_;
  ::google::protobuf::uint32 star_max_record_;
  ::google::protobuf::uint32 elite_map_level_;
  ::google::protobuf::uint32 elite_map_battle_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rand_pro_idx_list_;
  ::google::protobuf::uint32 buy_elite_map_battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TowerFBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleFBInfo : public ::google::protobuf::Message {
 public:
  RoleFBInfo();
  virtual ~RoleFBInfo();

  RoleFBInfo(const RoleFBInfo& from);

  inline RoleFBInfo& operator=(const RoleFBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleFBInfo& default_instance();

  void Swap(RoleFBInfo* other);

  // implements Message ----------------------------------------------

  RoleFBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleFBInfo& from);
  void MergeFrom(const RoleFBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PB.MainFBData main_fb_data = 1;
  inline bool has_main_fb_data() const;
  inline void clear_main_fb_data();
  static const int kMainFbDataFieldNumber = 1;
  inline const ::PB::MainFBData& main_fb_data() const;
  inline ::PB::MainFBData* mutable_main_fb_data();
  inline ::PB::MainFBData* release_main_fb_data();
  inline void set_allocated_main_fb_data(::PB::MainFBData* main_fb_data);

  // required .PB.HeroFBData hero_fb_data = 2;
  inline bool has_hero_fb_data() const;
  inline void clear_hero_fb_data();
  static const int kHeroFbDataFieldNumber = 2;
  inline const ::PB::HeroFBData& hero_fb_data() const;
  inline ::PB::HeroFBData* mutable_hero_fb_data();
  inline ::PB::HeroFBData* release_hero_fb_data();
  inline void set_allocated_hero_fb_data(::PB::HeroFBData* hero_fb_data);

  // required .PB.DailyFBData daily_fb_data = 3;
  inline bool has_daily_fb_data() const;
  inline void clear_daily_fb_data();
  static const int kDailyFbDataFieldNumber = 3;
  inline const ::PB::DailyFBData& daily_fb_data() const;
  inline ::PB::DailyFBData* mutable_daily_fb_data();
  inline ::PB::DailyFBData* release_daily_fb_data();
  inline void set_allocated_daily_fb_data(::PB::DailyFBData* daily_fb_data);

  // required .PB.TowerFBData tower_fb_data = 4;
  inline bool has_tower_fb_data() const;
  inline void clear_tower_fb_data();
  static const int kTowerFbDataFieldNumber = 4;
  inline const ::PB::TowerFBData& tower_fb_data() const;
  inline ::PB::TowerFBData* mutable_tower_fb_data();
  inline ::PB::TowerFBData* release_tower_fb_data();
  inline void set_allocated_tower_fb_data(::PB::TowerFBData* tower_fb_data);

  // required .PB.EliteFBData elite_fb_data = 5;
  inline bool has_elite_fb_data() const;
  inline void clear_elite_fb_data();
  static const int kEliteFbDataFieldNumber = 5;
  inline const ::PB::EliteFBData& elite_fb_data() const;
  inline ::PB::EliteFBData* mutable_elite_fb_data();
  inline ::PB::EliteFBData* release_elite_fb_data();
  inline void set_allocated_elite_fb_data(::PB::EliteFBData* elite_fb_data);

  // @@protoc_insertion_point(class_scope:PB.RoleFBInfo)
 private:
  inline void set_has_main_fb_data();
  inline void clear_has_main_fb_data();
  inline void set_has_hero_fb_data();
  inline void clear_has_hero_fb_data();
  inline void set_has_daily_fb_data();
  inline void clear_has_daily_fb_data();
  inline void set_has_tower_fb_data();
  inline void clear_has_tower_fb_data();
  inline void set_has_elite_fb_data();
  inline void clear_has_elite_fb_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::MainFBData* main_fb_data_;
  ::PB::HeroFBData* hero_fb_data_;
  ::PB::DailyFBData* daily_fb_data_;
  ::PB::TowerFBData* tower_fb_data_;
  ::PB::EliteFBData* elite_fb_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleFBInfo* default_instance_;
};
// -------------------------------------------------------------------

class ShopGoods : public ::google::protobuf::Message {
 public:
  ShopGoods();
  virtual ~ShopGoods();

  ShopGoods(const ShopGoods& from);

  inline ShopGoods& operator=(const ShopGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopGoods& default_instance();

  void Swap(ShopGoods* other);

  // implements Message ----------------------------------------------

  ShopGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopGoods& from);
  void MergeFrom(const ShopGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // required uint32 goods_num = 2;
  inline bool has_goods_num() const;
  inline void clear_goods_num();
  static const int kGoodsNumFieldNumber = 2;
  inline ::google::protobuf::uint32 goods_num() const;
  inline void set_goods_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ShopGoods)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_goods_num();
  inline void clear_has_goods_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 goods_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ShopGoods* default_instance_;
};
// -------------------------------------------------------------------

class HeroShopData : public ::google::protobuf::Message {
 public:
  HeroShopData();
  virtual ~HeroShopData();

  HeroShopData(const HeroShopData& from);

  inline HeroShopData& operator=(const HeroShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroShopData& default_instance();

  void Swap(HeroShopData* other);

  // implements Message ----------------------------------------------

  HeroShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroShopData& from);
  void MergeFrom(const HeroShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_list(int index) const;
  inline ::PB::ShopGoods* mutable_goods_list(int index);
  inline ::PB::ShopGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_list();

  // required uint32 last_recover_time = 2;
  inline bool has_last_recover_time() const;
  inline void clear_last_recover_time();
  static const int kLastRecoverTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_recover_time() const;
  inline void set_last_recover_time(::google::protobuf::uint32 value);

  // required uint32 free_refresh_times = 3;
  inline bool has_free_refresh_times() const;
  inline void clear_free_refresh_times();
  static const int kFreeRefreshTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 free_refresh_times() const;
  inline void set_free_refresh_times(::google::protobuf::uint32 value);

  // required uint32 cost_refresh_times = 4;
  inline bool has_cost_refresh_times() const;
  inline void clear_cost_refresh_times();
  static const int kCostRefreshTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 cost_refresh_times() const;
  inline void set_cost_refresh_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HeroShopData)
 private:
  inline void set_has_last_recover_time();
  inline void clear_has_last_recover_time();
  inline void set_has_free_refresh_times();
  inline void clear_has_free_refresh_times();
  inline void set_has_cost_refresh_times();
  inline void clear_has_cost_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_list_;
  ::google::protobuf::uint32 last_recover_time_;
  ::google::protobuf::uint32 free_refresh_times_;
  ::google::protobuf::uint32 cost_refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HeroShopData* default_instance_;
};
// -------------------------------------------------------------------

class GuildShopData : public ::google::protobuf::Message {
 public:
  GuildShopData();
  virtual ~GuildShopData();

  GuildShopData(const GuildShopData& from);

  inline GuildShopData& operator=(const GuildShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildShopData& default_instance();

  void Swap(GuildShopData* other);

  // implements Message ----------------------------------------------

  GuildShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildShopData& from);
  void MergeFrom(const GuildShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods reward_goods_buy_record = 1;
  inline int reward_goods_buy_record_size() const;
  inline void clear_reward_goods_buy_record();
  static const int kRewardGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& reward_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_reward_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_reward_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      reward_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_reward_goods_buy_record();

  // repeated .PB.ShopGoods item_goods_buy_record = 2;
  inline int item_goods_buy_record_size() const;
  inline void clear_item_goods_buy_record();
  static const int kItemGoodsBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& item_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_item_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_item_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      item_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_item_goods_buy_record();

  // repeated .PB.ShopGoods limit_goods_buy_record = 3;
  inline int limit_goods_buy_record_size() const;
  inline void clear_limit_goods_buy_record();
  static const int kLimitGoodsBuyRecordFieldNumber = 3;
  inline const ::PB::ShopGoods& limit_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_limit_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_limit_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      limit_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_limit_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.GuildShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > reward_goods_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > item_goods_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > limit_goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildShopData* default_instance_;
};
// -------------------------------------------------------------------

class MallShopData : public ::google::protobuf::Message {
 public:
  MallShopData();
  virtual ~MallShopData();

  MallShopData(const MallShopData& from);

  inline MallShopData& operator=(const MallShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MallShopData& default_instance();

  void Swap(MallShopData* other);

  // implements Message ----------------------------------------------

  MallShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MallShopData& from);
  void MergeFrom(const MallShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods item_buy_record = 1;
  inline int item_buy_record_size() const;
  inline void clear_item_buy_record();
  static const int kItemBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& item_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_item_buy_record(int index);
  inline ::PB::ShopGoods* add_item_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      item_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_item_buy_record();

  // repeated .PB.ShopGoods gift_buy_record = 2;
  inline int gift_buy_record_size() const;
  inline void clear_gift_buy_record();
  static const int kGiftBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& gift_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_gift_buy_record(int index);
  inline ::PB::ShopGoods* add_gift_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      gift_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_gift_buy_record();

  // @@protoc_insertion_point(class_scope:PB.MallShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > item_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > gift_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MallShopData* default_instance_;
};
// -------------------------------------------------------------------

class TowerShopData : public ::google::protobuf::Message {
 public:
  TowerShopData();
  virtual ~TowerShopData();

  TowerShopData(const TowerShopData& from);

  inline TowerShopData& operator=(const TowerShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TowerShopData& default_instance();

  void Swap(TowerShopData* other);

  // implements Message ----------------------------------------------

  TowerShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TowerShopData& from);
  void MergeFrom(const TowerShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods buy_record = 1;
  inline int buy_record_size() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_buy_record(int index);
  inline ::PB::ShopGoods* add_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_buy_record();

  // @@protoc_insertion_point(class_scope:PB.TowerShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TowerShopData* default_instance_;
};
// -------------------------------------------------------------------

class ArenaShopData : public ::google::protobuf::Message {
 public:
  ArenaShopData();
  virtual ~ArenaShopData();

  ArenaShopData(const ArenaShopData& from);

  inline ArenaShopData& operator=(const ArenaShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ArenaShopData& default_instance();

  void Swap(ArenaShopData* other);

  // implements Message ----------------------------------------------

  ArenaShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ArenaShopData& from);
  void MergeFrom(const ArenaShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods buy_record = 1;
  inline int buy_record_size() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_buy_record(int index);
  inline ::PB::ShopGoods* add_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_buy_record();

  // @@protoc_insertion_point(class_scope:PB.ArenaShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ArenaShopData* default_instance_;
};
// -------------------------------------------------------------------

class AwakenShopData : public ::google::protobuf::Message {
 public:
  AwakenShopData();
  virtual ~AwakenShopData();

  AwakenShopData(const AwakenShopData& from);

  inline AwakenShopData& operator=(const AwakenShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AwakenShopData& default_instance();

  void Swap(AwakenShopData* other);

  // implements Message ----------------------------------------------

  AwakenShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AwakenShopData& from);
  void MergeFrom(const AwakenShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_list(int index) const;
  inline ::PB::ShopGoods* mutable_goods_list(int index);
  inline ::PB::ShopGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_list();

  // required uint32 last_recover_time = 2;
  inline bool has_last_recover_time() const;
  inline void clear_last_recover_time();
  static const int kLastRecoverTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_recover_time() const;
  inline void set_last_recover_time(::google::protobuf::uint32 value);

  // required uint32 free_refresh_times = 3;
  inline bool has_free_refresh_times() const;
  inline void clear_free_refresh_times();
  static const int kFreeRefreshTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 free_refresh_times() const;
  inline void set_free_refresh_times(::google::protobuf::uint32 value);

  // required uint32 cost_refresh_times = 4;
  inline bool has_cost_refresh_times() const;
  inline void clear_cost_refresh_times();
  static const int kCostRefreshTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 cost_refresh_times() const;
  inline void set_cost_refresh_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.AwakenShopData)
 private:
  inline void set_has_last_recover_time();
  inline void clear_has_last_recover_time();
  inline void set_has_free_refresh_times();
  inline void clear_has_free_refresh_times();
  inline void set_has_cost_refresh_times();
  inline void clear_has_cost_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_list_;
  ::google::protobuf::uint32 last_recover_time_;
  ::google::protobuf::uint32 free_refresh_times_;
  ::google::protobuf::uint32 cost_refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AwakenShopData* default_instance_;
};
// -------------------------------------------------------------------

class FairyShopData : public ::google::protobuf::Message {
 public:
  FairyShopData();
  virtual ~FairyShopData();

  FairyShopData(const FairyShopData& from);

  inline FairyShopData& operator=(const FairyShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FairyShopData& default_instance();

  void Swap(FairyShopData* other);

  // implements Message ----------------------------------------------

  FairyShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FairyShopData& from);
  void MergeFrom(const FairyShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_list(int index) const;
  inline ::PB::ShopGoods* mutable_goods_list(int index);
  inline ::PB::ShopGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_list();

  // required uint32 used_refresh_times = 2;
  inline bool has_used_refresh_times() const;
  inline void clear_used_refresh_times();
  static const int kUsedRefreshTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 used_refresh_times() const;
  inline void set_used_refresh_times(::google::protobuf::uint32 value);

  // required uint32 last_auto_refresh_time = 3;
  inline bool has_last_auto_refresh_time() const;
  inline void clear_last_auto_refresh_time();
  static const int kLastAutoRefreshTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_auto_refresh_time() const;
  inline void set_last_auto_refresh_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.FairyShopData)
 private:
  inline void set_has_used_refresh_times();
  inline void clear_has_used_refresh_times();
  inline void set_has_last_auto_refresh_time();
  inline void clear_has_last_auto_refresh_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_list_;
  ::google::protobuf::uint32 used_refresh_times_;
  ::google::protobuf::uint32 last_auto_refresh_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static FairyShopData* default_instance_;
};
// -------------------------------------------------------------------

class ScoreMatchShopData : public ::google::protobuf::Message {
 public:
  ScoreMatchShopData();
  virtual ~ScoreMatchShopData();

  ScoreMatchShopData(const ScoreMatchShopData& from);

  inline ScoreMatchShopData& operator=(const ScoreMatchShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreMatchShopData& default_instance();

  void Swap(ScoreMatchShopData* other);

  // implements Message ----------------------------------------------

  ScoreMatchShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreMatchShopData& from);
  void MergeFrom(const ScoreMatchShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods buy_record = 1;
  inline int buy_record_size() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_buy_record(int index);
  inline ::PB::ShopGoods* add_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_buy_record();

  // @@protoc_insertion_point(class_scope:PB.ScoreMatchShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ScoreMatchShopData* default_instance_;
};
// -------------------------------------------------------------------

class SevenDayShopData : public ::google::protobuf::Message {
 public:
  SevenDayShopData();
  virtual ~SevenDayShopData();

  SevenDayShopData(const SevenDayShopData& from);

  inline SevenDayShopData& operator=(const SevenDayShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SevenDayShopData& default_instance();

  void Swap(SevenDayShopData* other);

  // implements Message ----------------------------------------------

  SevenDayShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SevenDayShopData& from);
  void MergeFrom(const SevenDayShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods buy_record = 1;
  inline int buy_record_size() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_buy_record(int index);
  inline ::PB::ShopGoods* add_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_buy_record();

  // @@protoc_insertion_point(class_scope:PB.SevenDayShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SevenDayShopData* default_instance_;
};
// -------------------------------------------------------------------

class LevelGiftShopData : public ::google::protobuf::Message {
 public:
  LevelGiftShopData();
  virtual ~LevelGiftShopData();

  LevelGiftShopData(const LevelGiftShopData& from);

  inline LevelGiftShopData& operator=(const LevelGiftShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelGiftShopData& default_instance();

  void Swap(LevelGiftShopData* other);

  // implements Message ----------------------------------------------

  LevelGiftShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelGiftShopData& from);
  void MergeFrom(const LevelGiftShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods buy_record = 1;
  inline int buy_record_size() const;
  inline void clear_buy_record();
  static const int kBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_buy_record(int index);
  inline ::PB::ShopGoods* add_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_buy_record();

  // @@protoc_insertion_point(class_scope:PB.LevelGiftShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LevelGiftShopData* default_instance_;
};
// -------------------------------------------------------------------

class EndlessLandShopData : public ::google::protobuf::Message {
 public:
  EndlessLandShopData();
  virtual ~EndlessLandShopData();

  EndlessLandShopData(const EndlessLandShopData& from);

  inline EndlessLandShopData& operator=(const EndlessLandShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndlessLandShopData& default_instance();

  void Swap(EndlessLandShopData* other);

  // implements Message ----------------------------------------------

  EndlessLandShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndlessLandShopData& from);
  void MergeFrom(const EndlessLandShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods item_goods_buy_record = 1;
  inline int item_goods_buy_record_size() const;
  inline void clear_item_goods_buy_record();
  static const int kItemGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& item_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_item_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_item_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      item_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_item_goods_buy_record();

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  inline int reward_goods_buy_record_size() const;
  inline void clear_reward_goods_buy_record();
  static const int kRewardGoodsBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& reward_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_reward_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_reward_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      reward_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_reward_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.EndlessLandShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > item_goods_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > reward_goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static EndlessLandShopData* default_instance_;
};
// -------------------------------------------------------------------

class DirectBuyShopData : public ::google::protobuf::Message {
 public:
  DirectBuyShopData();
  virtual ~DirectBuyShopData();

  DirectBuyShopData(const DirectBuyShopData& from);

  inline DirectBuyShopData& operator=(const DirectBuyShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DirectBuyShopData& default_instance();

  void Swap(DirectBuyShopData* other);

  // implements Message ----------------------------------------------

  DirectBuyShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DirectBuyShopData& from);
  void MergeFrom(const DirectBuyShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_list(int index) const;
  inline ::PB::ShopGoods* mutable_goods_list(int index);
  inline ::PB::ShopGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_list();

  // optional uint32 last_refresh_time = 2;
  inline bool has_last_refresh_time() const;
  inline void clear_last_refresh_time();
  static const int kLastRefreshTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_refresh_time() const;
  inline void set_last_refresh_time(::google::protobuf::uint32 value);

  // repeated uint32 can_take_goods_list = 3;
  inline int can_take_goods_list_size() const;
  inline void clear_can_take_goods_list();
  static const int kCanTakeGoodsListFieldNumber = 3;
  inline ::google::protobuf::uint32 can_take_goods_list(int index) const;
  inline void set_can_take_goods_list(int index, ::google::protobuf::uint32 value);
  inline void add_can_take_goods_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      can_take_goods_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_can_take_goods_list();

  // optional uint32 last_refresh_year_day = 4;
  inline bool has_last_refresh_year_day() const;
  inline void clear_last_refresh_year_day();
  static const int kLastRefreshYearDayFieldNumber = 4;
  inline ::google::protobuf::uint32 last_refresh_year_day() const;
  inline void set_last_refresh_year_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.DirectBuyShopData)
 private:
  inline void set_has_last_refresh_time();
  inline void clear_has_last_refresh_time();
  inline void set_has_last_refresh_year_day();
  inline void clear_has_last_refresh_year_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > can_take_goods_list_;
  ::google::protobuf::uint32 last_refresh_time_;
  ::google::protobuf::uint32 last_refresh_year_day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DirectBuyShopData* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeShopData : public ::google::protobuf::Message {
 public:
  ExchangeShopData();
  virtual ~ExchangeShopData();

  ExchangeShopData(const ExchangeShopData& from);

  inline ExchangeShopData& operator=(const ExchangeShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeShopData& default_instance();

  void Swap(ExchangeShopData* other);

  // implements Message ----------------------------------------------

  ExchangeShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeShopData& from);
  void MergeFrom(const ExchangeShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_buy_record = 1;
  inline int goods_buy_record_size() const;
  inline void clear_goods_buy_record();
  static const int kGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.ExchangeShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ExchangeShopData* default_instance_;
};
// -------------------------------------------------------------------

class RecommendShopData : public ::google::protobuf::Message {
 public:
  RecommendShopData();
  virtual ~RecommendShopData();

  RecommendShopData(const RecommendShopData& from);

  inline RecommendShopData& operator=(const RecommendShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendShopData& default_instance();

  void Swap(RecommendShopData* other);

  // implements Message ----------------------------------------------

  RecommendShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendShopData& from);
  void MergeFrom(const RecommendShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_buy_record = 1;
  inline int goods_buy_record_size() const;
  inline void clear_goods_buy_record();
  static const int kGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.RecommendShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RecommendShopData* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonShop : public ::google::protobuf::Message {
 public:
  TeamDungeonShop();
  virtual ~TeamDungeonShop();

  TeamDungeonShop(const TeamDungeonShop& from);

  inline TeamDungeonShop& operator=(const TeamDungeonShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonShop& default_instance();

  void Swap(TeamDungeonShop* other);

  // implements Message ----------------------------------------------

  TeamDungeonShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonShop& from);
  void MergeFrom(const TeamDungeonShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods normal_goods_buy_record = 1;
  inline int normal_goods_buy_record_size() const;
  inline void clear_normal_goods_buy_record();
  static const int kNormalGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& normal_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_normal_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_normal_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      normal_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_normal_goods_buy_record();

  // repeated .PB.ShopGoods reward_goods_buy_record = 2;
  inline int reward_goods_buy_record_size() const;
  inline void clear_reward_goods_buy_record();
  static const int kRewardGoodsBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& reward_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_reward_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_reward_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      reward_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_reward_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonShop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > normal_goods_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > reward_goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonShop* default_instance_;
};
// -------------------------------------------------------------------

class ChristmasShop : public ::google::protobuf::Message {
 public:
  ChristmasShop();
  virtual ~ChristmasShop();

  ChristmasShop(const ChristmasShop& from);

  inline ChristmasShop& operator=(const ChristmasShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChristmasShop& default_instance();

  void Swap(ChristmasShop* other);

  // implements Message ----------------------------------------------

  ChristmasShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChristmasShop& from);
  void MergeFrom(const ChristmasShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
  inline int score_exchange_goods_buy_record_size() const;
  inline void clear_score_exchange_goods_buy_record();
  static const int kScoreExchangeGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& score_exchange_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_score_exchange_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_score_exchange_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      score_exchange_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_score_exchange_goods_buy_record();

  // repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
  inline int item_exchange_goods_buy_record_size() const;
  inline void clear_item_exchange_goods_buy_record();
  static const int kItemExchangeGoodsBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& item_exchange_goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_item_exchange_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_item_exchange_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      item_exchange_goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_item_exchange_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.ChristmasShop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > score_exchange_goods_buy_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > item_exchange_goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ChristmasShop* default_instance_;
};
// -------------------------------------------------------------------

class CrystalShop : public ::google::protobuf::Message {
 public:
  CrystalShop();
  virtual ~CrystalShop();

  CrystalShop(const CrystalShop& from);

  inline CrystalShop& operator=(const CrystalShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CrystalShop& default_instance();

  void Swap(CrystalShop* other);

  // implements Message ----------------------------------------------

  CrystalShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CrystalShop& from);
  void MergeFrom(const CrystalShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 today_refresh_times = 1;
  inline bool has_today_refresh_times() const;
  inline void clear_today_refresh_times();
  static const int kTodayRefreshTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 today_refresh_times() const;
  inline void set_today_refresh_times(::google::protobuf::uint32 value);

  // repeated .PB.ShopGoods goods_buy_record = 2;
  inline int goods_buy_record_size() const;
  inline void clear_goods_buy_record();
  static const int kGoodsBuyRecordFieldNumber = 2;
  inline const ::PB::ShopGoods& goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.CrystalShop)
 private:
  inline void set_has_today_refresh_times();
  inline void clear_has_today_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_buy_record_;
  ::google::protobuf::uint32 today_refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CrystalShop* default_instance_;
};
// -------------------------------------------------------------------

class ResourceWarShop : public ::google::protobuf::Message {
 public:
  ResourceWarShop();
  virtual ~ResourceWarShop();

  ResourceWarShop(const ResourceWarShop& from);

  inline ResourceWarShop& operator=(const ResourceWarShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceWarShop& default_instance();

  void Swap(ResourceWarShop* other);

  // implements Message ----------------------------------------------

  ResourceWarShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceWarShop& from);
  void MergeFrom(const ResourceWarShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_buy_record = 1;
  inline int goods_buy_record_size() const;
  inline void clear_goods_buy_record();
  static const int kGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.ResourceWarShop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ResourceWarShop* default_instance_;
};
// -------------------------------------------------------------------

class GMShopData : public ::google::protobuf::Message {
 public:
  GMShopData();
  virtual ~GMShopData();

  GMShopData(const GMShopData& from);

  inline GMShopData& operator=(const GMShopData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMShopData& default_instance();

  void Swap(GMShopData* other);

  // implements Message ----------------------------------------------

  GMShopData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMShopData& from);
  void MergeFrom(const GMShopData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ShopGoods goods_buy_record = 1;
  inline int goods_buy_record_size() const;
  inline void clear_goods_buy_record();
  static const int kGoodsBuyRecordFieldNumber = 1;
  inline const ::PB::ShopGoods& goods_buy_record(int index) const;
  inline ::PB::ShopGoods* mutable_goods_buy_record(int index);
  inline ::PB::ShopGoods* add_goods_buy_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_buy_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_buy_record();

  // @@protoc_insertion_point(class_scope:PB.GMShopData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_buy_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GMShopData* default_instance_;
};
// -------------------------------------------------------------------

class RoleShopInfo : public ::google::protobuf::Message {
 public:
  RoleShopInfo();
  virtual ~RoleShopInfo();

  RoleShopInfo(const RoleShopInfo& from);

  inline RoleShopInfo& operator=(const RoleShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleShopInfo& default_instance();

  void Swap(RoleShopInfo* other);

  // implements Message ----------------------------------------------

  RoleShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleShopInfo& from);
  void MergeFrom(const RoleShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PB.HeroShopData hero_shop = 1;
  inline bool has_hero_shop() const;
  inline void clear_hero_shop();
  static const int kHeroShopFieldNumber = 1;
  inline const ::PB::HeroShopData& hero_shop() const;
  inline ::PB::HeroShopData* mutable_hero_shop();
  inline ::PB::HeroShopData* release_hero_shop();
  inline void set_allocated_hero_shop(::PB::HeroShopData* hero_shop);

  // required .PB.GuildShopData guild_shop = 2;
  inline bool has_guild_shop() const;
  inline void clear_guild_shop();
  static const int kGuildShopFieldNumber = 2;
  inline const ::PB::GuildShopData& guild_shop() const;
  inline ::PB::GuildShopData* mutable_guild_shop();
  inline ::PB::GuildShopData* release_guild_shop();
  inline void set_allocated_guild_shop(::PB::GuildShopData* guild_shop);

  // required .PB.MallShopData mall_shop = 3;
  inline bool has_mall_shop() const;
  inline void clear_mall_shop();
  static const int kMallShopFieldNumber = 3;
  inline const ::PB::MallShopData& mall_shop() const;
  inline ::PB::MallShopData* mutable_mall_shop();
  inline ::PB::MallShopData* release_mall_shop();
  inline void set_allocated_mall_shop(::PB::MallShopData* mall_shop);

  // required .PB.TowerShopData tower_shop = 4;
  inline bool has_tower_shop() const;
  inline void clear_tower_shop();
  static const int kTowerShopFieldNumber = 4;
  inline const ::PB::TowerShopData& tower_shop() const;
  inline ::PB::TowerShopData* mutable_tower_shop();
  inline ::PB::TowerShopData* release_tower_shop();
  inline void set_allocated_tower_shop(::PB::TowerShopData* tower_shop);

  // required .PB.ArenaShopData arena_shop = 5;
  inline bool has_arena_shop() const;
  inline void clear_arena_shop();
  static const int kArenaShopFieldNumber = 5;
  inline const ::PB::ArenaShopData& arena_shop() const;
  inline ::PB::ArenaShopData* mutable_arena_shop();
  inline ::PB::ArenaShopData* release_arena_shop();
  inline void set_allocated_arena_shop(::PB::ArenaShopData* arena_shop);

  // required .PB.AwakenShopData awaken_shop = 6;
  inline bool has_awaken_shop() const;
  inline void clear_awaken_shop();
  static const int kAwakenShopFieldNumber = 6;
  inline const ::PB::AwakenShopData& awaken_shop() const;
  inline ::PB::AwakenShopData* mutable_awaken_shop();
  inline ::PB::AwakenShopData* release_awaken_shop();
  inline void set_allocated_awaken_shop(::PB::AwakenShopData* awaken_shop);

  // required .PB.FairyShopData fairy_shop = 7;
  inline bool has_fairy_shop() const;
  inline void clear_fairy_shop();
  static const int kFairyShopFieldNumber = 7;
  inline const ::PB::FairyShopData& fairy_shop() const;
  inline ::PB::FairyShopData* mutable_fairy_shop();
  inline ::PB::FairyShopData* release_fairy_shop();
  inline void set_allocated_fairy_shop(::PB::FairyShopData* fairy_shop);

  // required .PB.ScoreMatchShopData score_match_shop = 8;
  inline bool has_score_match_shop() const;
  inline void clear_score_match_shop();
  static const int kScoreMatchShopFieldNumber = 8;
  inline const ::PB::ScoreMatchShopData& score_match_shop() const;
  inline ::PB::ScoreMatchShopData* mutable_score_match_shop();
  inline ::PB::ScoreMatchShopData* release_score_match_shop();
  inline void set_allocated_score_match_shop(::PB::ScoreMatchShopData* score_match_shop);

  // optional .PB.SevenDayShopData seven_day_shop = 9;
  inline bool has_seven_day_shop() const;
  inline void clear_seven_day_shop();
  static const int kSevenDayShopFieldNumber = 9;
  inline const ::PB::SevenDayShopData& seven_day_shop() const;
  inline ::PB::SevenDayShopData* mutable_seven_day_shop();
  inline ::PB::SevenDayShopData* release_seven_day_shop();
  inline void set_allocated_seven_day_shop(::PB::SevenDayShopData* seven_day_shop);

  // optional .PB.LevelGiftShopData level_gift_shop = 10;
  inline bool has_level_gift_shop() const;
  inline void clear_level_gift_shop();
  static const int kLevelGiftShopFieldNumber = 10;
  inline const ::PB::LevelGiftShopData& level_gift_shop() const;
  inline ::PB::LevelGiftShopData* mutable_level_gift_shop();
  inline ::PB::LevelGiftShopData* release_level_gift_shop();
  inline void set_allocated_level_gift_shop(::PB::LevelGiftShopData* level_gift_shop);

  // optional .PB.EndlessLandShopData endless_land_shop = 11;
  inline bool has_endless_land_shop() const;
  inline void clear_endless_land_shop();
  static const int kEndlessLandShopFieldNumber = 11;
  inline const ::PB::EndlessLandShopData& endless_land_shop() const;
  inline ::PB::EndlessLandShopData* mutable_endless_land_shop();
  inline ::PB::EndlessLandShopData* release_endless_land_shop();
  inline void set_allocated_endless_land_shop(::PB::EndlessLandShopData* endless_land_shop);

  // optional .PB.DirectBuyShopData direct_buy_shop = 12;
  inline bool has_direct_buy_shop() const;
  inline void clear_direct_buy_shop();
  static const int kDirectBuyShopFieldNumber = 12;
  inline const ::PB::DirectBuyShopData& direct_buy_shop() const;
  inline ::PB::DirectBuyShopData* mutable_direct_buy_shop();
  inline ::PB::DirectBuyShopData* release_direct_buy_shop();
  inline void set_allocated_direct_buy_shop(::PB::DirectBuyShopData* direct_buy_shop);

  // optional .PB.ExchangeShopData exchange_shop = 13;
  inline bool has_exchange_shop() const;
  inline void clear_exchange_shop();
  static const int kExchangeShopFieldNumber = 13;
  inline const ::PB::ExchangeShopData& exchange_shop() const;
  inline ::PB::ExchangeShopData* mutable_exchange_shop();
  inline ::PB::ExchangeShopData* release_exchange_shop();
  inline void set_allocated_exchange_shop(::PB::ExchangeShopData* exchange_shop);

  // optional .PB.RecommendShopData recommend_shop = 14;
  inline bool has_recommend_shop() const;
  inline void clear_recommend_shop();
  static const int kRecommendShopFieldNumber = 14;
  inline const ::PB::RecommendShopData& recommend_shop() const;
  inline ::PB::RecommendShopData* mutable_recommend_shop();
  inline ::PB::RecommendShopData* release_recommend_shop();
  inline void set_allocated_recommend_shop(::PB::RecommendShopData* recommend_shop);

  // optional .PB.TeamDungeonShop teamdungeon_shop = 15;
  inline bool has_teamdungeon_shop() const;
  inline void clear_teamdungeon_shop();
  static const int kTeamdungeonShopFieldNumber = 15;
  inline const ::PB::TeamDungeonShop& teamdungeon_shop() const;
  inline ::PB::TeamDungeonShop* mutable_teamdungeon_shop();
  inline ::PB::TeamDungeonShop* release_teamdungeon_shop();
  inline void set_allocated_teamdungeon_shop(::PB::TeamDungeonShop* teamdungeon_shop);

  // optional .PB.ChristmasShop christmas_shop = 16;
  inline bool has_christmas_shop() const;
  inline void clear_christmas_shop();
  static const int kChristmasShopFieldNumber = 16;
  inline const ::PB::ChristmasShop& christmas_shop() const;
  inline ::PB::ChristmasShop* mutable_christmas_shop();
  inline ::PB::ChristmasShop* release_christmas_shop();
  inline void set_allocated_christmas_shop(::PB::ChristmasShop* christmas_shop);

  // optional .PB.CrystalShop crystal_shop = 17;
  inline bool has_crystal_shop() const;
  inline void clear_crystal_shop();
  static const int kCrystalShopFieldNumber = 17;
  inline const ::PB::CrystalShop& crystal_shop() const;
  inline ::PB::CrystalShop* mutable_crystal_shop();
  inline ::PB::CrystalShop* release_crystal_shop();
  inline void set_allocated_crystal_shop(::PB::CrystalShop* crystal_shop);

  // optional .PB.ResourceWarShop resource_war_shop = 18;
  inline bool has_resource_war_shop() const;
  inline void clear_resource_war_shop();
  static const int kResourceWarShopFieldNumber = 18;
  inline const ::PB::ResourceWarShop& resource_war_shop() const;
  inline ::PB::ResourceWarShop* mutable_resource_war_shop();
  inline ::PB::ResourceWarShop* release_resource_war_shop();
  inline void set_allocated_resource_war_shop(::PB::ResourceWarShop* resource_war_shop);

  // optional .PB.GMShopData gm_shop = 19;
  inline bool has_gm_shop() const;
  inline void clear_gm_shop();
  static const int kGmShopFieldNumber = 19;
  inline const ::PB::GMShopData& gm_shop() const;
  inline ::PB::GMShopData* mutable_gm_shop();
  inline ::PB::GMShopData* release_gm_shop();
  inline void set_allocated_gm_shop(::PB::GMShopData* gm_shop);

  // @@protoc_insertion_point(class_scope:PB.RoleShopInfo)
 private:
  inline void set_has_hero_shop();
  inline void clear_has_hero_shop();
  inline void set_has_guild_shop();
  inline void clear_has_guild_shop();
  inline void set_has_mall_shop();
  inline void clear_has_mall_shop();
  inline void set_has_tower_shop();
  inline void clear_has_tower_shop();
  inline void set_has_arena_shop();
  inline void clear_has_arena_shop();
  inline void set_has_awaken_shop();
  inline void clear_has_awaken_shop();
  inline void set_has_fairy_shop();
  inline void clear_has_fairy_shop();
  inline void set_has_score_match_shop();
  inline void clear_has_score_match_shop();
  inline void set_has_seven_day_shop();
  inline void clear_has_seven_day_shop();
  inline void set_has_level_gift_shop();
  inline void clear_has_level_gift_shop();
  inline void set_has_endless_land_shop();
  inline void clear_has_endless_land_shop();
  inline void set_has_direct_buy_shop();
  inline void clear_has_direct_buy_shop();
  inline void set_has_exchange_shop();
  inline void clear_has_exchange_shop();
  inline void set_has_recommend_shop();
  inline void clear_has_recommend_shop();
  inline void set_has_teamdungeon_shop();
  inline void clear_has_teamdungeon_shop();
  inline void set_has_christmas_shop();
  inline void clear_has_christmas_shop();
  inline void set_has_crystal_shop();
  inline void clear_has_crystal_shop();
  inline void set_has_resource_war_shop();
  inline void clear_has_resource_war_shop();
  inline void set_has_gm_shop();
  inline void clear_has_gm_shop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::HeroShopData* hero_shop_;
  ::PB::GuildShopData* guild_shop_;
  ::PB::MallShopData* mall_shop_;
  ::PB::TowerShopData* tower_shop_;
  ::PB::ArenaShopData* arena_shop_;
  ::PB::AwakenShopData* awaken_shop_;
  ::PB::FairyShopData* fairy_shop_;
  ::PB::ScoreMatchShopData* score_match_shop_;
  ::PB::SevenDayShopData* seven_day_shop_;
  ::PB::LevelGiftShopData* level_gift_shop_;
  ::PB::EndlessLandShopData* endless_land_shop_;
  ::PB::DirectBuyShopData* direct_buy_shop_;
  ::PB::ExchangeShopData* exchange_shop_;
  ::PB::RecommendShopData* recommend_shop_;
  ::PB::TeamDungeonShop* teamdungeon_shop_;
  ::PB::ChristmasShop* christmas_shop_;
  ::PB::CrystalShop* crystal_shop_;
  ::PB::ResourceWarShop* resource_war_shop_;
  ::PB::GMShopData* gm_shop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class SpiritData : public ::google::protobuf::Message {
 public:
  SpiritData();
  virtual ~SpiritData();

  SpiritData(const SpiritData& from);

  inline SpiritData& operator=(const SpiritData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiritData& default_instance();

  void Swap(SpiritData* other);

  // implements Message ----------------------------------------------

  SpiritData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiritData& from);
  void MergeFrom(const SpiritData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 enhance_level = 2;
  inline bool has_enhance_level() const;
  inline void clear_enhance_level();
  static const int kEnhanceLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 enhance_level() const;
  inline void set_enhance_level(::google::protobuf::uint32 value);

  // optional uint32 train_stage = 3;
  inline bool has_train_stage() const;
  inline void clear_train_stage();
  static const int kTrainStageFieldNumber = 3;
  inline ::google::protobuf::uint32 train_stage() const;
  inline void set_train_stage(::google::protobuf::uint32 value);

  // optional uint32 train_times = 4;
  inline bool has_train_times() const;
  inline void clear_train_times();
  static const int kTrainTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 train_times() const;
  inline void set_train_times(::google::protobuf::uint32 value);

  // optional uint32 star = 5;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 5;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.SpiritData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_enhance_level();
  inline void clear_has_enhance_level();
  inline void set_has_train_stage();
  inline void clear_has_train_stage();
  inline void set_has_train_times();
  inline void clear_has_train_times();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 enhance_level_;
  ::google::protobuf::uint32 train_stage_;
  ::google::protobuf::uint32 train_times_;
  ::google::protobuf::uint32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SpiritData* default_instance_;
};
// -------------------------------------------------------------------

class SpiritPokedex : public ::google::protobuf::Message {
 public:
  SpiritPokedex();
  virtual ~SpiritPokedex();

  SpiritPokedex(const SpiritPokedex& from);

  inline SpiritPokedex& operator=(const SpiritPokedex& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpiritPokedex& default_instance();

  void Swap(SpiritPokedex* other);

  // implements Message ----------------------------------------------

  SpiritPokedex* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpiritPokedex& from);
  void MergeFrom(const SpiritPokedex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.SpiritPokedex)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SpiritPokedex* default_instance_;
};
// -------------------------------------------------------------------

class RoleSpiritInfo : public ::google::protobuf::Message {
 public:
  RoleSpiritInfo();
  virtual ~RoleSpiritInfo();

  RoleSpiritInfo(const RoleSpiritInfo& from);

  inline RoleSpiritInfo& operator=(const RoleSpiritInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSpiritInfo& default_instance();

  void Swap(RoleSpiritInfo* other);

  // implements Message ----------------------------------------------

  RoleSpiritInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSpiritInfo& from);
  void MergeFrom(const RoleSpiritInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 cur_use_spirit_id = 3;
  inline bool has_cur_use_spirit_id() const;
  inline void clear_cur_use_spirit_id();
  static const int kCurUseSpiritIdFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_use_spirit_id() const;
  inline void set_cur_use_spirit_id(::google::protobuf::uint32 value);

  // repeated .PB.SpiritData spirit_list = 4;
  inline int spirit_list_size() const;
  inline void clear_spirit_list();
  static const int kSpiritListFieldNumber = 4;
  inline const ::PB::SpiritData& spirit_list(int index) const;
  inline ::PB::SpiritData* mutable_spirit_list(int index);
  inline ::PB::SpiritData* add_spirit_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SpiritData >&
      spirit_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SpiritData >*
      mutable_spirit_list();

  // repeated .PB.SpiritPokedex pokedex_list = 5;
  inline int pokedex_list_size() const;
  inline void clear_pokedex_list();
  static const int kPokedexListFieldNumber = 5;
  inline const ::PB::SpiritPokedex& pokedex_list(int index) const;
  inline ::PB::SpiritPokedex* mutable_pokedex_list(int index);
  inline ::PB::SpiritPokedex* add_pokedex_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SpiritPokedex >&
      pokedex_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SpiritPokedex >*
      mutable_pokedex_list();

  // @@protoc_insertion_point(class_scope:PB.RoleSpiritInfo)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_cur_use_spirit_id();
  inline void clear_has_cur_use_spirit_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stage_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::RepeatedPtrField< ::PB::SpiritData > spirit_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::SpiritPokedex > pokedex_list_;
  ::google::protobuf::uint32 cur_use_spirit_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleSpiritInfo* default_instance_;
};
// -------------------------------------------------------------------

class FriendData : public ::google::protobuf::Message {
 public:
  FriendData();
  virtual ~FriendData();

  FriendData(const FriendData& from);

  inline FriendData& operator=(const FriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FriendData& default_instance();

  void Swap(FriendData* other);

  // implements Message ----------------------------------------------

  FriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FriendData& from);
  void MergeFrom(const FriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // required uint32 is_give_energy = 2;
  inline bool has_is_give_energy() const;
  inline void clear_is_give_energy();
  static const int kIsGiveEnergyFieldNumber = 2;
  inline ::google::protobuf::uint32 is_give_energy() const;
  inline void set_is_give_energy(::google::protobuf::uint32 value);

  // required uint32 get_energy_state = 3;
  inline bool has_get_energy_state() const;
  inline void clear_get_energy_state();
  static const int kGetEnergyStateFieldNumber = 3;
  inline ::google::protobuf::uint32 get_energy_state() const;
  inline void set_get_energy_state(::google::protobuf::uint32 value);

  // optional uint32 help_battle_times = 4;
  inline bool has_help_battle_times() const;
  inline void clear_help_battle_times();
  static const int kHelpBattleTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 help_battle_times() const;
  inline void set_help_battle_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.FriendData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_is_give_energy();
  inline void clear_has_is_give_energy();
  inline void set_has_get_energy_state();
  inline void clear_has_get_energy_state();
  inline void set_has_help_battle_times();
  inline void clear_has_help_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 is_give_energy_;
  ::google::protobuf::uint32 get_energy_state_;
  ::google::protobuf::uint32 help_battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static FriendData* default_instance_;
};
// -------------------------------------------------------------------

class RoleFriendData : public ::google::protobuf::Message {
 public:
  RoleFriendData();
  virtual ~RoleFriendData();

  RoleFriendData(const RoleFriendData& from);

  inline RoleFriendData& operator=(const RoleFriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleFriendData& default_instance();

  void Swap(RoleFriendData* other);

  // implements Message ----------------------------------------------

  RoleFriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleFriendData& from);
  void MergeFrom(const RoleFriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.FriendData friend_list = 1;
  inline int friend_list_size() const;
  inline void clear_friend_list();
  static const int kFriendListFieldNumber = 1;
  inline const ::PB::FriendData& friend_list(int index) const;
  inline ::PB::FriendData* mutable_friend_list(int index);
  inline ::PB::FriendData* add_friend_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::FriendData >&
      friend_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::FriendData >*
      mutable_friend_list();

  // repeated uint32 black_list = 2;
  inline int black_list_size() const;
  inline void clear_black_list();
  static const int kBlackListFieldNumber = 2;
  inline ::google::protobuf::uint32 black_list(int index) const;
  inline void set_black_list(int index, ::google::protobuf::uint32 value);
  inline void add_black_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      black_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_black_list();

  // repeated uint32 apply_list = 3;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 3;
  inline ::google::protobuf::uint32 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint32 value);
  inline void add_apply_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_apply_list();

  // required uint32 get_energy_times = 4;
  inline bool has_get_energy_times() const;
  inline void clear_get_energy_times();
  static const int kGetEnergyTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 get_energy_times() const;
  inline void set_get_energy_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleFriendData)
 private:
  inline void set_has_get_energy_times();
  inline void clear_has_get_energy_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::FriendData > friend_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > black_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > apply_list_;
  ::google::protobuf::uint32 get_energy_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleFriendData* default_instance_;
};
// -------------------------------------------------------------------

class RoleRebelInfo : public ::google::protobuf::Message {
 public:
  RoleRebelInfo();
  virtual ~RoleRebelInfo();

  RoleRebelInfo(const RoleRebelInfo& from);

  inline RoleRebelInfo& operator=(const RoleRebelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRebelInfo& default_instance();

  void Swap(RoleRebelInfo* other);

  // implements Message ----------------------------------------------

  RoleRebelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRebelInfo& from);
  void MergeFrom(const RoleRebelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rebel_level = 1;
  inline bool has_rebel_level() const;
  inline void clear_rebel_level();
  static const int kRebelLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 rebel_level() const;
  inline void set_rebel_level(::google::protobuf::uint32 value);

  // required uint32 today_exploit = 2;
  inline bool has_today_exploit() const;
  inline void clear_today_exploit();
  static const int kTodayExploitFieldNumber = 2;
  inline ::google::protobuf::uint32 today_exploit() const;
  inline void set_today_exploit(::google::protobuf::uint32 value);

  // required uint32 today_damage = 3;
  inline bool has_today_damage() const;
  inline void clear_today_damage();
  static const int kTodayDamageFieldNumber = 3;
  inline ::google::protobuf::uint32 today_damage() const;
  inline void set_today_damage(::google::protobuf::uint32 value);

  // repeated uint32 reward_get_record_list = 4;
  inline int reward_get_record_list_size() const;
  inline void clear_reward_get_record_list();
  static const int kRewardGetRecordListFieldNumber = 4;
  inline ::google::protobuf::uint32 reward_get_record_list(int index) const;
  inline void set_reward_get_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_reward_get_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_get_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_get_record_list();

  // required uint32 is_already_share = 5;
  inline bool has_is_already_share() const;
  inline void clear_is_already_share();
  static const int kIsAlreadyShareFieldNumber = 5;
  inline ::google::protobuf::uint32 is_already_share() const;
  inline void set_is_already_share(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleRebelInfo)
 private:
  inline void set_has_rebel_level();
  inline void clear_has_rebel_level();
  inline void set_has_today_exploit();
  inline void clear_has_today_exploit();
  inline void set_has_today_damage();
  inline void clear_has_today_damage();
  inline void set_has_is_already_share();
  inline void clear_has_is_already_share();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rebel_level_;
  ::google::protobuf::uint32 today_exploit_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_get_record_list_;
  ::google::protobuf::uint32 today_damage_;
  ::google::protobuf::uint32 is_already_share_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleRebelInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleDuobaoInfo : public ::google::protobuf::Message {
 public:
  RoleDuobaoInfo();
  virtual ~RoleDuobaoInfo();

  RoleDuobaoInfo(const RoleDuobaoInfo& from);

  inline RoleDuobaoInfo& operator=(const RoleDuobaoInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDuobaoInfo& default_instance();

  void Swap(RoleDuobaoInfo* other);

  // implements Message ----------------------------------------------

  RoleDuobaoInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDuobaoInfo& from);
  void MergeFrom(const RoleDuobaoInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 peace_over_time = 1;
  inline bool has_peace_over_time() const;
  inline void clear_peace_over_time();
  static const int kPeaceOverTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 peace_over_time() const;
  inline void set_peace_over_time(::google::protobuf::uint32 value);

  // repeated uint32 doubao_times_list = 2;
  inline int doubao_times_list_size() const;
  inline void clear_doubao_times_list();
  static const int kDoubaoTimesListFieldNumber = 2;
  inline ::google::protobuf::uint32 doubao_times_list(int index) const;
  inline void set_doubao_times_list(int index, ::google::protobuf::uint32 value);
  inline void add_doubao_times_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      doubao_times_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_doubao_times_list();

  // optional uint32 daily_duobao_times = 3;
  inline bool has_daily_duobao_times() const;
  inline void clear_daily_duobao_times();
  static const int kDailyDuobaoTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 daily_duobao_times() const;
  inline void set_daily_duobao_times(::google::protobuf::uint32 value);

  // repeated uint32 pregross_reward_record = 4;
  inline int pregross_reward_record_size() const;
  inline void clear_pregross_reward_record();
  static const int kPregrossRewardRecordFieldNumber = 4;
  inline ::google::protobuf::uint32 pregross_reward_record(int index) const;
  inline void set_pregross_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_pregross_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pregross_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pregross_reward_record();

  // @@protoc_insertion_point(class_scope:PB.RoleDuobaoInfo)
 private:
  inline void set_has_peace_over_time();
  inline void clear_has_peace_over_time();
  inline void set_has_daily_duobao_times();
  inline void clear_has_daily_duobao_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > doubao_times_list_;
  ::google::protobuf::uint32 peace_over_time_;
  ::google::protobuf::uint32 daily_duobao_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pregross_reward_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleDuobaoInfo* default_instance_;
};
// -------------------------------------------------------------------

class AchievementData : public ::google::protobuf::Message {
 public:
  AchievementData();
  virtual ~AchievementData();

  AchievementData(const AchievementData& from);

  inline AchievementData& operator=(const AchievementData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AchievementData& default_instance();

  void Swap(AchievementData* other);

  // implements Message ----------------------------------------------

  AchievementData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AchievementData& from);
  void MergeFrom(const AchievementData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // required uint32 cur_reward_level = 4;
  inline bool has_cur_reward_level() const;
  inline void clear_cur_reward_level();
  static const int kCurRewardLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_reward_level() const;
  inline void set_cur_reward_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.AchievementData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_cur_reward_level();
  inline void clear_has_cur_reward_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 cur_reward_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AchievementData* default_instance_;
};
// -------------------------------------------------------------------

class RoleAchievemntInfo : public ::google::protobuf::Message {
 public:
  RoleAchievemntInfo();
  virtual ~RoleAchievemntInfo();

  RoleAchievemntInfo(const RoleAchievemntInfo& from);

  inline RoleAchievemntInfo& operator=(const RoleAchievemntInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleAchievemntInfo& default_instance();

  void Swap(RoleAchievemntInfo* other);

  // implements Message ----------------------------------------------

  RoleAchievemntInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleAchievemntInfo& from);
  void MergeFrom(const RoleAchievemntInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.AchievementData achievement_list = 1;
  inline int achievement_list_size() const;
  inline void clear_achievement_list();
  static const int kAchievementListFieldNumber = 1;
  inline const ::PB::AchievementData& achievement_list(int index) const;
  inline ::PB::AchievementData* mutable_achievement_list(int index);
  inline ::PB::AchievementData* add_achievement_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::AchievementData >&
      achievement_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::AchievementData >*
      mutable_achievement_list();

  // @@protoc_insertion_point(class_scope:PB.RoleAchievemntInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::AchievementData > achievement_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleAchievemntInfo* default_instance_;
};
// -------------------------------------------------------------------

class DailyMission : public ::google::protobuf::Message {
 public:
  DailyMission();
  virtual ~DailyMission();

  DailyMission(const DailyMission& from);

  inline DailyMission& operator=(const DailyMission& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyMission& default_instance();

  void Swap(DailyMission* other);

  // implements Message ----------------------------------------------

  DailyMission* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DailyMission& from);
  void MergeFrom(const DailyMission& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 is_get_reward = 2;
  inline bool has_is_get_reward() const;
  inline void clear_is_get_reward();
  static const int kIsGetRewardFieldNumber = 2;
  inline ::google::protobuf::uint32 is_get_reward() const;
  inline void set_is_get_reward(::google::protobuf::uint32 value);

  // required uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.DailyMission)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_is_get_reward();
  inline void clear_has_is_get_reward();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 is_get_reward_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static DailyMission* default_instance_;
};
// -------------------------------------------------------------------

class RoleDailyMissionInfo : public ::google::protobuf::Message {
 public:
  RoleDailyMissionInfo();
  virtual ~RoleDailyMissionInfo();

  RoleDailyMissionInfo(const RoleDailyMissionInfo& from);

  inline RoleDailyMissionInfo& operator=(const RoleDailyMissionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDailyMissionInfo& default_instance();

  void Swap(RoleDailyMissionInfo* other);

  // implements Message ----------------------------------------------

  RoleDailyMissionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDailyMissionInfo& from);
  void MergeFrom(const RoleDailyMissionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 point = 1;
  inline bool has_point() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline ::google::protobuf::uint32 point() const;
  inline void set_point(::google::protobuf::uint32 value);

  // repeated uint32 point_reward_record = 2;
  inline int point_reward_record_size() const;
  inline void clear_point_reward_record();
  static const int kPointRewardRecordFieldNumber = 2;
  inline ::google::protobuf::uint32 point_reward_record(int index) const;
  inline void set_point_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_point_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      point_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_point_reward_record();

  // repeated .PB.DailyMission mission_list = 3;
  inline int mission_list_size() const;
  inline void clear_mission_list();
  static const int kMissionListFieldNumber = 3;
  inline const ::PB::DailyMission& mission_list(int index) const;
  inline ::PB::DailyMission* mutable_mission_list(int index);
  inline ::PB::DailyMission* add_mission_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::DailyMission >&
      mission_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::DailyMission >*
      mutable_mission_list();

  // @@protoc_insertion_point(class_scope:PB.RoleDailyMissionInfo)
 private:
  inline void set_has_point();
  inline void clear_has_point();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > point_reward_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::DailyMission > mission_list_;
  ::google::protobuf::uint32 point_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleDailyMissionInfo* default_instance_;
};
// -------------------------------------------------------------------

class SkillData : public ::google::protobuf::Message {
 public:
  SkillData();
  virtual ~SkillData();

  SkillData(const SkillData& from);

  inline SkillData& operator=(const SkillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SkillData& default_instance();

  void Swap(SkillData* other);

  // implements Message ----------------------------------------------

  SkillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SkillData& from);
  void MergeFrom(const SkillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 skill_id = 1;
  inline bool has_skill_id() const;
  inline void clear_skill_id();
  static const int kSkillIdFieldNumber = 1;
  inline ::google::protobuf::uint32 skill_id() const;
  inline void set_skill_id(::google::protobuf::uint32 value);

  // required uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.SkillData)
 private:
  inline void set_has_skill_id();
  inline void clear_has_skill_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SkillData* default_instance_;
};
// -------------------------------------------------------------------

class RoleGuildSkillInfo : public ::google::protobuf::Message {
 public:
  RoleGuildSkillInfo();
  virtual ~RoleGuildSkillInfo();

  RoleGuildSkillInfo(const RoleGuildSkillInfo& from);

  inline RoleGuildSkillInfo& operator=(const RoleGuildSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleGuildSkillInfo& default_instance();

  void Swap(RoleGuildSkillInfo* other);

  // implements Message ----------------------------------------------

  RoleGuildSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleGuildSkillInfo& from);
  void MergeFrom(const RoleGuildSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.SkillData skill_list = 1;
  inline int skill_list_size() const;
  inline void clear_skill_list();
  static const int kSkillListFieldNumber = 1;
  inline const ::PB::SkillData& skill_list(int index) const;
  inline ::PB::SkillData* mutable_skill_list(int index);
  inline ::PB::SkillData* add_skill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SkillData >&
      skill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SkillData >*
      mutable_skill_list();

  // @@protoc_insertion_point(class_scope:PB.RoleGuildSkillInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::SkillData > skill_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleGuildSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleSignInData : public ::google::protobuf::Message {
 public:
  RoleSignInData();
  virtual ~RoleSignInData();

  RoleSignInData(const RoleSignInData& from);

  inline RoleSignInData& operator=(const RoleSignInData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSignInData& default_instance();

  void Swap(RoleSignInData* other);

  // implements Message ----------------------------------------------

  RoleSignInData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSignInData& from);
  void MergeFrom(const RoleSignInData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 cur_sign_in_day = 1;
  inline bool has_cur_sign_in_day() const;
  inline void clear_cur_sign_in_day();
  static const int kCurSignInDayFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_sign_in_day() const;
  inline void set_cur_sign_in_day(::google::protobuf::uint32 value);

  // required uint32 last_sign_in_time = 2;
  inline bool has_last_sign_in_time() const;
  inline void clear_last_sign_in_time();
  static const int kLastSignInTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 last_sign_in_time() const;
  inline void set_last_sign_in_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleSignInData)
 private:
  inline void set_has_cur_sign_in_day();
  inline void clear_has_cur_sign_in_day();
  inline void set_has_last_sign_in_time();
  inline void clear_has_last_sign_in_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_sign_in_day_;
  ::google::protobuf::uint32 last_sign_in_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleSignInData* default_instance_;
};
// -------------------------------------------------------------------

class LoginRewardData : public ::google::protobuf::Message {
 public:
  LoginRewardData();
  virtual ~LoginRewardData();

  LoginRewardData(const LoginRewardData& from);

  inline LoginRewardData& operator=(const LoginRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRewardData& default_instance();

  void Swap(LoginRewardData* other);

  // implements Message ----------------------------------------------

  LoginRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRewardData& from);
  void MergeFrom(const LoginRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 reward_record_list = 1;
  inline int reward_record_list_size() const;
  inline void clear_reward_record_list();
  static const int kRewardRecordListFieldNumber = 1;
  inline ::google::protobuf::uint32 reward_record_list(int index) const;
  inline void set_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_record_list();

  // optional uint32 login_days = 2;
  inline bool has_login_days() const;
  inline void clear_login_days();
  static const int kLoginDaysFieldNumber = 2;
  inline ::google::protobuf::uint32 login_days() const;
  inline void set_login_days(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.LoginRewardData)
 private:
  inline void set_has_login_days();
  inline void clear_has_login_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_record_list_;
  ::google::protobuf::uint32 login_days_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LoginRewardData* default_instance_;
};
// -------------------------------------------------------------------

class RoleKingMatchData : public ::google::protobuf::Message {
 public:
  RoleKingMatchData();
  virtual ~RoleKingMatchData();

  RoleKingMatchData(const RoleKingMatchData& from);

  inline RoleKingMatchData& operator=(const RoleKingMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleKingMatchData& default_instance();

  void Swap(RoleKingMatchData* other);

  // implements Message ----------------------------------------------

  RoleKingMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleKingMatchData& from);
  void MergeFrom(const RoleKingMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_season = 1;
  inline bool has_last_season() const;
  inline void clear_last_season();
  static const int kLastSeasonFieldNumber = 1;
  inline ::google::protobuf::uint32 last_season() const;
  inline void set_last_season(::google::protobuf::uint32 value);

  // optional uint32 total_battle_times = 2;
  inline bool has_total_battle_times() const;
  inline void clear_total_battle_times();
  static const int kTotalBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 total_battle_times() const;
  inline void set_total_battle_times(::google::protobuf::uint32 value);

  // optional uint32 total_win_times = 3;
  inline bool has_total_win_times() const;
  inline void clear_total_win_times();
  static const int kTotalWinTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 total_win_times() const;
  inline void set_total_win_times(::google::protobuf::uint32 value);

  // optional uint32 today_win_times = 4;
  inline bool has_today_win_times() const;
  inline void clear_today_win_times();
  static const int kTodayWinTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 today_win_times() const;
  inline void set_today_win_times(::google::protobuf::uint32 value);

  // optional uint32 stage_level = 5;
  inline bool has_stage_level() const;
  inline void clear_stage_level();
  static const int kStageLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 stage_level() const;
  inline void set_stage_level(::google::protobuf::uint32 value);

  // optional uint32 context = 6;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 6;
  inline ::google::protobuf::uint32 context() const;
  inline void set_context(::google::protobuf::uint32 value);

  // optional uint32 history_stage_level = 7;
  inline bool has_history_stage_level() const;
  inline void clear_history_stage_level();
  static const int kHistoryStageLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 history_stage_level() const;
  inline void set_history_stage_level(::google::protobuf::uint32 value);

  // repeated uint32 season_task_reward_record = 8;
  inline int season_task_reward_record_size() const;
  inline void clear_season_task_reward_record();
  static const int kSeasonTaskRewardRecordFieldNumber = 8;
  inline ::google::protobuf::uint32 season_task_reward_record(int index) const;
  inline void set_season_task_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_season_task_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      season_task_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_season_task_reward_record();

  // @@protoc_insertion_point(class_scope:PB.RoleKingMatchData)
 private:
  inline void set_has_last_season();
  inline void clear_has_last_season();
  inline void set_has_total_battle_times();
  inline void clear_has_total_battle_times();
  inline void set_has_total_win_times();
  inline void clear_has_total_win_times();
  inline void set_has_today_win_times();
  inline void clear_has_today_win_times();
  inline void set_has_stage_level();
  inline void clear_has_stage_level();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_history_stage_level();
  inline void clear_has_history_stage_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 last_season_;
  ::google::protobuf::uint32 total_battle_times_;
  ::google::protobuf::uint32 total_win_times_;
  ::google::protobuf::uint32 today_win_times_;
  ::google::protobuf::uint32 stage_level_;
  ::google::protobuf::uint32 context_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > season_task_reward_record_;
  ::google::protobuf::uint32 history_stage_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleKingMatchData* default_instance_;
};
// -------------------------------------------------------------------

class PlayerTeamDungeonData : public ::google::protobuf::Message {
 public:
  PlayerTeamDungeonData();
  virtual ~PlayerTeamDungeonData();

  PlayerTeamDungeonData(const PlayerTeamDungeonData& from);

  inline PlayerTeamDungeonData& operator=(const PlayerTeamDungeonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerTeamDungeonData& default_instance();

  void Swap(PlayerTeamDungeonData* other);

  // implements Message ----------------------------------------------

  PlayerTeamDungeonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerTeamDungeonData& from);
  void MergeFrom(const PlayerTeamDungeonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 today_battle_times = 1;
  inline bool has_today_battle_times() const;
  inline void clear_today_battle_times();
  static const int kTodayBattleTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 today_battle_times() const;
  inline void set_today_battle_times(::google::protobuf::uint32 value);

  // repeated uint32 pass_dungeon_list = 2;
  inline int pass_dungeon_list_size() const;
  inline void clear_pass_dungeon_list();
  static const int kPassDungeonListFieldNumber = 2;
  inline ::google::protobuf::uint32 pass_dungeon_list(int index) const;
  inline void set_pass_dungeon_list(int index, ::google::protobuf::uint32 value);
  inline void add_pass_dungeon_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pass_dungeon_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pass_dungeon_list();

  // optional uint32 today_kill_reward_times = 3;
  inline bool has_today_kill_reward_times() const;
  inline void clear_today_kill_reward_times();
  static const int kTodayKillRewardTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 today_kill_reward_times() const;
  inline void set_today_kill_reward_times(::google::protobuf::uint32 value);

  // optional uint32 today_mvp_reward_times = 4;
  inline bool has_today_mvp_reward_times() const;
  inline void clear_today_mvp_reward_times();
  static const int kTodayMvpRewardTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 today_mvp_reward_times() const;
  inline void set_today_mvp_reward_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.PlayerTeamDungeonData)
 private:
  inline void set_has_today_battle_times();
  inline void clear_has_today_battle_times();
  inline void set_has_today_kill_reward_times();
  inline void clear_has_today_kill_reward_times();
  inline void set_has_today_mvp_reward_times();
  inline void clear_has_today_mvp_reward_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pass_dungeon_list_;
  ::google::protobuf::uint32 today_battle_times_;
  ::google::protobuf::uint32 today_kill_reward_times_;
  ::google::protobuf::uint32 today_mvp_reward_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static PlayerTeamDungeonData* default_instance_;
};
// -------------------------------------------------------------------

class CardGroupData : public ::google::protobuf::Message {
 public:
  CardGroupData();
  virtual ~CardGroupData();

  CardGroupData(const CardGroupData& from);

  inline CardGroupData& operator=(const CardGroupData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CardGroupData& default_instance();

  void Swap(CardGroupData* other);

  // implements Message ----------------------------------------------

  CardGroupData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CardGroupData& from);
  void MergeFrom(const CardGroupData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 card_id = 1;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 card_id() const;
  inline void set_card_id(::google::protobuf::uint32 value);

  // optional uint32 is_already_open = 2;
  inline bool has_is_already_open() const;
  inline void clear_is_already_open();
  static const int kIsAlreadyOpenFieldNumber = 2;
  inline ::google::protobuf::uint32 is_already_open() const;
  inline void set_is_already_open(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.CardGroupData)
 private:
  inline void set_has_card_id();
  inline void clear_has_card_id();
  inline void set_has_is_already_open();
  inline void clear_has_is_already_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 is_already_open_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CardGroupData* default_instance_;
};
// -------------------------------------------------------------------

class CollectionGroup : public ::google::protobuf::Message {
 public:
  CollectionGroup();
  virtual ~CollectionGroup();

  CollectionGroup(const CollectionGroup& from);

  inline CollectionGroup& operator=(const CollectionGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionGroup& default_instance();

  void Swap(CollectionGroup* other);

  // implements Message ----------------------------------------------

  CollectionGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionGroup& from);
  void MergeFrom(const CollectionGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.CollectionGroup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 star_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CollectionGroup* default_instance_;
};
// -------------------------------------------------------------------

class CollectionBook : public ::google::protobuf::Message {
 public:
  CollectionBook();
  virtual ~CollectionBook();

  CollectionBook(const CollectionBook& from);

  inline CollectionBook& operator=(const CollectionBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CollectionBook& default_instance();

  void Swap(CollectionBook* other);

  // implements Message ----------------------------------------------

  CollectionBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CollectionBook& from);
  void MergeFrom(const CollectionBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 book_id = 1;
  inline bool has_book_id() const;
  inline void clear_book_id();
  static const int kBookIdFieldNumber = 1;
  inline ::google::protobuf::uint32 book_id() const;
  inline void set_book_id(::google::protobuf::uint32 value);

  // repeated .PB.CollectionGroup collection_group_list = 2;
  inline int collection_group_list_size() const;
  inline void clear_collection_group_list();
  static const int kCollectionGroupListFieldNumber = 2;
  inline const ::PB::CollectionGroup& collection_group_list(int index) const;
  inline ::PB::CollectionGroup* mutable_collection_group_list(int index);
  inline ::PB::CollectionGroup* add_collection_group_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CollectionGroup >&
      collection_group_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CollectionGroup >*
      mutable_collection_group_list();

  // @@protoc_insertion_point(class_scope:PB.CollectionBook)
 private:
  inline void set_has_book_id();
  inline void clear_has_book_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::CollectionGroup > collection_group_list_;
  ::google::protobuf::uint32 book_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CollectionBook* default_instance_;
};
// -------------------------------------------------------------------

class RoleZhanBuData : public ::google::protobuf::Message {
 public:
  RoleZhanBuData();
  virtual ~RoleZhanBuData();

  RoleZhanBuData(const RoleZhanBuData& from);

  inline RoleZhanBuData& operator=(const RoleZhanBuData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleZhanBuData& default_instance();

  void Swap(RoleZhanBuData* other);

  // implements Message ----------------------------------------------

  RoleZhanBuData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleZhanBuData& from);
  void MergeFrom(const RoleZhanBuData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.Card card_list = 1;
  inline int card_list_size() const;
  inline void clear_card_list();
  static const int kCardListFieldNumber = 1;
  inline const ::PB::Card& card_list(int index) const;
  inline ::PB::Card* mutable_card_list(int index);
  inline ::PB::Card* add_card_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Card >&
      card_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Card >*
      mutable_card_list();

  // optional uint32 history_collection_value = 2;
  inline bool has_history_collection_value() const;
  inline void clear_history_collection_value();
  static const int kHistoryCollectionValueFieldNumber = 2;
  inline ::google::protobuf::uint32 history_collection_value() const;
  inline void set_history_collection_value(::google::protobuf::uint32 value);

  // optional uint32 low_card_group_map_idx = 3;
  inline bool has_low_card_group_map_idx() const;
  inline void clear_low_card_group_map_idx();
  static const int kLowCardGroupMapIdxFieldNumber = 3;
  inline ::google::protobuf::uint32 low_card_group_map_idx() const;
  inline void set_low_card_group_map_idx(::google::protobuf::uint32 value);

  // optional uint32 cur_low_card_group_id = 4;
  inline bool has_cur_low_card_group_id() const;
  inline void clear_cur_low_card_group_id();
  static const int kCurLowCardGroupIdFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_low_card_group_id() const;
  inline void set_cur_low_card_group_id(::google::protobuf::uint32 value);

  // optional uint32 low_card_group_last_recover_time = 5;
  inline bool has_low_card_group_last_recover_time() const;
  inline void clear_low_card_group_last_recover_time();
  static const int kLowCardGroupLastRecoverTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 low_card_group_last_recover_time() const;
  inline void set_low_card_group_last_recover_time(::google::protobuf::uint32 value);

  // optional uint32 cur_low_card_group_refresh_times = 6;
  inline bool has_cur_low_card_group_refresh_times() const;
  inline void clear_cur_low_card_group_refresh_times();
  static const int kCurLowCardGroupRefreshTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 cur_low_card_group_refresh_times() const;
  inline void set_cur_low_card_group_refresh_times(::google::protobuf::uint32 value);

  // optional uint32 today_low_card_group_open_card_times = 7;
  inline bool has_today_low_card_group_open_card_times() const;
  inline void clear_today_low_card_group_open_card_times();
  static const int kTodayLowCardGroupOpenCardTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 today_low_card_group_open_card_times() const;
  inline void set_today_low_card_group_open_card_times(::google::protobuf::uint32 value);

  // optional uint32 high_card_group_last_refresh_time = 8;
  inline bool has_high_card_group_last_refresh_time() const;
  inline void clear_high_card_group_last_refresh_time();
  static const int kHighCardGroupLastRefreshTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 high_card_group_last_refresh_time() const;
  inline void set_high_card_group_last_refresh_time(::google::protobuf::uint32 value);

  // repeated .PB.CardGroupData low_card_group = 9;
  inline int low_card_group_size() const;
  inline void clear_low_card_group();
  static const int kLowCardGroupFieldNumber = 9;
  inline const ::PB::CardGroupData& low_card_group(int index) const;
  inline ::PB::CardGroupData* mutable_low_card_group(int index);
  inline ::PB::CardGroupData* add_low_card_group();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >&
      low_card_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >*
      mutable_low_card_group();

  // repeated .PB.CardGroupData high_card_group = 10;
  inline int high_card_group_size() const;
  inline void clear_high_card_group();
  static const int kHighCardGroupFieldNumber = 10;
  inline const ::PB::CardGroupData& high_card_group(int index) const;
  inline ::PB::CardGroupData* mutable_high_card_group(int index);
  inline ::PB::CardGroupData* add_high_card_group();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >&
      high_card_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >*
      mutable_high_card_group();

  // repeated .PB.CollectionBook collection_book_list = 11;
  inline int collection_book_list_size() const;
  inline void clear_collection_book_list();
  static const int kCollectionBookListFieldNumber = 11;
  inline const ::PB::CollectionBook& collection_book_list(int index) const;
  inline ::PB::CollectionBook* mutable_collection_book_list(int index);
  inline ::PB::CollectionBook* add_collection_book_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CollectionBook >&
      collection_book_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CollectionBook >*
      mutable_collection_book_list();

  // optional uint32 achievement_level = 12;
  inline bool has_achievement_level() const;
  inline void clear_achievement_level();
  static const int kAchievementLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 achievement_level() const;
  inline void set_achievement_level(::google::protobuf::uint32 value);

  // optional uint32 today_low_card_group_cost_refresh_times = 13;
  inline bool has_today_low_card_group_cost_refresh_times() const;
  inline void clear_today_low_card_group_cost_refresh_times();
  static const int kTodayLowCardGroupCostRefreshTimesFieldNumber = 13;
  inline ::google::protobuf::uint32 today_low_card_group_cost_refresh_times() const;
  inline void set_today_low_card_group_cost_refresh_times(::google::protobuf::uint32 value);

  // optional uint32 today_high_card_group_cost_refresh_times = 14;
  inline bool has_today_high_card_group_cost_refresh_times() const;
  inline void clear_today_high_card_group_cost_refresh_times();
  static const int kTodayHighCardGroupCostRefreshTimesFieldNumber = 14;
  inline ::google::protobuf::uint32 today_high_card_group_cost_refresh_times() const;
  inline void set_today_high_card_group_cost_refresh_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleZhanBuData)
 private:
  inline void set_has_history_collection_value();
  inline void clear_has_history_collection_value();
  inline void set_has_low_card_group_map_idx();
  inline void clear_has_low_card_group_map_idx();
  inline void set_has_cur_low_card_group_id();
  inline void clear_has_cur_low_card_group_id();
  inline void set_has_low_card_group_last_recover_time();
  inline void clear_has_low_card_group_last_recover_time();
  inline void set_has_cur_low_card_group_refresh_times();
  inline void clear_has_cur_low_card_group_refresh_times();
  inline void set_has_today_low_card_group_open_card_times();
  inline void clear_has_today_low_card_group_open_card_times();
  inline void set_has_high_card_group_last_refresh_time();
  inline void clear_has_high_card_group_last_refresh_time();
  inline void set_has_achievement_level();
  inline void clear_has_achievement_level();
  inline void set_has_today_low_card_group_cost_refresh_times();
  inline void clear_has_today_low_card_group_cost_refresh_times();
  inline void set_has_today_high_card_group_cost_refresh_times();
  inline void clear_has_today_high_card_group_cost_refresh_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::Card > card_list_;
  ::google::protobuf::uint32 history_collection_value_;
  ::google::protobuf::uint32 low_card_group_map_idx_;
  ::google::protobuf::uint32 cur_low_card_group_id_;
  ::google::protobuf::uint32 low_card_group_last_recover_time_;
  ::google::protobuf::uint32 cur_low_card_group_refresh_times_;
  ::google::protobuf::uint32 today_low_card_group_open_card_times_;
  ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData > low_card_group_;
  ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData > high_card_group_;
  ::google::protobuf::uint32 high_card_group_last_refresh_time_;
  ::google::protobuf::uint32 achievement_level_;
  ::google::protobuf::RepeatedPtrField< ::PB::CollectionBook > collection_book_list_;
  ::google::protobuf::uint32 today_low_card_group_cost_refresh_times_;
  ::google::protobuf::uint32 today_high_card_group_cost_refresh_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleZhanBuData* default_instance_;
};
// -------------------------------------------------------------------

class WorldLevelTaskData : public ::google::protobuf::Message {
 public:
  WorldLevelTaskData();
  virtual ~WorldLevelTaskData();

  WorldLevelTaskData(const WorldLevelTaskData& from);

  inline WorldLevelTaskData& operator=(const WorldLevelTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldLevelTaskData& default_instance();

  void Swap(WorldLevelTaskData* other);

  // implements Message ----------------------------------------------

  WorldLevelTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldLevelTaskData& from);
  void MergeFrom(const WorldLevelTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 task_id = 1;
  inline bool has_task_id() const;
  inline void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::uint32 task_id() const;
  inline void set_task_id(::google::protobuf::uint32 value);

  // optional uint32 context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline ::google::protobuf::uint32 context() const;
  inline void set_context(::google::protobuf::uint32 value);

  // optional uint32 is_already_take = 3;
  inline bool has_is_already_take() const;
  inline void clear_is_already_take();
  static const int kIsAlreadyTakeFieldNumber = 3;
  inline ::google::protobuf::uint32 is_already_take() const;
  inline void set_is_already_take(::google::protobuf::uint32 value);

  // optional uint32 task_type = 4;
  inline bool has_task_type() const;
  inline void clear_task_type();
  static const int kTaskTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 task_type() const;
  inline void set_task_type(::google::protobuf::uint32 value);

  // optional uint32 task_level = 5;
  inline bool has_task_level() const;
  inline void clear_task_level();
  static const int kTaskLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 task_level() const;
  inline void set_task_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.WorldLevelTaskData)
 private:
  inline void set_has_task_id();
  inline void clear_has_task_id();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_is_already_take();
  inline void clear_has_is_already_take();
  inline void set_has_task_type();
  inline void clear_has_task_type();
  inline void set_has_task_level();
  inline void clear_has_task_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 context_;
  ::google::protobuf::uint32 is_already_take_;
  ::google::protobuf::uint32 task_type_;
  ::google::protobuf::uint32 task_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static WorldLevelTaskData* default_instance_;
};
// -------------------------------------------------------------------

class RoleWorldLevelTaskInfo : public ::google::protobuf::Message {
 public:
  RoleWorldLevelTaskInfo();
  virtual ~RoleWorldLevelTaskInfo();

  RoleWorldLevelTaskInfo(const RoleWorldLevelTaskInfo& from);

  inline RoleWorldLevelTaskInfo& operator=(const RoleWorldLevelTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleWorldLevelTaskInfo& default_instance();

  void Swap(RoleWorldLevelTaskInfo* other);

  // implements Message ----------------------------------------------

  RoleWorldLevelTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleWorldLevelTaskInfo& from);
  void MergeFrom(const RoleWorldLevelTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_already_take_final_reward = 1;
  inline bool has_is_already_take_final_reward() const;
  inline void clear_is_already_take_final_reward();
  static const int kIsAlreadyTakeFinalRewardFieldNumber = 1;
  inline ::google::protobuf::uint32 is_already_take_final_reward() const;
  inline void set_is_already_take_final_reward(::google::protobuf::uint32 value);

  // repeated .PB.WorldLevelTaskData task_event_list = 2;
  inline int task_event_list_size() const;
  inline void clear_task_event_list();
  static const int kTaskEventListFieldNumber = 2;
  inline const ::PB::WorldLevelTaskData& task_event_list(int index) const;
  inline ::PB::WorldLevelTaskData* mutable_task_event_list(int index);
  inline ::PB::WorldLevelTaskData* add_task_event_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::WorldLevelTaskData >&
      task_event_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::WorldLevelTaskData >*
      mutable_task_event_list();

  // @@protoc_insertion_point(class_scope:PB.RoleWorldLevelTaskInfo)
 private:
  inline void set_has_is_already_take_final_reward();
  inline void clear_has_is_already_take_final_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::WorldLevelTaskData > task_event_list_;
  ::google::protobuf::uint32 is_already_take_final_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleWorldLevelTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleHangUpDropData : public ::google::protobuf::Message {
 public:
  RoleHangUpDropData();
  virtual ~RoleHangUpDropData();

  RoleHangUpDropData(const RoleHangUpDropData& from);

  inline RoleHangUpDropData& operator=(const RoleHangUpDropData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHangUpDropData& default_instance();

  void Swap(RoleHangUpDropData* other);

  // implements Message ----------------------------------------------

  RoleHangUpDropData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHangUpDropData& from);
  void MergeFrom(const RoleHangUpDropData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_obtain_reward_time = 1;
  inline bool has_last_obtain_reward_time() const;
  inline void clear_last_obtain_reward_time();
  static const int kLastObtainRewardTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 last_obtain_reward_time() const;
  inline void set_last_obtain_reward_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleHangUpDropData)
 private:
  inline void set_has_last_obtain_reward_time();
  inline void clear_has_last_obtain_reward_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 last_obtain_reward_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleHangUpDropData* default_instance_;
};
// -------------------------------------------------------------------

class RoleSecondInfo : public ::google::protobuf::Message {
 public:
  RoleSecondInfo();
  virtual ~RoleSecondInfo();

  RoleSecondInfo(const RoleSecondInfo& from);

  inline RoleSecondInfo& operator=(const RoleSecondInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSecondInfo& default_instance();

  void Swap(RoleSecondInfo* other);

  // implements Message ----------------------------------------------

  RoleSecondInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSecondInfo& from);
  void MergeFrom(const RoleSecondInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.RolePVPData pvp_data = 1;
  inline bool has_pvp_data() const;
  inline void clear_pvp_data();
  static const int kPvpDataFieldNumber = 1;
  inline const ::PB::RolePVPData& pvp_data() const;
  inline ::PB::RolePVPData* mutable_pvp_data();
  inline ::PB::RolePVPData* release_pvp_data();
  inline void set_allocated_pvp_data(::PB::RolePVPData* pvp_data);

  // optional .PB.RoleTitleInfo title_info = 2;
  inline bool has_title_info() const;
  inline void clear_title_info();
  static const int kTitleInfoFieldNumber = 2;
  inline const ::PB::RoleTitleInfo& title_info() const;
  inline ::PB::RoleTitleInfo* mutable_title_info();
  inline ::PB::RoleTitleInfo* release_title_info();
  inline void set_allocated_title_info(::PB::RoleTitleInfo* title_info);

  // optional .PB.RoleEndlessLandInfo endless_land_info = 3;
  inline bool has_endless_land_info() const;
  inline void clear_endless_land_info();
  static const int kEndlessLandInfoFieldNumber = 3;
  inline const ::PB::RoleEndlessLandInfo& endless_land_info() const;
  inline ::PB::RoleEndlessLandInfo* mutable_endless_land_info();
  inline ::PB::RoleEndlessLandInfo* release_endless_land_info();
  inline void set_allocated_endless_land_info(::PB::RoleEndlessLandInfo* endless_land_info);

  // optional .PB.RoleGuildData guild_data = 4;
  inline bool has_guild_data() const;
  inline void clear_guild_data();
  static const int kGuildDataFieldNumber = 4;
  inline const ::PB::RoleGuildData& guild_data() const;
  inline ::PB::RoleGuildData* mutable_guild_data();
  inline ::PB::RoleGuildData* release_guild_data();
  inline void set_allocated_guild_data(::PB::RoleGuildData* guild_data);

  // optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
  inline bool has_luxury_sign_in_data() const;
  inline void clear_luxury_sign_in_data();
  static const int kLuxurySignInDataFieldNumber = 5;
  inline const ::PB::PlayerLuxurySignInData& luxury_sign_in_data() const;
  inline ::PB::PlayerLuxurySignInData* mutable_luxury_sign_in_data();
  inline ::PB::PlayerLuxurySignInData* release_luxury_sign_in_data();
  inline void set_allocated_luxury_sign_in_data(::PB::PlayerLuxurySignInData* luxury_sign_in_data);

  // optional .PB.PlayerGemInfo gem_info = 6;
  inline bool has_gem_info() const;
  inline void clear_gem_info();
  static const int kGemInfoFieldNumber = 6;
  inline const ::PB::PlayerGemInfo& gem_info() const;
  inline ::PB::PlayerGemInfo* mutable_gem_info();
  inline ::PB::PlayerGemInfo* release_gem_info();
  inline void set_allocated_gem_info(::PB::PlayerGemInfo* gem_info);

  // optional .PB.RoleItemInfo role_item_info = 7;
  inline bool has_role_item_info() const;
  inline void clear_role_item_info();
  static const int kRoleItemInfoFieldNumber = 7;
  inline const ::PB::RoleItemInfo& role_item_info() const;
  inline ::PB::RoleItemInfo* mutable_role_item_info();
  inline ::PB::RoleItemInfo* release_role_item_info();
  inline void set_allocated_role_item_info(::PB::RoleItemInfo* role_item_info);

  // optional .PB.RoleEquipmentInfo role_equipment_info = 8;
  inline bool has_role_equipment_info() const;
  inline void clear_role_equipment_info();
  static const int kRoleEquipmentInfoFieldNumber = 8;
  inline const ::PB::RoleEquipmentInfo& role_equipment_info() const;
  inline ::PB::RoleEquipmentInfo* mutable_role_equipment_info();
  inline ::PB::RoleEquipmentInfo* release_role_equipment_info();
  inline void set_allocated_role_equipment_info(::PB::RoleEquipmentInfo* role_equipment_info);

  // optional .PB.RoleTreasureInfo role_treasure_info = 9;
  inline bool has_role_treasure_info() const;
  inline void clear_role_treasure_info();
  static const int kRoleTreasureInfoFieldNumber = 9;
  inline const ::PB::RoleTreasureInfo& role_treasure_info() const;
  inline ::PB::RoleTreasureInfo* mutable_role_treasure_info();
  inline ::PB::RoleTreasureInfo* release_role_treasure_info();
  inline void set_allocated_role_treasure_info(::PB::RoleTreasureInfo* role_treasure_info);

  // optional .PB.RoleShopInfo role_shop_info = 10;
  inline bool has_role_shop_info() const;
  inline void clear_role_shop_info();
  static const int kRoleShopInfoFieldNumber = 10;
  inline const ::PB::RoleShopInfo& role_shop_info() const;
  inline ::PB::RoleShopInfo* mutable_role_shop_info();
  inline ::PB::RoleShopInfo* release_role_shop_info();
  inline void set_allocated_role_shop_info(::PB::RoleShopInfo* role_shop_info);

  // optional .PB.RoleSpiritInfo role_sprite_info = 11;
  inline bool has_role_sprite_info() const;
  inline void clear_role_sprite_info();
  static const int kRoleSpriteInfoFieldNumber = 11;
  inline const ::PB::RoleSpiritInfo& role_sprite_info() const;
  inline ::PB::RoleSpiritInfo* mutable_role_sprite_info();
  inline ::PB::RoleSpiritInfo* release_role_sprite_info();
  inline void set_allocated_role_sprite_info(::PB::RoleSpiritInfo* role_sprite_info);

  // optional .PB.RoleRebelInfo role_rebel_info = 12;
  inline bool has_role_rebel_info() const;
  inline void clear_role_rebel_info();
  static const int kRoleRebelInfoFieldNumber = 12;
  inline const ::PB::RoleRebelInfo& role_rebel_info() const;
  inline ::PB::RoleRebelInfo* mutable_role_rebel_info();
  inline ::PB::RoleRebelInfo* release_role_rebel_info();
  inline void set_allocated_role_rebel_info(::PB::RoleRebelInfo* role_rebel_info);

  // optional .PB.RoleDuobaoInfo role_duobao_info = 13;
  inline bool has_role_duobao_info() const;
  inline void clear_role_duobao_info();
  static const int kRoleDuobaoInfoFieldNumber = 13;
  inline const ::PB::RoleDuobaoInfo& role_duobao_info() const;
  inline ::PB::RoleDuobaoInfo* mutable_role_duobao_info();
  inline ::PB::RoleDuobaoInfo* release_role_duobao_info();
  inline void set_allocated_role_duobao_info(::PB::RoleDuobaoInfo* role_duobao_info);

  // optional .PB.RoleFBInfo role_fb_info = 14;
  inline bool has_role_fb_info() const;
  inline void clear_role_fb_info();
  static const int kRoleFbInfoFieldNumber = 14;
  inline const ::PB::RoleFBInfo& role_fb_info() const;
  inline ::PB::RoleFBInfo* mutable_role_fb_info();
  inline ::PB::RoleFBInfo* release_role_fb_info();
  inline void set_allocated_role_fb_info(::PB::RoleFBInfo* role_fb_info);

  // optional .PB.RoleAchievemntInfo role_achievement_info = 15;
  inline bool has_role_achievement_info() const;
  inline void clear_role_achievement_info();
  static const int kRoleAchievementInfoFieldNumber = 15;
  inline const ::PB::RoleAchievemntInfo& role_achievement_info() const;
  inline ::PB::RoleAchievemntInfo* mutable_role_achievement_info();
  inline ::PB::RoleAchievemntInfo* release_role_achievement_info();
  inline void set_allocated_role_achievement_info(::PB::RoleAchievemntInfo* role_achievement_info);

  // optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
  inline bool has_role_daily_mission_info() const;
  inline void clear_role_daily_mission_info();
  static const int kRoleDailyMissionInfoFieldNumber = 16;
  inline const ::PB::RoleDailyMissionInfo& role_daily_mission_info() const;
  inline ::PB::RoleDailyMissionInfo* mutable_role_daily_mission_info();
  inline ::PB::RoleDailyMissionInfo* release_role_daily_mission_info();
  inline void set_allocated_role_daily_mission_info(::PB::RoleDailyMissionInfo* role_daily_mission_info);

  // optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
  inline bool has_role_guild_skill_info() const;
  inline void clear_role_guild_skill_info();
  static const int kRoleGuildSkillInfoFieldNumber = 17;
  inline const ::PB::RoleGuildSkillInfo& role_guild_skill_info() const;
  inline ::PB::RoleGuildSkillInfo* mutable_role_guild_skill_info();
  inline ::PB::RoleGuildSkillInfo* release_role_guild_skill_info();
  inline void set_allocated_role_guild_skill_info(::PB::RoleGuildSkillInfo* role_guild_skill_info);

  // optional .PB.RoleSignInData role_sign_in_data = 18;
  inline bool has_role_sign_in_data() const;
  inline void clear_role_sign_in_data();
  static const int kRoleSignInDataFieldNumber = 18;
  inline const ::PB::RoleSignInData& role_sign_in_data() const;
  inline ::PB::RoleSignInData* mutable_role_sign_in_data();
  inline ::PB::RoleSignInData* release_role_sign_in_data();
  inline void set_allocated_role_sign_in_data(::PB::RoleSignInData* role_sign_in_data);

  // optional .PB.LoginRewardData login_reward_data = 19;
  inline bool has_login_reward_data() const;
  inline void clear_login_reward_data();
  static const int kLoginRewardDataFieldNumber = 19;
  inline const ::PB::LoginRewardData& login_reward_data() const;
  inline ::PB::LoginRewardData* mutable_login_reward_data();
  inline ::PB::LoginRewardData* release_login_reward_data();
  inline void set_allocated_login_reward_data(::PB::LoginRewardData* login_reward_data);

  // optional .PB.RoleKingMatchData king_match_data = 20;
  inline bool has_king_match_data() const;
  inline void clear_king_match_data();
  static const int kKingMatchDataFieldNumber = 20;
  inline const ::PB::RoleKingMatchData& king_match_data() const;
  inline ::PB::RoleKingMatchData* mutable_king_match_data();
  inline ::PB::RoleKingMatchData* release_king_match_data();
  inline void set_allocated_king_match_data(::PB::RoleKingMatchData* king_match_data);

  // optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
  inline bool has_team_dungeon_data() const;
  inline void clear_team_dungeon_data();
  static const int kTeamDungeonDataFieldNumber = 21;
  inline const ::PB::PlayerTeamDungeonData& team_dungeon_data() const;
  inline ::PB::PlayerTeamDungeonData* mutable_team_dungeon_data();
  inline ::PB::PlayerTeamDungeonData* release_team_dungeon_data();
  inline void set_allocated_team_dungeon_data(::PB::PlayerTeamDungeonData* team_dungeon_data);

  // optional .PB.RoleZhanBuData role_zhanbu_data = 22;
  inline bool has_role_zhanbu_data() const;
  inline void clear_role_zhanbu_data();
  static const int kRoleZhanbuDataFieldNumber = 22;
  inline const ::PB::RoleZhanBuData& role_zhanbu_data() const;
  inline ::PB::RoleZhanBuData* mutable_role_zhanbu_data();
  inline ::PB::RoleZhanBuData* release_role_zhanbu_data();
  inline void set_allocated_role_zhanbu_data(::PB::RoleZhanBuData* role_zhanbu_data);

  // optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
  inline bool has_role_world_level_task_info() const;
  inline void clear_role_world_level_task_info();
  static const int kRoleWorldLevelTaskInfoFieldNumber = 23;
  inline const ::PB::RoleWorldLevelTaskInfo& role_world_level_task_info() const;
  inline ::PB::RoleWorldLevelTaskInfo* mutable_role_world_level_task_info();
  inline ::PB::RoleWorldLevelTaskInfo* release_role_world_level_task_info();
  inline void set_allocated_role_world_level_task_info(::PB::RoleWorldLevelTaskInfo* role_world_level_task_info);

  // optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
  inline bool has_role_hang_up_drop_data() const;
  inline void clear_role_hang_up_drop_data();
  static const int kRoleHangUpDropDataFieldNumber = 24;
  inline const ::PB::RoleHangUpDropData& role_hang_up_drop_data() const;
  inline ::PB::RoleHangUpDropData* mutable_role_hang_up_drop_data();
  inline ::PB::RoleHangUpDropData* release_role_hang_up_drop_data();
  inline void set_allocated_role_hang_up_drop_data(::PB::RoleHangUpDropData* role_hang_up_drop_data);

  // @@protoc_insertion_point(class_scope:PB.RoleSecondInfo)
 private:
  inline void set_has_pvp_data();
  inline void clear_has_pvp_data();
  inline void set_has_title_info();
  inline void clear_has_title_info();
  inline void set_has_endless_land_info();
  inline void clear_has_endless_land_info();
  inline void set_has_guild_data();
  inline void clear_has_guild_data();
  inline void set_has_luxury_sign_in_data();
  inline void clear_has_luxury_sign_in_data();
  inline void set_has_gem_info();
  inline void clear_has_gem_info();
  inline void set_has_role_item_info();
  inline void clear_has_role_item_info();
  inline void set_has_role_equipment_info();
  inline void clear_has_role_equipment_info();
  inline void set_has_role_treasure_info();
  inline void clear_has_role_treasure_info();
  inline void set_has_role_shop_info();
  inline void clear_has_role_shop_info();
  inline void set_has_role_sprite_info();
  inline void clear_has_role_sprite_info();
  inline void set_has_role_rebel_info();
  inline void clear_has_role_rebel_info();
  inline void set_has_role_duobao_info();
  inline void clear_has_role_duobao_info();
  inline void set_has_role_fb_info();
  inline void clear_has_role_fb_info();
  inline void set_has_role_achievement_info();
  inline void clear_has_role_achievement_info();
  inline void set_has_role_daily_mission_info();
  inline void clear_has_role_daily_mission_info();
  inline void set_has_role_guild_skill_info();
  inline void clear_has_role_guild_skill_info();
  inline void set_has_role_sign_in_data();
  inline void clear_has_role_sign_in_data();
  inline void set_has_login_reward_data();
  inline void clear_has_login_reward_data();
  inline void set_has_king_match_data();
  inline void clear_has_king_match_data();
  inline void set_has_team_dungeon_data();
  inline void clear_has_team_dungeon_data();
  inline void set_has_role_zhanbu_data();
  inline void clear_has_role_zhanbu_data();
  inline void set_has_role_world_level_task_info();
  inline void clear_has_role_world_level_task_info();
  inline void set_has_role_hang_up_drop_data();
  inline void clear_has_role_hang_up_drop_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::RolePVPData* pvp_data_;
  ::PB::RoleTitleInfo* title_info_;
  ::PB::RoleEndlessLandInfo* endless_land_info_;
  ::PB::RoleGuildData* guild_data_;
  ::PB::PlayerLuxurySignInData* luxury_sign_in_data_;
  ::PB::PlayerGemInfo* gem_info_;
  ::PB::RoleItemInfo* role_item_info_;
  ::PB::RoleEquipmentInfo* role_equipment_info_;
  ::PB::RoleTreasureInfo* role_treasure_info_;
  ::PB::RoleShopInfo* role_shop_info_;
  ::PB::RoleSpiritInfo* role_sprite_info_;
  ::PB::RoleRebelInfo* role_rebel_info_;
  ::PB::RoleDuobaoInfo* role_duobao_info_;
  ::PB::RoleFBInfo* role_fb_info_;
  ::PB::RoleAchievemntInfo* role_achievement_info_;
  ::PB::RoleDailyMissionInfo* role_daily_mission_info_;
  ::PB::RoleGuildSkillInfo* role_guild_skill_info_;
  ::PB::RoleSignInData* role_sign_in_data_;
  ::PB::LoginRewardData* login_reward_data_;
  ::PB::RoleKingMatchData* king_match_data_;
  ::PB::PlayerTeamDungeonData* team_dungeon_data_;
  ::PB::RoleZhanBuData* role_zhanbu_data_;
  ::PB::RoleWorldLevelTaskInfo* role_world_level_task_info_;
  ::PB::RoleHangUpDropData* role_hang_up_drop_data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleSecondInfo* default_instance_;
};
// -------------------------------------------------------------------

class RewardData : public ::google::protobuf::Message {
 public:
  RewardData();
  virtual ~RewardData();

  RewardData(const RewardData& from);

  inline RewardData& operator=(const RewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardData& default_instance();

  void Swap(RewardData* other);

  // implements Message ----------------------------------------------

  RewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardData& from);
  void MergeFrom(const RewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // optional uint32 value1 = 3;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 3;
  inline ::google::protobuf::uint32 value1() const;
  inline void set_value1(::google::protobuf::uint32 value);

  // optional uint32 value2 = 4;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 4;
  inline ::google::protobuf::uint32 value2() const;
  inline void set_value2(::google::protobuf::uint32 value);

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required string text = 6;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 6;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:PB.RewardData)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uid_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 value1_;
  ::google::protobuf::uint32 value2_;
  ::std::string* text_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RewardData* default_instance_;
};
// -------------------------------------------------------------------

class RoleRewardData : public ::google::protobuf::Message {
 public:
  RoleRewardData();
  virtual ~RoleRewardData();

  RoleRewardData(const RoleRewardData& from);

  inline RoleRewardData& operator=(const RoleRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRewardData& default_instance();

  void Swap(RoleRewardData* other);

  // implements Message ----------------------------------------------

  RoleRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRewardData& from);
  void MergeFrom(const RoleRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.RewardData reward_list = 1;
  inline int reward_list_size() const;
  inline void clear_reward_list();
  static const int kRewardListFieldNumber = 1;
  inline const ::PB::RewardData& reward_list(int index) const;
  inline ::PB::RewardData* mutable_reward_list(int index);
  inline ::PB::RewardData* add_reward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RewardData >&
      reward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RewardData >*
      mutable_reward_list();

  // @@protoc_insertion_point(class_scope:PB.RoleRewardData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::RewardData > reward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleRewardData* default_instance_;
};
// -------------------------------------------------------------------

class YCSData : public ::google::protobuf::Message {
 public:
  YCSData();
  virtual ~YCSData();

  YCSData(const YCSData& from);

  inline YCSData& operator=(const YCSData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const YCSData& default_instance();

  void Swap(YCSData* other);

  // implements Message ----------------------------------------------

  YCSData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const YCSData& from);
  void MergeFrom(const YCSData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 today_get_times = 1;
  inline bool has_today_get_times() const;
  inline void clear_today_get_times();
  static const int kTodayGetTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 today_get_times() const;
  inline void set_today_get_times(::google::protobuf::uint32 value);

  // optional uint32 total_get_times = 2;
  inline bool has_total_get_times() const;
  inline void clear_total_get_times();
  static const int kTotalGetTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 total_get_times() const;
  inline void set_total_get_times(::google::protobuf::uint32 value);

  // optional uint32 total_reward_value = 3;
  inline bool has_total_reward_value() const;
  inline void clear_total_reward_value();
  static const int kTotalRewardValueFieldNumber = 3;
  inline ::google::protobuf::uint32 total_reward_value() const;
  inline void set_total_reward_value(::google::protobuf::uint32 value);

  // optional uint32 last_get_time = 4;
  inline bool has_last_get_time() const;
  inline void clear_last_get_time();
  static const int kLastGetTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_get_time() const;
  inline void set_last_get_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.YCSData)
 private:
  inline void set_has_today_get_times();
  inline void clear_has_today_get_times();
  inline void set_has_total_get_times();
  inline void clear_has_total_get_times();
  inline void set_has_total_reward_value();
  inline void clear_has_total_reward_value();
  inline void set_has_last_get_time();
  inline void clear_has_last_get_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 today_get_times_;
  ::google::protobuf::uint32 total_get_times_;
  ::google::protobuf::uint32 total_reward_value_;
  ::google::protobuf::uint32 last_get_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static YCSData* default_instance_;
};
// -------------------------------------------------------------------

class TQTData : public ::google::protobuf::Message {
 public:
  TQTData();
  virtual ~TQTData();

  TQTData(const TQTData& from);

  inline TQTData& operator=(const TQTData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TQTData& default_instance();

  void Swap(TQTData* other);

  // implements Message ----------------------------------------------

  TQTData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TQTData& from);
  void MergeFrom(const TQTData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_get_time = 1;
  inline bool has_last_get_time() const;
  inline void clear_last_get_time();
  static const int kLastGetTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 last_get_time() const;
  inline void set_last_get_time(::google::protobuf::uint32 value);

  // repeated uint32 take_record_list = 2;
  inline int take_record_list_size() const;
  inline void clear_take_record_list();
  static const int kTakeRecordListFieldNumber = 2;
  inline ::google::protobuf::uint32 take_record_list(int index) const;
  inline void set_take_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_take_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      take_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_take_record_list();

  // @@protoc_insertion_point(class_scope:PB.TQTData)
 private:
  inline void set_has_last_get_time();
  inline void clear_has_last_get_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > take_record_list_;
  ::google::protobuf::uint32 last_get_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TQTData* default_instance_;
};
// -------------------------------------------------------------------

class SevenDayTargetData : public ::google::protobuf::Message {
 public:
  SevenDayTargetData();
  virtual ~SevenDayTargetData();

  SevenDayTargetData(const SevenDayTargetData& from);

  inline SevenDayTargetData& operator=(const SevenDayTargetData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SevenDayTargetData& default_instance();

  void Swap(SevenDayTargetData* other);

  // implements Message ----------------------------------------------

  SevenDayTargetData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SevenDayTargetData& from);
  void MergeFrom(const SevenDayTargetData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // optional uint32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 is_get_reward = 3;
  inline bool has_is_get_reward() const;
  inline void clear_is_get_reward();
  static const int kIsGetRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 is_get_reward() const;
  inline void set_is_get_reward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.SevenDayTargetData)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_is_get_reward();
  inline void clear_has_is_get_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 target_id_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 is_get_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SevenDayTargetData* default_instance_;
};
// -------------------------------------------------------------------

class LevelShopActivityData : public ::google::protobuf::Message {
 public:
  LevelShopActivityData();
  virtual ~LevelShopActivityData();

  LevelShopActivityData(const LevelShopActivityData& from);

  inline LevelShopActivityData& operator=(const LevelShopActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LevelShopActivityData& default_instance();

  void Swap(LevelShopActivityData* other);

  // implements Message ----------------------------------------------

  LevelShopActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LevelShopActivityData& from);
  void MergeFrom(const LevelShopActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 activate_time = 2;
  inline bool has_activate_time() const;
  inline void clear_activate_time();
  static const int kActivateTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 activate_time() const;
  inline void set_activate_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.LevelShopActivityData)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_activate_time();
  inline void clear_has_activate_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 activate_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LevelShopActivityData* default_instance_;
};
// -------------------------------------------------------------------

class Gift : public ::google::protobuf::Message {
 public:
  Gift();
  virtual ~Gift();

  Gift(const Gift& from);

  inline Gift& operator=(const Gift& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Gift& default_instance();

  void Swap(Gift* other);

  // implements Message ----------------------------------------------

  Gift* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Gift& from);
  void MergeFrom(const Gift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.Gift)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static Gift* default_instance_;
};
// -------------------------------------------------------------------

class VipGiftData : public ::google::protobuf::Message {
 public:
  VipGiftData();
  virtual ~VipGiftData();

  VipGiftData(const VipGiftData& from);

  inline VipGiftData& operator=(const VipGiftData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VipGiftData& default_instance();

  void Swap(VipGiftData* other);

  // implements Message ----------------------------------------------

  VipGiftData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VipGiftData& from);
  void MergeFrom(const VipGiftData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 init_vip_level = 1;
  inline bool has_init_vip_level() const;
  inline void clear_init_vip_level();
  static const int kInitVipLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 init_vip_level() const;
  inline void set_init_vip_level(::google::protobuf::uint32 value);

  // optional int32 vip_level_reward_record = 2;
  inline bool has_vip_level_reward_record() const;
  inline void clear_vip_level_reward_record();
  static const int kVipLevelRewardRecordFieldNumber = 2;
  inline ::google::protobuf::int32 vip_level_reward_record() const;
  inline void set_vip_level_reward_record(::google::protobuf::int32 value);

  // repeated .PB.Gift week_gift_list = 3;
  inline int week_gift_list_size() const;
  inline void clear_week_gift_list();
  static const int kWeekGiftListFieldNumber = 3;
  inline const ::PB::Gift& week_gift_list(int index) const;
  inline ::PB::Gift* mutable_week_gift_list(int index);
  inline ::PB::Gift* add_week_gift_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::Gift >&
      week_gift_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::Gift >*
      mutable_week_gift_list();

  // optional uint32 today_recommend_recharge_reward_id = 4;
  inline bool has_today_recommend_recharge_reward_id() const;
  inline void clear_today_recommend_recharge_reward_id();
  static const int kTodayRecommendRechargeRewardIdFieldNumber = 4;
  inline ::google::protobuf::uint32 today_recommend_recharge_reward_id() const;
  inline void set_today_recommend_recharge_reward_id(::google::protobuf::uint32 value);

  // optional uint32 today_recommend_recharge_reward_status = 5;
  inline bool has_today_recommend_recharge_reward_status() const;
  inline void clear_today_recommend_recharge_reward_status();
  static const int kTodayRecommendRechargeRewardStatusFieldNumber = 5;
  inline ::google::protobuf::uint32 today_recommend_recharge_reward_status() const;
  inline void set_today_recommend_recharge_reward_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.VipGiftData)
 private:
  inline void set_has_init_vip_level();
  inline void clear_has_init_vip_level();
  inline void set_has_vip_level_reward_record();
  inline void clear_has_vip_level_reward_record();
  inline void set_has_today_recommend_recharge_reward_id();
  inline void clear_has_today_recommend_recharge_reward_id();
  inline void set_has_today_recommend_recharge_reward_status();
  inline void clear_has_today_recommend_recharge_reward_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 init_vip_level_;
  ::google::protobuf::int32 vip_level_reward_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::Gift > week_gift_list_;
  ::google::protobuf::uint32 today_recommend_recharge_reward_id_;
  ::google::protobuf::uint32 today_recommend_recharge_reward_status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static VipGiftData* default_instance_;
};
// -------------------------------------------------------------------

class CommonRecharge : public ::google::protobuf::Message {
 public:
  CommonRecharge();
  virtual ~CommonRecharge();

  CommonRecharge(const CommonRecharge& from);

  inline CommonRecharge& operator=(const CommonRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonRecharge& default_instance();

  void Swap(CommonRecharge* other);

  // implements Message ----------------------------------------------

  CommonRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonRecharge& from);
  void MergeFrom(const CommonRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 times = 2;
  inline bool has_times() const;
  inline void clear_times();
  static const int kTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 times() const;
  inline void set_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.CommonRecharge)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_times();
  inline void clear_has_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static CommonRecharge* default_instance_;
};
// -------------------------------------------------------------------

class MonthCardData : public ::google::protobuf::Message {
 public:
  MonthCardData();
  virtual ~MonthCardData();

  MonthCardData(const MonthCardData& from);

  inline MonthCardData& operator=(const MonthCardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MonthCardData& default_instance();

  void Swap(MonthCardData* other);

  // implements Message ----------------------------------------------

  MonthCardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MonthCardData& from);
  void MergeFrom(const MonthCardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 card_id = 1;
  inline bool has_card_id() const;
  inline void clear_card_id();
  static const int kCardIdFieldNumber = 1;
  inline ::google::protobuf::uint32 card_id() const;
  inline void set_card_id(::google::protobuf::uint32 value);

  // optional uint32 buy_time = 2;
  inline bool has_buy_time() const;
  inline void clear_buy_time();
  static const int kBuyTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_time() const;
  inline void set_buy_time(::google::protobuf::uint32 value);

  // optional uint32 last_take_reward_time = 3;
  inline bool has_last_take_reward_time() const;
  inline void clear_last_take_reward_time();
  static const int kLastTakeRewardTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 last_take_reward_time() const;
  inline void set_last_take_reward_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.MonthCardData)
 private:
  inline void set_has_card_id();
  inline void clear_has_card_id();
  inline void set_has_buy_time();
  inline void clear_has_buy_time();
  inline void set_has_last_take_reward_time();
  inline void clear_has_last_take_reward_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 card_id_;
  ::google::protobuf::uint32 buy_time_;
  ::google::protobuf::uint32 last_take_reward_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MonthCardData* default_instance_;
};
// -------------------------------------------------------------------

class RoleRechargeData : public ::google::protobuf::Message {
 public:
  RoleRechargeData();
  virtual ~RoleRechargeData();

  RoleRechargeData(const RoleRechargeData& from);

  inline RoleRechargeData& operator=(const RoleRechargeData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleRechargeData& default_instance();

  void Swap(RoleRechargeData* other);

  // implements Message ----------------------------------------------

  RoleRechargeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleRechargeData& from);
  void MergeFrom(const RoleRechargeData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.CommonRecharge recharge_list = 1;
  inline int recharge_list_size() const;
  inline void clear_recharge_list();
  static const int kRechargeListFieldNumber = 1;
  inline const ::PB::CommonRecharge& recharge_list(int index) const;
  inline ::PB::CommonRecharge* mutable_recharge_list(int index);
  inline ::PB::CommonRecharge* add_recharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >&
      recharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >*
      mutable_recharge_list();

  // repeated .PB.MonthCardData month_card_list = 2;
  inline int month_card_list_size() const;
  inline void clear_month_card_list();
  static const int kMonthCardListFieldNumber = 2;
  inline const ::PB::MonthCardData& month_card_list(int index) const;
  inline ::PB::MonthCardData* mutable_month_card_list(int index);
  inline ::PB::MonthCardData* add_month_card_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MonthCardData >&
      month_card_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MonthCardData >*
      mutable_month_card_list();

  // repeated uint32 order_record_list = 3;
  inline int order_record_list_size() const;
  inline void clear_order_record_list();
  static const int kOrderRecordListFieldNumber = 3;
  inline ::google::protobuf::uint32 order_record_list(int index) const;
  inline void set_order_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_order_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      order_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_order_record_list();

  // optional uint32 today_recharge_times = 4;
  inline bool has_today_recharge_times() const;
  inline void clear_today_recharge_times();
  static const int kTodayRechargeTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 today_recharge_times() const;
  inline void set_today_recharge_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleRechargeData)
 private:
  inline void set_has_today_recharge_times();
  inline void clear_has_today_recharge_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge > recharge_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::MonthCardData > month_card_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > order_record_list_;
  ::google::protobuf::uint32 today_recharge_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleRechargeData* default_instance_;
};
// -------------------------------------------------------------------

class OpenServerFundData : public ::google::protobuf::Message {
 public:
  OpenServerFundData();
  virtual ~OpenServerFundData();

  OpenServerFundData(const OpenServerFundData& from);

  inline OpenServerFundData& operator=(const OpenServerFundData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenServerFundData& default_instance();

  void Swap(OpenServerFundData* other);

  // implements Message ----------------------------------------------

  OpenServerFundData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenServerFundData& from);
  void MergeFrom(const OpenServerFundData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_already_buy_fund = 1;
  inline bool has_is_already_buy_fund() const;
  inline void clear_is_already_buy_fund();
  static const int kIsAlreadyBuyFundFieldNumber = 1;
  inline ::google::protobuf::uint32 is_already_buy_fund() const;
  inline void set_is_already_buy_fund(::google::protobuf::uint32 value);

  // repeated uint32 fund_reward_take_record = 2;
  inline int fund_reward_take_record_size() const;
  inline void clear_fund_reward_take_record();
  static const int kFundRewardTakeRecordFieldNumber = 2;
  inline ::google::protobuf::uint32 fund_reward_take_record(int index) const;
  inline void set_fund_reward_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_fund_reward_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fund_reward_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fund_reward_take_record();

  // @@protoc_insertion_point(class_scope:PB.OpenServerFundData)
 private:
  inline void set_has_is_already_buy_fund();
  inline void clear_has_is_already_buy_fund();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fund_reward_take_record_;
  ::google::protobuf::uint32 is_already_buy_fund_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OpenServerFundData* default_instance_;
};
// -------------------------------------------------------------------

class AllPeopleWelfareData : public ::google::protobuf::Message {
 public:
  AllPeopleWelfareData();
  virtual ~AllPeopleWelfareData();

  AllPeopleWelfareData(const AllPeopleWelfareData& from);

  inline AllPeopleWelfareData& operator=(const AllPeopleWelfareData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllPeopleWelfareData& default_instance();

  void Swap(AllPeopleWelfareData* other);

  // implements Message ----------------------------------------------

  AllPeopleWelfareData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllPeopleWelfareData& from);
  void MergeFrom(const AllPeopleWelfareData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 welfare_take_record = 1;
  inline int welfare_take_record_size() const;
  inline void clear_welfare_take_record();
  static const int kWelfareTakeRecordFieldNumber = 1;
  inline ::google::protobuf::uint32 welfare_take_record(int index) const;
  inline void set_welfare_take_record(int index, ::google::protobuf::uint32 value);
  inline void add_welfare_take_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      welfare_take_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_welfare_take_record();

  // @@protoc_insertion_point(class_scope:PB.AllPeopleWelfareData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > welfare_take_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AllPeopleWelfareData* default_instance_;
};
// -------------------------------------------------------------------

class LimitActivityData : public ::google::protobuf::Message {
 public:
  LimitActivityData();
  virtual ~LimitActivityData();

  LimitActivityData(const LimitActivityData& from);

  inline LimitActivityData& operator=(const LimitActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitActivityData& default_instance();

  void Swap(LimitActivityData* other);

  // implements Message ----------------------------------------------

  LimitActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitActivityData& from);
  void MergeFrom(const LimitActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 recruit_times = 1;
  inline bool has_recruit_times() const;
  inline void clear_recruit_times();
  static const int kRecruitTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 recruit_times() const;
  inline void set_recruit_times(::google::protobuf::uint32 value);

  // optional uint32 accumulate_recharge = 2;
  inline bool has_accumulate_recharge() const;
  inline void clear_accumulate_recharge();
  static const int kAccumulateRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 accumulate_recharge() const;
  inline void set_accumulate_recharge(::google::protobuf::uint32 value);

  // repeated uint32 recruit_reward_record = 3;
  inline int recruit_reward_record_size() const;
  inline void clear_recruit_reward_record();
  static const int kRecruitRewardRecordFieldNumber = 3;
  inline ::google::protobuf::uint32 recruit_reward_record(int index) const;
  inline void set_recruit_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_recruit_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recruit_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recruit_reward_record();

  // repeated uint32 accumulate_recharge_reward_record = 4;
  inline int accumulate_recharge_reward_record_size() const;
  inline void clear_accumulate_recharge_reward_record();
  static const int kAccumulateRechargeRewardRecordFieldNumber = 4;
  inline ::google::protobuf::uint32 accumulate_recharge_reward_record(int index) const;
  inline void set_accumulate_recharge_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_accumulate_recharge_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      accumulate_recharge_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_accumulate_recharge_reward_record();

  // repeated .PB.RecordData single_recharge_reward_record = 5;
  inline int single_recharge_reward_record_size() const;
  inline void clear_single_recharge_reward_record();
  static const int kSingleRechargeRewardRecordFieldNumber = 5;
  inline const ::PB::RecordData& single_recharge_reward_record(int index) const;
  inline ::PB::RecordData* mutable_single_recharge_reward_record(int index);
  inline ::PB::RecordData* add_single_recharge_reward_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RecordData >&
      single_recharge_reward_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RecordData >*
      mutable_single_recharge_reward_record();

  // repeated uint32 first_recharge_reward_record = 6;
  inline int first_recharge_reward_record_size() const;
  inline void clear_first_recharge_reward_record();
  static const int kFirstRechargeRewardRecordFieldNumber = 6;
  inline ::google::protobuf::uint32 first_recharge_reward_record(int index) const;
  inline void set_first_recharge_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_first_recharge_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      first_recharge_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_first_recharge_reward_record();

  // optional uint32 total_recharge = 7;
  inline bool has_total_recharge() const;
  inline void clear_total_recharge();
  static const int kTotalRechargeFieldNumber = 7;
  inline ::google::protobuf::uint32 total_recharge() const;
  inline void set_total_recharge(::google::protobuf::uint32 value);

  // optional uint32 last_single_recharge_data_id = 8;
  inline bool has_last_single_recharge_data_id() const;
  inline void clear_last_single_recharge_data_id();
  static const int kLastSingleRechargeDataIdFieldNumber = 8;
  inline ::google::protobuf::uint32 last_single_recharge_data_id() const;
  inline void set_last_single_recharge_data_id(::google::protobuf::uint32 value);

  // optional uint32 last_accumulate_recharge_data_id = 9;
  inline bool has_last_accumulate_recharge_data_id() const;
  inline void clear_last_accumulate_recharge_data_id();
  static const int kLastAccumulateRechargeDataIdFieldNumber = 9;
  inline ::google::protobuf::uint32 last_accumulate_recharge_data_id() const;
  inline void set_last_accumulate_recharge_data_id(::google::protobuf::uint32 value);

  // repeated .PB.CommonRecharge recharge_list = 10;
  inline int recharge_list_size() const;
  inline void clear_recharge_list();
  static const int kRechargeListFieldNumber = 10;
  inline const ::PB::CommonRecharge& recharge_list(int index) const;
  inline ::PB::CommonRecharge* mutable_recharge_list(int index);
  inline ::PB::CommonRecharge* add_recharge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >&
      recharge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >*
      mutable_recharge_list();

  // @@protoc_insertion_point(class_scope:PB.LimitActivityData)
 private:
  inline void set_has_recruit_times();
  inline void clear_has_recruit_times();
  inline void set_has_accumulate_recharge();
  inline void clear_has_accumulate_recharge();
  inline void set_has_total_recharge();
  inline void clear_has_total_recharge();
  inline void set_has_last_single_recharge_data_id();
  inline void clear_has_last_single_recharge_data_id();
  inline void set_has_last_accumulate_recharge_data_id();
  inline void clear_has_last_accumulate_recharge_data_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 recruit_times_;
  ::google::protobuf::uint32 accumulate_recharge_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recruit_reward_record_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > accumulate_recharge_reward_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::RecordData > single_recharge_reward_record_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > first_recharge_reward_record_;
  ::google::protobuf::uint32 total_recharge_;
  ::google::protobuf::uint32 last_single_recharge_data_id_;
  ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge > recharge_list_;
  ::google::protobuf::uint32 last_accumulate_recharge_data_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LimitActivityData* default_instance_;
};
// -------------------------------------------------------------------

class SuperDiscountData : public ::google::protobuf::Message {
 public:
  SuperDiscountData();
  virtual ~SuperDiscountData();

  SuperDiscountData(const SuperDiscountData& from);

  inline SuperDiscountData& operator=(const SuperDiscountData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SuperDiscountData& default_instance();

  void Swap(SuperDiscountData* other);

  // implements Message ----------------------------------------------

  SuperDiscountData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SuperDiscountData& from);
  void MergeFrom(const SuperDiscountData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional uint32 take_accumulate_reward_times = 2;
  inline bool has_take_accumulate_reward_times() const;
  inline void clear_take_accumulate_reward_times();
  static const int kTakeAccumulateRewardTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 take_accumulate_reward_times() const;
  inline void set_take_accumulate_reward_times(::google::protobuf::uint32 value);

  // optional uint32 cur_buy_times = 3;
  inline bool has_cur_buy_times() const;
  inline void clear_cur_buy_times();
  static const int kCurBuyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_buy_times() const;
  inline void set_cur_buy_times(::google::protobuf::uint32 value);

  // optional uint32 last_activity_data_id = 4;
  inline bool has_last_activity_data_id() const;
  inline void clear_last_activity_data_id();
  static const int kLastActivityDataIdFieldNumber = 4;
  inline ::google::protobuf::uint32 last_activity_data_id() const;
  inline void set_last_activity_data_id(::google::protobuf::uint32 value);

  // repeated uint32 took_accumulate_reward_list = 5;
  inline int took_accumulate_reward_list_size() const;
  inline void clear_took_accumulate_reward_list();
  static const int kTookAccumulateRewardListFieldNumber = 5;
  inline ::google::protobuf::uint32 took_accumulate_reward_list(int index) const;
  inline void set_took_accumulate_reward_list(int index, ::google::protobuf::uint32 value);
  inline void add_took_accumulate_reward_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      took_accumulate_reward_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_took_accumulate_reward_list();

  // @@protoc_insertion_point(class_scope:PB.SuperDiscountData)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_take_accumulate_reward_times();
  inline void clear_has_take_accumulate_reward_times();
  inline void set_has_cur_buy_times();
  inline void clear_has_cur_buy_times();
  inline void set_has_last_activity_data_id();
  inline void clear_has_last_activity_data_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 status_;
  ::google::protobuf::uint32 take_accumulate_reward_times_;
  ::google::protobuf::uint32 cur_buy_times_;
  ::google::protobuf::uint32 last_activity_data_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > took_accumulate_reward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SuperDiscountData* default_instance_;
};
// -------------------------------------------------------------------

class ActivityTarget : public ::google::protobuf::Message {
 public:
  ActivityTarget();
  virtual ~ActivityTarget();

  ActivityTarget(const ActivityTarget& from);

  inline ActivityTarget& operator=(const ActivityTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityTarget& default_instance();

  void Swap(ActivityTarget* other);

  // implements Message ----------------------------------------------

  ActivityTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityTarget& from);
  void MergeFrom(const ActivityTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // optional uint32 context = 2;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 2;
  inline ::google::protobuf::uint32 context() const;
  inline void set_context(::google::protobuf::uint32 value);

  // optional uint32 take_reward_times = 3;
  inline bool has_take_reward_times() const;
  inline void clear_take_reward_times();
  static const int kTakeRewardTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 take_reward_times() const;
  inline void set_take_reward_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ActivityTarget)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_context();
  inline void clear_has_context();
  inline void set_has_take_reward_times();
  inline void clear_has_take_reward_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 target_id_;
  ::google::protobuf::uint32 context_;
  ::google::protobuf::uint32 take_reward_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ActivityTarget* default_instance_;
};
// -------------------------------------------------------------------

class FestivalActivity : public ::google::protobuf::Message {
 public:
  FestivalActivity();
  virtual ~FestivalActivity();

  FestivalActivity(const FestivalActivity& from);

  inline FestivalActivity& operator=(const FestivalActivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FestivalActivity& default_instance();

  void Swap(FestivalActivity* other);

  // implements Message ----------------------------------------------

  FestivalActivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FestivalActivity& from);
  void MergeFrom(const FestivalActivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 data_reset_time = 1;
  inline bool has_data_reset_time() const;
  inline void clear_data_reset_time();
  static const int kDataResetTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 data_reset_time() const;
  inline void set_data_reset_time(::google::protobuf::uint32 value);

  // repeated .PB.ActivityTarget target_list = 2;
  inline int target_list_size() const;
  inline void clear_target_list();
  static const int kTargetListFieldNumber = 2;
  inline const ::PB::ActivityTarget& target_list(int index) const;
  inline ::PB::ActivityTarget* mutable_target_list(int index);
  inline ::PB::ActivityTarget* add_target_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ActivityTarget >&
      target_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ActivityTarget >*
      mutable_target_list();

  // @@protoc_insertion_point(class_scope:PB.FestivalActivity)
 private:
  inline void set_has_data_reset_time();
  inline void clear_has_data_reset_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ActivityTarget > target_list_;
  ::google::protobuf::uint32 data_reset_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static FestivalActivity* default_instance_;
};
// -------------------------------------------------------------------

class RoleFestivalActivityInfo : public ::google::protobuf::Message {
 public:
  RoleFestivalActivityInfo();
  virtual ~RoleFestivalActivityInfo();

  RoleFestivalActivityInfo(const RoleFestivalActivityInfo& from);

  inline RoleFestivalActivityInfo& operator=(const RoleFestivalActivityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleFestivalActivityInfo& default_instance();

  void Swap(RoleFestivalActivityInfo* other);

  // implements Message ----------------------------------------------

  RoleFestivalActivityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleFestivalActivityInfo& from);
  void MergeFrom(const RoleFestivalActivityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.FestivalActivity loop_once_recharge = 1;
  inline bool has_loop_once_recharge() const;
  inline void clear_loop_once_recharge();
  static const int kLoopOnceRechargeFieldNumber = 1;
  inline const ::PB::FestivalActivity& loop_once_recharge() const;
  inline ::PB::FestivalActivity* mutable_loop_once_recharge();
  inline ::PB::FestivalActivity* release_loop_once_recharge();
  inline void set_allocated_loop_once_recharge(::PB::FestivalActivity* loop_once_recharge);

  // optional .PB.FestivalActivity loop_accumulate_recharge = 2;
  inline bool has_loop_accumulate_recharge() const;
  inline void clear_loop_accumulate_recharge();
  static const int kLoopAccumulateRechargeFieldNumber = 2;
  inline const ::PB::FestivalActivity& loop_accumulate_recharge() const;
  inline ::PB::FestivalActivity* mutable_loop_accumulate_recharge();
  inline ::PB::FestivalActivity* release_loop_accumulate_recharge();
  inline void set_allocated_loop_accumulate_recharge(::PB::FestivalActivity* loop_accumulate_recharge);

  // optional .PB.FestivalActivity limit_recruit = 3;
  inline bool has_limit_recruit() const;
  inline void clear_limit_recruit();
  static const int kLimitRecruitFieldNumber = 3;
  inline const ::PB::FestivalActivity& limit_recruit() const;
  inline ::PB::FestivalActivity* mutable_limit_recruit();
  inline ::PB::FestivalActivity* release_limit_recruit();
  inline void set_allocated_limit_recruit(::PB::FestivalActivity* limit_recruit);

  // optional .PB.FestivalActivity activity_once_recharge = 4;
  inline bool has_activity_once_recharge() const;
  inline void clear_activity_once_recharge();
  static const int kActivityOnceRechargeFieldNumber = 4;
  inline const ::PB::FestivalActivity& activity_once_recharge() const;
  inline ::PB::FestivalActivity* mutable_activity_once_recharge();
  inline ::PB::FestivalActivity* release_activity_once_recharge();
  inline void set_allocated_activity_once_recharge(::PB::FestivalActivity* activity_once_recharge);

  // optional .PB.FestivalActivity activity_accumulate_recharge = 5;
  inline bool has_activity_accumulate_recharge() const;
  inline void clear_activity_accumulate_recharge();
  static const int kActivityAccumulateRechargeFieldNumber = 5;
  inline const ::PB::FestivalActivity& activity_accumulate_recharge() const;
  inline ::PB::FestivalActivity* mutable_activity_accumulate_recharge();
  inline ::PB::FestivalActivity* release_activity_accumulate_recharge();
  inline void set_allocated_activity_accumulate_recharge(::PB::FestivalActivity* activity_accumulate_recharge);

  // optional .PB.FestivalActivity diamond_exchange = 6;
  inline bool has_diamond_exchange() const;
  inline void clear_diamond_exchange();
  static const int kDiamondExchangeFieldNumber = 6;
  inline const ::PB::FestivalActivity& diamond_exchange() const;
  inline ::PB::FestivalActivity* mutable_diamond_exchange();
  inline ::PB::FestivalActivity* release_diamond_exchange();
  inline void set_allocated_diamond_exchange(::PB::FestivalActivity* diamond_exchange);

  // optional .PB.FestivalActivity active_target = 7;
  inline bool has_active_target() const;
  inline void clear_active_target();
  static const int kActiveTargetFieldNumber = 7;
  inline const ::PB::FestivalActivity& active_target() const;
  inline ::PB::FestivalActivity* mutable_active_target();
  inline ::PB::FestivalActivity* release_active_target();
  inline void set_allocated_active_target(::PB::FestivalActivity* active_target);

  // optional .PB.FestivalActivity item_exchange = 8;
  inline bool has_item_exchange() const;
  inline void clear_item_exchange();
  static const int kItemExchangeFieldNumber = 8;
  inline const ::PB::FestivalActivity& item_exchange() const;
  inline ::PB::FestivalActivity* mutable_item_exchange();
  inline ::PB::FestivalActivity* release_item_exchange();
  inline void set_allocated_item_exchange(::PB::FestivalActivity* item_exchange);

  // optional .PB.FestivalActivity festival_login = 9;
  inline bool has_festival_login() const;
  inline void clear_festival_login();
  static const int kFestivalLoginFieldNumber = 9;
  inline const ::PB::FestivalActivity& festival_login() const;
  inline ::PB::FestivalActivity* mutable_festival_login();
  inline ::PB::FestivalActivity* release_festival_login();
  inline void set_allocated_festival_login(::PB::FestivalActivity* festival_login);

  // optional .PB.FestivalActivity open_server_login = 10;
  inline bool has_open_server_login() const;
  inline void clear_open_server_login();
  static const int kOpenServerLoginFieldNumber = 10;
  inline const ::PB::FestivalActivity& open_server_login() const;
  inline ::PB::FestivalActivity* mutable_open_server_login();
  inline ::PB::FestivalActivity* release_open_server_login();
  inline void set_allocated_open_server_login(::PB::FestivalActivity* open_server_login);

  // optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
  inline bool has_open_svr_accumulate_recharge() const;
  inline void clear_open_svr_accumulate_recharge();
  static const int kOpenSvrAccumulateRechargeFieldNumber = 11;
  inline const ::PB::FestivalActivity& open_svr_accumulate_recharge() const;
  inline ::PB::FestivalActivity* mutable_open_svr_accumulate_recharge();
  inline ::PB::FestivalActivity* release_open_svr_accumulate_recharge();
  inline void set_allocated_open_svr_accumulate_recharge(::PB::FestivalActivity* open_svr_accumulate_recharge);

  // optional .PB.FestivalActivity festival_item_exchange = 12;
  inline bool has_festival_item_exchange() const;
  inline void clear_festival_item_exchange();
  static const int kFestivalItemExchangeFieldNumber = 12;
  inline const ::PB::FestivalActivity& festival_item_exchange() const;
  inline ::PB::FestivalActivity* mutable_festival_item_exchange();
  inline ::PB::FestivalActivity* release_festival_item_exchange();
  inline void set_allocated_festival_item_exchange(::PB::FestivalActivity* festival_item_exchange);

  // optional .PB.FestivalActivity festival_discount_sell = 13;
  inline bool has_festival_discount_sell() const;
  inline void clear_festival_discount_sell();
  static const int kFestivalDiscountSellFieldNumber = 13;
  inline const ::PB::FestivalActivity& festival_discount_sell() const;
  inline ::PB::FestivalActivity* mutable_festival_discount_sell();
  inline ::PB::FestivalActivity* release_festival_discount_sell();
  inline void set_allocated_festival_discount_sell(::PB::FestivalActivity* festival_discount_sell);

  // optional .PB.FestivalActivity festival_active_target = 14;
  inline bool has_festival_active_target() const;
  inline void clear_festival_active_target();
  static const int kFestivalActiveTargetFieldNumber = 14;
  inline const ::PB::FestivalActivity& festival_active_target() const;
  inline ::PB::FestivalActivity* mutable_festival_active_target();
  inline ::PB::FestivalActivity* release_festival_active_target();
  inline void set_allocated_festival_active_target(::PB::FestivalActivity* festival_active_target);

  // optional .PB.FestivalActivity open_server_active_target = 15;
  inline bool has_open_server_active_target() const;
  inline void clear_open_server_active_target();
  static const int kOpenServerActiveTargetFieldNumber = 15;
  inline const ::PB::FestivalActivity& open_server_active_target() const;
  inline ::PB::FestivalActivity* mutable_open_server_active_target();
  inline ::PB::FestivalActivity* release_open_server_active_target();
  inline void set_allocated_open_server_active_target(::PB::FestivalActivity* open_server_active_target);

  // optional .PB.FestivalActivity festival_active_target_2 = 16;
  inline bool has_festival_active_target_2() const;
  inline void clear_festival_active_target_2();
  static const int kFestivalActiveTarget2FieldNumber = 16;
  inline const ::PB::FestivalActivity& festival_active_target_2() const;
  inline ::PB::FestivalActivity* mutable_festival_active_target_2();
  inline ::PB::FestivalActivity* release_festival_active_target_2();
  inline void set_allocated_festival_active_target_2(::PB::FestivalActivity* festival_active_target_2);

  // optional .PB.FestivalActivity activity_once_recharge_2 = 17;
  inline bool has_activity_once_recharge_2() const;
  inline void clear_activity_once_recharge_2();
  static const int kActivityOnceRecharge2FieldNumber = 17;
  inline const ::PB::FestivalActivity& activity_once_recharge_2() const;
  inline ::PB::FestivalActivity* mutable_activity_once_recharge_2();
  inline ::PB::FestivalActivity* release_activity_once_recharge_2();
  inline void set_allocated_activity_once_recharge_2(::PB::FestivalActivity* activity_once_recharge_2);

  // @@protoc_insertion_point(class_scope:PB.RoleFestivalActivityInfo)
 private:
  inline void set_has_loop_once_recharge();
  inline void clear_has_loop_once_recharge();
  inline void set_has_loop_accumulate_recharge();
  inline void clear_has_loop_accumulate_recharge();
  inline void set_has_limit_recruit();
  inline void clear_has_limit_recruit();
  inline void set_has_activity_once_recharge();
  inline void clear_has_activity_once_recharge();
  inline void set_has_activity_accumulate_recharge();
  inline void clear_has_activity_accumulate_recharge();
  inline void set_has_diamond_exchange();
  inline void clear_has_diamond_exchange();
  inline void set_has_active_target();
  inline void clear_has_active_target();
  inline void set_has_item_exchange();
  inline void clear_has_item_exchange();
  inline void set_has_festival_login();
  inline void clear_has_festival_login();
  inline void set_has_open_server_login();
  inline void clear_has_open_server_login();
  inline void set_has_open_svr_accumulate_recharge();
  inline void clear_has_open_svr_accumulate_recharge();
  inline void set_has_festival_item_exchange();
  inline void clear_has_festival_item_exchange();
  inline void set_has_festival_discount_sell();
  inline void clear_has_festival_discount_sell();
  inline void set_has_festival_active_target();
  inline void clear_has_festival_active_target();
  inline void set_has_open_server_active_target();
  inline void clear_has_open_server_active_target();
  inline void set_has_festival_active_target_2();
  inline void clear_has_festival_active_target_2();
  inline void set_has_activity_once_recharge_2();
  inline void clear_has_activity_once_recharge_2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::FestivalActivity* loop_once_recharge_;
  ::PB::FestivalActivity* loop_accumulate_recharge_;
  ::PB::FestivalActivity* limit_recruit_;
  ::PB::FestivalActivity* activity_once_recharge_;
  ::PB::FestivalActivity* activity_accumulate_recharge_;
  ::PB::FestivalActivity* diamond_exchange_;
  ::PB::FestivalActivity* active_target_;
  ::PB::FestivalActivity* item_exchange_;
  ::PB::FestivalActivity* festival_login_;
  ::PB::FestivalActivity* open_server_login_;
  ::PB::FestivalActivity* open_svr_accumulate_recharge_;
  ::PB::FestivalActivity* festival_item_exchange_;
  ::PB::FestivalActivity* festival_discount_sell_;
  ::PB::FestivalActivity* festival_active_target_;
  ::PB::FestivalActivity* open_server_active_target_;
  ::PB::FestivalActivity* festival_active_target_2_;
  ::PB::FestivalActivity* activity_once_recharge_2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleFestivalActivityInfo* default_instance_;
};
// -------------------------------------------------------------------

class AccurateRecommendGoods : public ::google::protobuf::Message {
 public:
  AccurateRecommendGoods();
  virtual ~AccurateRecommendGoods();

  AccurateRecommendGoods(const AccurateRecommendGoods& from);

  inline AccurateRecommendGoods& operator=(const AccurateRecommendGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccurateRecommendGoods& default_instance();

  void Swap(AccurateRecommendGoods* other);

  // implements Message ----------------------------------------------

  AccurateRecommendGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccurateRecommendGoods& from);
  void MergeFrom(const AccurateRecommendGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // optional uint32 buy_times = 2;
  inline bool has_buy_times() const;
  inline void clear_buy_times();
  static const int kBuyTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_times() const;
  inline void set_buy_times(::google::protobuf::uint32 value);

  // optional uint32 can_take_times = 3;
  inline bool has_can_take_times() const;
  inline void clear_can_take_times();
  static const int kCanTakeTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 can_take_times() const;
  inline void set_can_take_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.AccurateRecommendGoods)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_buy_times();
  inline void clear_has_buy_times();
  inline void set_has_can_take_times();
  inline void clear_has_can_take_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 buy_times_;
  ::google::protobuf::uint32 can_take_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AccurateRecommendGoods* default_instance_;
};
// -------------------------------------------------------------------

class RoleAccurateRecommendData : public ::google::protobuf::Message {
 public:
  RoleAccurateRecommendData();
  virtual ~RoleAccurateRecommendData();

  RoleAccurateRecommendData(const RoleAccurateRecommendData& from);

  inline RoleAccurateRecommendData& operator=(const RoleAccurateRecommendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleAccurateRecommendData& default_instance();

  void Swap(RoleAccurateRecommendData* other);

  // implements Message ----------------------------------------------

  RoleAccurateRecommendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleAccurateRecommendData& from);
  void MergeFrom(const RoleAccurateRecommendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.AccurateRecommendGoods goods_list = 1;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 1;
  inline const ::PB::AccurateRecommendGoods& goods_list(int index) const;
  inline ::PB::AccurateRecommendGoods* mutable_goods_list(int index);
  inline ::PB::AccurateRecommendGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::AccurateRecommendGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::AccurateRecommendGoods >*
      mutable_goods_list();

  // @@protoc_insertion_point(class_scope:PB.RoleAccurateRecommendData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::AccurateRecommendGoods > goods_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleAccurateRecommendData* default_instance_;
};
// -------------------------------------------------------------------

class RoleChristmasData : public ::google::protobuf::Message {
 public:
  RoleChristmasData();
  virtual ~RoleChristmasData();

  RoleChristmasData(const RoleChristmasData& from);

  inline RoleChristmasData& operator=(const RoleChristmasData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleChristmasData& default_instance();

  void Swap(RoleChristmasData* other);

  // implements Message ----------------------------------------------

  RoleChristmasData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleChristmasData& from);
  void MergeFrom(const RoleChristmasData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_score = 1;
  inline bool has_total_score() const;
  inline void clear_total_score();
  static const int kTotalScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 total_score() const;
  inline void set_total_score(::google::protobuf::uint32 value);

  // optional uint32 cur_score = 2;
  inline bool has_cur_score() const;
  inline void clear_cur_score();
  static const int kCurScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_score() const;
  inline void set_cur_score(::google::protobuf::uint32 value);

  // optional uint32 already_take_lower_boss_reward_level = 3;
  inline bool has_already_take_lower_boss_reward_level() const;
  inline void clear_already_take_lower_boss_reward_level();
  static const int kAlreadyTakeLowerBossRewardLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 already_take_lower_boss_reward_level() const;
  inline void set_already_take_lower_boss_reward_level(::google::protobuf::uint32 value);

  // optional uint32 already_take_high_boss_reward_level = 4;
  inline bool has_already_take_high_boss_reward_level() const;
  inline void clear_already_take_high_boss_reward_level();
  static const int kAlreadyTakeHighBossRewardLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 already_take_high_boss_reward_level() const;
  inline void set_already_take_high_boss_reward_level(::google::protobuf::uint32 value);

  // optional uint32 last_reset_data_time = 5;
  inline bool has_last_reset_data_time() const;
  inline void clear_last_reset_data_time();
  static const int kLastResetDataTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 last_reset_data_time() const;
  inline void set_last_reset_data_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleChristmasData)
 private:
  inline void set_has_total_score();
  inline void clear_has_total_score();
  inline void set_has_cur_score();
  inline void clear_has_cur_score();
  inline void set_has_already_take_lower_boss_reward_level();
  inline void clear_has_already_take_lower_boss_reward_level();
  inline void set_has_already_take_high_boss_reward_level();
  inline void clear_has_already_take_high_boss_reward_level();
  inline void set_has_last_reset_data_time();
  inline void clear_has_last_reset_data_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 total_score_;
  ::google::protobuf::uint32 cur_score_;
  ::google::protobuf::uint32 already_take_lower_boss_reward_level_;
  ::google::protobuf::uint32 already_take_high_boss_reward_level_;
  ::google::protobuf::uint32 last_reset_data_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleChristmasData* default_instance_;
};
// -------------------------------------------------------------------

class OnlineRewardRecord : public ::google::protobuf::Message {
 public:
  OnlineRewardRecord();
  virtual ~OnlineRewardRecord();

  OnlineRewardRecord(const OnlineRewardRecord& from);

  inline OnlineRewardRecord& operator=(const OnlineRewardRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineRewardRecord& default_instance();

  void Swap(OnlineRewardRecord* other);

  // implements Message ----------------------------------------------

  OnlineRewardRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineRewardRecord& from);
  void MergeFrom(const OnlineRewardRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 days = 1;
  inline bool has_days() const;
  inline void clear_days();
  static const int kDaysFieldNumber = 1;
  inline ::google::protobuf::uint32 days() const;
  inline void set_days(::google::protobuf::uint32 value);

  // repeated uint32 flag_list = 2;
  inline int flag_list_size() const;
  inline void clear_flag_list();
  static const int kFlagListFieldNumber = 2;
  inline ::google::protobuf::uint32 flag_list(int index) const;
  inline void set_flag_list(int index, ::google::protobuf::uint32 value);
  inline void add_flag_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      flag_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_flag_list();

  // @@protoc_insertion_point(class_scope:PB.OnlineRewardRecord)
 private:
  inline void set_has_days();
  inline void clear_has_days();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > flag_list_;
  ::google::protobuf::uint32 days_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OnlineRewardRecord* default_instance_;
};
// -------------------------------------------------------------------

class OnlineRewardData : public ::google::protobuf::Message {
 public:
  OnlineRewardData();
  virtual ~OnlineRewardData();

  OnlineRewardData(const OnlineRewardData& from);

  inline OnlineRewardData& operator=(const OnlineRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OnlineRewardData& default_instance();

  void Swap(OnlineRewardData* other);

  // implements Message ----------------------------------------------

  OnlineRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OnlineRewardData& from);
  void MergeFrom(const OnlineRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 online_time = 1;
  inline bool has_online_time() const;
  inline void clear_online_time();
  static const int kOnlineTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 online_time() const;
  inline void set_online_time(::google::protobuf::uint32 value);

  // repeated .PB.OnlineRewardRecord reward_record_list = 2;
  inline int reward_record_list_size() const;
  inline void clear_reward_record_list();
  static const int kRewardRecordListFieldNumber = 2;
  inline const ::PB::OnlineRewardRecord& reward_record_list(int index) const;
  inline ::PB::OnlineRewardRecord* mutable_reward_record_list(int index);
  inline ::PB::OnlineRewardRecord* add_reward_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::OnlineRewardRecord >&
      reward_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::OnlineRewardRecord >*
      mutable_reward_record_list();

  // @@protoc_insertion_point(class_scope:PB.OnlineRewardData)
 private:
  inline void set_has_online_time();
  inline void clear_has_online_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::OnlineRewardRecord > reward_record_list_;
  ::google::protobuf::uint32 online_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static OnlineRewardData* default_instance_;
};
// -------------------------------------------------------------------

class SevenDayLoginData : public ::google::protobuf::Message {
 public:
  SevenDayLoginData();
  virtual ~SevenDayLoginData();

  SevenDayLoginData(const SevenDayLoginData& from);

  inline SevenDayLoginData& operator=(const SevenDayLoginData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SevenDayLoginData& default_instance();

  void Swap(SevenDayLoginData* other);

  // implements Message ----------------------------------------------

  SevenDayLoginData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SevenDayLoginData& from);
  void MergeFrom(const SevenDayLoginData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 daily_data_list = 1;
  inline int daily_data_list_size() const;
  inline void clear_daily_data_list();
  static const int kDailyDataListFieldNumber = 1;
  inline ::google::protobuf::uint32 daily_data_list(int index) const;
  inline void set_daily_data_list(int index, ::google::protobuf::uint32 value);
  inline void add_daily_data_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      daily_data_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_daily_data_list();

  // @@protoc_insertion_point(class_scope:PB.SevenDayLoginData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > daily_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SevenDayLoginData* default_instance_;
};
// -------------------------------------------------------------------

class RecallFriendData : public ::google::protobuf::Message {
 public:
  RecallFriendData();
  virtual ~RecallFriendData();

  RecallFriendData(const RecallFriendData& from);

  inline RecallFriendData& operator=(const RecallFriendData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecallFriendData& default_instance();

  void Swap(RecallFriendData* other);

  // implements Message ----------------------------------------------

  RecallFriendData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecallFriendData& from);
  void MergeFrom(const RecallFriendData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 friend_id = 1;
  inline bool has_friend_id() const;
  inline void clear_friend_id();
  static const int kFriendIdFieldNumber = 1;
  inline ::google::protobuf::uint32 friend_id() const;
  inline void set_friend_id(::google::protobuf::uint32 value);

  // optional uint32 send_time = 2;
  inline bool has_send_time() const;
  inline void clear_send_time();
  static const int kSendTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 send_time() const;
  inline void set_send_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RecallFriendData)
 private:
  inline void set_has_friend_id();
  inline void clear_has_friend_id();
  inline void set_has_send_time();
  inline void clear_has_send_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 friend_id_;
  ::google::protobuf::uint32 send_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RecallFriendData* default_instance_;
};
// -------------------------------------------------------------------

class FacebookActivityData : public ::google::protobuf::Message {
 public:
  FacebookActivityData();
  virtual ~FacebookActivityData();

  FacebookActivityData(const FacebookActivityData& from);

  inline FacebookActivityData& operator=(const FacebookActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FacebookActivityData& default_instance();

  void Swap(FacebookActivityData* other);

  // implements Message ----------------------------------------------

  FacebookActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FacebookActivityData& from);
  void MergeFrom(const FacebookActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_already_take_account_bingding_reward = 1;
  inline bool has_is_already_take_account_bingding_reward() const;
  inline void clear_is_already_take_account_bingding_reward();
  static const int kIsAlreadyTakeAccountBingdingRewardFieldNumber = 1;
  inline ::google::protobuf::uint32 is_already_take_account_bingding_reward() const;
  inline void set_is_already_take_account_bingding_reward(::google::protobuf::uint32 value);

  // optional uint32 ready_to_share_time = 2;
  inline bool has_ready_to_share_time() const;
  inline void clear_ready_to_share_time();
  static const int kReadyToShareTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 ready_to_share_time() const;
  inline void set_ready_to_share_time(::google::protobuf::uint32 value);

  // optional uint32 recall_success_friend_num = 3;
  inline bool has_recall_success_friend_num() const;
  inline void clear_recall_success_friend_num();
  static const int kRecallSuccessFriendNumFieldNumber = 3;
  inline ::google::protobuf::uint32 recall_success_friend_num() const;
  inline void set_recall_success_friend_num(::google::protobuf::uint32 value);

  // optional uint32 invite_success_friend_num = 4;
  inline bool has_invite_success_friend_num() const;
  inline void clear_invite_success_friend_num();
  static const int kInviteSuccessFriendNumFieldNumber = 4;
  inline ::google::protobuf::uint32 invite_success_friend_num() const;
  inline void set_invite_success_friend_num(::google::protobuf::uint32 value);

  // repeated uint32 recall_reward_record_list = 5;
  inline int recall_reward_record_list_size() const;
  inline void clear_recall_reward_record_list();
  static const int kRecallRewardRecordListFieldNumber = 5;
  inline ::google::protobuf::uint32 recall_reward_record_list(int index) const;
  inline void set_recall_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_recall_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      recall_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_recall_reward_record_list();

  // repeated uint32 invite_reward_record_list = 6;
  inline int invite_reward_record_list_size() const;
  inline void clear_invite_reward_record_list();
  static const int kInviteRewardRecordListFieldNumber = 6;
  inline ::google::protobuf::uint32 invite_reward_record_list(int index) const;
  inline void set_invite_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_invite_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      invite_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_invite_reward_record_list();

  // repeated .PB.RecallFriendData send_recall_friend_record = 7;
  inline int send_recall_friend_record_size() const;
  inline void clear_send_recall_friend_record();
  static const int kSendRecallFriendRecordFieldNumber = 7;
  inline const ::PB::RecallFriendData& send_recall_friend_record(int index) const;
  inline ::PB::RecallFriendData* mutable_send_recall_friend_record(int index);
  inline ::PB::RecallFriendData* add_send_recall_friend_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RecallFriendData >&
      send_recall_friend_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RecallFriendData >*
      mutable_send_recall_friend_record();

  // repeated string send_invite_friend_record = 8;
  inline int send_invite_friend_record_size() const;
  inline void clear_send_invite_friend_record();
  static const int kSendInviteFriendRecordFieldNumber = 8;
  inline const ::std::string& send_invite_friend_record(int index) const;
  inline ::std::string* mutable_send_invite_friend_record(int index);
  inline void set_send_invite_friend_record(int index, const ::std::string& value);
  inline void set_send_invite_friend_record(int index, const char* value);
  inline void set_send_invite_friend_record(int index, const char* value, size_t size);
  inline ::std::string* add_send_invite_friend_record();
  inline void add_send_invite_friend_record(const ::std::string& value);
  inline void add_send_invite_friend_record(const char* value);
  inline void add_send_invite_friend_record(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& send_invite_friend_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_send_invite_friend_record();

  // optional uint32 ready_to_commend_time = 9;
  inline bool has_ready_to_commend_time() const;
  inline void clear_ready_to_commend_time();
  static const int kReadyToCommendTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 ready_to_commend_time() const;
  inline void set_ready_to_commend_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.FacebookActivityData)
 private:
  inline void set_has_is_already_take_account_bingding_reward();
  inline void clear_has_is_already_take_account_bingding_reward();
  inline void set_has_ready_to_share_time();
  inline void clear_has_ready_to_share_time();
  inline void set_has_recall_success_friend_num();
  inline void clear_has_recall_success_friend_num();
  inline void set_has_invite_success_friend_num();
  inline void clear_has_invite_success_friend_num();
  inline void set_has_ready_to_commend_time();
  inline void clear_has_ready_to_commend_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_already_take_account_bingding_reward_;
  ::google::protobuf::uint32 ready_to_share_time_;
  ::google::protobuf::uint32 recall_success_friend_num_;
  ::google::protobuf::uint32 invite_success_friend_num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > recall_reward_record_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > invite_reward_record_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::RecallFriendData > send_recall_friend_record_;
  ::google::protobuf::RepeatedPtrField< ::std::string> send_invite_friend_record_;
  ::google::protobuf::uint32 ready_to_commend_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static FacebookActivityData* default_instance_;
};
// -------------------------------------------------------------------

class RechargeRewardData : public ::google::protobuf::Message {
 public:
  RechargeRewardData();
  virtual ~RechargeRewardData();

  RechargeRewardData(const RechargeRewardData& from);

  inline RechargeRewardData& operator=(const RechargeRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeRewardData& default_instance();

  void Swap(RechargeRewardData* other);

  // implements Message ----------------------------------------------

  RechargeRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeRewardData& from);
  void MergeFrom(const RechargeRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_took_extra_reward = 1;
  inline bool has_is_took_extra_reward() const;
  inline void clear_is_took_extra_reward();
  static const int kIsTookExtraRewardFieldNumber = 1;
  inline ::google::protobuf::uint32 is_took_extra_reward() const;
  inline void set_is_took_extra_reward(::google::protobuf::uint32 value);

  // repeated uint32 daily_data_list = 2;
  inline int daily_data_list_size() const;
  inline void clear_daily_data_list();
  static const int kDailyDataListFieldNumber = 2;
  inline ::google::protobuf::uint32 daily_data_list(int index) const;
  inline void set_daily_data_list(int index, ::google::protobuf::uint32 value);
  inline void add_daily_data_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      daily_data_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_daily_data_list();

  // optional uint32 last_activity_data_id = 3;
  inline bool has_last_activity_data_id() const;
  inline void clear_last_activity_data_id();
  static const int kLastActivityDataIdFieldNumber = 3;
  inline ::google::protobuf::uint32 last_activity_data_id() const;
  inline void set_last_activity_data_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RechargeRewardData)
 private:
  inline void set_has_is_took_extra_reward();
  inline void clear_has_is_took_extra_reward();
  inline void set_has_last_activity_data_id();
  inline void clear_has_last_activity_data_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > daily_data_list_;
  ::google::protobuf::uint32 is_took_extra_reward_;
  ::google::protobuf::uint32 last_activity_data_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RechargeRewardData* default_instance_;
};
// -------------------------------------------------------------------

class TotalRechargeRewardData : public ::google::protobuf::Message {
 public:
  TotalRechargeRewardData();
  virtual ~TotalRechargeRewardData();

  TotalRechargeRewardData(const TotalRechargeRewardData& from);

  inline TotalRechargeRewardData& operator=(const TotalRechargeRewardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TotalRechargeRewardData& default_instance();

  void Swap(TotalRechargeRewardData* other);

  // implements Message ----------------------------------------------

  TotalRechargeRewardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TotalRechargeRewardData& from);
  void MergeFrom(const TotalRechargeRewardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 total_amount = 1;
  inline bool has_total_amount() const;
  inline void clear_total_amount();
  static const int kTotalAmountFieldNumber = 1;
  inline ::google::protobuf::uint32 total_amount() const;
  inline void set_total_amount(::google::protobuf::uint32 value);

  // repeated uint32 reward_record_list = 2;
  inline int reward_record_list_size() const;
  inline void clear_reward_record_list();
  static const int kRewardRecordListFieldNumber = 2;
  inline ::google::protobuf::uint32 reward_record_list(int index) const;
  inline void set_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_reward_record_list();

  // optional uint32 last_activity_data_id = 3;
  inline bool has_last_activity_data_id() const;
  inline void clear_last_activity_data_id();
  static const int kLastActivityDataIdFieldNumber = 3;
  inline ::google::protobuf::uint32 last_activity_data_id() const;
  inline void set_last_activity_data_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.TotalRechargeRewardData)
 private:
  inline void set_has_total_amount();
  inline void clear_has_total_amount();
  inline void set_has_last_activity_data_id();
  inline void clear_has_last_activity_data_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > reward_record_list_;
  ::google::protobuf::uint32 total_amount_;
  ::google::protobuf::uint32 last_activity_data_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TotalRechargeRewardData* default_instance_;
};
// -------------------------------------------------------------------

class HotSaleGoods : public ::google::protobuf::Message {
 public:
  HotSaleGoods();
  virtual ~HotSaleGoods();

  HotSaleGoods(const HotSaleGoods& from);

  inline HotSaleGoods& operator=(const HotSaleGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotSaleGoods& default_instance();

  void Swap(HotSaleGoods* other);

  // implements Message ----------------------------------------------

  HotSaleGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotSaleGoods& from);
  void MergeFrom(const HotSaleGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 goods_id = 1;
  inline bool has_goods_id() const;
  inline void clear_goods_id();
  static const int kGoodsIdFieldNumber = 1;
  inline ::google::protobuf::uint32 goods_id() const;
  inline void set_goods_id(::google::protobuf::uint32 value);

  // optional uint32 cur_data_idx = 2;
  inline bool has_cur_data_idx() const;
  inline void clear_cur_data_idx();
  static const int kCurDataIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_data_idx() const;
  inline void set_cur_data_idx(::google::protobuf::uint32 value);

  // optional uint32 buy_times = 3;
  inline bool has_buy_times() const;
  inline void clear_buy_times();
  static const int kBuyTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 buy_times() const;
  inline void set_buy_times(::google::protobuf::uint32 value);

  // optional uint32 take_times = 4;
  inline bool has_take_times() const;
  inline void clear_take_times();
  static const int kTakeTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 take_times() const;
  inline void set_take_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.HotSaleGoods)
 private:
  inline void set_has_goods_id();
  inline void clear_has_goods_id();
  inline void set_has_cur_data_idx();
  inline void clear_has_cur_data_idx();
  inline void set_has_buy_times();
  inline void clear_has_buy_times();
  inline void set_has_take_times();
  inline void clear_has_take_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 goods_id_;
  ::google::protobuf::uint32 cur_data_idx_;
  ::google::protobuf::uint32 buy_times_;
  ::google::protobuf::uint32 take_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static HotSaleGoods* default_instance_;
};
// -------------------------------------------------------------------

class RoleHotSaleGoodsData : public ::google::protobuf::Message {
 public:
  RoleHotSaleGoodsData();
  virtual ~RoleHotSaleGoodsData();

  RoleHotSaleGoodsData(const RoleHotSaleGoodsData& from);

  inline RoleHotSaleGoodsData& operator=(const RoleHotSaleGoodsData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleHotSaleGoodsData& default_instance();

  void Swap(RoleHotSaleGoodsData* other);

  // implements Message ----------------------------------------------

  RoleHotSaleGoodsData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleHotSaleGoodsData& from);
  void MergeFrom(const RoleHotSaleGoodsData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_activity_data_id = 1;
  inline bool has_last_activity_data_id() const;
  inline void clear_last_activity_data_id();
  static const int kLastActivityDataIdFieldNumber = 1;
  inline ::google::protobuf::uint32 last_activity_data_id() const;
  inline void set_last_activity_data_id(::google::protobuf::uint32 value);

  // repeated .PB.HotSaleGoods goods_list = 2;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 2;
  inline const ::PB::HotSaleGoods& goods_list(int index) const;
  inline ::PB::HotSaleGoods* mutable_goods_list(int index);
  inline ::PB::HotSaleGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::HotSaleGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::HotSaleGoods >*
      mutable_goods_list();

  // @@protoc_insertion_point(class_scope:PB.RoleHotSaleGoodsData)
 private:
  inline void set_has_last_activity_data_id();
  inline void clear_has_last_activity_data_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::HotSaleGoods > goods_list_;
  ::google::protobuf::uint32 last_activity_data_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleHotSaleGoodsData* default_instance_;
};
// -------------------------------------------------------------------

class RoleCampRecruitData : public ::google::protobuf::Message {
 public:
  RoleCampRecruitData();
  virtual ~RoleCampRecruitData();

  RoleCampRecruitData(const RoleCampRecruitData& from);

  inline RoleCampRecruitData& operator=(const RoleCampRecruitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleCampRecruitData& default_instance();

  void Swap(RoleCampRecruitData* other);

  // implements Message ----------------------------------------------

  RoleCampRecruitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleCampRecruitData& from);
  void MergeFrom(const RoleCampRecruitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_data_id = 1;
  inline bool has_cur_data_id() const;
  inline void clear_cur_data_id();
  static const int kCurDataIdFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_data_id() const;
  inline void set_cur_data_id(::google::protobuf::uint32 value);

  // optional uint32 today_already_recruit_times = 2;
  inline bool has_today_already_recruit_times() const;
  inline void clear_today_already_recruit_times();
  static const int kTodayAlreadyRecruitTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 today_already_recruit_times() const;
  inline void set_today_already_recruit_times(::google::protobuf::uint32 value);

  // repeated uint32 camp_score_list = 3;
  inline int camp_score_list_size() const;
  inline void clear_camp_score_list();
  static const int kCampScoreListFieldNumber = 3;
  inline ::google::protobuf::uint32 camp_score_list(int index) const;
  inline void set_camp_score_list(int index, ::google::protobuf::uint32 value);
  inline void add_camp_score_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      camp_score_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_camp_score_list();

  // repeated uint32 score_task_reward_record_list = 4;
  inline int score_task_reward_record_list_size() const;
  inline void clear_score_task_reward_record_list();
  static const int kScoreTaskRewardRecordListFieldNumber = 4;
  inline ::google::protobuf::uint32 score_task_reward_record_list(int index) const;
  inline void set_score_task_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_score_task_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      score_task_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_score_task_reward_record_list();

  // @@protoc_insertion_point(class_scope:PB.RoleCampRecruitData)
 private:
  inline void set_has_cur_data_id();
  inline void clear_has_cur_data_id();
  inline void set_has_today_already_recruit_times();
  inline void clear_has_today_already_recruit_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_data_id_;
  ::google::protobuf::uint32 today_already_recruit_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > camp_score_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > score_task_reward_record_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleCampRecruitData* default_instance_;
};
// -------------------------------------------------------------------

class UnlockActivityData : public ::google::protobuf::Message {
 public:
  UnlockActivityData();
  virtual ~UnlockActivityData();

  UnlockActivityData(const UnlockActivityData& from);

  inline UnlockActivityData& operator=(const UnlockActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnlockActivityData& default_instance();

  void Swap(UnlockActivityData* other);

  // implements Message ----------------------------------------------

  UnlockActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnlockActivityData& from);
  void MergeFrom(const UnlockActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 is_score_for_shop = 1;
  inline bool has_is_score_for_shop() const;
  inline void clear_is_score_for_shop();
  static const int kIsScoreForShopFieldNumber = 1;
  inline ::google::protobuf::uint32 is_score_for_shop() const;
  inline void set_is_score_for_shop(::google::protobuf::uint32 value);

  // optional uint32 watching_video_times = 2;
  inline bool has_watching_video_times() const;
  inline void clear_watching_video_times();
  static const int kWatchingVideoTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 watching_video_times() const;
  inline void set_watching_video_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.UnlockActivityData)
 private:
  inline void set_has_is_score_for_shop();
  inline void clear_has_is_score_for_shop();
  inline void set_has_watching_video_times();
  inline void clear_has_watching_video_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 is_score_for_shop_;
  ::google::protobuf::uint32 watching_video_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static UnlockActivityData* default_instance_;
};
// -------------------------------------------------------------------

class RechargeAndCostRankData : public ::google::protobuf::Message {
 public:
  RechargeAndCostRankData();
  virtual ~RechargeAndCostRankData();

  RechargeAndCostRankData(const RechargeAndCostRankData& from);

  inline RechargeAndCostRankData& operator=(const RechargeAndCostRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RechargeAndCostRankData& default_instance();

  void Swap(RechargeAndCostRankData* other);

  // implements Message ----------------------------------------------

  RechargeAndCostRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RechargeAndCostRankData& from);
  void MergeFrom(const RechargeAndCostRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 last_activity_data_id = 1;
  inline bool has_last_activity_data_id() const;
  inline void clear_last_activity_data_id();
  static const int kLastActivityDataIdFieldNumber = 1;
  inline ::google::protobuf::uint32 last_activity_data_id() const;
  inline void set_last_activity_data_id(::google::protobuf::uint32 value);

  // optional uint32 cost_diamond = 2;
  inline bool has_cost_diamond() const;
  inline void clear_cost_diamond();
  static const int kCostDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 cost_diamond() const;
  inline void set_cost_diamond(::google::protobuf::uint32 value);

  // optional uint32 recharge_amount = 3;
  inline bool has_recharge_amount() const;
  inline void clear_recharge_amount();
  static const int kRechargeAmountFieldNumber = 3;
  inline ::google::protobuf::uint32 recharge_amount() const;
  inline void set_recharge_amount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RechargeAndCostRankData)
 private:
  inline void set_has_last_activity_data_id();
  inline void clear_has_last_activity_data_id();
  inline void set_has_cost_diamond();
  inline void clear_has_cost_diamond();
  inline void set_has_recharge_amount();
  inline void clear_has_recharge_amount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 last_activity_data_id_;
  ::google::protobuf::uint32 cost_diamond_;
  ::google::protobuf::uint32 recharge_amount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RechargeAndCostRankData* default_instance_;
};
// -------------------------------------------------------------------

class RoleActivityData : public ::google::protobuf::Message {
 public:
  RoleActivityData();
  virtual ~RoleActivityData();

  RoleActivityData(const RoleActivityData& from);

  inline RoleActivityData& operator=(const RoleActivityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleActivityData& default_instance();

  void Swap(RoleActivityData* other);

  // implements Message ----------------------------------------------

  RoleActivityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleActivityData& from);
  void MergeFrom(const RoleActivityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.TQTData tqt_data = 1;
  inline bool has_tqt_data() const;
  inline void clear_tqt_data();
  static const int kTqtDataFieldNumber = 1;
  inline const ::PB::TQTData& tqt_data() const;
  inline ::PB::TQTData* mutable_tqt_data();
  inline ::PB::TQTData* release_tqt_data();
  inline void set_allocated_tqt_data(::PB::TQTData* tqt_data);

  // optional .PB.YCSData ycs_data = 2;
  inline bool has_ycs_data() const;
  inline void clear_ycs_data();
  static const int kYcsDataFieldNumber = 2;
  inline const ::PB::YCSData& ycs_data() const;
  inline ::PB::YCSData* mutable_ycs_data();
  inline ::PB::YCSData* release_ycs_data();
  inline void set_allocated_ycs_data(::PB::YCSData* ycs_data);

  // repeated .PB.SevenDayTargetData seven_day_target_list = 3;
  inline int seven_day_target_list_size() const;
  inline void clear_seven_day_target_list();
  static const int kSevenDayTargetListFieldNumber = 3;
  inline const ::PB::SevenDayTargetData& seven_day_target_list(int index) const;
  inline ::PB::SevenDayTargetData* mutable_seven_day_target_list(int index);
  inline ::PB::SevenDayTargetData* add_seven_day_target_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SevenDayTargetData >&
      seven_day_target_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SevenDayTargetData >*
      mutable_seven_day_target_list();

  // repeated uint32 completion_reward_record_list = 4;
  inline int completion_reward_record_list_size() const;
  inline void clear_completion_reward_record_list();
  static const int kCompletionRewardRecordListFieldNumber = 4;
  inline ::google::protobuf::uint32 completion_reward_record_list(int index) const;
  inline void set_completion_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_completion_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      completion_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_completion_reward_record_list();

  // repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
  inline int level_shop_activity_data_list_size() const;
  inline void clear_level_shop_activity_data_list();
  static const int kLevelShopActivityDataListFieldNumber = 5;
  inline const ::PB::LevelShopActivityData& level_shop_activity_data_list(int index) const;
  inline ::PB::LevelShopActivityData* mutable_level_shop_activity_data_list(int index);
  inline ::PB::LevelShopActivityData* add_level_shop_activity_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::LevelShopActivityData >&
      level_shop_activity_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::LevelShopActivityData >*
      mutable_level_shop_activity_data_list();

  // repeated uint32 level_gift_take_record_list = 6;
  inline int level_gift_take_record_list_size() const;
  inline void clear_level_gift_take_record_list();
  static const int kLevelGiftTakeRecordListFieldNumber = 6;
  inline ::google::protobuf::uint32 level_gift_take_record_list(int index) const;
  inline void set_level_gift_take_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_level_gift_take_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      level_gift_take_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_level_gift_take_record_list();

  // optional .PB.VipGiftData vip_gift_data = 7;
  inline bool has_vip_gift_data() const;
  inline void clear_vip_gift_data();
  static const int kVipGiftDataFieldNumber = 7;
  inline const ::PB::VipGiftData& vip_gift_data() const;
  inline ::PB::VipGiftData* mutable_vip_gift_data();
  inline ::PB::VipGiftData* release_vip_gift_data();
  inline void set_allocated_vip_gift_data(::PB::VipGiftData* vip_gift_data);

  // optional .PB.RoleRechargeData recharge_data = 8;
  inline bool has_recharge_data() const;
  inline void clear_recharge_data();
  static const int kRechargeDataFieldNumber = 8;
  inline const ::PB::RoleRechargeData& recharge_data() const;
  inline ::PB::RoleRechargeData* mutable_recharge_data();
  inline ::PB::RoleRechargeData* release_recharge_data();
  inline void set_allocated_recharge_data(::PB::RoleRechargeData* recharge_data);

  // optional .PB.OpenServerFundData open_server_fund_data = 9;
  inline bool has_open_server_fund_data() const;
  inline void clear_open_server_fund_data();
  static const int kOpenServerFundDataFieldNumber = 9;
  inline const ::PB::OpenServerFundData& open_server_fund_data() const;
  inline ::PB::OpenServerFundData* mutable_open_server_fund_data();
  inline ::PB::OpenServerFundData* release_open_server_fund_data();
  inline void set_allocated_open_server_fund_data(::PB::OpenServerFundData* open_server_fund_data);

  // optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
  inline bool has_all_people_welfare_data() const;
  inline void clear_all_people_welfare_data();
  static const int kAllPeopleWelfareDataFieldNumber = 10;
  inline const ::PB::AllPeopleWelfareData& all_people_welfare_data() const;
  inline ::PB::AllPeopleWelfareData* mutable_all_people_welfare_data();
  inline ::PB::AllPeopleWelfareData* release_all_people_welfare_data();
  inline void set_allocated_all_people_welfare_data(::PB::AllPeopleWelfareData* all_people_welfare_data);

  // optional .PB.LimitActivityData limit_activity_data = 11;
  inline bool has_limit_activity_data() const;
  inline void clear_limit_activity_data();
  static const int kLimitActivityDataFieldNumber = 11;
  inline const ::PB::LimitActivityData& limit_activity_data() const;
  inline ::PB::LimitActivityData* mutable_limit_activity_data();
  inline ::PB::LimitActivityData* release_limit_activity_data();
  inline void set_allocated_limit_activity_data(::PB::LimitActivityData* limit_activity_data);

  // optional uint32 is_take_next_day_reward = 12;
  inline bool has_is_take_next_day_reward() const;
  inline void clear_is_take_next_day_reward();
  static const int kIsTakeNextDayRewardFieldNumber = 12;
  inline ::google::protobuf::uint32 is_take_next_day_reward() const;
  inline void set_is_take_next_day_reward(::google::protobuf::uint32 value);

  // optional .PB.SuperDiscountData super_discount_data = 13;
  inline bool has_super_discount_data() const;
  inline void clear_super_discount_data();
  static const int kSuperDiscountDataFieldNumber = 13;
  inline const ::PB::SuperDiscountData& super_discount_data() const;
  inline ::PB::SuperDiscountData* mutable_super_discount_data();
  inline ::PB::SuperDiscountData* release_super_discount_data();
  inline void set_allocated_super_discount_data(::PB::SuperDiscountData* super_discount_data);

  // optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
  inline bool has_role_festival_activity_info() const;
  inline void clear_role_festival_activity_info();
  static const int kRoleFestivalActivityInfoFieldNumber = 14;
  inline const ::PB::RoleFestivalActivityInfo& role_festival_activity_info() const;
  inline ::PB::RoleFestivalActivityInfo* mutable_role_festival_activity_info();
  inline ::PB::RoleFestivalActivityInfo* release_role_festival_activity_info();
  inline void set_allocated_role_festival_activity_info(::PB::RoleFestivalActivityInfo* role_festival_activity_info);

  // optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
  inline bool has_role_accurate_recommend_data() const;
  inline void clear_role_accurate_recommend_data();
  static const int kRoleAccurateRecommendDataFieldNumber = 15;
  inline const ::PB::RoleAccurateRecommendData& role_accurate_recommend_data() const;
  inline ::PB::RoleAccurateRecommendData* mutable_role_accurate_recommend_data();
  inline ::PB::RoleAccurateRecommendData* release_role_accurate_recommend_data();
  inline void set_allocated_role_accurate_recommend_data(::PB::RoleAccurateRecommendData* role_accurate_recommend_data);

  // optional .PB.RoleChristmasData role_christmas_data = 16;
  inline bool has_role_christmas_data() const;
  inline void clear_role_christmas_data();
  static const int kRoleChristmasDataFieldNumber = 16;
  inline const ::PB::RoleChristmasData& role_christmas_data() const;
  inline ::PB::RoleChristmasData* mutable_role_christmas_data();
  inline ::PB::RoleChristmasData* release_role_christmas_data();
  inline void set_allocated_role_christmas_data(::PB::RoleChristmasData* role_christmas_data);

  // optional .PB.OnlineRewardData online_reward_data = 17;
  inline bool has_online_reward_data() const;
  inline void clear_online_reward_data();
  static const int kOnlineRewardDataFieldNumber = 17;
  inline const ::PB::OnlineRewardData& online_reward_data() const;
  inline ::PB::OnlineRewardData* mutable_online_reward_data();
  inline ::PB::OnlineRewardData* release_online_reward_data();
  inline void set_allocated_online_reward_data(::PB::OnlineRewardData* online_reward_data);

  // optional .PB.SevenDayLoginData seven_day_login_data = 18;
  inline bool has_seven_day_login_data() const;
  inline void clear_seven_day_login_data();
  static const int kSevenDayLoginDataFieldNumber = 18;
  inline const ::PB::SevenDayLoginData& seven_day_login_data() const;
  inline ::PB::SevenDayLoginData* mutable_seven_day_login_data();
  inline ::PB::SevenDayLoginData* release_seven_day_login_data();
  inline void set_allocated_seven_day_login_data(::PB::SevenDayLoginData* seven_day_login_data);

  // optional .PB.FacebookActivityData facebook_activity_data = 19;
  inline bool has_facebook_activity_data() const;
  inline void clear_facebook_activity_data();
  static const int kFacebookActivityDataFieldNumber = 19;
  inline const ::PB::FacebookActivityData& facebook_activity_data() const;
  inline ::PB::FacebookActivityData* mutable_facebook_activity_data();
  inline ::PB::FacebookActivityData* release_facebook_activity_data();
  inline void set_allocated_facebook_activity_data(::PB::FacebookActivityData* facebook_activity_data);

  // optional .PB.RechargeRewardData recharge_reward_data = 20;
  inline bool has_recharge_reward_data() const;
  inline void clear_recharge_reward_data();
  static const int kRechargeRewardDataFieldNumber = 20;
  inline const ::PB::RechargeRewardData& recharge_reward_data() const;
  inline ::PB::RechargeRewardData* mutable_recharge_reward_data();
  inline ::PB::RechargeRewardData* release_recharge_reward_data();
  inline void set_allocated_recharge_reward_data(::PB::RechargeRewardData* recharge_reward_data);

  // optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
  inline bool has_total_recharge_reward_data() const;
  inline void clear_total_recharge_reward_data();
  static const int kTotalRechargeRewardDataFieldNumber = 21;
  inline const ::PB::TotalRechargeRewardData& total_recharge_reward_data() const;
  inline ::PB::TotalRechargeRewardData* mutable_total_recharge_reward_data();
  inline ::PB::TotalRechargeRewardData* release_total_recharge_reward_data();
  inline void set_allocated_total_recharge_reward_data(::PB::TotalRechargeRewardData* total_recharge_reward_data);

  // optional .PB.SuperDiscountData new_super_discount_data = 22;
  inline bool has_new_super_discount_data() const;
  inline void clear_new_super_discount_data();
  static const int kNewSuperDiscountDataFieldNumber = 22;
  inline const ::PB::SuperDiscountData& new_super_discount_data() const;
  inline ::PB::SuperDiscountData* mutable_new_super_discount_data();
  inline ::PB::SuperDiscountData* release_new_super_discount_data();
  inline void set_allocated_new_super_discount_data(::PB::SuperDiscountData* new_super_discount_data);

  // optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
  inline bool has_role_hot_sale_goods() const;
  inline void clear_role_hot_sale_goods();
  static const int kRoleHotSaleGoodsFieldNumber = 23;
  inline const ::PB::RoleHotSaleGoodsData& role_hot_sale_goods() const;
  inline ::PB::RoleHotSaleGoodsData* mutable_role_hot_sale_goods();
  inline ::PB::RoleHotSaleGoodsData* release_role_hot_sale_goods();
  inline void set_allocated_role_hot_sale_goods(::PB::RoleHotSaleGoodsData* role_hot_sale_goods);

  // optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
  inline bool has_role_camp_recruit_data() const;
  inline void clear_role_camp_recruit_data();
  static const int kRoleCampRecruitDataFieldNumber = 24;
  inline const ::PB::RoleCampRecruitData& role_camp_recruit_data() const;
  inline ::PB::RoleCampRecruitData* mutable_role_camp_recruit_data();
  inline ::PB::RoleCampRecruitData* release_role_camp_recruit_data();
  inline void set_allocated_role_camp_recruit_data(::PB::RoleCampRecruitData* role_camp_recruit_data);

  // optional .PB.UnlockActivityData role_unlock_activity_data = 25;
  inline bool has_role_unlock_activity_data() const;
  inline void clear_role_unlock_activity_data();
  static const int kRoleUnlockActivityDataFieldNumber = 25;
  inline const ::PB::UnlockActivityData& role_unlock_activity_data() const;
  inline ::PB::UnlockActivityData* mutable_role_unlock_activity_data();
  inline ::PB::UnlockActivityData* release_role_unlock_activity_data();
  inline void set_allocated_role_unlock_activity_data(::PB::UnlockActivityData* role_unlock_activity_data);

  // optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
  inline bool has_role_recharge_and_cost_rank_data() const;
  inline void clear_role_recharge_and_cost_rank_data();
  static const int kRoleRechargeAndCostRankDataFieldNumber = 26;
  inline const ::PB::RechargeAndCostRankData& role_recharge_and_cost_rank_data() const;
  inline ::PB::RechargeAndCostRankData* mutable_role_recharge_and_cost_rank_data();
  inline ::PB::RechargeAndCostRankData* release_role_recharge_and_cost_rank_data();
  inline void set_allocated_role_recharge_and_cost_rank_data(::PB::RechargeAndCostRankData* role_recharge_and_cost_rank_data);

  // @@protoc_insertion_point(class_scope:PB.RoleActivityData)
 private:
  inline void set_has_tqt_data();
  inline void clear_has_tqt_data();
  inline void set_has_ycs_data();
  inline void clear_has_ycs_data();
  inline void set_has_vip_gift_data();
  inline void clear_has_vip_gift_data();
  inline void set_has_recharge_data();
  inline void clear_has_recharge_data();
  inline void set_has_open_server_fund_data();
  inline void clear_has_open_server_fund_data();
  inline void set_has_all_people_welfare_data();
  inline void clear_has_all_people_welfare_data();
  inline void set_has_limit_activity_data();
  inline void clear_has_limit_activity_data();
  inline void set_has_is_take_next_day_reward();
  inline void clear_has_is_take_next_day_reward();
  inline void set_has_super_discount_data();
  inline void clear_has_super_discount_data();
  inline void set_has_role_festival_activity_info();
  inline void clear_has_role_festival_activity_info();
  inline void set_has_role_accurate_recommend_data();
  inline void clear_has_role_accurate_recommend_data();
  inline void set_has_role_christmas_data();
  inline void clear_has_role_christmas_data();
  inline void set_has_online_reward_data();
  inline void clear_has_online_reward_data();
  inline void set_has_seven_day_login_data();
  inline void clear_has_seven_day_login_data();
  inline void set_has_facebook_activity_data();
  inline void clear_has_facebook_activity_data();
  inline void set_has_recharge_reward_data();
  inline void clear_has_recharge_reward_data();
  inline void set_has_total_recharge_reward_data();
  inline void clear_has_total_recharge_reward_data();
  inline void set_has_new_super_discount_data();
  inline void clear_has_new_super_discount_data();
  inline void set_has_role_hot_sale_goods();
  inline void clear_has_role_hot_sale_goods();
  inline void set_has_role_camp_recruit_data();
  inline void clear_has_role_camp_recruit_data();
  inline void set_has_role_unlock_activity_data();
  inline void clear_has_role_unlock_activity_data();
  inline void set_has_role_recharge_and_cost_rank_data();
  inline void clear_has_role_recharge_and_cost_rank_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::TQTData* tqt_data_;
  ::PB::YCSData* ycs_data_;
  ::google::protobuf::RepeatedPtrField< ::PB::SevenDayTargetData > seven_day_target_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > completion_reward_record_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::LevelShopActivityData > level_shop_activity_data_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > level_gift_take_record_list_;
  ::PB::VipGiftData* vip_gift_data_;
  ::PB::RoleRechargeData* recharge_data_;
  ::PB::OpenServerFundData* open_server_fund_data_;
  ::PB::AllPeopleWelfareData* all_people_welfare_data_;
  ::PB::LimitActivityData* limit_activity_data_;
  ::PB::SuperDiscountData* super_discount_data_;
  ::PB::RoleFestivalActivityInfo* role_festival_activity_info_;
  ::PB::RoleAccurateRecommendData* role_accurate_recommend_data_;
  ::PB::RoleChristmasData* role_christmas_data_;
  ::PB::OnlineRewardData* online_reward_data_;
  ::PB::SevenDayLoginData* seven_day_login_data_;
  ::PB::FacebookActivityData* facebook_activity_data_;
  ::PB::RechargeRewardData* recharge_reward_data_;
  ::PB::TotalRechargeRewardData* total_recharge_reward_data_;
  ::PB::SuperDiscountData* new_super_discount_data_;
  ::PB::RoleHotSaleGoodsData* role_hot_sale_goods_;
  ::PB::RoleCampRecruitData* role_camp_recruit_data_;
  ::PB::UnlockActivityData* role_unlock_activity_data_;
  ::PB::RechargeAndCostRankData* role_recharge_and_cost_rank_data_;
  ::google::protobuf::uint32 is_take_next_day_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleActivityData* default_instance_;
};
// -------------------------------------------------------------------

class LandPatrolEvent : public ::google::protobuf::Message {
 public:
  LandPatrolEvent();
  virtual ~LandPatrolEvent();

  LandPatrolEvent(const LandPatrolEvent& from);

  inline LandPatrolEvent& operator=(const LandPatrolEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LandPatrolEvent& default_instance();

  void Swap(LandPatrolEvent* other);

  // implements Message ----------------------------------------------

  LandPatrolEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LandPatrolEvent& from);
  void MergeFrom(const LandPatrolEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional uint32 happen_time = 2;
  inline bool has_happen_time() const;
  inline void clear_happen_time();
  static const int kHappenTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 happen_time() const;
  inline void set_happen_time(::google::protobuf::uint32 value);

  // optional uint32 is_double_reward = 3;
  inline bool has_is_double_reward() const;
  inline void clear_is_double_reward();
  static const int kIsDoubleRewardFieldNumber = 3;
  inline ::google::protobuf::uint32 is_double_reward() const;
  inline void set_is_double_reward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.LandPatrolEvent)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_happen_time();
  inline void clear_has_happen_time();
  inline void set_has_is_double_reward();
  inline void clear_has_is_double_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 happen_time_;
  ::google::protobuf::uint32 is_double_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LandPatrolEvent* default_instance_;
};
// -------------------------------------------------------------------

class LandCityData : public ::google::protobuf::Message {
 public:
  LandCityData();
  virtual ~LandCityData();

  LandCityData(const LandCityData& from);

  inline LandCityData& operator=(const LandCityData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LandCityData& default_instance();

  void Swap(LandCityData* other);

  // implements Message ----------------------------------------------

  LandCityData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LandCityData& from);
  void MergeFrom(const LandCityData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 city_id = 1;
  inline bool has_city_id() const;
  inline void clear_city_id();
  static const int kCityIdFieldNumber = 1;
  inline ::google::protobuf::uint32 city_id() const;
  inline void set_city_id(::google::protobuf::uint32 value);

  // optional uint32 skill_level = 2;
  inline bool has_skill_level() const;
  inline void clear_skill_level();
  static const int kSkillLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 skill_level() const;
  inline void set_skill_level(::google::protobuf::uint32 value);

  // optional uint32 patrol_hero_info_id = 3;
  inline bool has_patrol_hero_info_id() const;
  inline void clear_patrol_hero_info_id();
  static const int kPatrolHeroInfoIdFieldNumber = 3;
  inline ::google::protobuf::uint32 patrol_hero_info_id() const;
  inline void set_patrol_hero_info_id(::google::protobuf::uint32 value);

  // optional uint32 start_patrol_time = 4;
  inline bool has_start_patrol_time() const;
  inline void clear_start_patrol_time();
  static const int kStartPatrolTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 start_patrol_time() const;
  inline void set_start_patrol_time(::google::protobuf::uint32 value);

  // optional uint32 patrol_type = 5;
  inline bool has_patrol_type() const;
  inline void clear_patrol_type();
  static const int kPatrolTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 patrol_type() const;
  inline void set_patrol_type(::google::protobuf::uint32 value);

  // optional uint32 time_type = 6;
  inline bool has_time_type() const;
  inline void clear_time_type();
  static const int kTimeTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 time_type() const;
  inline void set_time_type(::google::protobuf::uint32 value);

  // optional uint32 is_riot = 7;
  inline bool has_is_riot() const;
  inline void clear_is_riot();
  static const int kIsRiotFieldNumber = 7;
  inline ::google::protobuf::uint32 is_riot() const;
  inline void set_is_riot(::google::protobuf::uint32 value);

  // optional uint32 is_take_reward = 8;
  inline bool has_is_take_reward() const;
  inline void clear_is_take_reward();
  static const int kIsTakeRewardFieldNumber = 8;
  inline ::google::protobuf::uint32 is_take_reward() const;
  inline void set_is_take_reward(::google::protobuf::uint32 value);

  // optional uint32 reward_item_num = 9;
  inline bool has_reward_item_num() const;
  inline void clear_reward_item_num();
  static const int kRewardItemNumFieldNumber = 9;
  inline ::google::protobuf::uint32 reward_item_num() const;
  inline void set_reward_item_num(::google::protobuf::uint32 value);

  // optional uint32 last_happen_event_time = 10;
  inline bool has_last_happen_event_time() const;
  inline void clear_last_happen_event_time();
  static const int kLastHappenEventTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 last_happen_event_time() const;
  inline void set_last_happen_event_time(::google::protobuf::uint32 value);

  // optional uint32 interval_time = 11;
  inline bool has_interval_time() const;
  inline void clear_interval_time();
  static const int kIntervalTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 interval_time() const;
  inline void set_interval_time(::google::protobuf::uint32 value);

  // optional .PB.LandPatrolEvent patrol_event_list = 12;
  inline bool has_patrol_event_list() const;
  inline void clear_patrol_event_list();
  static const int kPatrolEventListFieldNumber = 12;
  inline const ::PB::LandPatrolEvent& patrol_event_list() const;
  inline ::PB::LandPatrolEvent* mutable_patrol_event_list();
  inline ::PB::LandPatrolEvent* release_patrol_event_list();
  inline void set_allocated_patrol_event_list(::PB::LandPatrolEvent* patrol_event_list);

  // optional .PB.LandPatrolEvent riot_event_list = 13;
  inline bool has_riot_event_list() const;
  inline void clear_riot_event_list();
  static const int kRiotEventListFieldNumber = 13;
  inline const ::PB::LandPatrolEvent& riot_event_list() const;
  inline ::PB::LandPatrolEvent* mutable_riot_event_list();
  inline ::PB::LandPatrolEvent* release_riot_event_list();
  inline void set_allocated_riot_event_list(::PB::LandPatrolEvent* riot_event_list);

  // @@protoc_insertion_point(class_scope:PB.LandCityData)
 private:
  inline void set_has_city_id();
  inline void clear_has_city_id();
  inline void set_has_skill_level();
  inline void clear_has_skill_level();
  inline void set_has_patrol_hero_info_id();
  inline void clear_has_patrol_hero_info_id();
  inline void set_has_start_patrol_time();
  inline void clear_has_start_patrol_time();
  inline void set_has_patrol_type();
  inline void clear_has_patrol_type();
  inline void set_has_time_type();
  inline void clear_has_time_type();
  inline void set_has_is_riot();
  inline void clear_has_is_riot();
  inline void set_has_is_take_reward();
  inline void clear_has_is_take_reward();
  inline void set_has_reward_item_num();
  inline void clear_has_reward_item_num();
  inline void set_has_last_happen_event_time();
  inline void clear_has_last_happen_event_time();
  inline void set_has_interval_time();
  inline void clear_has_interval_time();
  inline void set_has_patrol_event_list();
  inline void clear_has_patrol_event_list();
  inline void set_has_riot_event_list();
  inline void clear_has_riot_event_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 city_id_;
  ::google::protobuf::uint32 skill_level_;
  ::google::protobuf::uint32 patrol_hero_info_id_;
  ::google::protobuf::uint32 start_patrol_time_;
  ::google::protobuf::uint32 patrol_type_;
  ::google::protobuf::uint32 time_type_;
  ::google::protobuf::uint32 is_riot_;
  ::google::protobuf::uint32 is_take_reward_;
  ::google::protobuf::uint32 reward_item_num_;
  ::google::protobuf::uint32 last_happen_event_time_;
  ::PB::LandPatrolEvent* patrol_event_list_;
  ::PB::LandPatrolEvent* riot_event_list_;
  ::google::protobuf::uint32 interval_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static LandCityData* default_instance_;
};
// -------------------------------------------------------------------

class GuildBaseData : public ::google::protobuf::Message {
 public:
  GuildBaseData();
  virtual ~GuildBaseData();

  GuildBaseData(const GuildBaseData& from);

  inline GuildBaseData& operator=(const GuildBaseData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildBaseData& default_instance();

  void Swap(GuildBaseData* other);

  // implements Message ----------------------------------------------

  GuildBaseData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildBaseData& from);
  void MergeFrom(const GuildBaseData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional string guild_name = 3;
  inline bool has_guild_name() const;
  inline void clear_guild_name();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guild_name() const;
  inline void set_guild_name(const ::std::string& value);
  inline void set_guild_name(const char* value);
  inline void set_guild_name(const char* value, size_t size);
  inline ::std::string* mutable_guild_name();
  inline ::std::string* release_guild_name();
  inline void set_allocated_guild_name(::std::string* guild_name);

  // optional uint32 icon_id = 4;
  inline bool has_icon_id() const;
  inline void clear_icon_id();
  static const int kIconIdFieldNumber = 4;
  inline ::google::protobuf::uint32 icon_id() const;
  inline void set_icon_id(::google::protobuf::uint32 value);

  // optional uint32 create_time = 5;
  inline bool has_create_time() const;
  inline void clear_create_time();
  static const int kCreateTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 create_time() const;
  inline void set_create_time(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 7;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 7;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 qs = 8;
  inline bool has_qs() const;
  inline void clear_qs();
  static const int kQsFieldNumber = 8;
  inline ::google::protobuf::uint32 qs() const;
  inline void set_qs(::google::protobuf::uint32 value);

  // optional uint32 qy_times = 9;
  inline bool has_qy_times() const;
  inline void clear_qy_times();
  static const int kQyTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 qy_times() const;
  inline void set_qy_times(::google::protobuf::uint32 value);

  // optional string notice = 10;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 10;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional string declaration = 11;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 11;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // optional uint32 cur_pass_chapter = 12;
  inline bool has_cur_pass_chapter() const;
  inline void clear_cur_pass_chapter();
  static const int kCurPassChapterFieldNumber = 12;
  inline ::google::protobuf::uint32 cur_pass_chapter() const;
  inline void set_cur_pass_chapter(::google::protobuf::uint32 value);

  // optional uint32 today_start_chapter = 13;
  inline bool has_today_start_chapter() const;
  inline void clear_today_start_chapter();
  static const int kTodayStartChapterFieldNumber = 13;
  inline ::google::protobuf::uint32 today_start_chapter() const;
  inline void set_today_start_chapter(::google::protobuf::uint32 value);

  // optional uint32 history_chapter_record = 14;
  inline bool has_history_chapter_record() const;
  inline void clear_history_chapter_record();
  static const int kHistoryChapterRecordFieldNumber = 14;
  inline ::google::protobuf::uint32 history_chapter_record() const;
  inline void set_history_chapter_record(::google::protobuf::uint32 value);

  // optional uint32 is_from_history_chapter = 15;
  inline bool has_is_from_history_chapter() const;
  inline void clear_is_from_history_chapter();
  static const int kIsFromHistoryChapterFieldNumber = 15;
  inline ::google::protobuf::uint32 is_from_history_chapter() const;
  inline void set_is_from_history_chapter(::google::protobuf::uint32 value);

  // optional uint32 active = 16;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 16;
  inline ::google::protobuf::uint32 active() const;
  inline void set_active(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildBaseData)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_guild_name();
  inline void clear_has_guild_name();
  inline void set_has_icon_id();
  inline void clear_has_icon_id();
  inline void set_has_create_time();
  inline void clear_has_create_time();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_qs();
  inline void clear_has_qs();
  inline void set_has_qy_times();
  inline void clear_has_qy_times();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_cur_pass_chapter();
  inline void clear_has_cur_pass_chapter();
  inline void set_has_today_start_chapter();
  inline void clear_has_today_start_chapter();
  inline void set_has_history_chapter_record();
  inline void clear_has_history_chapter_record();
  inline void set_has_is_from_history_chapter();
  inline void clear_has_is_from_history_chapter();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 server_id_;
  ::std::string* guild_name_;
  ::google::protobuf::uint32 icon_id_;
  ::google::protobuf::uint32 create_time_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 qs_;
  ::google::protobuf::uint32 qy_times_;
  ::std::string* notice_;
  ::std::string* declaration_;
  ::google::protobuf::uint32 cur_pass_chapter_;
  ::google::protobuf::uint32 today_start_chapter_;
  ::google::protobuf::uint32 history_chapter_record_;
  ::google::protobuf::uint32 is_from_history_chapter_;
  ::google::protobuf::uint32 active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildBaseData* default_instance_;
};
// -------------------------------------------------------------------

class GuildMember : public ::google::protobuf::Message {
 public:
  GuildMember();
  virtual ~GuildMember();

  GuildMember(const GuildMember& from);

  inline GuildMember& operator=(const GuildMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMember& default_instance();

  void Swap(GuildMember* other);

  // implements Message ----------------------------------------------

  GuildMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMember& from);
  void MergeFrom(const GuildMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional uint32 total_contribution = 3;
  inline bool has_total_contribution() const;
  inline void clear_total_contribution();
  static const int kTotalContributionFieldNumber = 3;
  inline ::google::protobuf::uint32 total_contribution() const;
  inline void set_total_contribution(::google::protobuf::uint32 value);

  // optional uint32 cur_contribution = 4;
  inline bool has_cur_contribution() const;
  inline void clear_cur_contribution();
  static const int kCurContributionFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_contribution() const;
  inline void set_cur_contribution(::google::protobuf::uint32 value);

  // optional uint32 today_contribution = 5;
  inline bool has_today_contribution() const;
  inline void clear_today_contribution();
  static const int kTodayContributionFieldNumber = 5;
  inline ::google::protobuf::uint32 today_contribution() const;
  inline void set_today_contribution(::google::protobuf::uint32 value);

  // optional uint32 last_logout_time = 6;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint32 value);

  // optional uint32 qy_type = 7;
  inline bool has_qy_type() const;
  inline void clear_qy_type();
  static const int kQyTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 qy_type() const;
  inline void set_qy_type(::google::protobuf::uint32 value);

  // optional uint32 battle_fb_times = 8;
  inline bool has_battle_fb_times() const;
  inline void clear_battle_fb_times();
  static const int kBattleFbTimesFieldNumber = 8;
  inline ::google::protobuf::uint32 battle_fb_times() const;
  inline void set_battle_fb_times(::google::protobuf::uint32 value);

  // optional uint32 buy_battle_fb_times = 9;
  inline bool has_buy_battle_fb_times() const;
  inline void clear_buy_battle_fb_times();
  static const int kBuyBattleFbTimesFieldNumber = 9;
  inline ::google::protobuf::uint32 buy_battle_fb_times() const;
  inline void set_buy_battle_fb_times(::google::protobuf::uint32 value);

  // repeated uint32 qs_reward_record_list = 10;
  inline int qs_reward_record_list_size() const;
  inline void clear_qs_reward_record_list();
  static const int kQsRewardRecordListFieldNumber = 10;
  inline ::google::protobuf::uint32 qs_reward_record_list(int index) const;
  inline void set_qs_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_qs_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      qs_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_qs_reward_record_list();

  // optional uint32 battle_times_last_recover_time = 11;
  inline bool has_battle_times_last_recover_time() const;
  inline void clear_battle_times_last_recover_time();
  static const int kBattleTimesLastRecoverTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 battle_times_last_recover_time() const;
  inline void set_battle_times_last_recover_time(::google::protobuf::uint32 value);

  // repeated uint32 take_chapter_reward_record = 12;
  inline int take_chapter_reward_record_size() const;
  inline void clear_take_chapter_reward_record();
  static const int kTakeChapterRewardRecordFieldNumber = 12;
  inline ::google::protobuf::uint32 take_chapter_reward_record(int index) const;
  inline void set_take_chapter_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_take_chapter_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      take_chapter_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_take_chapter_reward_record();

  // @@protoc_insertion_point(class_scope:PB.GuildMember)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_total_contribution();
  inline void clear_has_total_contribution();
  inline void set_has_cur_contribution();
  inline void clear_has_cur_contribution();
  inline void set_has_today_contribution();
  inline void clear_has_today_contribution();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();
  inline void set_has_qy_type();
  inline void clear_has_qy_type();
  inline void set_has_battle_fb_times();
  inline void clear_has_battle_fb_times();
  inline void set_has_buy_battle_fb_times();
  inline void clear_has_buy_battle_fb_times();
  inline void set_has_battle_times_last_recover_time();
  inline void clear_has_battle_times_last_recover_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 position_;
  ::google::protobuf::uint32 total_contribution_;
  ::google::protobuf::uint32 cur_contribution_;
  ::google::protobuf::uint32 today_contribution_;
  ::google::protobuf::uint32 last_logout_time_;
  ::google::protobuf::uint32 qy_type_;
  ::google::protobuf::uint32 battle_fb_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > qs_reward_record_list_;
  ::google::protobuf::uint32 buy_battle_fb_times_;
  ::google::protobuf::uint32 battle_times_last_recover_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > take_chapter_reward_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildMember* default_instance_;
};
// -------------------------------------------------------------------

class GuildEvent : public ::google::protobuf::Message {
 public:
  GuildEvent();
  virtual ~GuildEvent();

  GuildEvent(const GuildEvent& from);

  inline GuildEvent& operator=(const GuildEvent& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildEvent& default_instance();

  void Swap(GuildEvent* other);

  // implements Message ----------------------------------------------

  GuildEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildEvent& from);
  void MergeFrom(const GuildEvent& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 event_id = 1;
  inline bool has_event_id() const;
  inline void clear_event_id();
  static const int kEventIdFieldNumber = 1;
  inline ::google::protobuf::uint32 event_id() const;
  inline void set_event_id(::google::protobuf::uint32 value);

  // optional string target_name = 2;
  inline bool has_target_name() const;
  inline void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  inline const ::std::string& target_name() const;
  inline void set_target_name(const ::std::string& value);
  inline void set_target_name(const char* value);
  inline void set_target_name(const char* value, size_t size);
  inline ::std::string* mutable_target_name();
  inline ::std::string* release_target_name();
  inline void set_allocated_target_name(::std::string* target_name);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildEvent)
 private:
  inline void set_has_event_id();
  inline void clear_has_event_id();
  inline void set_has_target_name();
  inline void clear_has_target_name();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* target_name_;
  ::google::protobuf::uint32 event_id_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildEvent* default_instance_;
};
// -------------------------------------------------------------------

class GuildLeaveMessage : public ::google::protobuf::Message {
 public:
  GuildLeaveMessage();
  virtual ~GuildLeaveMessage();

  GuildLeaveMessage(const GuildLeaveMessage& from);

  inline GuildLeaveMessage& operator=(const GuildLeaveMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildLeaveMessage& default_instance();

  void Swap(GuildLeaveMessage* other);

  // implements Message ----------------------------------------------

  GuildLeaveMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildLeaveMessage& from);
  void MergeFrom(const GuildLeaveMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint32 position() const;
  inline void set_position(::google::protobuf::uint32 value);

  // optional string text = 4;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 4;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // @@protoc_insertion_point(class_scope:PB.GuildLeaveMessage)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 position_;
  ::std::string* text_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildLeaveMessage* default_instance_;
};
// -------------------------------------------------------------------

class ChatRecord : public ::google::protobuf::Message {
 public:
  ChatRecord();
  virtual ~ChatRecord();

  ChatRecord(const ChatRecord& from);

  inline ChatRecord& operator=(const ChatRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRecord& default_instance();

  void Swap(ChatRecord* other);

  // implements Message ----------------------------------------------

  ChatRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRecord& from);
  void MergeFrom(const ChatRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 head_img_id = 2;
  inline bool has_head_img_id() const;
  inline void clear_head_img_id();
  static const int kHeadImgIdFieldNumber = 2;
  inline ::google::protobuf::uint32 head_img_id() const;
  inline void set_head_img_id(::google::protobuf::uint32 value);

  // optional uint32 role_vip_level = 3;
  inline bool has_role_vip_level() const;
  inline void clear_role_vip_level();
  static const int kRoleVipLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 role_vip_level() const;
  inline void set_role_vip_level(::google::protobuf::uint32 value);

  // optional string role_name = 4;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 4;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional string chat_text = 5;
  inline bool has_chat_text() const;
  inline void clear_chat_text();
  static const int kChatTextFieldNumber = 5;
  inline const ::std::string& chat_text() const;
  inline void set_chat_text(const ::std::string& value);
  inline void set_chat_text(const char* value);
  inline void set_chat_text(const char* value, size_t size);
  inline ::std::string* mutable_chat_text();
  inline ::std::string* release_chat_text();
  inline void set_allocated_chat_text(::std::string* chat_text);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 role_use_title_id = 7;
  inline bool has_role_use_title_id() const;
  inline void clear_role_use_title_id();
  static const int kRoleUseTitleIdFieldNumber = 7;
  inline ::google::protobuf::uint32 role_use_title_id() const;
  inline void set_role_use_title_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ChatRecord)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_head_img_id();
  inline void clear_has_head_img_id();
  inline void set_has_role_vip_level();
  inline void clear_has_role_vip_level();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_chat_text();
  inline void clear_has_chat_text();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_role_use_title_id();
  inline void clear_has_role_use_title_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 head_img_id_;
  ::std::string* role_name_;
  ::google::protobuf::uint32 role_vip_level_;
  ::google::protobuf::uint32 time_;
  ::std::string* chat_text_;
  ::google::protobuf::uint32 role_use_title_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ChatRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildCampMonster : public ::google::protobuf::Message {
 public:
  GuildCampMonster();
  virtual ~GuildCampMonster();

  GuildCampMonster(const GuildCampMonster& from);

  inline GuildCampMonster& operator=(const GuildCampMonster& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCampMonster& default_instance();

  void Swap(GuildCampMonster* other);

  // implements Message ----------------------------------------------

  GuildCampMonster* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCampMonster& from);
  void MergeFrom(const GuildCampMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::uint32 camp() const;
  inline void set_camp(::google::protobuf::uint32 value);

  // optional string killer_name = 2;
  inline bool has_killer_name() const;
  inline void clear_killer_name();
  static const int kKillerNameFieldNumber = 2;
  inline const ::std::string& killer_name() const;
  inline void set_killer_name(const ::std::string& value);
  inline void set_killer_name(const char* value);
  inline void set_killer_name(const char* value, size_t size);
  inline ::std::string* mutable_killer_name();
  inline ::std::string* release_killer_name();
  inline void set_allocated_killer_name(::std::string* killer_name);

  // repeated .PB.MonsterData monster_list = 3;
  inline int monster_list_size() const;
  inline void clear_monster_list();
  static const int kMonsterListFieldNumber = 3;
  inline const ::PB::MonsterData& monster_list(int index) const;
  inline ::PB::MonsterData* mutable_monster_list(int index);
  inline ::PB::MonsterData* add_monster_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >&
      monster_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >*
      mutable_monster_list();

  // @@protoc_insertion_point(class_scope:PB.GuildCampMonster)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_killer_name();
  inline void clear_has_killer_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* killer_name_;
  ::google::protobuf::RepeatedPtrField< ::PB::MonsterData > monster_list_;
  ::google::protobuf::uint32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildCampMonster* default_instance_;
};
// -------------------------------------------------------------------

class GuildFBBox : public ::google::protobuf::Message {
 public:
  GuildFBBox();
  virtual ~GuildFBBox();

  GuildFBBox(const GuildFBBox& from);

  inline GuildFBBox& operator=(const GuildFBBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildFBBox& default_instance();

  void Swap(GuildFBBox* other);

  // implements Message ----------------------------------------------

  GuildFBBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildFBBox& from);
  void MergeFrom(const GuildFBBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 box_idx = 1;
  inline bool has_box_idx() const;
  inline void clear_box_idx();
  static const int kBoxIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 box_idx() const;
  inline void set_box_idx(::google::protobuf::uint32 value);

  // optional uint32 box_reward_idx = 2;
  inline bool has_box_reward_idx() const;
  inline void clear_box_reward_idx();
  static const int kBoxRewardIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 box_reward_idx() const;
  inline void set_box_reward_idx(::google::protobuf::uint32 value);

  // optional string role_name = 3;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 3;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // @@protoc_insertion_point(class_scope:PB.GuildFBBox)
 private:
  inline void set_has_box_idx();
  inline void clear_has_box_idx();
  inline void set_has_box_reward_idx();
  inline void clear_has_box_reward_idx();
  inline void set_has_role_name();
  inline void clear_has_role_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 box_idx_;
  ::google::protobuf::uint32 box_reward_idx_;
  ::std::string* role_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildFBBox* default_instance_;
};
// -------------------------------------------------------------------

class GuildCampBox : public ::google::protobuf::Message {
 public:
  GuildCampBox();
  virtual ~GuildCampBox();

  GuildCampBox(const GuildCampBox& from);

  inline GuildCampBox& operator=(const GuildCampBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildCampBox& default_instance();

  void Swap(GuildCampBox* other);

  // implements Message ----------------------------------------------

  GuildCampBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildCampBox& from);
  void MergeFrom(const GuildCampBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 camp = 1;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 1;
  inline ::google::protobuf::uint32 camp() const;
  inline void set_camp(::google::protobuf::uint32 value);

  // repeated .PB.GuildFBBox take_box_record_list = 2;
  inline int take_box_record_list_size() const;
  inline void clear_take_box_record_list();
  static const int kTakeBoxRecordListFieldNumber = 2;
  inline const ::PB::GuildFBBox& take_box_record_list(int index) const;
  inline ::PB::GuildFBBox* mutable_take_box_record_list(int index);
  inline ::PB::GuildFBBox* add_take_box_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildFBBox >&
      take_box_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildFBBox >*
      mutable_take_box_record_list();

  // repeated uint32 take_reward_player_list = 3;
  inline int take_reward_player_list_size() const;
  inline void clear_take_reward_player_list();
  static const int kTakeRewardPlayerListFieldNumber = 3;
  inline ::google::protobuf::uint32 take_reward_player_list(int index) const;
  inline void set_take_reward_player_list(int index, ::google::protobuf::uint32 value);
  inline void add_take_reward_player_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      take_reward_player_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_take_reward_player_list();

  // @@protoc_insertion_point(class_scope:PB.GuildCampBox)
 private:
  inline void set_has_camp();
  inline void clear_has_camp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::GuildFBBox > take_box_record_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > take_reward_player_list_;
  ::google::protobuf::uint32 camp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildCampBox* default_instance_;
};
// -------------------------------------------------------------------

class GuildMapRewardRecord : public ::google::protobuf::Message {
 public:
  GuildMapRewardRecord();
  virtual ~GuildMapRewardRecord();

  GuildMapRewardRecord(const GuildMapRewardRecord& from);

  inline GuildMapRewardRecord& operator=(const GuildMapRewardRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMapRewardRecord& default_instance();

  void Swap(GuildMapRewardRecord* other);

  // implements Message ----------------------------------------------

  GuildMapRewardRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMapRewardRecord& from);
  void MergeFrom(const GuildMapRewardRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chapter = 1;
  inline bool has_chapter() const;
  inline void clear_chapter();
  static const int kChapterFieldNumber = 1;
  inline ::google::protobuf::uint32 chapter() const;
  inline void set_chapter(::google::protobuf::uint32 value);

  // repeated .PB.GuildCampBox camp_box_list = 2;
  inline int camp_box_list_size() const;
  inline void clear_camp_box_list();
  static const int kCampBoxListFieldNumber = 2;
  inline const ::PB::GuildCampBox& camp_box_list(int index) const;
  inline ::PB::GuildCampBox* mutable_camp_box_list(int index);
  inline ::PB::GuildCampBox* add_camp_box_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildCampBox >&
      camp_box_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildCampBox >*
      mutable_camp_box_list();

  // @@protoc_insertion_point(class_scope:PB.GuildMapRewardRecord)
 private:
  inline void set_has_chapter();
  inline void clear_has_chapter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::GuildCampBox > camp_box_list_;
  ::google::protobuf::uint32 chapter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildMapRewardRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildMonsterDamageRecord : public ::google::protobuf::Message {
 public:
  GuildMonsterDamageRecord();
  virtual ~GuildMonsterDamageRecord();

  GuildMonsterDamageRecord(const GuildMonsterDamageRecord& from);

  inline GuildMonsterDamageRecord& operator=(const GuildMonsterDamageRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildMonsterDamageRecord& default_instance();

  void Swap(GuildMonsterDamageRecord* other);

  // implements Message ----------------------------------------------

  GuildMonsterDamageRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildMonsterDamageRecord& from);
  void MergeFrom(const GuildMonsterDamageRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildMonsterDamageRecord)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildMonsterDamageRecord* default_instance_;
};
// -------------------------------------------------------------------

class GuildInfo : public ::google::protobuf::Message {
 public:
  GuildInfo();
  virtual ~GuildInfo();

  GuildInfo(const GuildInfo& from);

  inline GuildInfo& operator=(const GuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildInfo& default_instance();

  void Swap(GuildInfo* other);

  // implements Message ----------------------------------------------

  GuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildInfo& from);
  void MergeFrom(const GuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PB.GuildBaseData base_data = 1;
  inline bool has_base_data() const;
  inline void clear_base_data();
  static const int kBaseDataFieldNumber = 1;
  inline const ::PB::GuildBaseData& base_data() const;
  inline ::PB::GuildBaseData* mutable_base_data();
  inline ::PB::GuildBaseData* release_base_data();
  inline void set_allocated_base_data(::PB::GuildBaseData* base_data);

  // repeated .PB.GuildMember member_list = 2;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 2;
  inline const ::PB::GuildMember& member_list(int index) const;
  inline ::PB::GuildMember* mutable_member_list(int index);
  inline ::PB::GuildMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMember >*
      mutable_member_list();

  // repeated .PB.GuildLeaveMessage leave_message_list = 3;
  inline int leave_message_list_size() const;
  inline void clear_leave_message_list();
  static const int kLeaveMessageListFieldNumber = 3;
  inline const ::PB::GuildLeaveMessage& leave_message_list(int index) const;
  inline ::PB::GuildLeaveMessage* mutable_leave_message_list(int index);
  inline ::PB::GuildLeaveMessage* add_leave_message_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildLeaveMessage >&
      leave_message_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildLeaveMessage >*
      mutable_leave_message_list();

  // repeated .PB.GuildEvent event_list = 4;
  inline int event_list_size() const;
  inline void clear_event_list();
  static const int kEventListFieldNumber = 4;
  inline const ::PB::GuildEvent& event_list(int index) const;
  inline ::PB::GuildEvent* mutable_event_list(int index);
  inline ::PB::GuildEvent* add_event_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildEvent >&
      event_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildEvent >*
      mutable_event_list();

  // repeated .PB.SkillData skill_list = 5;
  inline int skill_list_size() const;
  inline void clear_skill_list();
  static const int kSkillListFieldNumber = 5;
  inline const ::PB::SkillData& skill_list(int index) const;
  inline ::PB::SkillData* mutable_skill_list(int index);
  inline ::PB::SkillData* add_skill_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SkillData >&
      skill_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SkillData >*
      mutable_skill_list();

  // repeated uint32 apply_list = 6;
  inline int apply_list_size() const;
  inline void clear_apply_list();
  static const int kApplyListFieldNumber = 6;
  inline ::google::protobuf::uint32 apply_list(int index) const;
  inline void set_apply_list(int index, ::google::protobuf::uint32 value);
  inline void add_apply_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      apply_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_apply_list();

  // repeated .PB.ShopGoods goods_list = 7;
  inline int goods_list_size() const;
  inline void clear_goods_list();
  static const int kGoodsListFieldNumber = 7;
  inline const ::PB::ShopGoods& goods_list(int index) const;
  inline ::PB::ShopGoods* mutable_goods_list(int index);
  inline ::PB::ShopGoods* add_goods_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
      goods_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
      mutable_goods_list();

  // repeated .PB.ChatRecord chat_record_list = 8;
  inline int chat_record_list_size() const;
  inline void clear_chat_record_list();
  static const int kChatRecordListFieldNumber = 8;
  inline const ::PB::ChatRecord& chat_record_list(int index) const;
  inline ::PB::ChatRecord* mutable_chat_record_list(int index);
  inline ::PB::ChatRecord* add_chat_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ChatRecord >&
      chat_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ChatRecord >*
      mutable_chat_record_list();

  // repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
  inline int damage_record_list_size() const;
  inline void clear_damage_record_list();
  static const int kDamageRecordListFieldNumber = 9;
  inline const ::PB::GuildMonsterDamageRecord& damage_record_list(int index) const;
  inline ::PB::GuildMonsterDamageRecord* mutable_damage_record_list(int index);
  inline ::PB::GuildMonsterDamageRecord* add_damage_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMonsterDamageRecord >&
      damage_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMonsterDamageRecord >*
      mutable_damage_record_list();

  // repeated .PB.GuildCampMonster camp_monster_list = 10;
  inline int camp_monster_list_size() const;
  inline void clear_camp_monster_list();
  static const int kCampMonsterListFieldNumber = 10;
  inline const ::PB::GuildCampMonster& camp_monster_list(int index) const;
  inline ::PB::GuildCampMonster* mutable_camp_monster_list(int index);
  inline ::PB::GuildCampMonster* add_camp_monster_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildCampMonster >&
      camp_monster_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildCampMonster >*
      mutable_camp_monster_list();

  // repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
  inline int map_reward_record_list_size() const;
  inline void clear_map_reward_record_list();
  static const int kMapRewardRecordListFieldNumber = 11;
  inline const ::PB::GuildMapRewardRecord& map_reward_record_list(int index) const;
  inline ::PB::GuildMapRewardRecord* mutable_map_reward_record_list(int index);
  inline ::PB::GuildMapRewardRecord* add_map_reward_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMapRewardRecord >&
      map_reward_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMapRewardRecord >*
      mutable_map_reward_record_list();

  // optional uint32 create_monster_time = 12;
  inline bool has_create_monster_time() const;
  inline void clear_create_monster_time();
  static const int kCreateMonsterTimeFieldNumber = 12;
  inline ::google::protobuf::uint32 create_monster_time() const;
  inline void set_create_monster_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildInfo)
 private:
  inline void set_has_base_data();
  inline void clear_has_base_data();
  inline void set_has_create_monster_time();
  inline void clear_has_create_monster_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PB::GuildBaseData* base_data_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildMember > member_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildLeaveMessage > leave_message_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildEvent > event_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::SkillData > skill_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > apply_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods > goods_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::ChatRecord > chat_record_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildMonsterDamageRecord > damage_record_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildCampMonster > camp_monster_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildMapRewardRecord > map_reward_record_list_;
  ::google::protobuf::uint32 create_monster_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildInfo* default_instance_;
};
// -------------------------------------------------------------------

class MapComment : public ::google::protobuf::Message {
 public:
  MapComment();
  virtual ~MapComment();

  MapComment(const MapComment& from);

  inline MapComment& operator=(const MapComment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapComment& default_instance();

  void Swap(MapComment* other);

  // implements Message ----------------------------------------------

  MapComment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapComment& from);
  void MergeFrom(const MapComment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 comment_id = 2;
  inline bool has_comment_id() const;
  inline void clear_comment_id();
  static const int kCommentIdFieldNumber = 2;
  inline ::google::protobuf::uint32 comment_id() const;
  inline void set_comment_id(::google::protobuf::uint32 value);

  // optional string text = 3;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 3;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional uint32 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 like_times = 5;
  inline bool has_like_times() const;
  inline void clear_like_times();
  static const int kLikeTimesFieldNumber = 5;
  inline ::google::protobuf::uint32 like_times() const;
  inline void set_like_times(::google::protobuf::uint32 value);

  // repeated uint32 like_player_list = 6;
  inline int like_player_list_size() const;
  inline void clear_like_player_list();
  static const int kLikePlayerListFieldNumber = 6;
  inline ::google::protobuf::uint32 like_player_list(int index) const;
  inline void set_like_player_list(int index, ::google::protobuf::uint32 value);
  inline void add_like_player_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      like_player_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_like_player_list();

  // @@protoc_insertion_point(class_scope:PB.MapComment)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_comment_id();
  inline void clear_has_comment_id();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_like_times();
  inline void clear_has_like_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 comment_id_;
  ::std::string* text_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 like_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > like_player_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MapComment* default_instance_;
};
// -------------------------------------------------------------------

class MapComments : public ::google::protobuf::Message {
 public:
  MapComments();
  virtual ~MapComments();

  MapComments(const MapComments& from);

  inline MapComments& operator=(const MapComments& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapComments& default_instance();

  void Swap(MapComments* other);

  // implements Message ----------------------------------------------

  MapComments* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MapComments& from);
  void MergeFrom(const MapComments& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 map_id = 1;
  inline bool has_map_id() const;
  inline void clear_map_id();
  static const int kMapIdFieldNumber = 1;
  inline ::google::protobuf::uint32 map_id() const;
  inline void set_map_id(::google::protobuf::uint32 value);

  // repeated .PB.MapComment comment_list = 2;
  inline int comment_list_size() const;
  inline void clear_comment_list();
  static const int kCommentListFieldNumber = 2;
  inline const ::PB::MapComment& comment_list(int index) const;
  inline ::PB::MapComment* mutable_comment_list(int index);
  inline ::PB::MapComment* add_comment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::MapComment >&
      comment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::MapComment >*
      mutable_comment_list();

  // @@protoc_insertion_point(class_scope:PB.MapComments)
 private:
  inline void set_has_map_id();
  inline void clear_has_map_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::MapComment > comment_list_;
  ::google::protobuf::uint32 map_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static MapComments* default_instance_;
};
// -------------------------------------------------------------------

class RoleTempData : public ::google::protobuf::Message {
 public:
  RoleTempData();
  virtual ~RoleTempData();

  RoleTempData(const RoleTempData& from);

  inline RoleTempData& operator=(const RoleTempData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleTempData& default_instance();

  void Swap(RoleTempData* other);

  // implements Message ----------------------------------------------

  RoleTempData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleTempData& from);
  void MergeFrom(const RoleTempData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string text = 2;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 2;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // repeated uint32 param_list = 3;
  inline int param_list_size() const;
  inline void clear_param_list();
  static const int kParamListFieldNumber = 3;
  inline ::google::protobuf::uint32 param_list(int index) const;
  inline void set_param_list(int index, ::google::protobuf::uint32 value);
  inline void add_param_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      param_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_param_list();

  // @@protoc_insertion_point(class_scope:PB.RoleTempData)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_text();
  inline void clear_has_text();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* text_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > param_list_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleTempData* default_instance_;
};
// -------------------------------------------------------------------

class RoleTempDatas : public ::google::protobuf::Message {
 public:
  RoleTempDatas();
  virtual ~RoleTempDatas();

  RoleTempDatas(const RoleTempDatas& from);

  inline RoleTempDatas& operator=(const RoleTempDatas& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleTempDatas& default_instance();

  void Swap(RoleTempDatas* other);

  // implements Message ----------------------------------------------

  RoleTempDatas* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleTempDatas& from);
  void MergeFrom(const RoleTempDatas& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.RoleTempData temp_data_list = 1;
  inline int temp_data_list_size() const;
  inline void clear_temp_data_list();
  static const int kTempDataListFieldNumber = 1;
  inline const ::PB::RoleTempData& temp_data_list(int index) const;
  inline ::PB::RoleTempData* mutable_temp_data_list(int index);
  inline ::PB::RoleTempData* add_temp_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleTempData >&
      temp_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RoleTempData >*
      mutable_temp_data_list();

  // @@protoc_insertion_point(class_scope:PB.RoleTempDatas)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::RoleTempData > temp_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleTempDatas* default_instance_;
};
// -------------------------------------------------------------------

class KingMatchBattleTarget : public ::google::protobuf::Message {
 public:
  KingMatchBattleTarget();
  virtual ~KingMatchBattleTarget();

  KingMatchBattleTarget(const KingMatchBattleTarget& from);

  inline KingMatchBattleTarget& operator=(const KingMatchBattleTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingMatchBattleTarget& default_instance();

  void Swap(KingMatchBattleTarget* other);

  // implements Message ----------------------------------------------

  KingMatchBattleTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingMatchBattleTarget& from);
  void MergeFrom(const KingMatchBattleTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 battle_times = 4;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // optional uint32 stage_level = 5;
  inline bool has_stage_level() const;
  inline void clear_stage_level();
  static const int kStageLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 stage_level() const;
  inline void set_stage_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.KingMatchBattleTarget)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_battle_times();
  inline void clear_has_battle_times();
  inline void set_has_stage_level();
  inline void clear_has_stage_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 battle_times_;
  ::google::protobuf::uint32 stage_level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static KingMatchBattleTarget* default_instance_;
};
// -------------------------------------------------------------------

class KingMatchStage : public ::google::protobuf::Message {
 public:
  KingMatchStage();
  virtual ~KingMatchStage();

  KingMatchStage(const KingMatchStage& from);

  inline KingMatchStage& operator=(const KingMatchStage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingMatchStage& default_instance();

  void Swap(KingMatchStage* other);

  // implements Message ----------------------------------------------

  KingMatchStage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingMatchStage& from);
  void MergeFrom(const KingMatchStage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // repeated .PB.KingMatchBattleTarget battle_target_list = 2;
  inline int battle_target_list_size() const;
  inline void clear_battle_target_list();
  static const int kBattleTargetListFieldNumber = 2;
  inline const ::PB::KingMatchBattleTarget& battle_target_list(int index) const;
  inline ::PB::KingMatchBattleTarget* mutable_battle_target_list(int index);
  inline ::PB::KingMatchBattleTarget* add_battle_target_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::KingMatchBattleTarget >&
      battle_target_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::KingMatchBattleTarget >*
      mutable_battle_target_list();

  // @@protoc_insertion_point(class_scope:PB.KingMatchStage)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::KingMatchBattleTarget > battle_target_list_;
  ::google::protobuf::uint32 stage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static KingMatchStage* default_instance_;
};
// -------------------------------------------------------------------

class RoleSeasonRank : public ::google::protobuf::Message {
 public:
  RoleSeasonRank();
  virtual ~RoleSeasonRank();

  RoleSeasonRank(const RoleSeasonRank& from);

  inline RoleSeasonRank& operator=(const RoleSeasonRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleSeasonRank& default_instance();

  void Swap(RoleSeasonRank* other);

  // implements Message ----------------------------------------------

  RoleSeasonRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleSeasonRank& from);
  void MergeFrom(const RoleSeasonRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 server_id = 2;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 2;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleSeasonRank)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_server_id();
  inline void clear_has_server_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 server_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleSeasonRank* default_instance_;
};
// -------------------------------------------------------------------

class SeasonRankData : public ::google::protobuf::Message {
 public:
  SeasonRankData();
  virtual ~SeasonRankData();

  SeasonRankData(const SeasonRankData& from);

  inline SeasonRankData& operator=(const SeasonRankData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeasonRankData& default_instance();

  void Swap(SeasonRankData* other);

  // implements Message ----------------------------------------------

  SeasonRankData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeasonRankData& from);
  void MergeFrom(const SeasonRankData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 season = 1;
  inline bool has_season() const;
  inline void clear_season();
  static const int kSeasonFieldNumber = 1;
  inline ::google::protobuf::uint32 season() const;
  inline void set_season(::google::protobuf::uint32 value);

  // repeated .PB.RoleSeasonRank rank_list = 2;
  inline int rank_list_size() const;
  inline void clear_rank_list();
  static const int kRankListFieldNumber = 2;
  inline const ::PB::RoleSeasonRank& rank_list(int index) const;
  inline ::PB::RoleSeasonRank* mutable_rank_list(int index);
  inline ::PB::RoleSeasonRank* add_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleSeasonRank >&
      rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RoleSeasonRank >*
      mutable_rank_list();

  // @@protoc_insertion_point(class_scope:PB.SeasonRankData)
 private:
  inline void set_has_season();
  inline void clear_has_season();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::RoleSeasonRank > rank_list_;
  ::google::protobuf::uint32 season_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static SeasonRankData* default_instance_;
};
// -------------------------------------------------------------------

class KingMatchData : public ::google::protobuf::Message {
 public:
  KingMatchData();
  virtual ~KingMatchData();

  KingMatchData(const KingMatchData& from);

  inline KingMatchData& operator=(const KingMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KingMatchData& default_instance();

  void Swap(KingMatchData* other);

  // implements Message ----------------------------------------------

  KingMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KingMatchData& from);
  void MergeFrom(const KingMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.KingMatchStage stage_list = 1;
  inline int stage_list_size() const;
  inline void clear_stage_list();
  static const int kStageListFieldNumber = 1;
  inline const ::PB::KingMatchStage& stage_list(int index) const;
  inline ::PB::KingMatchStage* mutable_stage_list(int index);
  inline ::PB::KingMatchStage* add_stage_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::KingMatchStage >&
      stage_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::KingMatchStage >*
      mutable_stage_list();

  // repeated .PB.SeasonRankData last_season_rank_list = 2;
  inline int last_season_rank_list_size() const;
  inline void clear_last_season_rank_list();
  static const int kLastSeasonRankListFieldNumber = 2;
  inline const ::PB::SeasonRankData& last_season_rank_list(int index) const;
  inline ::PB::SeasonRankData* mutable_last_season_rank_list(int index);
  inline ::PB::SeasonRankData* add_last_season_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::SeasonRankData >&
      last_season_rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::SeasonRankData >*
      mutable_last_season_rank_list();

  // @@protoc_insertion_point(class_scope:PB.KingMatchData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::KingMatchStage > stage_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::SeasonRankData > last_season_rank_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static KingMatchData* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonMember : public ::google::protobuf::Message {
 public:
  TeamDungeonMember();
  virtual ~TeamDungeonMember();

  TeamDungeonMember(const TeamDungeonMember& from);

  inline TeamDungeonMember& operator=(const TeamDungeonMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonMember& default_instance();

  void Swap(TeamDungeonMember* other);

  // implements Message ----------------------------------------------

  TeamDungeonMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonMember& from);
  void MergeFrom(const TeamDungeonMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 role_id = 3;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 3;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonMember)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_role_id();
  inline void clear_has_role_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 role_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonMember* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonRoleRank : public ::google::protobuf::Message {
 public:
  TeamDungeonRoleRank();
  virtual ~TeamDungeonRoleRank();

  TeamDungeonRoleRank(const TeamDungeonRoleRank& from);

  inline TeamDungeonRoleRank& operator=(const TeamDungeonRoleRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonRoleRank& default_instance();

  void Swap(TeamDungeonRoleRank* other);

  // implements Message ----------------------------------------------

  TeamDungeonRoleRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonRoleRank& from);
  void MergeFrom(const TeamDungeonRoleRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 use_time = 2;
  inline bool has_use_time() const;
  inline void clear_use_time();
  static const int kUseTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 use_time() const;
  inline void set_use_time(::google::protobuf::uint32 value);

  // optional uint32 finish_time = 3;
  inline bool has_finish_time() const;
  inline void clear_finish_time();
  static const int kFinishTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 finish_time() const;
  inline void set_finish_time(::google::protobuf::uint32 value);

  // optional uint32 captain_head_img_id = 4;
  inline bool has_captain_head_img_id() const;
  inline void clear_captain_head_img_id();
  static const int kCaptainHeadImgIdFieldNumber = 4;
  inline ::google::protobuf::uint32 captain_head_img_id() const;
  inline void set_captain_head_img_id(::google::protobuf::uint32 value);

  // repeated .PB.TeamDungeonMember member_list = 5;
  inline int member_list_size() const;
  inline void clear_member_list();
  static const int kMemberListFieldNumber = 5;
  inline const ::PB::TeamDungeonMember& member_list(int index) const;
  inline ::PB::TeamDungeonMember* mutable_member_list(int index);
  inline ::PB::TeamDungeonMember* add_member_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonMember >&
      member_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonMember >*
      mutable_member_list();

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonRoleRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_use_time();
  inline void clear_has_use_time();
  inline void set_has_finish_time();
  inline void clear_has_finish_time();
  inline void set_has_captain_head_img_id();
  inline void clear_has_captain_head_img_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 use_time_;
  ::google::protobuf::uint32 finish_time_;
  ::google::protobuf::uint32 captain_head_img_id_;
  ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonMember > member_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonRoleRank* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonRank : public ::google::protobuf::Message {
 public:
  TeamDungeonRank();
  virtual ~TeamDungeonRank();

  TeamDungeonRank(const TeamDungeonRank& from);

  inline TeamDungeonRank& operator=(const TeamDungeonRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonRank& default_instance();

  void Swap(TeamDungeonRank* other);

  // implements Message ----------------------------------------------

  TeamDungeonRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonRank& from);
  void MergeFrom(const TeamDungeonRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 dungeon_id = 1;
  inline bool has_dungeon_id() const;
  inline void clear_dungeon_id();
  static const int kDungeonIdFieldNumber = 1;
  inline ::google::protobuf::uint32 dungeon_id() const;
  inline void set_dungeon_id(::google::protobuf::uint32 value);

  // repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
  inline int role_rank_list_size() const;
  inline void clear_role_rank_list();
  static const int kRoleRankListFieldNumber = 2;
  inline const ::PB::TeamDungeonRoleRank& role_rank_list(int index) const;
  inline ::PB::TeamDungeonRoleRank* mutable_role_rank_list(int index);
  inline ::PB::TeamDungeonRoleRank* add_role_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRoleRank >&
      role_rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRoleRank >*
      mutable_role_rank_list();

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonRank)
 private:
  inline void set_has_dungeon_id();
  inline void clear_has_dungeon_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRoleRank > role_rank_list_;
  ::google::protobuf::uint32 dungeon_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonRank* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonLotteryRecord : public ::google::protobuf::Message {
 public:
  TeamDungeonLotteryRecord();
  virtual ~TeamDungeonLotteryRecord();

  TeamDungeonLotteryRecord(const TeamDungeonLotteryRecord& from);

  inline TeamDungeonLotteryRecord& operator=(const TeamDungeonLotteryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonLotteryRecord& default_instance();

  void Swap(TeamDungeonLotteryRecord* other);

  // implements Message ----------------------------------------------

  TeamDungeonLotteryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonLotteryRecord& from);
  void MergeFrom(const TeamDungeonLotteryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional string role_name = 2;
  inline bool has_role_name() const;
  inline void clear_role_name();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& role_name() const;
  inline void set_role_name(const ::std::string& value);
  inline void set_role_name(const char* value);
  inline void set_role_name(const char* value, size_t size);
  inline ::std::string* mutable_role_name();
  inline ::std::string* release_role_name();
  inline void set_allocated_role_name(::std::string* role_name);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 item_num = 4;
  inline bool has_item_num() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 4;
  inline ::google::protobuf::uint32 item_num() const;
  inline void set_item_num(::google::protobuf::uint32 value);

  // optional uint32 record_time = 5;
  inline bool has_record_time() const;
  inline void clear_record_time();
  static const int kRecordTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 record_time() const;
  inline void set_record_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonLotteryRecord)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_role_name();
  inline void clear_has_role_name();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_item_num();
  inline void clear_has_item_num();
  inline void set_has_record_time();
  inline void clear_has_record_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* role_name_;
  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 item_num_;
  ::google::protobuf::uint32 record_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonLotteryRecord* default_instance_;
};
// -------------------------------------------------------------------

class TeamDungeonData : public ::google::protobuf::Message {
 public:
  TeamDungeonData();
  virtual ~TeamDungeonData();

  TeamDungeonData(const TeamDungeonData& from);

  inline TeamDungeonData& operator=(const TeamDungeonData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamDungeonData& default_instance();

  void Swap(TeamDungeonData* other);

  // implements Message ----------------------------------------------

  TeamDungeonData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamDungeonData& from);
  void MergeFrom(const TeamDungeonData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
  inline int dungeon_rank_list_size() const;
  inline void clear_dungeon_rank_list();
  static const int kDungeonRankListFieldNumber = 1;
  inline const ::PB::TeamDungeonRank& dungeon_rank_list(int index) const;
  inline ::PB::TeamDungeonRank* mutable_dungeon_rank_list(int index);
  inline ::PB::TeamDungeonRank* add_dungeon_rank_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRank >&
      dungeon_rank_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRank >*
      mutable_dungeon_rank_list();

  // repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
  inline int lottery_record_size() const;
  inline void clear_lottery_record();
  static const int kLotteryRecordFieldNumber = 2;
  inline const ::PB::TeamDungeonLotteryRecord& lottery_record(int index) const;
  inline ::PB::TeamDungeonLotteryRecord* mutable_lottery_record(int index);
  inline ::PB::TeamDungeonLotteryRecord* add_lottery_record();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonLotteryRecord >&
      lottery_record() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonLotteryRecord >*
      mutable_lottery_record();

  // @@protoc_insertion_point(class_scope:PB.TeamDungeonData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRank > dungeon_rank_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonLotteryRecord > lottery_record_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TeamDungeonData* default_instance_;
};
// -------------------------------------------------------------------

class TurntableLotteryRecord : public ::google::protobuf::Message {
 public:
  TurntableLotteryRecord();
  virtual ~TurntableLotteryRecord();

  TurntableLotteryRecord(const TurntableLotteryRecord& from);

  inline TurntableLotteryRecord& operator=(const TurntableLotteryRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableLotteryRecord& default_instance();

  void Swap(TurntableLotteryRecord* other);

  // implements Message ----------------------------------------------

  TurntableLotteryRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableLotteryRecord& from);
  void MergeFrom(const TurntableLotteryRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 context = 4;
  inline bool has_context() const;
  inline void clear_context();
  static const int kContextFieldNumber = 4;
  inline ::google::protobuf::uint32 context() const;
  inline void set_context(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.TurntableLotteryRecord)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_context();
  inline void clear_has_context();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 context_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TurntableLotteryRecord* default_instance_;
};
// -------------------------------------------------------------------

class TurntableData : public ::google::protobuf::Message {
 public:
  TurntableData();
  virtual ~TurntableData();

  TurntableData(const TurntableData& from);

  inline TurntableData& operator=(const TurntableData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TurntableData& default_instance();

  void Swap(TurntableData* other);

  // implements Message ----------------------------------------------

  TurntableData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TurntableData& from);
  void MergeFrom(const TurntableData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 server_id = 1;
  inline bool has_server_id() const;
  inline void clear_server_id();
  static const int kServerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 server_id() const;
  inline void set_server_id(::google::protobuf::uint32 value);

  // optional uint32 cur_activity_data_id = 2;
  inline bool has_cur_activity_data_id() const;
  inline void clear_cur_activity_data_id();
  static const int kCurActivityDataIdFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_activity_data_id() const;
  inline void set_cur_activity_data_id(::google::protobuf::uint32 value);

  // optional uint32 diamond = 3;
  inline bool has_diamond() const;
  inline void clear_diamond();
  static const int kDiamondFieldNumber = 3;
  inline ::google::protobuf::uint32 diamond() const;
  inline void set_diamond(::google::protobuf::uint32 value);

  // repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
  inline int lottery_record_list_size() const;
  inline void clear_lottery_record_list();
  static const int kLotteryRecordListFieldNumber = 4;
  inline const ::PB::TurntableLotteryRecord& lottery_record_list(int index) const;
  inline ::PB::TurntableLotteryRecord* mutable_lottery_record_list(int index);
  inline ::PB::TurntableLotteryRecord* add_lottery_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TurntableLotteryRecord >&
      lottery_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TurntableLotteryRecord >*
      mutable_lottery_record_list();

  // @@protoc_insertion_point(class_scope:PB.TurntableData)
 private:
  inline void set_has_server_id();
  inline void clear_has_server_id();
  inline void set_has_cur_activity_data_id();
  inline void clear_has_cur_activity_data_id();
  inline void set_has_diamond();
  inline void clear_has_diamond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 server_id_;
  ::google::protobuf::uint32 cur_activity_data_id_;
  ::google::protobuf::RepeatedPtrField< ::PB::TurntableLotteryRecord > lottery_record_list_;
  ::google::protobuf::uint32 diamond_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static TurntableData* default_instance_;
};
// -------------------------------------------------------------------

class AllServerTurntableData : public ::google::protobuf::Message {
 public:
  AllServerTurntableData();
  virtual ~AllServerTurntableData();

  AllServerTurntableData(const AllServerTurntableData& from);

  inline AllServerTurntableData& operator=(const AllServerTurntableData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AllServerTurntableData& default_instance();

  void Swap(AllServerTurntableData* other);

  // implements Message ----------------------------------------------

  AllServerTurntableData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllServerTurntableData& from);
  void MergeFrom(const AllServerTurntableData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.TurntableData turntable_data_list = 1;
  inline int turntable_data_list_size() const;
  inline void clear_turntable_data_list();
  static const int kTurntableDataListFieldNumber = 1;
  inline const ::PB::TurntableData& turntable_data_list(int index) const;
  inline ::PB::TurntableData* mutable_turntable_data_list(int index);
  inline ::PB::TurntableData* add_turntable_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::TurntableData >&
      turntable_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::TurntableData >*
      mutable_turntable_data_list();

  // @@protoc_insertion_point(class_scope:PB.AllServerTurntableData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::TurntableData > turntable_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static AllServerTurntableData* default_instance_;
};
// -------------------------------------------------------------------

class ScoreMatchTarget : public ::google::protobuf::Message {
 public:
  ScoreMatchTarget();
  virtual ~ScoreMatchTarget();

  ScoreMatchTarget(const ScoreMatchTarget& from);

  inline ScoreMatchTarget& operator=(const ScoreMatchTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreMatchTarget& default_instance();

  void Swap(ScoreMatchTarget* other);

  // implements Message ----------------------------------------------

  ScoreMatchTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreMatchTarget& from);
  void MergeFrom(const ScoreMatchTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 target_id = 1;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 1;
  inline ::google::protobuf::uint32 target_id() const;
  inline void set_target_id(::google::protobuf::uint32 value);

  // optional uint32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ScoreMatchTarget)
 private:
  inline void set_has_target_id();
  inline void clear_has_target_id();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 target_id_;
  ::google::protobuf::uint32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ScoreMatchTarget* default_instance_;
};
// -------------------------------------------------------------------

class RoleScoreMatchData : public ::google::protobuf::Message {
 public:
  RoleScoreMatchData();
  virtual ~RoleScoreMatchData();

  RoleScoreMatchData(const RoleScoreMatchData& from);

  inline RoleScoreMatchData& operator=(const RoleScoreMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleScoreMatchData& default_instance();

  void Swap(RoleScoreMatchData* other);

  // implements Message ----------------------------------------------

  RoleScoreMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleScoreMatchData& from);
  void MergeFrom(const RoleScoreMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 battle_times = 2;
  inline bool has_battle_times() const;
  inline void clear_battle_times();
  static const int kBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 battle_times() const;
  inline void set_battle_times(::google::protobuf::uint32 value);

  // optional uint32 refresh_times = 3;
  inline bool has_refresh_times() const;
  inline void clear_refresh_times();
  static const int kRefreshTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 refresh_times() const;
  inline void set_refresh_times(::google::protobuf::uint32 value);

  // optional uint32 buy_battle_times = 4;
  inline bool has_buy_battle_times() const;
  inline void clear_buy_battle_times();
  static const int kBuyBattleTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 buy_battle_times() const;
  inline void set_buy_battle_times(::google::protobuf::uint32 value);

  // optional uint32 camp = 5;
  inline bool has_camp() const;
  inline void clear_camp();
  static const int kCampFieldNumber = 5;
  inline ::google::protobuf::uint32 camp() const;
  inline void set_camp(::google::protobuf::uint32 value);

  // optional uint32 win_times = 6;
  inline bool has_win_times() const;
  inline void clear_win_times();
  static const int kWinTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 win_times() const;
  inline void set_win_times(::google::protobuf::uint32 value);

  // repeated uint32 task_reward_record = 7;
  inline int task_reward_record_size() const;
  inline void clear_task_reward_record();
  static const int kTaskRewardRecordFieldNumber = 7;
  inline ::google::protobuf::uint32 task_reward_record(int index) const;
  inline void set_task_reward_record(int index, ::google::protobuf::uint32 value);
  inline void add_task_reward_record(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      task_reward_record() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_task_reward_record();

  // repeated .PB.ScoreMatchTarget battle_target_list = 8;
  inline int battle_target_list_size() const;
  inline void clear_battle_target_list();
  static const int kBattleTargetListFieldNumber = 8;
  inline const ::PB::ScoreMatchTarget& battle_target_list(int index) const;
  inline ::PB::ScoreMatchTarget* mutable_battle_target_list(int index);
  inline ::PB::ScoreMatchTarget* add_battle_target_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ScoreMatchTarget >&
      battle_target_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ScoreMatchTarget >*
      mutable_battle_target_list();

  // @@protoc_insertion_point(class_scope:PB.RoleScoreMatchData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_battle_times();
  inline void clear_has_battle_times();
  inline void set_has_refresh_times();
  inline void clear_has_refresh_times();
  inline void set_has_buy_battle_times();
  inline void clear_has_buy_battle_times();
  inline void set_has_camp();
  inline void clear_has_camp();
  inline void set_has_win_times();
  inline void clear_has_win_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 battle_times_;
  ::google::protobuf::uint32 refresh_times_;
  ::google::protobuf::uint32 buy_battle_times_;
  ::google::protobuf::uint32 camp_;
  ::google::protobuf::uint32 win_times_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > task_reward_record_;
  ::google::protobuf::RepeatedPtrField< ::PB::ScoreMatchTarget > battle_target_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleScoreMatchData* default_instance_;
};
// -------------------------------------------------------------------

class ScoreMatchData : public ::google::protobuf::Message {
 public:
  ScoreMatchData();
  virtual ~ScoreMatchData();

  ScoreMatchData(const ScoreMatchData& from);

  inline ScoreMatchData& operator=(const ScoreMatchData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreMatchData& default_instance();

  void Swap(ScoreMatchData* other);

  // implements Message ----------------------------------------------

  ScoreMatchData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScoreMatchData& from);
  void MergeFrom(const ScoreMatchData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 cur_activity_index = 1;
  inline bool has_cur_activity_index() const;
  inline void clear_cur_activity_index();
  static const int kCurActivityIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 cur_activity_index() const;
  inline void set_cur_activity_index(::google::protobuf::uint32 value);

  // optional uint32 activity_status = 2;
  inline bool has_activity_status() const;
  inline void clear_activity_status();
  static const int kActivityStatusFieldNumber = 2;
  inline ::google::protobuf::uint32 activity_status() const;
  inline void set_activity_status(::google::protobuf::uint32 value);

  // optional uint32 activity_over_time = 3;
  inline bool has_activity_over_time() const;
  inline void clear_activity_over_time();
  static const int kActivityOverTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 activity_over_time() const;
  inline void set_activity_over_time(::google::protobuf::uint32 value);

  // repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
  inline int role_score_match_data_list_size() const;
  inline void clear_role_score_match_data_list();
  static const int kRoleScoreMatchDataListFieldNumber = 4;
  inline const ::PB::RoleScoreMatchData& role_score_match_data_list(int index) const;
  inline ::PB::RoleScoreMatchData* mutable_role_score_match_data_list(int index);
  inline ::PB::RoleScoreMatchData* add_role_score_match_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleScoreMatchData >&
      role_score_match_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RoleScoreMatchData >*
      mutable_role_score_match_data_list();

  // @@protoc_insertion_point(class_scope:PB.ScoreMatchData)
 private:
  inline void set_has_cur_activity_index();
  inline void clear_has_cur_activity_index();
  inline void set_has_activity_status();
  inline void clear_has_activity_status();
  inline void set_has_activity_over_time();
  inline void clear_has_activity_over_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 cur_activity_index_;
  ::google::protobuf::uint32 activity_status_;
  ::google::protobuf::RepeatedPtrField< ::PB::RoleScoreMatchData > role_score_match_data_list_;
  ::google::protobuf::uint32 activity_over_time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ScoreMatchData* default_instance_;
};
// -------------------------------------------------------------------

class RoleResourceWarData : public ::google::protobuf::Message {
 public:
  RoleResourceWarData();
  virtual ~RoleResourceWarData();

  RoleResourceWarData(const RoleResourceWarData& from);

  inline RoleResourceWarData& operator=(const RoleResourceWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleResourceWarData& default_instance();

  void Swap(RoleResourceWarData* other);

  // implements Message ----------------------------------------------

  RoleResourceWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleResourceWarData& from);
  void MergeFrom(const RoleResourceWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 technology_level = 2;
  inline bool has_technology_level() const;
  inline void clear_technology_level();
  static const int kTechnologyLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 technology_level() const;
  inline void set_technology_level(::google::protobuf::uint32 value);

  // optional uint32 total_accupy_time = 3;
  inline bool has_total_accupy_time() const;
  inline void clear_total_accupy_time();
  static const int kTotalAccupyTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 total_accupy_time() const;
  inline void set_total_accupy_time(::google::protobuf::uint32 value);

  // optional uint32 reward_resource_war_score = 4;
  inline bool has_reward_resource_war_score() const;
  inline void clear_reward_resource_war_score();
  static const int kRewardResourceWarScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 reward_resource_war_score() const;
  inline void set_reward_resource_war_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleResourceWarData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_technology_level();
  inline void clear_has_technology_level();
  inline void set_has_total_accupy_time();
  inline void clear_has_total_accupy_time();
  inline void set_has_reward_resource_war_score();
  inline void clear_has_reward_resource_war_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 technology_level_;
  ::google::protobuf::uint32 total_accupy_time_;
  ::google::protobuf::uint32 reward_resource_war_score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleResourceWarData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceWarEnemy : public ::google::protobuf::Message {
 public:
  ResourceWarEnemy();
  virtual ~ResourceWarEnemy();

  ResourceWarEnemy(const ResourceWarEnemy& from);

  inline ResourceWarEnemy& operator=(const ResourceWarEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceWarEnemy& default_instance();

  void Swap(ResourceWarEnemy* other);

  // implements Message ----------------------------------------------

  ResourceWarEnemy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceWarEnemy& from);
  void MergeFrom(const ResourceWarEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 be_attack_times = 2;
  inline bool has_be_attack_times() const;
  inline void clear_be_attack_times();
  static const int kBeAttackTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 be_attack_times() const;
  inline void set_be_attack_times(::google::protobuf::uint32 value);

  // optional uint32 enemy_id = 3;
  inline bool has_enemy_id() const;
  inline void clear_enemy_id();
  static const int kEnemyIdFieldNumber = 3;
  inline ::google::protobuf::uint32 enemy_id() const;
  inline void set_enemy_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ResourceWarEnemy)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_be_attack_times();
  inline void clear_has_be_attack_times();
  inline void set_has_enemy_id();
  inline void clear_has_enemy_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 be_attack_times_;
  ::google::protobuf::uint32 enemy_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ResourceWarEnemy* default_instance_;
};
// -------------------------------------------------------------------

class ResourceWarBattleRecord : public ::google::protobuf::Message {
 public:
  ResourceWarBattleRecord();
  virtual ~ResourceWarBattleRecord();

  ResourceWarBattleRecord(const ResourceWarBattleRecord& from);

  inline ResourceWarBattleRecord& operator=(const ResourceWarBattleRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceWarBattleRecord& default_instance();

  void Swap(ResourceWarBattleRecord* other);

  // implements Message ----------------------------------------------

  ResourceWarBattleRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceWarBattleRecord& from);
  void MergeFrom(const ResourceWarBattleRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 attacker_id = 1;
  inline bool has_attacker_id() const;
  inline void clear_attacker_id();
  static const int kAttackerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 attacker_id() const;
  inline void set_attacker_id(::google::protobuf::uint32 value);

  // optional uint32 defender_id = 2;
  inline bool has_defender_id() const;
  inline void clear_defender_id();
  static const int kDefenderIdFieldNumber = 2;
  inline ::google::protobuf::uint32 defender_id() const;
  inline void set_defender_id(::google::protobuf::uint32 value);

  // optional uint32 battle_time = 3;
  inline bool has_battle_time() const;
  inline void clear_battle_time();
  static const int kBattleTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 battle_time() const;
  inline void set_battle_time(::google::protobuf::uint32 value);

  // optional uint32 chapter = 4;
  inline bool has_chapter() const;
  inline void clear_chapter();
  static const int kChapterFieldNumber = 4;
  inline ::google::protobuf::uint32 chapter() const;
  inline void set_chapter(::google::protobuf::uint32 value);

  // optional uint32 resource_id = 5;
  inline bool has_resource_id() const;
  inline void clear_resource_id();
  static const int kResourceIdFieldNumber = 5;
  inline ::google::protobuf::uint32 resource_id() const;
  inline void set_resource_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ResourceWarBattleRecord)
 private:
  inline void set_has_attacker_id();
  inline void clear_has_attacker_id();
  inline void set_has_defender_id();
  inline void clear_has_defender_id();
  inline void set_has_battle_time();
  inline void clear_has_battle_time();
  inline void set_has_chapter();
  inline void clear_has_chapter();
  inline void set_has_resource_id();
  inline void clear_has_resource_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attacker_id_;
  ::google::protobuf::uint32 defender_id_;
  ::google::protobuf::uint32 battle_time_;
  ::google::protobuf::uint32 chapter_;
  ::google::protobuf::uint32 resource_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ResourceWarBattleRecord* default_instance_;
};
// -------------------------------------------------------------------

class ResourceWarResourceData : public ::google::protobuf::Message {
 public:
  ResourceWarResourceData();
  virtual ~ResourceWarResourceData();

  ResourceWarResourceData(const ResourceWarResourceData& from);

  inline ResourceWarResourceData& operator=(const ResourceWarResourceData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceWarResourceData& default_instance();

  void Swap(ResourceWarResourceData* other);

  // implements Message ----------------------------------------------

  ResourceWarResourceData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceWarResourceData& from);
  void MergeFrom(const ResourceWarResourceData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 chapter = 1;
  inline bool has_chapter() const;
  inline void clear_chapter();
  static const int kChapterFieldNumber = 1;
  inline ::google::protobuf::uint32 chapter() const;
  inline void set_chapter(::google::protobuf::uint32 value);

  // optional uint32 resource_id = 2;
  inline bool has_resource_id() const;
  inline void clear_resource_id();
  static const int kResourceIdFieldNumber = 2;
  inline ::google::protobuf::uint32 resource_id() const;
  inline void set_resource_id(::google::protobuf::uint32 value);

  // optional uint32 resource_type = 3;
  inline bool has_resource_type() const;
  inline void clear_resource_type();
  static const int kResourceTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 resource_type() const;
  inline void set_resource_type(::google::protobuf::uint32 value);

  // optional uint32 occupy_start_time = 4;
  inline bool has_occupy_start_time() const;
  inline void clear_occupy_start_time();
  static const int kOccupyStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 occupy_start_time() const;
  inline void set_occupy_start_time(::google::protobuf::uint32 value);

  // optional uint32 occupy_over_time = 5;
  inline bool has_occupy_over_time() const;
  inline void clear_occupy_over_time();
  static const int kOccupyOverTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 occupy_over_time() const;
  inline void set_occupy_over_time(::google::protobuf::uint32 value);

  // optional uint32 owner_id = 6;
  inline bool has_owner_id() const;
  inline void clear_owner_id();
  static const int kOwnerIdFieldNumber = 6;
  inline ::google::protobuf::uint32 owner_id() const;
  inline void set_owner_id(::google::protobuf::uint32 value);

  // optional uint32 keep_occupy_times = 7;
  inline bool has_keep_occupy_times() const;
  inline void clear_keep_occupy_times();
  static const int kKeepOccupyTimesFieldNumber = 7;
  inline ::google::protobuf::uint32 keep_occupy_times() const;
  inline void set_keep_occupy_times(::google::protobuf::uint32 value);

  // optional uint32 last_base_reward_time = 8;
  inline bool has_last_base_reward_time() const;
  inline void clear_last_base_reward_time();
  static const int kLastBaseRewardTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 last_base_reward_time() const;
  inline void set_last_base_reward_time(::google::protobuf::uint32 value);

  // optional uint32 last_extra_reward_time = 9;
  inline bool has_last_extra_reward_time() const;
  inline void clear_last_extra_reward_time();
  static const int kLastExtraRewardTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 last_extra_reward_time() const;
  inline void set_last_extra_reward_time(::google::protobuf::uint32 value);

  // optional uint32 base_reward_interval_time = 10;
  inline bool has_base_reward_interval_time() const;
  inline void clear_base_reward_interval_time();
  static const int kBaseRewardIntervalTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 base_reward_interval_time() const;
  inline void set_base_reward_interval_time(::google::protobuf::uint32 value);

  // optional uint32 cur_extra_reward_need_time = 11;
  inline bool has_cur_extra_reward_need_time() const;
  inline void clear_cur_extra_reward_need_time();
  static const int kCurExtraRewardNeedTimeFieldNumber = 11;
  inline ::google::protobuf::uint32 cur_extra_reward_need_time() const;
  inline void set_cur_extra_reward_need_time(::google::protobuf::uint32 value);

  // optional uint32 already_send_base_reward_times = 12;
  inline bool has_already_send_base_reward_times() const;
  inline void clear_already_send_base_reward_times();
  static const int kAlreadySendBaseRewardTimesFieldNumber = 12;
  inline ::google::protobuf::uint32 already_send_base_reward_times() const;
  inline void set_already_send_base_reward_times(::google::protobuf::uint32 value);

  // optional uint32 already_send_extra_reward_times = 13;
  inline bool has_already_send_extra_reward_times() const;
  inline void clear_already_send_extra_reward_times();
  static const int kAlreadySendExtraRewardTimesFieldNumber = 13;
  inline ::google::protobuf::uint32 already_send_extra_reward_times() const;
  inline void set_already_send_extra_reward_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.ResourceWarResourceData)
 private:
  inline void set_has_chapter();
  inline void clear_has_chapter();
  inline void set_has_resource_id();
  inline void clear_has_resource_id();
  inline void set_has_resource_type();
  inline void clear_has_resource_type();
  inline void set_has_occupy_start_time();
  inline void clear_has_occupy_start_time();
  inline void set_has_occupy_over_time();
  inline void clear_has_occupy_over_time();
  inline void set_has_owner_id();
  inline void clear_has_owner_id();
  inline void set_has_keep_occupy_times();
  inline void clear_has_keep_occupy_times();
  inline void set_has_last_base_reward_time();
  inline void clear_has_last_base_reward_time();
  inline void set_has_last_extra_reward_time();
  inline void clear_has_last_extra_reward_time();
  inline void set_has_base_reward_interval_time();
  inline void clear_has_base_reward_interval_time();
  inline void set_has_cur_extra_reward_need_time();
  inline void clear_has_cur_extra_reward_need_time();
  inline void set_has_already_send_base_reward_times();
  inline void clear_has_already_send_base_reward_times();
  inline void set_has_already_send_extra_reward_times();
  inline void clear_has_already_send_extra_reward_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 chapter_;
  ::google::protobuf::uint32 resource_id_;
  ::google::protobuf::uint32 resource_type_;
  ::google::protobuf::uint32 occupy_start_time_;
  ::google::protobuf::uint32 occupy_over_time_;
  ::google::protobuf::uint32 owner_id_;
  ::google::protobuf::uint32 keep_occupy_times_;
  ::google::protobuf::uint32 last_base_reward_time_;
  ::google::protobuf::uint32 last_extra_reward_time_;
  ::google::protobuf::uint32 base_reward_interval_time_;
  ::google::protobuf::uint32 cur_extra_reward_need_time_;
  ::google::protobuf::uint32 already_send_base_reward_times_;
  ::google::protobuf::uint32 already_send_extra_reward_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ResourceWarResourceData* default_instance_;
};
// -------------------------------------------------------------------

class ResourceWarData : public ::google::protobuf::Message {
 public:
  ResourceWarData();
  virtual ~ResourceWarData();

  ResourceWarData(const ResourceWarData& from);

  inline ResourceWarData& operator=(const ResourceWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceWarData& default_instance();

  void Swap(ResourceWarData* other);

  // implements Message ----------------------------------------------

  ResourceWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceWarData& from);
  void MergeFrom(const ResourceWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.ResourceWarResourceData resource_data_list = 1;
  inline int resource_data_list_size() const;
  inline void clear_resource_data_list();
  static const int kResourceDataListFieldNumber = 1;
  inline const ::PB::ResourceWarResourceData& resource_data_list(int index) const;
  inline ::PB::ResourceWarResourceData* mutable_resource_data_list(int index);
  inline ::PB::ResourceWarResourceData* add_resource_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarResourceData >&
      resource_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarResourceData >*
      mutable_resource_data_list();

  // repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
  inline int role_resource_war_data_list_size() const;
  inline void clear_role_resource_war_data_list();
  static const int kRoleResourceWarDataListFieldNumber = 2;
  inline const ::PB::RoleResourceWarData& role_resource_war_data_list(int index) const;
  inline ::PB::RoleResourceWarData* mutable_role_resource_war_data_list(int index);
  inline ::PB::RoleResourceWarData* add_role_resource_war_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleResourceWarData >&
      role_resource_war_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RoleResourceWarData >*
      mutable_role_resource_war_data_list();

  // repeated .PB.ResourceWarEnemy enemy_list = 3;
  inline int enemy_list_size() const;
  inline void clear_enemy_list();
  static const int kEnemyListFieldNumber = 3;
  inline const ::PB::ResourceWarEnemy& enemy_list(int index) const;
  inline ::PB::ResourceWarEnemy* mutable_enemy_list(int index);
  inline ::PB::ResourceWarEnemy* add_enemy_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarEnemy >&
      enemy_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarEnemy >*
      mutable_enemy_list();

  // repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
  inline int battle_record_list_size() const;
  inline void clear_battle_record_list();
  static const int kBattleRecordListFieldNumber = 4;
  inline const ::PB::ResourceWarBattleRecord& battle_record_list(int index) const;
  inline ::PB::ResourceWarBattleRecord* mutable_battle_record_list(int index);
  inline ::PB::ResourceWarBattleRecord* add_battle_record_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarBattleRecord >&
      battle_record_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarBattleRecord >*
      mutable_battle_record_list();

  // @@protoc_insertion_point(class_scope:PB.ResourceWarData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarResourceData > resource_data_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::RoleResourceWarData > role_resource_war_data_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarEnemy > enemy_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarBattleRecord > battle_record_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static ResourceWarData* default_instance_;
};
// -------------------------------------------------------------------

class StarDefenderInfo : public ::google::protobuf::Message {
 public:
  StarDefenderInfo();
  virtual ~StarDefenderInfo();

  StarDefenderInfo(const StarDefenderInfo& from);

  inline StarDefenderInfo& operator=(const StarDefenderInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarDefenderInfo& default_instance();

  void Swap(StarDefenderInfo* other);

  // implements Message ----------------------------------------------

  StarDefenderInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarDefenderInfo& from);
  void MergeFrom(const StarDefenderInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 be_attack_times = 2;
  inline bool has_be_attack_times() const;
  inline void clear_be_attack_times();
  static const int kBeAttackTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 be_attack_times() const;
  inline void set_be_attack_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.StarDefenderInfo)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_be_attack_times();
  inline void clear_has_be_attack_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 be_attack_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static StarDefenderInfo* default_instance_;
};
// -------------------------------------------------------------------

class StarTowerInfo : public ::google::protobuf::Message {
 public:
  StarTowerInfo();
  virtual ~StarTowerInfo();

  StarTowerInfo(const StarTowerInfo& from);

  inline StarTowerInfo& operator=(const StarTowerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarTowerInfo& default_instance();

  void Swap(StarTowerInfo* other);

  // implements Message ----------------------------------------------

  StarTowerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarTowerInfo& from);
  void MergeFrom(const StarTowerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 tower_id = 1;
  inline bool has_tower_id() const;
  inline void clear_tower_id();
  static const int kTowerIdFieldNumber = 1;
  inline ::google::protobuf::uint32 tower_id() const;
  inline void set_tower_id(::google::protobuf::uint32 value);

  // optional uint32 durability = 2;
  inline bool has_durability() const;
  inline void clear_durability();
  static const int kDurabilityFieldNumber = 2;
  inline ::google::protobuf::uint32 durability() const;
  inline void set_durability(::google::protobuf::uint32 value);

  // optional uint32 monster_be_attack_times = 3;
  inline bool has_monster_be_attack_times() const;
  inline void clear_monster_be_attack_times();
  static const int kMonsterBeAttackTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 monster_be_attack_times() const;
  inline void set_monster_be_attack_times(::google::protobuf::uint32 value);

  // repeated .PB.StarDefenderInfo defender_list = 4;
  inline int defender_list_size() const;
  inline void clear_defender_list();
  static const int kDefenderListFieldNumber = 4;
  inline const ::PB::StarDefenderInfo& defender_list(int index) const;
  inline ::PB::StarDefenderInfo* mutable_defender_list(int index);
  inline ::PB::StarDefenderInfo* add_defender_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::StarDefenderInfo >&
      defender_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::StarDefenderInfo >*
      mutable_defender_list();

  // @@protoc_insertion_point(class_scope:PB.StarTowerInfo)
 private:
  inline void set_has_tower_id();
  inline void clear_has_tower_id();
  inline void set_has_durability();
  inline void clear_has_durability();
  inline void set_has_monster_be_attack_times();
  inline void clear_has_monster_be_attack_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tower_id_;
  ::google::protobuf::uint32 durability_;
  ::google::protobuf::RepeatedPtrField< ::PB::StarDefenderInfo > defender_list_;
  ::google::protobuf::uint32 monster_be_attack_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static StarTowerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarScore : public ::google::protobuf::Message {
 public:
  GuildWarScore();
  virtual ~GuildWarScore();

  GuildWarScore(const GuildWarScore& from);

  inline GuildWarScore& operator=(const GuildWarScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarScore& default_instance();

  void Swap(GuildWarScore* other);

  // implements Message ----------------------------------------------

  GuildWarScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarScore& from);
  void MergeFrom(const GuildWarScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 guild_id = 1;
  inline bool has_guild_id() const;
  inline void clear_guild_id();
  static const int kGuildIdFieldNumber = 1;
  inline ::google::protobuf::uint32 guild_id() const;
  inline void set_guild_id(::google::protobuf::uint32 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.GuildWarScore)
 private:
  inline void set_has_guild_id();
  inline void clear_has_guild_id();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guild_id_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildWarScore* default_instance_;
};
// -------------------------------------------------------------------

class StarInfo : public ::google::protobuf::Message {
 public:
  StarInfo();
  virtual ~StarInfo();

  StarInfo(const StarInfo& from);

  inline StarInfo& operator=(const StarInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StarInfo& default_instance();

  void Swap(StarInfo* other);

  // implements Message ----------------------------------------------

  StarInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StarInfo& from);
  void MergeFrom(const StarInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 region_id = 1;
  inline bool has_region_id() const;
  inline void clear_region_id();
  static const int kRegionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 region_id() const;
  inline void set_region_id(::google::protobuf::uint32 value);

  // optional uint32 info_id = 2;
  inline bool has_info_id() const;
  inline void clear_info_id();
  static const int kInfoIdFieldNumber = 2;
  inline ::google::protobuf::uint32 info_id() const;
  inline void set_info_id(::google::protobuf::uint32 value);

  // optional uint32 belong_guild_id = 3;
  inline bool has_belong_guild_id() const;
  inline void clear_belong_guild_id();
  static const int kBelongGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 belong_guild_id() const;
  inline void set_belong_guild_id(::google::protobuf::uint32 value);

  // optional uint32 attack_guild_id = 4;
  inline bool has_attack_guild_id() const;
  inline void clear_attack_guild_id();
  static const int kAttackGuildIdFieldNumber = 4;
  inline ::google::protobuf::uint32 attack_guild_id() const;
  inline void set_attack_guild_id(::google::protobuf::uint32 value);

  // repeated uint32 took_reward_record_list = 5;
  inline int took_reward_record_list_size() const;
  inline void clear_took_reward_record_list();
  static const int kTookRewardRecordListFieldNumber = 5;
  inline ::google::protobuf::uint32 took_reward_record_list(int index) const;
  inline void set_took_reward_record_list(int index, ::google::protobuf::uint32 value);
  inline void add_took_reward_record_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      took_reward_record_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_took_reward_record_list();

  // repeated uint32 declare_war_list = 6;
  inline int declare_war_list_size() const;
  inline void clear_declare_war_list();
  static const int kDeclareWarListFieldNumber = 6;
  inline ::google::protobuf::uint32 declare_war_list(int index) const;
  inline void set_declare_war_list(int index, ::google::protobuf::uint32 value);
  inline void add_declare_war_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      declare_war_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_declare_war_list();

  // repeated .PB.GuildWarScore score_list = 7;
  inline int score_list_size() const;
  inline void clear_score_list();
  static const int kScoreListFieldNumber = 7;
  inline const ::PB::GuildWarScore& score_list(int index) const;
  inline ::PB::GuildWarScore* mutable_score_list(int index);
  inline ::PB::GuildWarScore* add_score_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildWarScore >&
      score_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::GuildWarScore >*
      mutable_score_list();

  // repeated .PB.StarTowerInfo tower_list = 8;
  inline int tower_list_size() const;
  inline void clear_tower_list();
  static const int kTowerListFieldNumber = 8;
  inline const ::PB::StarTowerInfo& tower_list(int index) const;
  inline ::PB::StarTowerInfo* mutable_tower_list(int index);
  inline ::PB::StarTowerInfo* add_tower_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::StarTowerInfo >&
      tower_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::StarTowerInfo >*
      mutable_tower_list();

  // optional uint32 last_belong_guild_id = 9;
  inline bool has_last_belong_guild_id() const;
  inline void clear_last_belong_guild_id();
  static const int kLastBelongGuildIdFieldNumber = 9;
  inline ::google::protobuf::uint32 last_belong_guild_id() const;
  inline void set_last_belong_guild_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.StarInfo)
 private:
  inline void set_has_region_id();
  inline void clear_has_region_id();
  inline void set_has_info_id();
  inline void clear_has_info_id();
  inline void set_has_belong_guild_id();
  inline void clear_has_belong_guild_id();
  inline void set_has_attack_guild_id();
  inline void clear_has_attack_guild_id();
  inline void set_has_last_belong_guild_id();
  inline void clear_has_last_belong_guild_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 region_id_;
  ::google::protobuf::uint32 info_id_;
  ::google::protobuf::uint32 belong_guild_id_;
  ::google::protobuf::uint32 attack_guild_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > took_reward_record_list_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > declare_war_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::GuildWarScore > score_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::StarTowerInfo > tower_list_;
  ::google::protobuf::uint32 last_belong_guild_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static StarInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleGuildWarData : public ::google::protobuf::Message {
 public:
  RoleGuildWarData();
  virtual ~RoleGuildWarData();

  RoleGuildWarData(const RoleGuildWarData& from);

  inline RoleGuildWarData& operator=(const RoleGuildWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleGuildWarData& default_instance();

  void Swap(RoleGuildWarData* other);

  // implements Message ----------------------------------------------

  RoleGuildWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleGuildWarData& from);
  void MergeFrom(const RoleGuildWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 role_id = 1;
  inline bool has_role_id() const;
  inline void clear_role_id();
  static const int kRoleIdFieldNumber = 1;
  inline ::google::protobuf::uint32 role_id() const;
  inline void set_role_id(::google::protobuf::uint32 value);

  // optional uint32 buy_high_star_battle_times = 2;
  inline bool has_buy_high_star_battle_times() const;
  inline void clear_buy_high_star_battle_times();
  static const int kBuyHighStarBattleTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 buy_high_star_battle_times() const;
  inline void set_buy_high_star_battle_times(::google::protobuf::uint32 value);

  // optional uint32 used_low_star_battle_times = 3;
  inline bool has_used_low_star_battle_times() const;
  inline void clear_used_low_star_battle_times();
  static const int kUsedLowStarBattleTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 used_low_star_battle_times() const;
  inline void set_used_low_star_battle_times(::google::protobuf::uint32 value);

  // optional uint32 used_high_star_battle_times = 4;
  inline bool has_used_high_star_battle_times() const;
  inline void clear_used_high_star_battle_times();
  static const int kUsedHighStarBattleTimesFieldNumber = 4;
  inline ::google::protobuf::uint32 used_high_star_battle_times() const;
  inline void set_used_high_star_battle_times(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PB.RoleGuildWarData)
 private:
  inline void set_has_role_id();
  inline void clear_has_role_id();
  inline void set_has_buy_high_star_battle_times();
  inline void clear_has_buy_high_star_battle_times();
  inline void set_has_used_low_star_battle_times();
  inline void clear_has_used_low_star_battle_times();
  inline void set_has_used_high_star_battle_times();
  inline void clear_has_used_high_star_battle_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 role_id_;
  ::google::protobuf::uint32 buy_high_star_battle_times_;
  ::google::protobuf::uint32 used_low_star_battle_times_;
  ::google::protobuf::uint32 used_high_star_battle_times_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static RoleGuildWarData* default_instance_;
};
// -------------------------------------------------------------------

class GuildWarData : public ::google::protobuf::Message {
 public:
  GuildWarData();
  virtual ~GuildWarData();

  GuildWarData(const GuildWarData& from);

  inline GuildWarData& operator=(const GuildWarData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuildWarData& default_instance();

  void Swap(GuildWarData* other);

  // implements Message ----------------------------------------------

  GuildWarData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuildWarData& from);
  void MergeFrom(const GuildWarData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PB.StarInfo star_list = 1;
  inline int star_list_size() const;
  inline void clear_star_list();
  static const int kStarListFieldNumber = 1;
  inline const ::PB::StarInfo& star_list(int index) const;
  inline ::PB::StarInfo* mutable_star_list(int index);
  inline ::PB::StarInfo* add_star_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::StarInfo >&
      star_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::StarInfo >*
      mutable_star_list();

  // repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
  inline int role_guild_war_data_list_size() const;
  inline void clear_role_guild_war_data_list();
  static const int kRoleGuildWarDataListFieldNumber = 2;
  inline const ::PB::RoleGuildWarData& role_guild_war_data_list(int index) const;
  inline ::PB::RoleGuildWarData* mutable_role_guild_war_data_list(int index);
  inline ::PB::RoleGuildWarData* add_role_guild_war_data_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleGuildWarData >&
      role_guild_war_data_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB::RoleGuildWarData >*
      mutable_role_guild_war_data_list();

  // @@protoc_insertion_point(class_scope:PB.GuildWarData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PB::StarInfo > star_list_;
  ::google::protobuf::RepeatedPtrField< ::PB::RoleGuildWarData > role_guild_war_data_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_5fdefine_2eproto();
  friend void protobuf_AssignDesc_data_5fdefine_2eproto();
  friend void protobuf_ShutdownFile_data_5fdefine_2eproto();

  void InitAsDefaultInstance();
  static GuildWarData* default_instance_;
};
// ===================================================================


// ===================================================================

// Item

// required uint32 item_id = 1;
inline bool Item::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Item::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Item::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Item::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 Item::item_id() const {
  return item_id_;
}
inline void Item::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// required uint32 item_num = 2;
inline bool Item::has_item_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Item::set_has_item_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Item::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Item::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 Item::item_num() const {
  return item_num_;
}
inline void Item::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// -------------------------------------------------------------------

// Equipment

// required uint32 uid = 1;
inline bool Equipment::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Equipment::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Equipment::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Equipment::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Equipment::uid() const {
  return uid_;
}
inline void Equipment::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool Equipment::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Equipment::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Equipment::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Equipment::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 Equipment::info_id() const {
  return info_id_;
}
inline void Equipment::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 enhance_level = 3;
inline bool Equipment::has_enhance_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Equipment::set_has_enhance_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Equipment::clear_has_enhance_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Equipment::clear_enhance_level() {
  enhance_level_ = 0u;
  clear_has_enhance_level();
}
inline ::google::protobuf::uint32 Equipment::enhance_level() const {
  return enhance_level_;
}
inline void Equipment::set_enhance_level(::google::protobuf::uint32 value) {
  set_has_enhance_level();
  enhance_level_ = value;
}

// required uint32 refine_level = 4;
inline bool Equipment::has_refine_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Equipment::set_has_refine_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Equipment::clear_has_refine_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Equipment::clear_refine_level() {
  refine_level_ = 0u;
  clear_has_refine_level();
}
inline ::google::protobuf::uint32 Equipment::refine_level() const {
  return refine_level_;
}
inline void Equipment::set_refine_level(::google::protobuf::uint32 value) {
  set_has_refine_level();
  refine_level_ = value;
}

// required uint32 refine_exp = 5;
inline bool Equipment::has_refine_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Equipment::set_has_refine_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Equipment::clear_has_refine_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Equipment::clear_refine_exp() {
  refine_exp_ = 0u;
  clear_has_refine_exp();
}
inline ::google::protobuf::uint32 Equipment::refine_exp() const {
  return refine_exp_;
}
inline void Equipment::set_refine_exp(::google::protobuf::uint32 value) {
  set_has_refine_exp();
  refine_exp_ = value;
}

// required uint32 enhance_cost_gold = 6;
inline bool Equipment::has_enhance_cost_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Equipment::set_has_enhance_cost_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Equipment::clear_has_enhance_cost_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Equipment::clear_enhance_cost_gold() {
  enhance_cost_gold_ = 0u;
  clear_has_enhance_cost_gold();
}
inline ::google::protobuf::uint32 Equipment::enhance_cost_gold() const {
  return enhance_cost_gold_;
}
inline void Equipment::set_enhance_cost_gold(::google::protobuf::uint32 value) {
  set_has_enhance_cost_gold();
  enhance_cost_gold_ = value;
}

// repeated .PB.Item refine_cost_item_list = 7;
inline int Equipment::refine_cost_item_list_size() const {
  return refine_cost_item_list_.size();
}
inline void Equipment::clear_refine_cost_item_list() {
  refine_cost_item_list_.Clear();
}
inline const ::PB::Item& Equipment::refine_cost_item_list(int index) const {
  return refine_cost_item_list_.Get(index);
}
inline ::PB::Item* Equipment::mutable_refine_cost_item_list(int index) {
  return refine_cost_item_list_.Mutable(index);
}
inline ::PB::Item* Equipment::add_refine_cost_item_list() {
  return refine_cost_item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Item >&
Equipment::refine_cost_item_list() const {
  return refine_cost_item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Item >*
Equipment::mutable_refine_cost_item_list() {
  return &refine_cost_item_list_;
}

// optional uint32 star = 8;
inline bool Equipment::has_star() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Equipment::set_has_star() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Equipment::clear_has_star() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Equipment::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 Equipment::star() const {
  return star_;
}
inline void Equipment::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 star_level = 9;
inline bool Equipment::has_star_level() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Equipment::set_has_star_level() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Equipment::clear_has_star_level() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Equipment::clear_star_level() {
  star_level_ = 0u;
  clear_has_star_level();
}
inline ::google::protobuf::uint32 Equipment::star_level() const {
  return star_level_;
}
inline void Equipment::set_star_level(::google::protobuf::uint32 value) {
  set_has_star_level();
  star_level_ = value;
}

// -------------------------------------------------------------------

// Treasure

// required uint32 uid = 1;
inline bool Treasure::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Treasure::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Treasure::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Treasure::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Treasure::uid() const {
  return uid_;
}
inline void Treasure::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool Treasure::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Treasure::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Treasure::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Treasure::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 Treasure::info_id() const {
  return info_id_;
}
inline void Treasure::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 enhance_level = 3;
inline bool Treasure::has_enhance_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Treasure::set_has_enhance_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Treasure::clear_has_enhance_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Treasure::clear_enhance_level() {
  enhance_level_ = 0u;
  clear_has_enhance_level();
}
inline ::google::protobuf::uint32 Treasure::enhance_level() const {
  return enhance_level_;
}
inline void Treasure::set_enhance_level(::google::protobuf::uint32 value) {
  set_has_enhance_level();
  enhance_level_ = value;
}

// required uint32 enhance_exp = 4;
inline bool Treasure::has_enhance_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Treasure::set_has_enhance_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Treasure::clear_has_enhance_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Treasure::clear_enhance_exp() {
  enhance_exp_ = 0u;
  clear_has_enhance_exp();
}
inline ::google::protobuf::uint32 Treasure::enhance_exp() const {
  return enhance_exp_;
}
inline void Treasure::set_enhance_exp(::google::protobuf::uint32 value) {
  set_has_enhance_exp();
  enhance_exp_ = value;
}

// required uint32 refine_level = 5;
inline bool Treasure::has_refine_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Treasure::set_has_refine_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Treasure::clear_has_refine_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Treasure::clear_refine_level() {
  refine_level_ = 0u;
  clear_has_refine_level();
}
inline ::google::protobuf::uint32 Treasure::refine_level() const {
  return refine_level_;
}
inline void Treasure::set_refine_level(::google::protobuf::uint32 value) {
  set_has_refine_level();
  refine_level_ = value;
}

// -------------------------------------------------------------------

// fairy

// required uint32 uid = 1;
inline bool fairy::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fairy::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fairy::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fairy::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 fairy::uid() const {
  return uid_;
}
inline void fairy::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool fairy::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fairy::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fairy::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fairy::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 fairy::info_id() const {
  return info_id_;
}
inline void fairy::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 level = 3;
inline bool fairy::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void fairy::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void fairy::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void fairy::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 fairy::level() const {
  return level_;
}
inline void fairy::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool fairy::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void fairy::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void fairy::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void fairy::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 fairy::exp() const {
  return exp_;
}
inline void fairy::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 break_level = 5;
inline bool fairy::has_break_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void fairy::set_has_break_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void fairy::clear_has_break_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void fairy::clear_break_level() {
  break_level_ = 0u;
  clear_has_break_level();
}
inline ::google::protobuf::uint32 fairy::break_level() const {
  return break_level_;
}
inline void fairy::set_break_level(::google::protobuf::uint32 value) {
  set_has_break_level();
  break_level_ = value;
}

// -------------------------------------------------------------------

// Card

// required uint32 uid = 1;
inline bool Card::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Card::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Card::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Card::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Card::uid() const {
  return uid_;
}
inline void Card::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool Card::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Card::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Card::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Card::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 Card::info_id() const {
  return info_id_;
}
inline void Card::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 level = 3;
inline bool Card::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Card::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Card::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Card::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Card::level() const {
  return level_;
}
inline void Card::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool Card::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Card::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Card::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Card::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Card::exp() const {
  return exp_;
}
inline void Card::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 break_level = 5;
inline bool Card::has_break_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Card::set_has_break_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Card::clear_has_break_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Card::clear_break_level() {
  break_level_ = 0u;
  clear_has_break_level();
}
inline ::google::protobuf::uint32 Card::break_level() const {
  return break_level_;
}
inline void Card::set_break_level(::google::protobuf::uint32 value) {
  set_has_break_level();
  break_level_ = value;
}

// -------------------------------------------------------------------

// HeroTrainData

// required uint32 pro_type = 1;
inline bool HeroTrainData::has_pro_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroTrainData::set_has_pro_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroTrainData::clear_has_pro_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroTrainData::clear_pro_type() {
  pro_type_ = 0u;
  clear_has_pro_type();
}
inline ::google::protobuf::uint32 HeroTrainData::pro_type() const {
  return pro_type_;
}
inline void HeroTrainData::set_pro_type(::google::protobuf::uint32 value) {
  set_has_pro_type();
  pro_type_ = value;
}

// required uint32 pro_value = 2;
inline bool HeroTrainData::has_pro_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroTrainData::set_has_pro_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroTrainData::clear_has_pro_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroTrainData::clear_pro_value() {
  pro_value_ = 0u;
  clear_has_pro_value();
}
inline ::google::protobuf::uint32 HeroTrainData::pro_value() const {
  return pro_value_;
}
inline void HeroTrainData::set_pro_value(::google::protobuf::uint32 value) {
  set_has_pro_value();
  pro_value_ = value;
}

// required uint32 pro_level = 3;
inline bool HeroTrainData::has_pro_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroTrainData::set_has_pro_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroTrainData::clear_has_pro_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroTrainData::clear_pro_level() {
  pro_level_ = 0u;
  clear_has_pro_level();
}
inline ::google::protobuf::uint32 HeroTrainData::pro_level() const {
  return pro_level_;
}
inline void HeroTrainData::set_pro_level(::google::protobuf::uint32 value) {
  set_has_pro_level();
  pro_level_ = value;
}

// required uint32 tmp_pro_value = 4;
inline bool HeroTrainData::has_tmp_pro_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroTrainData::set_has_tmp_pro_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroTrainData::clear_has_tmp_pro_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroTrainData::clear_tmp_pro_value() {
  tmp_pro_value_ = 0u;
  clear_has_tmp_pro_value();
}
inline ::google::protobuf::uint32 HeroTrainData::tmp_pro_value() const {
  return tmp_pro_value_;
}
inline void HeroTrainData::set_tmp_pro_value(::google::protobuf::uint32 value) {
  set_has_tmp_pro_value();
  tmp_pro_value_ = value;
}

// required uint32 reward_flag = 5;
inline bool HeroTrainData::has_reward_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HeroTrainData::set_has_reward_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HeroTrainData::clear_has_reward_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HeroTrainData::clear_reward_flag() {
  reward_flag_ = 0u;
  clear_has_reward_flag();
}
inline ::google::protobuf::uint32 HeroTrainData::reward_flag() const {
  return reward_flag_;
}
inline void HeroTrainData::set_reward_flag(::google::protobuf::uint32 value) {
  set_has_reward_flag();
  reward_flag_ = value;
}

// -------------------------------------------------------------------

// RecordData

// optional uint32 id = 1;
inline bool RecordData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecordData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecordData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecordData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RecordData::id() const {
  return id_;
}
inline void RecordData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool RecordData::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecordData::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecordData::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecordData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 RecordData::num() const {
  return num_;
}
inline void RecordData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// Hero

// required uint32 uid = 1;
inline bool Hero::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hero::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Hero::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Hero::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 Hero::uid() const {
  return uid_;
}
inline void Hero::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool Hero::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hero::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Hero::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Hero::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 Hero::info_id() const {
  return info_id_;
}
inline void Hero::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 level = 3;
inline bool Hero::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hero::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Hero::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Hero::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 Hero::level() const {
  return level_;
}
inline void Hero::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 exp = 4;
inline bool Hero::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Hero::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Hero::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Hero::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 Hero::exp() const {
  return exp_;
}
inline void Hero::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 quality = 5;
inline bool Hero::has_quality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Hero::set_has_quality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Hero::clear_has_quality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Hero::clear_quality() {
  quality_ = 0u;
  clear_has_quality();
}
inline ::google::protobuf::uint32 Hero::quality() const {
  return quality_;
}
inline void Hero::set_quality(::google::protobuf::uint32 value) {
  set_has_quality();
  quality_ = value;
}

// required uint32 break_level = 6;
inline bool Hero::has_break_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Hero::set_has_break_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Hero::clear_has_break_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Hero::clear_break_level() {
  break_level_ = 0u;
  clear_has_break_level();
}
inline ::google::protobuf::uint32 Hero::break_level() const {
  return break_level_;
}
inline void Hero::set_break_level(::google::protobuf::uint32 value) {
  set_has_break_level();
  break_level_ = value;
}

// required uint32 destiny_level = 7;
inline bool Hero::has_destiny_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Hero::set_has_destiny_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Hero::clear_has_destiny_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Hero::clear_destiny_level() {
  destiny_level_ = 0u;
  clear_has_destiny_level();
}
inline ::google::protobuf::uint32 Hero::destiny_level() const {
  return destiny_level_;
}
inline void Hero::set_destiny_level(::google::protobuf::uint32 value) {
  set_has_destiny_level();
  destiny_level_ = value;
}

// required uint32 destiny_exp = 8;
inline bool Hero::has_destiny_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Hero::set_has_destiny_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Hero::clear_has_destiny_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Hero::clear_destiny_exp() {
  destiny_exp_ = 0u;
  clear_has_destiny_exp();
}
inline ::google::protobuf::uint32 Hero::destiny_exp() const {
  return destiny_exp_;
}
inline void Hero::set_destiny_exp(::google::protobuf::uint32 value) {
  set_has_destiny_exp();
  destiny_exp_ = value;
}

// required uint32 awaken_star = 9;
inline bool Hero::has_awaken_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Hero::set_has_awaken_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Hero::clear_has_awaken_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Hero::clear_awaken_star() {
  awaken_star_ = 0u;
  clear_has_awaken_star();
}
inline ::google::protobuf::uint32 Hero::awaken_star() const {
  return awaken_star_;
}
inline void Hero::set_awaken_star(::google::protobuf::uint32 value) {
  set_has_awaken_star();
  awaken_star_ = value;
}

// required uint32 awaken_level = 10;
inline bool Hero::has_awaken_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Hero::set_has_awaken_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Hero::clear_has_awaken_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Hero::clear_awaken_level() {
  awaken_level_ = 0u;
  clear_has_awaken_level();
}
inline ::google::protobuf::uint32 Hero::awaken_level() const {
  return awaken_level_;
}
inline void Hero::set_awaken_level(::google::protobuf::uint32 value) {
  set_has_awaken_level();
  awaken_level_ = value;
}

// repeated uint32 awaken_item_list = 11;
inline int Hero::awaken_item_list_size() const {
  return awaken_item_list_.size();
}
inline void Hero::clear_awaken_item_list() {
  awaken_item_list_.Clear();
}
inline ::google::protobuf::uint32 Hero::awaken_item_list(int index) const {
  return awaken_item_list_.Get(index);
}
inline void Hero::set_awaken_item_list(int index, ::google::protobuf::uint32 value) {
  awaken_item_list_.Set(index, value);
}
inline void Hero::add_awaken_item_list(::google::protobuf::uint32 value) {
  awaken_item_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Hero::awaken_item_list() const {
  return awaken_item_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Hero::mutable_awaken_item_list() {
  return &awaken_item_list_;
}

// repeated .PB.HeroTrainData train_data_list = 12;
inline int Hero::train_data_list_size() const {
  return train_data_list_.size();
}
inline void Hero::clear_train_data_list() {
  train_data_list_.Clear();
}
inline const ::PB::HeroTrainData& Hero::train_data_list(int index) const {
  return train_data_list_.Get(index);
}
inline ::PB::HeroTrainData* Hero::mutable_train_data_list(int index) {
  return train_data_list_.Mutable(index);
}
inline ::PB::HeroTrainData* Hero::add_train_data_list() {
  return train_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroTrainData >&
Hero::train_data_list() const {
  return train_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::HeroTrainData >*
Hero::mutable_train_data_list() {
  return &train_data_list_;
}

// required uint32 train_cost_item_num = 13;
inline bool Hero::has_train_cost_item_num() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Hero::set_has_train_cost_item_num() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Hero::clear_has_train_cost_item_num() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Hero::clear_train_cost_item_num() {
  train_cost_item_num_ = 0u;
  clear_has_train_cost_item_num();
}
inline ::google::protobuf::uint32 Hero::train_cost_item_num() const {
  return train_cost_item_num_;
}
inline void Hero::set_train_cost_item_num(::google::protobuf::uint32 value) {
  set_has_train_cost_item_num();
  train_cost_item_num_ = value;
}

// required uint32 destiny_cost_item_num = 14;
inline bool Hero::has_destiny_cost_item_num() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Hero::set_has_destiny_cost_item_num() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Hero::clear_has_destiny_cost_item_num() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Hero::clear_destiny_cost_item_num() {
  destiny_cost_item_num_ = 0u;
  clear_has_destiny_cost_item_num();
}
inline ::google::protobuf::uint32 Hero::destiny_cost_item_num() const {
  return destiny_cost_item_num_;
}
inline void Hero::set_destiny_cost_item_num(::google::protobuf::uint32 value) {
  set_has_destiny_cost_item_num();
  destiny_cost_item_num_ = value;
}

// required uint32 train_cost_diamond = 15;
inline bool Hero::has_train_cost_diamond() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Hero::set_has_train_cost_diamond() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Hero::clear_has_train_cost_diamond() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Hero::clear_train_cost_diamond() {
  train_cost_diamond_ = 0u;
  clear_has_train_cost_diamond();
}
inline ::google::protobuf::uint32 Hero::train_cost_diamond() const {
  return train_cost_diamond_;
}
inline void Hero::set_train_cost_diamond(::google::protobuf::uint32 value) {
  set_has_train_cost_diamond();
  train_cost_diamond_ = value;
}

// required uint32 train_cost_gold = 16;
inline bool Hero::has_train_cost_gold() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Hero::set_has_train_cost_gold() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Hero::clear_has_train_cost_gold() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Hero::clear_train_cost_gold() {
  train_cost_gold_ = 0u;
  clear_has_train_cost_gold();
}
inline ::google::protobuf::uint32 Hero::train_cost_gold() const {
  return train_cost_gold_;
}
inline void Hero::set_train_cost_gold(::google::protobuf::uint32 value) {
  set_has_train_cost_gold();
  train_cost_gold_ = value;
}

// optional uint32 quality_stage = 17;
inline bool Hero::has_quality_stage() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Hero::set_has_quality_stage() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Hero::clear_has_quality_stage() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Hero::clear_quality_stage() {
  quality_stage_ = 0u;
  clear_has_quality_stage();
}
inline ::google::protobuf::uint32 Hero::quality_stage() const {
  return quality_stage_;
}
inline void Hero::set_quality_stage(::google::protobuf::uint32 value) {
  set_has_quality_stage();
  quality_stage_ = value;
}

// -------------------------------------------------------------------

// MonsterData

// required uint32 idx = 1;
inline bool MonsterData::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonsterData::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonsterData::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonsterData::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 MonsterData::idx() const {
  return idx_;
}
inline void MonsterData::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// required uint32 damage = 2;
inline bool MonsterData::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonsterData::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonsterData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonsterData::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 MonsterData::damage() const {
  return damage_;
}
inline void MonsterData::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// required uint32 total_hp = 3;
inline bool MonsterData::has_total_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonsterData::set_has_total_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonsterData::clear_has_total_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonsterData::clear_total_hp() {
  total_hp_ = 0u;
  clear_has_total_hp();
}
inline ::google::protobuf::uint32 MonsterData::total_hp() const {
  return total_hp_;
}
inline void MonsterData::set_total_hp(::google::protobuf::uint32 value) {
  set_has_total_hp();
  total_hp_ = value;
}

// -------------------------------------------------------------------

// ArenaRankData

// required uint32 role_id = 1;
inline bool ArenaRankData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaRankData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaRankData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaRankData::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 ArenaRankData::role_id() const {
  return role_id_;
}
inline void ArenaRankData::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 cur_rank = 2;
inline bool ArenaRankData::has_cur_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaRankData::set_has_cur_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaRankData::clear_has_cur_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaRankData::clear_cur_rank() {
  cur_rank_ = 0u;
  clear_has_cur_rank();
}
inline ::google::protobuf::uint32 ArenaRankData::cur_rank() const {
  return cur_rank_;
}
inline void ArenaRankData::set_cur_rank(::google::protobuf::uint32 value) {
  set_has_cur_rank();
  cur_rank_ = value;
}

// required uint32 history_rank = 3;
inline bool ArenaRankData::has_history_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaRankData::set_has_history_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaRankData::clear_has_history_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaRankData::clear_history_rank() {
  history_rank_ = 0u;
  clear_has_history_rank();
}
inline ::google::protobuf::uint32 ArenaRankData::history_rank() const {
  return history_rank_;
}
inline void ArenaRankData::set_history_rank(::google::protobuf::uint32 value) {
  set_has_history_rank();
  history_rank_ = value;
}

// -------------------------------------------------------------------

// ArenaRankDataList

// repeated .PB.ArenaRankData rank_list = 1;
inline int ArenaRankDataList::rank_list_size() const {
  return rank_list_.size();
}
inline void ArenaRankDataList::clear_rank_list() {
  rank_list_.Clear();
}
inline const ::PB::ArenaRankData& ArenaRankDataList::rank_list(int index) const {
  return rank_list_.Get(index);
}
inline ::PB::ArenaRankData* ArenaRankDataList::mutable_rank_list(int index) {
  return rank_list_.Mutable(index);
}
inline ::PB::ArenaRankData* ArenaRankDataList::add_rank_list() {
  return rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ArenaRankData >&
ArenaRankDataList::rank_list() const {
  return rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ArenaRankData >*
ArenaRankDataList::mutable_rank_list() {
  return &rank_list_;
}

// -------------------------------------------------------------------

// role_rank_data

// required uint32 role_id = 1;
inline bool role_rank_data::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_rank_data::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_rank_data::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_rank_data::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 role_rank_data::role_id() const {
  return role_id_;
}
inline void role_rank_data::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 level = 2;
inline bool role_rank_data::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void role_rank_data::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void role_rank_data::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void role_rank_data::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 role_rank_data::level() const {
  return level_;
}
inline void role_rank_data::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 rank = 3;
inline bool role_rank_data::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void role_rank_data::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void role_rank_data::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void role_rank_data::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 role_rank_data::rank() const {
  return rank_;
}
inline void role_rank_data::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 value = 4;
inline bool role_rank_data::has_value() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void role_rank_data::set_has_value() {
  _has_bits_[0] |= 0x00000008u;
}
inline void role_rank_data::clear_has_value() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void role_rank_data::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 role_rank_data::value() const {
  return value_;
}
inline void role_rank_data::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required uint32 param1 = 5;
inline bool role_rank_data::has_param1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void role_rank_data::set_has_param1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void role_rank_data::clear_has_param1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void role_rank_data::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 role_rank_data::param1() const {
  return param1_;
}
inline void role_rank_data::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
}

// required uint32 update_time = 6;
inline bool role_rank_data::has_update_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void role_rank_data::set_has_update_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void role_rank_data::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void role_rank_data::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 role_rank_data::update_time() const {
  return update_time_;
}
inline void role_rank_data::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// optional uint32 server_id = 7;
inline bool role_rank_data::has_server_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void role_rank_data::set_has_server_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void role_rank_data::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void role_rank_data::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 role_rank_data::server_id() const {
  return server_id_;
}
inline void role_rank_data::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 param2 = 8;
inline bool role_rank_data::has_param2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void role_rank_data::set_has_param2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void role_rank_data::clear_has_param2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void role_rank_data::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 role_rank_data::param2() const {
  return param2_;
}
inline void role_rank_data::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// role_rank_list

// required uint32 server_id = 1;
inline bool role_rank_list::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void role_rank_list::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void role_rank_list::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void role_rank_list::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 role_rank_list::server_id() const {
  return server_id_;
}
inline void role_rank_list::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// repeated .PB.role_rank_data rank_list = 2;
inline int role_rank_list::rank_list_size() const {
  return rank_list_.size();
}
inline void role_rank_list::clear_rank_list() {
  rank_list_.Clear();
}
inline const ::PB::role_rank_data& role_rank_list::rank_list(int index) const {
  return rank_list_.Get(index);
}
inline ::PB::role_rank_data* role_rank_list::mutable_rank_list(int index) {
  return rank_list_.Mutable(index);
}
inline ::PB::role_rank_data* role_rank_list::add_rank_list() {
  return rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::role_rank_data >&
role_rank_list::rank_list() const {
  return rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::role_rank_data >*
role_rank_list::mutable_rank_list() {
  return &rank_list_;
}

// -------------------------------------------------------------------

// all_server_role_rank_list

// required uint32 rank_type = 1;
inline bool all_server_role_rank_list::has_rank_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void all_server_role_rank_list::set_has_rank_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void all_server_role_rank_list::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void all_server_role_rank_list::clear_rank_type() {
  rank_type_ = 0u;
  clear_has_rank_type();
}
inline ::google::protobuf::uint32 all_server_role_rank_list::rank_type() const {
  return rank_type_;
}
inline void all_server_role_rank_list::set_rank_type(::google::protobuf::uint32 value) {
  set_has_rank_type();
  rank_type_ = value;
}

// repeated .PB.role_rank_list all_rank_list = 2;
inline int all_server_role_rank_list::all_rank_list_size() const {
  return all_rank_list_.size();
}
inline void all_server_role_rank_list::clear_all_rank_list() {
  all_rank_list_.Clear();
}
inline const ::PB::role_rank_list& all_server_role_rank_list::all_rank_list(int index) const {
  return all_rank_list_.Get(index);
}
inline ::PB::role_rank_list* all_server_role_rank_list::mutable_all_rank_list(int index) {
  return all_rank_list_.Mutable(index);
}
inline ::PB::role_rank_list* all_server_role_rank_list::add_all_rank_list() {
  return all_rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::role_rank_list >&
all_server_role_rank_list::all_rank_list() const {
  return all_rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::role_rank_list >*
all_server_role_rank_list::mutable_all_rank_list() {
  return &all_rank_list_;
}

// -------------------------------------------------------------------

// GuildRankData

// required uint32 guild_id = 1;
inline bool GuildRankData::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildRankData::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildRankData::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildRankData::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 GuildRankData::guild_id() const {
  return guild_id_;
}
inline void GuildRankData::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// required uint32 rank = 2;
inline bool GuildRankData::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildRankData::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildRankData::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildRankData::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 GuildRankData::rank() const {
  return rank_;
}
inline void GuildRankData::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// required uint32 value = 3;
inline bool GuildRankData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildRankData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildRankData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildRankData::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 GuildRankData::value() const {
  return value_;
}
inline void GuildRankData::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required uint32 update_time = 4;
inline bool GuildRankData::has_update_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildRankData::set_has_update_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildRankData::clear_has_update_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildRankData::clear_update_time() {
  update_time_ = 0u;
  clear_has_update_time();
}
inline ::google::protobuf::uint32 GuildRankData::update_time() const {
  return update_time_;
}
inline void GuildRankData::set_update_time(::google::protobuf::uint32 value) {
  set_has_update_time();
  update_time_ = value;
}

// -------------------------------------------------------------------

// Property

// required uint32 type = 1;
inline bool Property::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Property::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Property::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Property::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 Property::type() const {
  return type_;
}
inline void Property::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 value = 2;
inline bool Property::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Property::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Property::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Property::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 Property::value() const {
  return value_;
}
inline void Property::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// FormationProperty

// required uint32 slot = 1;
inline bool FormationProperty::has_slot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FormationProperty::set_has_slot() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FormationProperty::clear_has_slot() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FormationProperty::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
inline ::google::protobuf::uint32 FormationProperty::slot() const {
  return slot_;
}
inline void FormationProperty::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
}

// repeated .PB.Property pro_list = 2;
inline int FormationProperty::pro_list_size() const {
  return pro_list_.size();
}
inline void FormationProperty::clear_pro_list() {
  pro_list_.Clear();
}
inline const ::PB::Property& FormationProperty::pro_list(int index) const {
  return pro_list_.Get(index);
}
inline ::PB::Property* FormationProperty::mutable_pro_list(int index) {
  return pro_list_.Mutable(index);
}
inline ::PB::Property* FormationProperty::add_pro_list() {
  return pro_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Property >&
FormationProperty::pro_list() const {
  return pro_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Property >*
FormationProperty::mutable_pro_list() {
  return &pro_list_;
}

// -------------------------------------------------------------------

// GuideData

// optional uint32 key = 1;
inline bool GuideData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuideData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuideData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuideData::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 GuideData::key() const {
  return key_;
}
inline void GuideData::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// optional uint32 value = 2;
inline bool GuideData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuideData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuideData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuideData::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 GuideData::value() const {
  return value_;
}
inline void GuideData::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PlayerPVPData

// optional uint32 today_battle_times = 1;
inline bool PlayerPVPData::has_today_battle_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPVPData::set_has_today_battle_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPVPData::clear_has_today_battle_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPVPData::clear_today_battle_times() {
  today_battle_times_ = 0u;
  clear_has_today_battle_times();
}
inline ::google::protobuf::uint32 PlayerPVPData::today_battle_times() const {
  return today_battle_times_;
}
inline void PlayerPVPData::set_today_battle_times(::google::protobuf::uint32 value) {
  set_has_today_battle_times();
  today_battle_times_ = value;
}

// optional uint32 week_battle_times = 2;
inline bool PlayerPVPData::has_week_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPVPData::set_has_week_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPVPData::clear_has_week_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPVPData::clear_week_battle_times() {
  week_battle_times_ = 0u;
  clear_has_week_battle_times();
}
inline ::google::protobuf::uint32 PlayerPVPData::week_battle_times() const {
  return week_battle_times_;
}
inline void PlayerPVPData::set_week_battle_times(::google::protobuf::uint32 value) {
  set_has_week_battle_times();
  week_battle_times_ = value;
}

// repeated uint32 daily_reward_take_record = 3;
inline int PlayerPVPData::daily_reward_take_record_size() const {
  return daily_reward_take_record_.size();
}
inline void PlayerPVPData::clear_daily_reward_take_record() {
  daily_reward_take_record_.Clear();
}
inline ::google::protobuf::uint32 PlayerPVPData::daily_reward_take_record(int index) const {
  return daily_reward_take_record_.Get(index);
}
inline void PlayerPVPData::set_daily_reward_take_record(int index, ::google::protobuf::uint32 value) {
  daily_reward_take_record_.Set(index, value);
}
inline void PlayerPVPData::add_daily_reward_take_record(::google::protobuf::uint32 value) {
  daily_reward_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerPVPData::daily_reward_take_record() const {
  return daily_reward_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerPVPData::mutable_daily_reward_take_record() {
  return &daily_reward_take_record_;
}

// repeated uint32 week_reward_take_record = 4;
inline int PlayerPVPData::week_reward_take_record_size() const {
  return week_reward_take_record_.size();
}
inline void PlayerPVPData::clear_week_reward_take_record() {
  week_reward_take_record_.Clear();
}
inline ::google::protobuf::uint32 PlayerPVPData::week_reward_take_record(int index) const {
  return week_reward_take_record_.Get(index);
}
inline void PlayerPVPData::set_week_reward_take_record(int index, ::google::protobuf::uint32 value) {
  week_reward_take_record_.Set(index, value);
}
inline void PlayerPVPData::add_week_reward_take_record(::google::protobuf::uint32 value) {
  week_reward_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerPVPData::week_reward_take_record() const {
  return week_reward_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerPVPData::mutable_week_reward_take_record() {
  return &week_reward_take_record_;
}

// -------------------------------------------------------------------

// RoleBaseInfo

// optional uint32 role_id = 1;
inline bool RoleBaseInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleBaseInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleBaseInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleBaseInfo::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RoleBaseInfo::role_id() const {
  return role_id_;
}
inline void RoleBaseInfo::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required string role_name = 2;
inline bool RoleBaseInfo::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleBaseInfo::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleBaseInfo::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleBaseInfo::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& RoleBaseInfo::role_name() const {
  return *role_name_;
}
inline void RoleBaseInfo::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RoleBaseInfo::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void RoleBaseInfo::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleBaseInfo::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* RoleBaseInfo::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleBaseInfo::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string account = 3;
inline bool RoleBaseInfo::has_account() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleBaseInfo::set_has_account() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleBaseInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleBaseInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& RoleBaseInfo::account() const {
  return *account_;
}
inline void RoleBaseInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RoleBaseInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void RoleBaseInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleBaseInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* RoleBaseInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleBaseInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 stamina = 4;
inline bool RoleBaseInfo::has_stamina() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleBaseInfo::set_has_stamina() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleBaseInfo::clear_has_stamina() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleBaseInfo::clear_stamina() {
  stamina_ = 0u;
  clear_has_stamina();
}
inline ::google::protobuf::uint32 RoleBaseInfo::stamina() const {
  return stamina_;
}
inline void RoleBaseInfo::set_stamina(::google::protobuf::uint32 value) {
  set_has_stamina();
  stamina_ = value;
}

// optional uint32 energy = 5;
inline bool RoleBaseInfo::has_energy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleBaseInfo::set_has_energy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleBaseInfo::clear_has_energy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleBaseInfo::clear_energy() {
  energy_ = 0u;
  clear_has_energy();
}
inline ::google::protobuf::uint32 RoleBaseInfo::energy() const {
  return energy_;
}
inline void RoleBaseInfo::set_energy(::google::protobuf::uint32 value) {
  set_has_energy();
  energy_ = value;
}

// optional uint32 sex = 6;
inline bool RoleBaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleBaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleBaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleBaseInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 RoleBaseInfo::sex() const {
  return sex_;
}
inline void RoleBaseInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 7;
inline bool RoleBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleBaseInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RoleBaseInfo::level() const {
  return level_;
}
inline void RoleBaseInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 daily_init_level = 8;
inline bool RoleBaseInfo::has_daily_init_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleBaseInfo::set_has_daily_init_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleBaseInfo::clear_has_daily_init_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleBaseInfo::clear_daily_init_level() {
  daily_init_level_ = 0u;
  clear_has_daily_init_level();
}
inline ::google::protobuf::uint32 RoleBaseInfo::daily_init_level() const {
  return daily_init_level_;
}
inline void RoleBaseInfo::set_daily_init_level(::google::protobuf::uint32 value) {
  set_has_daily_init_level();
  daily_init_level_ = value;
}

// optional uint32 exp = 9;
inline bool RoleBaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleBaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleBaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleBaseInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 RoleBaseInfo::exp() const {
  return exp_;
}
inline void RoleBaseInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 gold = 10;
inline bool RoleBaseInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleBaseInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleBaseInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleBaseInfo::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 RoleBaseInfo::gold() const {
  return gold_;
}
inline void RoleBaseInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional uint32 diamond = 11;
inline bool RoleBaseInfo::has_diamond() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleBaseInfo::set_has_diamond() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleBaseInfo::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleBaseInfo::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 RoleBaseInfo::diamond() const {
  return diamond_;
}
inline void RoleBaseInfo::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// optional uint32 head_image_id = 12;
inline bool RoleBaseInfo::has_head_image_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleBaseInfo::set_has_head_image_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleBaseInfo::clear_has_head_image_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleBaseInfo::clear_head_image_id() {
  head_image_id_ = 0u;
  clear_has_head_image_id();
}
inline ::google::protobuf::uint32 RoleBaseInfo::head_image_id() const {
  return head_image_id_;
}
inline void RoleBaseInfo::set_head_image_id(::google::protobuf::uint32 value) {
  set_has_head_image_id();
  head_image_id_ = value;
}

// optional uint32 vip_level = 13;
inline bool RoleBaseInfo::has_vip_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleBaseInfo::set_has_vip_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleBaseInfo::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleBaseInfo::clear_vip_level() {
  vip_level_ = 0u;
  clear_has_vip_level();
}
inline ::google::protobuf::uint32 RoleBaseInfo::vip_level() const {
  return vip_level_;
}
inline void RoleBaseInfo::set_vip_level(::google::protobuf::uint32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional uint32 vip_exp = 14;
inline bool RoleBaseInfo::has_vip_exp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleBaseInfo::set_has_vip_exp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleBaseInfo::clear_has_vip_exp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleBaseInfo::clear_vip_exp() {
  vip_exp_ = 0u;
  clear_has_vip_exp();
}
inline ::google::protobuf::uint32 RoleBaseInfo::vip_exp() const {
  return vip_exp_;
}
inline void RoleBaseInfo::set_vip_exp(::google::protobuf::uint32 value) {
  set_has_vip_exp();
  vip_exp_ = value;
}

// optional uint32 riot_suppress_times = 15;
inline bool RoleBaseInfo::has_riot_suppress_times() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleBaseInfo::set_has_riot_suppress_times() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleBaseInfo::clear_has_riot_suppress_times() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleBaseInfo::clear_riot_suppress_times() {
  riot_suppress_times_ = 0u;
  clear_has_riot_suppress_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::riot_suppress_times() const {
  return riot_suppress_times_;
}
inline void RoleBaseInfo::set_riot_suppress_times(::google::protobuf::uint32 value) {
  set_has_riot_suppress_times();
  riot_suppress_times_ = value;
}

// optional uint32 hero_soul = 16;
inline bool RoleBaseInfo::has_hero_soul() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleBaseInfo::set_has_hero_soul() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleBaseInfo::clear_has_hero_soul() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleBaseInfo::clear_hero_soul() {
  hero_soul_ = 0u;
  clear_has_hero_soul();
}
inline ::google::protobuf::uint32 RoleBaseInfo::hero_soul() const {
  return hero_soul_;
}
inline void RoleBaseInfo::set_hero_soul(::google::protobuf::uint32 value) {
  set_has_hero_soul();
  hero_soul_ = value;
}

// optional uint32 god_soul = 17;
inline bool RoleBaseInfo::has_god_soul() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleBaseInfo::set_has_god_soul() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleBaseInfo::clear_has_god_soul() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleBaseInfo::clear_god_soul() {
  god_soul_ = 0u;
  clear_has_god_soul();
}
inline ::google::protobuf::uint32 RoleBaseInfo::god_soul() const {
  return god_soul_;
}
inline void RoleBaseInfo::set_god_soul(::google::protobuf::uint32 value) {
  set_has_god_soul();
  god_soul_ = value;
}

// optional uint32 fairy_soul = 18;
inline bool RoleBaseInfo::has_fairy_soul() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleBaseInfo::set_has_fairy_soul() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleBaseInfo::clear_has_fairy_soul() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleBaseInfo::clear_fairy_soul() {
  fairy_soul_ = 0u;
  clear_has_fairy_soul();
}
inline ::google::protobuf::uint32 RoleBaseInfo::fairy_soul() const {
  return fairy_soul_;
}
inline void RoleBaseInfo::set_fairy_soul(::google::protobuf::uint32 value) {
  set_has_fairy_soul();
  fairy_soul_ = value;
}

// optional uint32 arena_prestige = 19;
inline bool RoleBaseInfo::has_arena_prestige() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleBaseInfo::set_has_arena_prestige() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleBaseInfo::clear_has_arena_prestige() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleBaseInfo::clear_arena_prestige() {
  arena_prestige_ = 0u;
  clear_has_arena_prestige();
}
inline ::google::protobuf::uint32 RoleBaseInfo::arena_prestige() const {
  return arena_prestige_;
}
inline void RoleBaseInfo::set_arena_prestige(::google::protobuf::uint32 value) {
  set_has_arena_prestige();
  arena_prestige_ = value;
}

// optional uint32 tower_prestige = 20;
inline bool RoleBaseInfo::has_tower_prestige() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoleBaseInfo::set_has_tower_prestige() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoleBaseInfo::clear_has_tower_prestige() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoleBaseInfo::clear_tower_prestige() {
  tower_prestige_ = 0u;
  clear_has_tower_prestige();
}
inline ::google::protobuf::uint32 RoleBaseInfo::tower_prestige() const {
  return tower_prestige_;
}
inline void RoleBaseInfo::set_tower_prestige(::google::protobuf::uint32 value) {
  set_has_tower_prestige();
  tower_prestige_ = value;
}

// optional uint32 fighting_power = 21;
inline bool RoleBaseInfo::has_fighting_power() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoleBaseInfo::set_has_fighting_power() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoleBaseInfo::clear_has_fighting_power() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoleBaseInfo::clear_fighting_power() {
  fighting_power_ = 0u;
  clear_has_fighting_power();
}
inline ::google::protobuf::uint32 RoleBaseInfo::fighting_power() const {
  return fighting_power_;
}
inline void RoleBaseInfo::set_fighting_power(::google::protobuf::uint32 value) {
  set_has_fighting_power();
  fighting_power_ = value;
}

// optional uint32 wanted = 22;
inline bool RoleBaseInfo::has_wanted() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoleBaseInfo::set_has_wanted() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoleBaseInfo::clear_has_wanted() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoleBaseInfo::clear_wanted() {
  wanted_ = 0u;
  clear_has_wanted();
}
inline ::google::protobuf::uint32 RoleBaseInfo::wanted() const {
  return wanted_;
}
inline void RoleBaseInfo::set_wanted(::google::protobuf::uint32 value) {
  set_has_wanted();
  wanted_ = value;
}

// optional uint32 rebel_value = 23;
inline bool RoleBaseInfo::has_rebel_value() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoleBaseInfo::set_has_rebel_value() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoleBaseInfo::clear_has_rebel_value() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoleBaseInfo::clear_rebel_value() {
  rebel_value_ = 0u;
  clear_has_rebel_value();
}
inline ::google::protobuf::uint32 RoleBaseInfo::rebel_value() const {
  return rebel_value_;
}
inline void RoleBaseInfo::set_rebel_value(::google::protobuf::uint32 value) {
  set_has_rebel_value();
  rebel_value_ = value;
}

// optional uint32 honor = 24;
inline bool RoleBaseInfo::has_honor() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoleBaseInfo::set_has_honor() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoleBaseInfo::clear_has_honor() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoleBaseInfo::clear_honor() {
  honor_ = 0u;
  clear_has_honor();
}
inline ::google::protobuf::uint32 RoleBaseInfo::honor() const {
  return honor_;
}
inline void RoleBaseInfo::set_honor(::google::protobuf::uint32 value) {
  set_has_honor();
  honor_ = value;
}

// optional uint32 cur_contribution = 25;
inline bool RoleBaseInfo::has_cur_contribution() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoleBaseInfo::set_has_cur_contribution() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RoleBaseInfo::clear_has_cur_contribution() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RoleBaseInfo::clear_cur_contribution() {
  cur_contribution_ = 0u;
  clear_has_cur_contribution();
}
inline ::google::protobuf::uint32 RoleBaseInfo::cur_contribution() const {
  return cur_contribution_;
}
inline void RoleBaseInfo::set_cur_contribution(::google::protobuf::uint32 value) {
  set_has_cur_contribution();
  cur_contribution_ = value;
}

// optional uint32 world_boss_battle_times = 26;
inline bool RoleBaseInfo::has_world_boss_battle_times() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoleBaseInfo::set_has_world_boss_battle_times() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoleBaseInfo::clear_has_world_boss_battle_times() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoleBaseInfo::clear_world_boss_battle_times() {
  world_boss_battle_times_ = 0u;
  clear_has_world_boss_battle_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::world_boss_battle_times() const {
  return world_boss_battle_times_;
}
inline void RoleBaseInfo::set_world_boss_battle_times(::google::protobuf::uint32 value) {
  set_has_world_boss_battle_times();
  world_boss_battle_times_ = value;
}

// optional uint32 guild_fb_reward_chapter = 27;
inline bool RoleBaseInfo::has_guild_fb_reward_chapter() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RoleBaseInfo::set_has_guild_fb_reward_chapter() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RoleBaseInfo::clear_has_guild_fb_reward_chapter() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RoleBaseInfo::clear_guild_fb_reward_chapter() {
  guild_fb_reward_chapter_ = 0u;
  clear_has_guild_fb_reward_chapter();
}
inline ::google::protobuf::uint32 RoleBaseInfo::guild_fb_reward_chapter() const {
  return guild_fb_reward_chapter_;
}
inline void RoleBaseInfo::set_guild_fb_reward_chapter(::google::protobuf::uint32 value) {
  set_has_guild_fb_reward_chapter();
  guild_fb_reward_chapter_ = value;
}

// optional string last_login_time = 28;
inline bool RoleBaseInfo::has_last_login_time() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RoleBaseInfo::set_has_last_login_time() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RoleBaseInfo::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RoleBaseInfo::clear_last_login_time() {
  if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
    last_login_time_->clear();
  }
  clear_has_last_login_time();
}
inline const ::std::string& RoleBaseInfo::last_login_time() const {
  return *last_login_time_;
}
inline void RoleBaseInfo::set_last_login_time(const ::std::string& value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::kEmptyString) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
}
inline void RoleBaseInfo::set_last_login_time(const char* value) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::kEmptyString) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(value);
}
inline void RoleBaseInfo::set_last_login_time(const char* value, size_t size) {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::kEmptyString) {
    last_login_time_ = new ::std::string;
  }
  last_login_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleBaseInfo::mutable_last_login_time() {
  set_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::kEmptyString) {
    last_login_time_ = new ::std::string;
  }
  return last_login_time_;
}
inline ::std::string* RoleBaseInfo::release_last_login_time() {
  clear_has_last_login_time();
  if (last_login_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_login_time_;
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleBaseInfo::set_allocated_last_login_time(::std::string* last_login_time) {
  if (last_login_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_login_time_;
  }
  if (last_login_time) {
    set_has_last_login_time();
    last_login_time_ = last_login_time;
  } else {
    clear_has_last_login_time();
    last_login_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string last_logout_time = 29;
inline bool RoleBaseInfo::has_last_logout_time() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RoleBaseInfo::set_has_last_logout_time() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RoleBaseInfo::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RoleBaseInfo::clear_last_logout_time() {
  if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
    last_logout_time_->clear();
  }
  clear_has_last_logout_time();
}
inline const ::std::string& RoleBaseInfo::last_logout_time() const {
  return *last_logout_time_;
}
inline void RoleBaseInfo::set_last_logout_time(const ::std::string& value) {
  set_has_last_logout_time();
  if (last_logout_time_ == &::google::protobuf::internal::kEmptyString) {
    last_logout_time_ = new ::std::string;
  }
  last_logout_time_->assign(value);
}
inline void RoleBaseInfo::set_last_logout_time(const char* value) {
  set_has_last_logout_time();
  if (last_logout_time_ == &::google::protobuf::internal::kEmptyString) {
    last_logout_time_ = new ::std::string;
  }
  last_logout_time_->assign(value);
}
inline void RoleBaseInfo::set_last_logout_time(const char* value, size_t size) {
  set_has_last_logout_time();
  if (last_logout_time_ == &::google::protobuf::internal::kEmptyString) {
    last_logout_time_ = new ::std::string;
  }
  last_logout_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleBaseInfo::mutable_last_logout_time() {
  set_has_last_logout_time();
  if (last_logout_time_ == &::google::protobuf::internal::kEmptyString) {
    last_logout_time_ = new ::std::string;
  }
  return last_logout_time_;
}
inline ::std::string* RoleBaseInfo::release_last_logout_time() {
  clear_has_last_logout_time();
  if (last_logout_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = last_logout_time_;
    last_logout_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleBaseInfo::set_allocated_last_logout_time(::std::string* last_logout_time) {
  if (last_logout_time_ != &::google::protobuf::internal::kEmptyString) {
    delete last_logout_time_;
  }
  if (last_logout_time) {
    set_has_last_logout_time();
    last_logout_time_ = last_logout_time;
  } else {
    clear_has_last_logout_time();
    last_logout_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 total_online_time = 30;
inline bool RoleBaseInfo::has_total_online_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RoleBaseInfo::set_has_total_online_time() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RoleBaseInfo::clear_has_total_online_time() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RoleBaseInfo::clear_total_online_time() {
  total_online_time_ = 0u;
  clear_has_total_online_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::total_online_time() const {
  return total_online_time_;
}
inline void RoleBaseInfo::set_total_online_time(::google::protobuf::uint32 value) {
  set_has_total_online_time();
  total_online_time_ = value;
}

// optional uint32 login_times = 31;
inline bool RoleBaseInfo::has_login_times() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RoleBaseInfo::set_has_login_times() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RoleBaseInfo::clear_has_login_times() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RoleBaseInfo::clear_login_times() {
  login_times_ = 0u;
  clear_has_login_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::login_times() const {
  return login_times_;
}
inline void RoleBaseInfo::set_login_times(::google::protobuf::uint32 value) {
  set_has_login_times();
  login_times_ = value;
}

// optional uint32 last_stamina_recover_time = 32;
inline bool RoleBaseInfo::has_last_stamina_recover_time() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RoleBaseInfo::set_has_last_stamina_recover_time() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RoleBaseInfo::clear_has_last_stamina_recover_time() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RoleBaseInfo::clear_last_stamina_recover_time() {
  last_stamina_recover_time_ = 0u;
  clear_has_last_stamina_recover_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_stamina_recover_time() const {
  return last_stamina_recover_time_;
}
inline void RoleBaseInfo::set_last_stamina_recover_time(::google::protobuf::uint32 value) {
  set_has_last_stamina_recover_time();
  last_stamina_recover_time_ = value;
}

// optional uint32 last_energy_recover_time = 33;
inline bool RoleBaseInfo::has_last_energy_recover_time() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RoleBaseInfo::set_has_last_energy_recover_time() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RoleBaseInfo::clear_has_last_energy_recover_time() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RoleBaseInfo::clear_last_energy_recover_time() {
  last_energy_recover_time_ = 0u;
  clear_has_last_energy_recover_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_energy_recover_time() const {
  return last_energy_recover_time_;
}
inline void RoleBaseInfo::set_last_energy_recover_time(::google::protobuf::uint32 value) {
  set_has_last_energy_recover_time();
  last_energy_recover_time_ = value;
}

// optional uint32 last_wanted_recover_time = 34;
inline bool RoleBaseInfo::has_last_wanted_recover_time() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RoleBaseInfo::set_has_last_wanted_recover_time() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RoleBaseInfo::clear_has_last_wanted_recover_time() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RoleBaseInfo::clear_last_wanted_recover_time() {
  last_wanted_recover_time_ = 0u;
  clear_has_last_wanted_recover_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_wanted_recover_time() const {
  return last_wanted_recover_time_;
}
inline void RoleBaseInfo::set_last_wanted_recover_time(::google::protobuf::uint32 value) {
  set_has_last_wanted_recover_time();
  last_wanted_recover_time_ = value;
}

// repeated .PB.FormationProperty formation_pro_list = 35;
inline int RoleBaseInfo::formation_pro_list_size() const {
  return formation_pro_list_.size();
}
inline void RoleBaseInfo::clear_formation_pro_list() {
  formation_pro_list_.Clear();
}
inline const ::PB::FormationProperty& RoleBaseInfo::formation_pro_list(int index) const {
  return formation_pro_list_.Get(index);
}
inline ::PB::FormationProperty* RoleBaseInfo::mutable_formation_pro_list(int index) {
  return formation_pro_list_.Mutable(index);
}
inline ::PB::FormationProperty* RoleBaseInfo::add_formation_pro_list() {
  return formation_pro_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::FormationProperty >&
RoleBaseInfo::formation_pro_list() const {
  return formation_pro_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::FormationProperty >*
RoleBaseInfo::mutable_formation_pro_list() {
  return &formation_pro_list_;
}

// optional uint32 once_flag_list = 36;
inline bool RoleBaseInfo::has_once_flag_list() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RoleBaseInfo::set_has_once_flag_list() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RoleBaseInfo::clear_has_once_flag_list() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RoleBaseInfo::clear_once_flag_list() {
  once_flag_list_ = 0u;
  clear_has_once_flag_list();
}
inline ::google::protobuf::uint32 RoleBaseInfo::once_flag_list() const {
  return once_flag_list_;
}
inline void RoleBaseInfo::set_once_flag_list(::google::protobuf::uint32 value) {
  set_has_once_flag_list();
  once_flag_list_ = value;
}

// optional uint32 guide_x = 37;
inline bool RoleBaseInfo::has_guide_x() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RoleBaseInfo::set_has_guide_x() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RoleBaseInfo::clear_has_guide_x() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RoleBaseInfo::clear_guide_x() {
  guide_x_ = 0u;
  clear_has_guide_x();
}
inline ::google::protobuf::uint32 RoleBaseInfo::guide_x() const {
  return guide_x_;
}
inline void RoleBaseInfo::set_guide_x(::google::protobuf::uint32 value) {
  set_has_guide_x();
  guide_x_ = value;
}

// optional uint32 guide_y = 38;
inline bool RoleBaseInfo::has_guide_y() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RoleBaseInfo::set_has_guide_y() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RoleBaseInfo::clear_has_guide_y() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RoleBaseInfo::clear_guide_y() {
  guide_y_ = 0u;
  clear_has_guide_y();
}
inline ::google::protobuf::uint32 RoleBaseInfo::guide_y() const {
  return guide_y_;
}
inline void RoleBaseInfo::set_guide_y(::google::protobuf::uint32 value) {
  set_has_guide_y();
  guide_y_ = value;
}

// repeated .PB.GuideData guide_list = 39;
inline int RoleBaseInfo::guide_list_size() const {
  return guide_list_.size();
}
inline void RoleBaseInfo::clear_guide_list() {
  guide_list_.Clear();
}
inline const ::PB::GuideData& RoleBaseInfo::guide_list(int index) const {
  return guide_list_.Get(index);
}
inline ::PB::GuideData* RoleBaseInfo::mutable_guide_list(int index) {
  return guide_list_.Mutable(index);
}
inline ::PB::GuideData* RoleBaseInfo::add_guide_list() {
  return guide_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuideData >&
RoleBaseInfo::guide_list() const {
  return guide_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuideData >*
RoleBaseInfo::mutable_guide_list() {
  return &guide_list_;
}

// optional uint32 duobao_peace_over_time = 40;
inline bool RoleBaseInfo::has_duobao_peace_over_time() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RoleBaseInfo::set_has_duobao_peace_over_time() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RoleBaseInfo::clear_has_duobao_peace_over_time() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RoleBaseInfo::clear_duobao_peace_over_time() {
  duobao_peace_over_time_ = 0u;
  clear_has_duobao_peace_over_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::duobao_peace_over_time() const {
  return duobao_peace_over_time_;
}
inline void RoleBaseInfo::set_duobao_peace_over_time(::google::protobuf::uint32 value) {
  set_has_duobao_peace_over_time();
  duobao_peace_over_time_ = value;
}

// optional uint32 leave_guild_time = 41;
inline bool RoleBaseInfo::has_leave_guild_time() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RoleBaseInfo::set_has_leave_guild_time() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RoleBaseInfo::clear_has_leave_guild_time() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RoleBaseInfo::clear_leave_guild_time() {
  leave_guild_time_ = 0u;
  clear_has_leave_guild_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::leave_guild_time() const {
  return leave_guild_time_;
}
inline void RoleBaseInfo::set_leave_guild_time(::google::protobuf::uint32 value) {
  set_has_leave_guild_time();
  leave_guild_time_ = value;
}

// optional uint32 last_activity_notice_id = 42;
inline bool RoleBaseInfo::has_last_activity_notice_id() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RoleBaseInfo::set_has_last_activity_notice_id() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RoleBaseInfo::clear_has_last_activity_notice_id() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RoleBaseInfo::clear_last_activity_notice_id() {
  last_activity_notice_id_ = 0u;
  clear_has_last_activity_notice_id();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_activity_notice_id() const {
  return last_activity_notice_id_;
}
inline void RoleBaseInfo::set_last_activity_notice_id(::google::protobuf::uint32 value) {
  set_has_last_activity_notice_id();
  last_activity_notice_id_ = value;
}

// repeated uint32 activation_code_take_record = 43;
inline int RoleBaseInfo::activation_code_take_record_size() const {
  return activation_code_take_record_.size();
}
inline void RoleBaseInfo::clear_activation_code_take_record() {
  activation_code_take_record_.Clear();
}
inline ::google::protobuf::uint32 RoleBaseInfo::activation_code_take_record(int index) const {
  return activation_code_take_record_.Get(index);
}
inline void RoleBaseInfo::set_activation_code_take_record(int index, ::google::protobuf::uint32 value) {
  activation_code_take_record_.Set(index, value);
}
inline void RoleBaseInfo::add_activation_code_take_record(::google::protobuf::uint32 value) {
  activation_code_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleBaseInfo::activation_code_take_record() const {
  return activation_code_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleBaseInfo::mutable_activation_code_take_record() {
  return &activation_code_take_record_;
}

// optional uint32 friendship_point = 44;
inline bool RoleBaseInfo::has_friendship_point() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void RoleBaseInfo::set_has_friendship_point() {
  _has_bits_[1] |= 0x00000800u;
}
inline void RoleBaseInfo::clear_has_friendship_point() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void RoleBaseInfo::clear_friendship_point() {
  friendship_point_ = 0u;
  clear_has_friendship_point();
}
inline ::google::protobuf::uint32 RoleBaseInfo::friendship_point() const {
  return friendship_point_;
}
inline void RoleBaseInfo::set_friendship_point(::google::protobuf::uint32 value) {
  set_has_friendship_point();
  friendship_point_ = value;
}

// optional uint32 today_friendship_point = 45;
inline bool RoleBaseInfo::has_today_friendship_point() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void RoleBaseInfo::set_has_today_friendship_point() {
  _has_bits_[1] |= 0x00001000u;
}
inline void RoleBaseInfo::clear_has_today_friendship_point() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void RoleBaseInfo::clear_today_friendship_point() {
  today_friendship_point_ = 0u;
  clear_has_today_friendship_point();
}
inline ::google::protobuf::uint32 RoleBaseInfo::today_friendship_point() const {
  return today_friendship_point_;
}
inline void RoleBaseInfo::set_today_friendship_point(::google::protobuf::uint32 value) {
  set_has_today_friendship_point();
  today_friendship_point_ = value;
}

// optional uint32 endless_stone = 46;
inline bool RoleBaseInfo::has_endless_stone() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void RoleBaseInfo::set_has_endless_stone() {
  _has_bits_[1] |= 0x00002000u;
}
inline void RoleBaseInfo::clear_has_endless_stone() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void RoleBaseInfo::clear_endless_stone() {
  endless_stone_ = 0u;
  clear_has_endless_stone();
}
inline ::google::protobuf::uint32 RoleBaseInfo::endless_stone() const {
  return endless_stone_;
}
inline void RoleBaseInfo::set_endless_stone(::google::protobuf::uint32 value) {
  set_has_endless_stone();
  endless_stone_ = value;
}

// optional uint32 nobility_level = 47;
inline bool RoleBaseInfo::has_nobility_level() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void RoleBaseInfo::set_has_nobility_level() {
  _has_bits_[1] |= 0x00004000u;
}
inline void RoleBaseInfo::clear_has_nobility_level() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void RoleBaseInfo::clear_nobility_level() {
  nobility_level_ = 0u;
  clear_has_nobility_level();
}
inline ::google::protobuf::uint32 RoleBaseInfo::nobility_level() const {
  return nobility_level_;
}
inline void RoleBaseInfo::set_nobility_level(::google::protobuf::uint32 value) {
  set_has_nobility_level();
  nobility_level_ = value;
}

// optional uint32 update_times = 48;
inline bool RoleBaseInfo::has_update_times() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void RoleBaseInfo::set_has_update_times() {
  _has_bits_[1] |= 0x00008000u;
}
inline void RoleBaseInfo::clear_has_update_times() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void RoleBaseInfo::clear_update_times() {
  update_times_ = 0u;
  clear_has_update_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::update_times() const {
  return update_times_;
}
inline void RoleBaseInfo::set_update_times(::google::protobuf::uint32 value) {
  set_has_update_times();
  update_times_ = value;
}

// optional uint32 total_recharge_amount = 49;
inline bool RoleBaseInfo::has_total_recharge_amount() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void RoleBaseInfo::set_has_total_recharge_amount() {
  _has_bits_[1] |= 0x00010000u;
}
inline void RoleBaseInfo::clear_has_total_recharge_amount() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void RoleBaseInfo::clear_total_recharge_amount() {
  total_recharge_amount_ = 0u;
  clear_has_total_recharge_amount();
}
inline ::google::protobuf::uint32 RoleBaseInfo::total_recharge_amount() const {
  return total_recharge_amount_;
}
inline void RoleBaseInfo::set_total_recharge_amount(::google::protobuf::uint32 value) {
  set_has_total_recharge_amount();
  total_recharge_amount_ = value;
}

// optional uint32 gem_coin = 50;
inline bool RoleBaseInfo::has_gem_coin() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void RoleBaseInfo::set_has_gem_coin() {
  _has_bits_[1] |= 0x00020000u;
}
inline void RoleBaseInfo::clear_has_gem_coin() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void RoleBaseInfo::clear_gem_coin() {
  gem_coin_ = 0u;
  clear_has_gem_coin();
}
inline ::google::protobuf::uint32 RoleBaseInfo::gem_coin() const {
  return gem_coin_;
}
inline void RoleBaseInfo::set_gem_coin(::google::protobuf::uint32 value) {
  set_has_gem_coin();
  gem_coin_ = value;
}

// optional uint32 destiny_coin = 51;
inline bool RoleBaseInfo::has_destiny_coin() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void RoleBaseInfo::set_has_destiny_coin() {
  _has_bits_[1] |= 0x00040000u;
}
inline void RoleBaseInfo::clear_has_destiny_coin() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void RoleBaseInfo::clear_destiny_coin() {
  destiny_coin_ = 0u;
  clear_has_destiny_coin();
}
inline ::google::protobuf::uint32 RoleBaseInfo::destiny_coin() const {
  return destiny_coin_;
}
inline void RoleBaseInfo::set_destiny_coin(::google::protobuf::uint32 value) {
  set_has_destiny_coin();
  destiny_coin_ = value;
}

// optional uint32 star_soul = 52;
inline bool RoleBaseInfo::has_star_soul() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void RoleBaseInfo::set_has_star_soul() {
  _has_bits_[1] |= 0x00080000u;
}
inline void RoleBaseInfo::clear_has_star_soul() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void RoleBaseInfo::clear_star_soul() {
  star_soul_ = 0u;
  clear_has_star_soul();
}
inline ::google::protobuf::uint32 RoleBaseInfo::star_soul() const {
  return star_soul_;
}
inline void RoleBaseInfo::set_star_soul(::google::protobuf::uint32 value) {
  set_has_star_soul();
  star_soul_ = value;
}

// optional uint32 turntable_score = 53;
inline bool RoleBaseInfo::has_turntable_score() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void RoleBaseInfo::set_has_turntable_score() {
  _has_bits_[1] |= 0x00100000u;
}
inline void RoleBaseInfo::clear_has_turntable_score() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void RoleBaseInfo::clear_turntable_score() {
  turntable_score_ = 0u;
  clear_has_turntable_score();
}
inline ::google::protobuf::uint32 RoleBaseInfo::turntable_score() const {
  return turntable_score_;
}
inline void RoleBaseInfo::set_turntable_score(::google::protobuf::uint32 value) {
  set_has_turntable_score();
  turntable_score_ = value;
}

// optional uint32 turntable_activity_data_id = 54;
inline bool RoleBaseInfo::has_turntable_activity_data_id() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void RoleBaseInfo::set_has_turntable_activity_data_id() {
  _has_bits_[1] |= 0x00200000u;
}
inline void RoleBaseInfo::clear_has_turntable_activity_data_id() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void RoleBaseInfo::clear_turntable_activity_data_id() {
  turntable_activity_data_id_ = 0u;
  clear_has_turntable_activity_data_id();
}
inline ::google::protobuf::uint32 RoleBaseInfo::turntable_activity_data_id() const {
  return turntable_activity_data_id_;
}
inline void RoleBaseInfo::set_turntable_activity_data_id(::google::protobuf::uint32 value) {
  set_has_turntable_activity_data_id();
  turntable_activity_data_id_ = value;
}

// optional uint32 today_used_help_battle_times = 55;
inline bool RoleBaseInfo::has_today_used_help_battle_times() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void RoleBaseInfo::set_has_today_used_help_battle_times() {
  _has_bits_[1] |= 0x00400000u;
}
inline void RoleBaseInfo::clear_has_today_used_help_battle_times() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void RoleBaseInfo::clear_today_used_help_battle_times() {
  today_used_help_battle_times_ = 0u;
  clear_has_today_used_help_battle_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::today_used_help_battle_times() const {
  return today_used_help_battle_times_;
}
inline void RoleBaseInfo::set_today_used_help_battle_times(::google::protobuf::uint32 value) {
  set_has_today_used_help_battle_times();
  today_used_help_battle_times_ = value;
}

// optional uint32 role_login_days = 56;
inline bool RoleBaseInfo::has_role_login_days() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void RoleBaseInfo::set_has_role_login_days() {
  _has_bits_[1] |= 0x00800000u;
}
inline void RoleBaseInfo::clear_has_role_login_days() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void RoleBaseInfo::clear_role_login_days() {
  role_login_days_ = 0u;
  clear_has_role_login_days();
}
inline ::google::protobuf::uint32 RoleBaseInfo::role_login_days() const {
  return role_login_days_;
}
inline void RoleBaseInfo::set_role_login_days(::google::protobuf::uint32 value) {
  set_has_role_login_days();
  role_login_days_ = value;
}

// optional uint32 crystal = 57;
inline bool RoleBaseInfo::has_crystal() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void RoleBaseInfo::set_has_crystal() {
  _has_bits_[1] |= 0x01000000u;
}
inline void RoleBaseInfo::clear_has_crystal() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void RoleBaseInfo::clear_crystal() {
  crystal_ = 0u;
  clear_has_crystal();
}
inline ::google::protobuf::uint32 RoleBaseInfo::crystal() const {
  return crystal_;
}
inline void RoleBaseInfo::set_crystal(::google::protobuf::uint32 value) {
  set_has_crystal();
  crystal_ = value;
}

// optional uint32 last_login_time_ex = 58;
inline bool RoleBaseInfo::has_last_login_time_ex() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void RoleBaseInfo::set_has_last_login_time_ex() {
  _has_bits_[1] |= 0x02000000u;
}
inline void RoleBaseInfo::clear_has_last_login_time_ex() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void RoleBaseInfo::clear_last_login_time_ex() {
  last_login_time_ex_ = 0u;
  clear_has_last_login_time_ex();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_login_time_ex() const {
  return last_login_time_ex_;
}
inline void RoleBaseInfo::set_last_login_time_ex(::google::protobuf::uint32 value) {
  set_has_last_login_time_ex();
  last_login_time_ex_ = value;
}

// optional uint32 last_logout_time_ex = 59;
inline bool RoleBaseInfo::has_last_logout_time_ex() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void RoleBaseInfo::set_has_last_logout_time_ex() {
  _has_bits_[1] |= 0x04000000u;
}
inline void RoleBaseInfo::clear_has_last_logout_time_ex() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void RoleBaseInfo::clear_last_logout_time_ex() {
  last_logout_time_ex_ = 0u;
  clear_has_last_logout_time_ex();
}
inline ::google::protobuf::uint32 RoleBaseInfo::last_logout_time_ex() const {
  return last_logout_time_ex_;
}
inline void RoleBaseInfo::set_last_logout_time_ex(::google::protobuf::uint32 value) {
  set_has_last_logout_time_ex();
  last_logout_time_ex_ = value;
}

// optional uint32 create_role_time = 60;
inline bool RoleBaseInfo::has_create_role_time() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void RoleBaseInfo::set_has_create_role_time() {
  _has_bits_[1] |= 0x08000000u;
}
inline void RoleBaseInfo::clear_has_create_role_time() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void RoleBaseInfo::clear_create_role_time() {
  create_role_time_ = 0u;
  clear_has_create_role_time();
}
inline ::google::protobuf::uint32 RoleBaseInfo::create_role_time() const {
  return create_role_time_;
}
inline void RoleBaseInfo::set_create_role_time(::google::protobuf::uint32 value) {
  set_has_create_role_time();
  create_role_time_ = value;
}

// optional uint32 is_already_take_closed_test_rebate = 61;
inline bool RoleBaseInfo::has_is_already_take_closed_test_rebate() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void RoleBaseInfo::set_has_is_already_take_closed_test_rebate() {
  _has_bits_[1] |= 0x10000000u;
}
inline void RoleBaseInfo::clear_has_is_already_take_closed_test_rebate() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void RoleBaseInfo::clear_is_already_take_closed_test_rebate() {
  is_already_take_closed_test_rebate_ = 0u;
  clear_has_is_already_take_closed_test_rebate();
}
inline ::google::protobuf::uint32 RoleBaseInfo::is_already_take_closed_test_rebate() const {
  return is_already_take_closed_test_rebate_;
}
inline void RoleBaseInfo::set_is_already_take_closed_test_rebate(::google::protobuf::uint32 value) {
  set_has_is_already_take_closed_test_rebate();
  is_already_take_closed_test_rebate_ = value;
}

// optional uint32 score_match_honor = 62;
inline bool RoleBaseInfo::has_score_match_honor() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void RoleBaseInfo::set_has_score_match_honor() {
  _has_bits_[1] |= 0x20000000u;
}
inline void RoleBaseInfo::clear_has_score_match_honor() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void RoleBaseInfo::clear_score_match_honor() {
  score_match_honor_ = 0u;
  clear_has_score_match_honor();
}
inline ::google::protobuf::uint32 RoleBaseInfo::score_match_honor() const {
  return score_match_honor_;
}
inline void RoleBaseInfo::set_score_match_honor(::google::protobuf::uint32 value) {
  set_has_score_match_honor();
  score_match_honor_ = value;
}

// optional uint32 resource_war_score = 63;
inline bool RoleBaseInfo::has_resource_war_score() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void RoleBaseInfo::set_has_resource_war_score() {
  _has_bits_[1] |= 0x40000000u;
}
inline void RoleBaseInfo::clear_has_resource_war_score() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void RoleBaseInfo::clear_resource_war_score() {
  resource_war_score_ = 0u;
  clear_has_resource_war_score();
}
inline ::google::protobuf::uint32 RoleBaseInfo::resource_war_score() const {
  return resource_war_score_;
}
inline void RoleBaseInfo::set_resource_war_score(::google::protobuf::uint32 value) {
  set_has_resource_war_score();
  resource_war_score_ = value;
}

// optional uint32 ycoin = 64;
inline bool RoleBaseInfo::has_ycoin() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void RoleBaseInfo::set_has_ycoin() {
  _has_bits_[1] |= 0x80000000u;
}
inline void RoleBaseInfo::clear_has_ycoin() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void RoleBaseInfo::clear_ycoin() {
  ycoin_ = 0u;
  clear_has_ycoin();
}
inline ::google::protobuf::uint32 RoleBaseInfo::ycoin() const {
  return ycoin_;
}
inline void RoleBaseInfo::set_ycoin(::google::protobuf::uint32 value) {
  set_has_ycoin();
  ycoin_ = value;
}

// optional uint32 today_chat_times = 65;
inline bool RoleBaseInfo::has_today_chat_times() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void RoleBaseInfo::set_has_today_chat_times() {
  _has_bits_[2] |= 0x00000001u;
}
inline void RoleBaseInfo::clear_has_today_chat_times() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void RoleBaseInfo::clear_today_chat_times() {
  today_chat_times_ = 0u;
  clear_has_today_chat_times();
}
inline ::google::protobuf::uint32 RoleBaseInfo::today_chat_times() const {
  return today_chat_times_;
}
inline void RoleBaseInfo::set_today_chat_times(::google::protobuf::uint32 value) {
  set_has_today_chat_times();
  today_chat_times_ = value;
}

// -------------------------------------------------------------------

// RolePVPData

// optional uint32 today_battle_times = 1;
inline bool RolePVPData::has_today_battle_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RolePVPData::set_has_today_battle_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RolePVPData::clear_has_today_battle_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RolePVPData::clear_today_battle_times() {
  today_battle_times_ = 0u;
  clear_has_today_battle_times();
}
inline ::google::protobuf::uint32 RolePVPData::today_battle_times() const {
  return today_battle_times_;
}
inline void RolePVPData::set_today_battle_times(::google::protobuf::uint32 value) {
  set_has_today_battle_times();
  today_battle_times_ = value;
}

// optional uint32 week_battle_times = 2;
inline bool RolePVPData::has_week_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RolePVPData::set_has_week_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RolePVPData::clear_has_week_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RolePVPData::clear_week_battle_times() {
  week_battle_times_ = 0u;
  clear_has_week_battle_times();
}
inline ::google::protobuf::uint32 RolePVPData::week_battle_times() const {
  return week_battle_times_;
}
inline void RolePVPData::set_week_battle_times(::google::protobuf::uint32 value) {
  set_has_week_battle_times();
  week_battle_times_ = value;
}

// optional uint32 score = 3;
inline bool RolePVPData::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RolePVPData::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RolePVPData::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RolePVPData::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 RolePVPData::score() const {
  return score_;
}
inline void RolePVPData::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 win_times = 4;
inline bool RolePVPData::has_win_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RolePVPData::set_has_win_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RolePVPData::clear_has_win_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RolePVPData::clear_win_times() {
  win_times_ = 0u;
  clear_has_win_times();
}
inline ::google::protobuf::uint32 RolePVPData::win_times() const {
  return win_times_;
}
inline void RolePVPData::set_win_times(::google::protobuf::uint32 value) {
  set_has_win_times();
  win_times_ = value;
}

// optional uint32 total_battle_times = 5;
inline bool RolePVPData::has_total_battle_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RolePVPData::set_has_total_battle_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RolePVPData::clear_has_total_battle_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RolePVPData::clear_total_battle_times() {
  total_battle_times_ = 0u;
  clear_has_total_battle_times();
}
inline ::google::protobuf::uint32 RolePVPData::total_battle_times() const {
  return total_battle_times_;
}
inline void RolePVPData::set_total_battle_times(::google::protobuf::uint32 value) {
  set_has_total_battle_times();
  total_battle_times_ = value;
}

// repeated uint32 daily_reward_take_record = 6;
inline int RolePVPData::daily_reward_take_record_size() const {
  return daily_reward_take_record_.size();
}
inline void RolePVPData::clear_daily_reward_take_record() {
  daily_reward_take_record_.Clear();
}
inline ::google::protobuf::uint32 RolePVPData::daily_reward_take_record(int index) const {
  return daily_reward_take_record_.Get(index);
}
inline void RolePVPData::set_daily_reward_take_record(int index, ::google::protobuf::uint32 value) {
  daily_reward_take_record_.Set(index, value);
}
inline void RolePVPData::add_daily_reward_take_record(::google::protobuf::uint32 value) {
  daily_reward_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RolePVPData::daily_reward_take_record() const {
  return daily_reward_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RolePVPData::mutable_daily_reward_take_record() {
  return &daily_reward_take_record_;
}

// repeated uint32 weekly_reward_take_record = 7;
inline int RolePVPData::weekly_reward_take_record_size() const {
  return weekly_reward_take_record_.size();
}
inline void RolePVPData::clear_weekly_reward_take_record() {
  weekly_reward_take_record_.Clear();
}
inline ::google::protobuf::uint32 RolePVPData::weekly_reward_take_record(int index) const {
  return weekly_reward_take_record_.Get(index);
}
inline void RolePVPData::set_weekly_reward_take_record(int index, ::google::protobuf::uint32 value) {
  weekly_reward_take_record_.Set(index, value);
}
inline void RolePVPData::add_weekly_reward_take_record(::google::protobuf::uint32 value) {
  weekly_reward_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RolePVPData::weekly_reward_take_record() const {
  return weekly_reward_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RolePVPData::mutable_weekly_reward_take_record() {
  return &weekly_reward_take_record_;
}

// optional uint32 last_week_rank = 8;
inline bool RolePVPData::has_last_week_rank() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RolePVPData::set_has_last_week_rank() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RolePVPData::clear_has_last_week_rank() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RolePVPData::clear_last_week_rank() {
  last_week_rank_ = 0u;
  clear_has_last_week_rank();
}
inline ::google::protobuf::uint32 RolePVPData::last_week_rank() const {
  return last_week_rank_;
}
inline void RolePVPData::set_last_week_rank(::google::protobuf::uint32 value) {
  set_has_last_week_rank();
  last_week_rank_ = value;
}

// -------------------------------------------------------------------

// TitleData

// optional uint32 id = 1;
inline bool TitleData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TitleData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TitleData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TitleData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TitleData::id() const {
  return id_;
}
inline void TitleData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 over_time = 2;
inline bool TitleData::has_over_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TitleData::set_has_over_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TitleData::clear_has_over_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TitleData::clear_over_time() {
  over_time_ = 0u;
  clear_has_over_time();
}
inline ::google::protobuf::uint32 TitleData::over_time() const {
  return over_time_;
}
inline void TitleData::set_over_time(::google::protobuf::uint32 value) {
  set_has_over_time();
  over_time_ = value;
}

// -------------------------------------------------------------------

// RoleTitleInfo

// optional uint32 cur_use_title_id = 1;
inline bool RoleTitleInfo::has_cur_use_title_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleTitleInfo::set_has_cur_use_title_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleTitleInfo::clear_has_cur_use_title_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleTitleInfo::clear_cur_use_title_id() {
  cur_use_title_id_ = 0u;
  clear_has_cur_use_title_id();
}
inline ::google::protobuf::uint32 RoleTitleInfo::cur_use_title_id() const {
  return cur_use_title_id_;
}
inline void RoleTitleInfo::set_cur_use_title_id(::google::protobuf::uint32 value) {
  set_has_cur_use_title_id();
  cur_use_title_id_ = value;
}

// repeated .PB.TitleData title_list = 2;
inline int RoleTitleInfo::title_list_size() const {
  return title_list_.size();
}
inline void RoleTitleInfo::clear_title_list() {
  title_list_.Clear();
}
inline const ::PB::TitleData& RoleTitleInfo::title_list(int index) const {
  return title_list_.Get(index);
}
inline ::PB::TitleData* RoleTitleInfo::mutable_title_list(int index) {
  return title_list_.Mutable(index);
}
inline ::PB::TitleData* RoleTitleInfo::add_title_list() {
  return title_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TitleData >&
RoleTitleInfo::title_list() const {
  return title_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TitleData >*
RoleTitleInfo::mutable_title_list() {
  return &title_list_;
}

// optional uint32 cur_use_nickname_id = 3;
inline bool RoleTitleInfo::has_cur_use_nickname_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleTitleInfo::set_has_cur_use_nickname_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleTitleInfo::clear_has_cur_use_nickname_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleTitleInfo::clear_cur_use_nickname_id() {
  cur_use_nickname_id_ = 0u;
  clear_has_cur_use_nickname_id();
}
inline ::google::protobuf::uint32 RoleTitleInfo::cur_use_nickname_id() const {
  return cur_use_nickname_id_;
}
inline void RoleTitleInfo::set_cur_use_nickname_id(::google::protobuf::uint32 value) {
  set_has_cur_use_nickname_id();
  cur_use_nickname_id_ = value;
}

// -------------------------------------------------------------------

// RoleEndlessLandInfo

// optional uint32 is_today_first_battle = 1;
inline bool RoleEndlessLandInfo::has_is_today_first_battle() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleEndlessLandInfo::set_has_is_today_first_battle() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleEndlessLandInfo::clear_has_is_today_first_battle() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleEndlessLandInfo::clear_is_today_first_battle() {
  is_today_first_battle_ = 0u;
  clear_has_is_today_first_battle();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::is_today_first_battle() const {
  return is_today_first_battle_;
}
inline void RoleEndlessLandInfo::set_is_today_first_battle(::google::protobuf::uint32 value) {
  set_has_is_today_first_battle();
  is_today_first_battle_ = value;
}

// optional uint32 cur_wave = 2;
inline bool RoleEndlessLandInfo::has_cur_wave() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleEndlessLandInfo::set_has_cur_wave() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleEndlessLandInfo::clear_has_cur_wave() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleEndlessLandInfo::clear_cur_wave() {
  cur_wave_ = 0u;
  clear_has_cur_wave();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::cur_wave() const {
  return cur_wave_;
}
inline void RoleEndlessLandInfo::set_cur_wave(::google::protobuf::uint32 value) {
  set_has_cur_wave();
  cur_wave_ = value;
}

// optional uint32 today_wave_record = 3;
inline bool RoleEndlessLandInfo::has_today_wave_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleEndlessLandInfo::set_has_today_wave_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleEndlessLandInfo::clear_has_today_wave_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleEndlessLandInfo::clear_today_wave_record() {
  today_wave_record_ = 0u;
  clear_has_today_wave_record();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::today_wave_record() const {
  return today_wave_record_;
}
inline void RoleEndlessLandInfo::set_today_wave_record(::google::protobuf::uint32 value) {
  set_has_today_wave_record();
  today_wave_record_ = value;
}

// optional uint32 cur_wave_kill_num = 4;
inline bool RoleEndlessLandInfo::has_cur_wave_kill_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleEndlessLandInfo::set_has_cur_wave_kill_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleEndlessLandInfo::clear_has_cur_wave_kill_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleEndlessLandInfo::clear_cur_wave_kill_num() {
  cur_wave_kill_num_ = 0u;
  clear_has_cur_wave_kill_num();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::cur_wave_kill_num() const {
  return cur_wave_kill_num_;
}
inline void RoleEndlessLandInfo::set_cur_wave_kill_num(::google::protobuf::uint32 value) {
  set_has_cur_wave_kill_num();
  cur_wave_kill_num_ = value;
}

// optional uint32 history_wave_record = 5;
inline bool RoleEndlessLandInfo::has_history_wave_record() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleEndlessLandInfo::set_has_history_wave_record() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleEndlessLandInfo::clear_has_history_wave_record() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleEndlessLandInfo::clear_history_wave_record() {
  history_wave_record_ = 0u;
  clear_has_history_wave_record();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::history_wave_record() const {
  return history_wave_record_;
}
inline void RoleEndlessLandInfo::set_history_wave_record(::google::protobuf::uint32 value) {
  set_has_history_wave_record();
  history_wave_record_ = value;
}

// optional uint32 cur_keep_kill_num = 6;
inline bool RoleEndlessLandInfo::has_cur_keep_kill_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleEndlessLandInfo::set_has_cur_keep_kill_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleEndlessLandInfo::clear_has_cur_keep_kill_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleEndlessLandInfo::clear_cur_keep_kill_num() {
  cur_keep_kill_num_ = 0u;
  clear_has_cur_keep_kill_num();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::cur_keep_kill_num() const {
  return cur_keep_kill_num_;
}
inline void RoleEndlessLandInfo::set_cur_keep_kill_num(::google::protobuf::uint32 value) {
  set_has_cur_keep_kill_num();
  cur_keep_kill_num_ = value;
}

// optional uint32 keep_kill_num_record = 7;
inline bool RoleEndlessLandInfo::has_keep_kill_num_record() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleEndlessLandInfo::set_has_keep_kill_num_record() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleEndlessLandInfo::clear_has_keep_kill_num_record() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleEndlessLandInfo::clear_keep_kill_num_record() {
  keep_kill_num_record_ = 0u;
  clear_has_keep_kill_num_record();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::keep_kill_num_record() const {
  return keep_kill_num_record_;
}
inline void RoleEndlessLandInfo::set_keep_kill_num_record(::google::protobuf::uint32 value) {
  set_has_keep_kill_num_record();
  keep_kill_num_record_ = value;
}

// optional uint32 today_collision_reward_times = 8;
inline bool RoleEndlessLandInfo::has_today_collision_reward_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleEndlessLandInfo::set_has_today_collision_reward_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleEndlessLandInfo::clear_has_today_collision_reward_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleEndlessLandInfo::clear_today_collision_reward_times() {
  today_collision_reward_times_ = 0u;
  clear_has_today_collision_reward_times();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::today_collision_reward_times() const {
  return today_collision_reward_times_;
}
inline void RoleEndlessLandInfo::set_today_collision_reward_times(::google::protobuf::uint32 value) {
  set_has_today_collision_reward_times();
  today_collision_reward_times_ = value;
}

// repeated uint32 keep_kill_reward_record = 9;
inline int RoleEndlessLandInfo::keep_kill_reward_record_size() const {
  return keep_kill_reward_record_.size();
}
inline void RoleEndlessLandInfo::clear_keep_kill_reward_record() {
  keep_kill_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::keep_kill_reward_record(int index) const {
  return keep_kill_reward_record_.Get(index);
}
inline void RoleEndlessLandInfo::set_keep_kill_reward_record(int index, ::google::protobuf::uint32 value) {
  keep_kill_reward_record_.Set(index, value);
}
inline void RoleEndlessLandInfo::add_keep_kill_reward_record(::google::protobuf::uint32 value) {
  keep_kill_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleEndlessLandInfo::keep_kill_reward_record() const {
  return keep_kill_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleEndlessLandInfo::mutable_keep_kill_reward_record() {
  return &keep_kill_reward_record_;
}

// optional uint32 last_take_continue_kill_reward = 10;
inline bool RoleEndlessLandInfo::has_last_take_continue_kill_reward() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleEndlessLandInfo::set_has_last_take_continue_kill_reward() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleEndlessLandInfo::clear_has_last_take_continue_kill_reward() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleEndlessLandInfo::clear_last_take_continue_kill_reward() {
  last_take_continue_kill_reward_ = 0u;
  clear_has_last_take_continue_kill_reward();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::last_take_continue_kill_reward() const {
  return last_take_continue_kill_reward_;
}
inline void RoleEndlessLandInfo::set_last_take_continue_kill_reward(::google::protobuf::uint32 value) {
  set_has_last_take_continue_kill_reward();
  last_take_continue_kill_reward_ = value;
}

// optional uint32 is_first_battle = 11;
inline bool RoleEndlessLandInfo::has_is_first_battle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleEndlessLandInfo::set_has_is_first_battle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleEndlessLandInfo::clear_has_is_first_battle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleEndlessLandInfo::clear_is_first_battle() {
  is_first_battle_ = 0u;
  clear_has_is_first_battle();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::is_first_battle() const {
  return is_first_battle_;
}
inline void RoleEndlessLandInfo::set_is_first_battle(::google::protobuf::uint32 value) {
  set_has_is_first_battle();
  is_first_battle_ = value;
}

// optional uint32 today_battle_times = 12;
inline bool RoleEndlessLandInfo::has_today_battle_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleEndlessLandInfo::set_has_today_battle_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleEndlessLandInfo::clear_has_today_battle_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleEndlessLandInfo::clear_today_battle_times() {
  today_battle_times_ = 0u;
  clear_has_today_battle_times();
}
inline ::google::protobuf::uint32 RoleEndlessLandInfo::today_battle_times() const {
  return today_battle_times_;
}
inline void RoleEndlessLandInfo::set_today_battle_times(::google::protobuf::uint32 value) {
  set_has_today_battle_times();
  today_battle_times_ = value;
}

// -------------------------------------------------------------------

// RoleGuildData

// repeated uint32 take_chapter_reward_record = 1;
inline int RoleGuildData::take_chapter_reward_record_size() const {
  return take_chapter_reward_record_.size();
}
inline void RoleGuildData::clear_take_chapter_reward_record() {
  take_chapter_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleGuildData::take_chapter_reward_record(int index) const {
  return take_chapter_reward_record_.Get(index);
}
inline void RoleGuildData::set_take_chapter_reward_record(int index, ::google::protobuf::uint32 value) {
  take_chapter_reward_record_.Set(index, value);
}
inline void RoleGuildData::add_take_chapter_reward_record(::google::protobuf::uint32 value) {
  take_chapter_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleGuildData::take_chapter_reward_record() const {
  return take_chapter_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleGuildData::mutable_take_chapter_reward_record() {
  return &take_chapter_reward_record_;
}

// -------------------------------------------------------------------

// LuxurySignInData

// optional uint32 sign_in_id = 1;
inline bool LuxurySignInData::has_sign_in_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LuxurySignInData::set_has_sign_in_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LuxurySignInData::clear_has_sign_in_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LuxurySignInData::clear_sign_in_id() {
  sign_in_id_ = 0u;
  clear_has_sign_in_id();
}
inline ::google::protobuf::uint32 LuxurySignInData::sign_in_id() const {
  return sign_in_id_;
}
inline void LuxurySignInData::set_sign_in_id(::google::protobuf::uint32 value) {
  set_has_sign_in_id();
  sign_in_id_ = value;
}

// optional uint32 status = 2;
inline bool LuxurySignInData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LuxurySignInData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LuxurySignInData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LuxurySignInData::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 LuxurySignInData::status() const {
  return status_;
}
inline void LuxurySignInData::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 rewar_id = 3;
inline bool LuxurySignInData::has_rewar_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LuxurySignInData::set_has_rewar_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LuxurySignInData::clear_has_rewar_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LuxurySignInData::clear_rewar_id() {
  rewar_id_ = 0u;
  clear_has_rewar_id();
}
inline ::google::protobuf::uint32 LuxurySignInData::rewar_id() const {
  return rewar_id_;
}
inline void LuxurySignInData::set_rewar_id(::google::protobuf::uint32 value) {
  set_has_rewar_id();
  rewar_id_ = value;
}

// -------------------------------------------------------------------

// PlayerLuxurySignInData

// repeated .PB.LuxurySignInData sign_in_data_list = 1;
inline int PlayerLuxurySignInData::sign_in_data_list_size() const {
  return sign_in_data_list_.size();
}
inline void PlayerLuxurySignInData::clear_sign_in_data_list() {
  sign_in_data_list_.Clear();
}
inline const ::PB::LuxurySignInData& PlayerLuxurySignInData::sign_in_data_list(int index) const {
  return sign_in_data_list_.Get(index);
}
inline ::PB::LuxurySignInData* PlayerLuxurySignInData::mutable_sign_in_data_list(int index) {
  return sign_in_data_list_.Mutable(index);
}
inline ::PB::LuxurySignInData* PlayerLuxurySignInData::add_sign_in_data_list() {
  return sign_in_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::LuxurySignInData >&
PlayerLuxurySignInData::sign_in_data_list() const {
  return sign_in_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::LuxurySignInData >*
PlayerLuxurySignInData::mutable_sign_in_data_list() {
  return &sign_in_data_list_;
}

// -------------------------------------------------------------------

// Gem

// optional uint32 id = 1;
inline bool Gem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Gem::id() const {
  return id_;
}
inline void Gem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool Gem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Gem::num() const {
  return num_;
}
inline void Gem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// PlayerGemInfo

// repeated .PB.Gem gem_list = 1;
inline int PlayerGemInfo::gem_list_size() const {
  return gem_list_.size();
}
inline void PlayerGemInfo::clear_gem_list() {
  gem_list_.Clear();
}
inline const ::PB::Gem& PlayerGemInfo::gem_list(int index) const {
  return gem_list_.Get(index);
}
inline ::PB::Gem* PlayerGemInfo::mutable_gem_list(int index) {
  return gem_list_.Mutable(index);
}
inline ::PB::Gem* PlayerGemInfo::add_gem_list() {
  return gem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Gem >&
PlayerGemInfo::gem_list() const {
  return gem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Gem >*
PlayerGemInfo::mutable_gem_list() {
  return &gem_list_;
}

// repeated uint32 hole_open_list = 2;
inline int PlayerGemInfo::hole_open_list_size() const {
  return hole_open_list_.size();
}
inline void PlayerGemInfo::clear_hole_open_list() {
  hole_open_list_.Clear();
}
inline ::google::protobuf::uint32 PlayerGemInfo::hole_open_list(int index) const {
  return hole_open_list_.Get(index);
}
inline void PlayerGemInfo::set_hole_open_list(int index, ::google::protobuf::uint32 value) {
  hole_open_list_.Set(index, value);
}
inline void PlayerGemInfo::add_hole_open_list(::google::protobuf::uint32 value) {
  hole_open_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerGemInfo::hole_open_list() const {
  return hole_open_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerGemInfo::mutable_hole_open_list() {
  return &hole_open_list_;
}

// optional uint32 hole_init_time = 3;
inline bool PlayerGemInfo::has_hole_init_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerGemInfo::set_has_hole_init_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerGemInfo::clear_has_hole_init_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerGemInfo::clear_hole_init_time() {
  hole_init_time_ = 0u;
  clear_has_hole_init_time();
}
inline ::google::protobuf::uint32 PlayerGemInfo::hole_init_time() const {
  return hole_init_time_;
}
inline void PlayerGemInfo::set_hole_init_time(::google::protobuf::uint32 value) {
  set_has_hole_init_time();
  hole_init_time_ = value;
}

// -------------------------------------------------------------------

// RoleEquipmentInfo

// repeated .PB.Equipment equipment_list = 1;
inline int RoleEquipmentInfo::equipment_list_size() const {
  return equipment_list_.size();
}
inline void RoleEquipmentInfo::clear_equipment_list() {
  equipment_list_.Clear();
}
inline const ::PB::Equipment& RoleEquipmentInfo::equipment_list(int index) const {
  return equipment_list_.Get(index);
}
inline ::PB::Equipment* RoleEquipmentInfo::mutable_equipment_list(int index) {
  return equipment_list_.Mutable(index);
}
inline ::PB::Equipment* RoleEquipmentInfo::add_equipment_list() {
  return equipment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Equipment >&
RoleEquipmentInfo::equipment_list() const {
  return equipment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Equipment >*
RoleEquipmentInfo::mutable_equipment_list() {
  return &equipment_list_;
}

// -------------------------------------------------------------------

// Formation

// required uint32 hero_id = 1;
inline bool Formation::has_hero_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Formation::set_has_hero_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Formation::clear_has_hero_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Formation::clear_hero_id() {
  hero_id_ = 0u;
  clear_has_hero_id();
}
inline ::google::protobuf::uint32 Formation::hero_id() const {
  return hero_id_;
}
inline void Formation::set_hero_id(::google::protobuf::uint32 value) {
  set_has_hero_id();
  hero_id_ = value;
}

// repeated uint32 equipment_list = 2;
inline int Formation::equipment_list_size() const {
  return equipment_list_.size();
}
inline void Formation::clear_equipment_list() {
  equipment_list_.Clear();
}
inline ::google::protobuf::uint32 Formation::equipment_list(int index) const {
  return equipment_list_.Get(index);
}
inline void Formation::set_equipment_list(int index, ::google::protobuf::uint32 value) {
  equipment_list_.Set(index, value);
}
inline void Formation::add_equipment_list(::google::protobuf::uint32 value) {
  equipment_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Formation::equipment_list() const {
  return equipment_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Formation::mutable_equipment_list() {
  return &equipment_list_;
}

// repeated uint32 treasure_list = 3;
inline int Formation::treasure_list_size() const {
  return treasure_list_.size();
}
inline void Formation::clear_treasure_list() {
  treasure_list_.Clear();
}
inline ::google::protobuf::uint32 Formation::treasure_list(int index) const {
  return treasure_list_.Get(index);
}
inline void Formation::set_treasure_list(int index, ::google::protobuf::uint32 value) {
  treasure_list_.Set(index, value);
}
inline void Formation::add_treasure_list(::google::protobuf::uint32 value) {
  treasure_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Formation::treasure_list() const {
  return treasure_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Formation::mutable_treasure_list() {
  return &treasure_list_;
}

// repeated uint32 gem_list = 4;
inline int Formation::gem_list_size() const {
  return gem_list_.size();
}
inline void Formation::clear_gem_list() {
  gem_list_.Clear();
}
inline ::google::protobuf::uint32 Formation::gem_list(int index) const {
  return gem_list_.Get(index);
}
inline void Formation::set_gem_list(int index, ::google::protobuf::uint32 value) {
  gem_list_.Set(index, value);
}
inline void Formation::add_gem_list(::google::protobuf::uint32 value) {
  gem_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Formation::gem_list() const {
  return gem_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Formation::mutable_gem_list() {
  return &gem_list_;
}

// repeated uint32 card_list = 5;
inline int Formation::card_list_size() const {
  return card_list_.size();
}
inline void Formation::clear_card_list() {
  card_list_.Clear();
}
inline ::google::protobuf::uint32 Formation::card_list(int index) const {
  return card_list_.Get(index);
}
inline void Formation::set_card_list(int index, ::google::protobuf::uint32 value) {
  card_list_.Set(index, value);
}
inline void Formation::add_card_list(::google::protobuf::uint32 value) {
  card_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Formation::card_list() const {
  return card_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Formation::mutable_card_list() {
  return &card_list_;
}

// optional uint32 bless_sprite_id = 6;
inline bool Formation::has_bless_sprite_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Formation::set_has_bless_sprite_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Formation::clear_has_bless_sprite_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Formation::clear_bless_sprite_id() {
  bless_sprite_id_ = 0u;
  clear_has_bless_sprite_id();
}
inline ::google::protobuf::uint32 Formation::bless_sprite_id() const {
  return bless_sprite_id_;
}
inline void Formation::set_bless_sprite_id(::google::protobuf::uint32 value) {
  set_has_bless_sprite_id();
  bless_sprite_id_ = value;
}

// -------------------------------------------------------------------

// RoleHeroInfo

// required uint32 normal_free_summon_times = 1;
inline bool RoleHeroInfo::has_normal_free_summon_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleHeroInfo::set_has_normal_free_summon_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleHeroInfo::clear_has_normal_free_summon_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleHeroInfo::clear_normal_free_summon_times() {
  normal_free_summon_times_ = 0u;
  clear_has_normal_free_summon_times();
}
inline ::google::protobuf::uint32 RoleHeroInfo::normal_free_summon_times() const {
  return normal_free_summon_times_;
}
inline void RoleHeroInfo::set_normal_free_summon_times(::google::protobuf::uint32 value) {
  set_has_normal_free_summon_times();
  normal_free_summon_times_ = value;
}

// required uint32 normal_free_summon_time = 2;
inline bool RoleHeroInfo::has_normal_free_summon_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleHeroInfo::set_has_normal_free_summon_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleHeroInfo::clear_has_normal_free_summon_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleHeroInfo::clear_normal_free_summon_time() {
  normal_free_summon_time_ = 0u;
  clear_has_normal_free_summon_time();
}
inline ::google::protobuf::uint32 RoleHeroInfo::normal_free_summon_time() const {
  return normal_free_summon_time_;
}
inline void RoleHeroInfo::set_normal_free_summon_time(::google::protobuf::uint32 value) {
  set_has_normal_free_summon_time();
  normal_free_summon_time_ = value;
}

// required uint32 high_free_summon_time = 3;
inline bool RoleHeroInfo::has_high_free_summon_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleHeroInfo::set_has_high_free_summon_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleHeroInfo::clear_has_high_free_summon_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleHeroInfo::clear_high_free_summon_time() {
  high_free_summon_time_ = 0u;
  clear_has_high_free_summon_time();
}
inline ::google::protobuf::uint32 RoleHeroInfo::high_free_summon_time() const {
  return high_free_summon_time_;
}
inline void RoleHeroInfo::set_high_free_summon_time(::google::protobuf::uint32 value) {
  set_has_high_free_summon_time();
  high_free_summon_time_ = value;
}

// required uint32 high_summon_times = 4;
inline bool RoleHeroInfo::has_high_summon_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleHeroInfo::set_has_high_summon_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleHeroInfo::clear_has_high_summon_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleHeroInfo::clear_high_summon_times() {
  high_summon_times_ = 0u;
  clear_has_high_summon_times();
}
inline ::google::protobuf::uint32 RoleHeroInfo::high_summon_times() const {
  return high_summon_times_;
}
inline void RoleHeroInfo::set_high_summon_times(::google::protobuf::uint32 value) {
  set_has_high_summon_times();
  high_summon_times_ = value;
}

// repeated .PB.Hero hero_list = 5;
inline int RoleHeroInfo::hero_list_size() const {
  return hero_list_.size();
}
inline void RoleHeroInfo::clear_hero_list() {
  hero_list_.Clear();
}
inline const ::PB::Hero& RoleHeroInfo::hero_list(int index) const {
  return hero_list_.Get(index);
}
inline ::PB::Hero* RoleHeroInfo::mutable_hero_list(int index) {
  return hero_list_.Mutable(index);
}
inline ::PB::Hero* RoleHeroInfo::add_hero_list() {
  return hero_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Hero >&
RoleHeroInfo::hero_list() const {
  return hero_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Hero >*
RoleHeroInfo::mutable_hero_list() {
  return &hero_list_;
}

// repeated uint32 collection_list = 6;
inline int RoleHeroInfo::collection_list_size() const {
  return collection_list_.size();
}
inline void RoleHeroInfo::clear_collection_list() {
  collection_list_.Clear();
}
inline ::google::protobuf::uint32 RoleHeroInfo::collection_list(int index) const {
  return collection_list_.Get(index);
}
inline void RoleHeroInfo::set_collection_list(int index, ::google::protobuf::uint32 value) {
  collection_list_.Set(index, value);
}
inline void RoleHeroInfo::add_collection_list(::google::protobuf::uint32 value) {
  collection_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleHeroInfo::collection_list() const {
  return collection_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleHeroInfo::mutable_collection_list() {
  return &collection_list_;
}

// repeated uint32 reinforcement_list = 7;
inline int RoleHeroInfo::reinforcement_list_size() const {
  return reinforcement_list_.size();
}
inline void RoleHeroInfo::clear_reinforcement_list() {
  reinforcement_list_.Clear();
}
inline ::google::protobuf::uint32 RoleHeroInfo::reinforcement_list(int index) const {
  return reinforcement_list_.Get(index);
}
inline void RoleHeroInfo::set_reinforcement_list(int index, ::google::protobuf::uint32 value) {
  reinforcement_list_.Set(index, value);
}
inline void RoleHeroInfo::add_reinforcement_list(::google::protobuf::uint32 value) {
  reinforcement_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleHeroInfo::reinforcement_list() const {
  return reinforcement_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleHeroInfo::mutable_reinforcement_list() {
  return &reinforcement_list_;
}

// repeated .PB.Formation formation_list = 8;
inline int RoleHeroInfo::formation_list_size() const {
  return formation_list_.size();
}
inline void RoleHeroInfo::clear_formation_list() {
  formation_list_.Clear();
}
inline const ::PB::Formation& RoleHeroInfo::formation_list(int index) const {
  return formation_list_.Get(index);
}
inline ::PB::Formation* RoleHeroInfo::mutable_formation_list(int index) {
  return formation_list_.Mutable(index);
}
inline ::PB::Formation* RoleHeroInfo::add_formation_list() {
  return formation_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Formation >&
RoleHeroInfo::formation_list() const {
  return formation_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Formation >*
RoleHeroInfo::mutable_formation_list() {
  return &formation_list_;
}

// optional uint32 train_times = 9;
inline bool RoleHeroInfo::has_train_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleHeroInfo::set_has_train_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleHeroInfo::clear_has_train_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleHeroInfo::clear_train_times() {
  train_times_ = 0u;
  clear_has_train_times();
}
inline ::google::protobuf::uint32 RoleHeroInfo::train_times() const {
  return train_times_;
}
inline void RoleHeroInfo::set_train_times(::google::protobuf::uint32 value) {
  set_has_train_times();
  train_times_ = value;
}

// -------------------------------------------------------------------

// RoleTreasureInfo

// repeated .PB.Treasure treasure_list = 1;
inline int RoleTreasureInfo::treasure_list_size() const {
  return treasure_list_.size();
}
inline void RoleTreasureInfo::clear_treasure_list() {
  treasure_list_.Clear();
}
inline const ::PB::Treasure& RoleTreasureInfo::treasure_list(int index) const {
  return treasure_list_.Get(index);
}
inline ::PB::Treasure* RoleTreasureInfo::mutable_treasure_list(int index) {
  return treasure_list_.Mutable(index);
}
inline ::PB::Treasure* RoleTreasureInfo::add_treasure_list() {
  return treasure_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Treasure >&
RoleTreasureInfo::treasure_list() const {
  return treasure_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Treasure >*
RoleTreasureInfo::mutable_treasure_list() {
  return &treasure_list_;
}

// -------------------------------------------------------------------

// RoleItemInfo

// repeated .PB.Item item_list = 1;
inline int RoleItemInfo::item_list_size() const {
  return item_list_.size();
}
inline void RoleItemInfo::clear_item_list() {
  item_list_.Clear();
}
inline const ::PB::Item& RoleItemInfo::item_list(int index) const {
  return item_list_.Get(index);
}
inline ::PB::Item* RoleItemInfo::mutable_item_list(int index) {
  return item_list_.Mutable(index);
}
inline ::PB::Item* RoleItemInfo::add_item_list() {
  return item_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Item >&
RoleItemInfo::item_list() const {
  return item_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Item >*
RoleItemInfo::mutable_item_list() {
  return &item_list_;
}

// -------------------------------------------------------------------

// EmailContext

// required uint32 type = 1;
inline bool EmailContext::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailContext::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailContext::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailContext::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 EmailContext::type() const {
  return type_;
}
inline void EmailContext::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required string text = 2;
inline bool EmailContext::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailContext::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailContext::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailContext::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& EmailContext::text() const {
  return *text_;
}
inline void EmailContext::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void EmailContext::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void EmailContext::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailContext::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* EmailContext::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EmailContext::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EmailInfo

// required uint32 uid = 1;
inline bool EmailInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EmailInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EmailInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EmailInfo::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 EmailInfo::uid() const {
  return uid_;
}
inline void EmailInfo::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// required uint32 info_id = 2;
inline bool EmailInfo::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EmailInfo::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EmailInfo::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EmailInfo::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 EmailInfo::info_id() const {
  return info_id_;
}
inline void EmailInfo::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// required uint32 receive_time = 3;
inline bool EmailInfo::has_receive_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EmailInfo::set_has_receive_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EmailInfo::clear_has_receive_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EmailInfo::clear_receive_time() {
  receive_time_ = 0u;
  clear_has_receive_time();
}
inline ::google::protobuf::uint32 EmailInfo::receive_time() const {
  return receive_time_;
}
inline void EmailInfo::set_receive_time(::google::protobuf::uint32 value) {
  set_has_receive_time();
  receive_time_ = value;
}

// repeated .PB.EmailContext context_list = 4;
inline int EmailInfo::context_list_size() const {
  return context_list_.size();
}
inline void EmailInfo::clear_context_list() {
  context_list_.Clear();
}
inline const ::PB::EmailContext& EmailInfo::context_list(int index) const {
  return context_list_.Get(index);
}
inline ::PB::EmailContext* EmailInfo::mutable_context_list(int index) {
  return context_list_.Mutable(index);
}
inline ::PB::EmailContext* EmailInfo::add_context_list() {
  return context_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::EmailContext >&
EmailInfo::context_list() const {
  return context_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::EmailContext >*
EmailInfo::mutable_context_list() {
  return &context_list_;
}

// optional string title = 5;
inline bool EmailInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EmailInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EmailInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EmailInfo::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& EmailInfo::title() const {
  return *title_;
}
inline void EmailInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void EmailInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void EmailInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* EmailInfo::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EmailInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string text = 6;
inline bool EmailInfo::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EmailInfo::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EmailInfo::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EmailInfo::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& EmailInfo::text() const {
  return *text_;
}
inline void EmailInfo::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void EmailInfo::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void EmailInfo::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EmailInfo::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* EmailInfo::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EmailInfo::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoleEmailInfo

// repeated .PB.EmailInfo email_list = 1;
inline int RoleEmailInfo::email_list_size() const {
  return email_list_.size();
}
inline void RoleEmailInfo::clear_email_list() {
  email_list_.Clear();
}
inline const ::PB::EmailInfo& RoleEmailInfo::email_list(int index) const {
  return email_list_.Get(index);
}
inline ::PB::EmailInfo* RoleEmailInfo::mutable_email_list(int index) {
  return email_list_.Mutable(index);
}
inline ::PB::EmailInfo* RoleEmailInfo::add_email_list() {
  return email_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::EmailInfo >&
RoleEmailInfo::email_list() const {
  return email_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::EmailInfo >*
RoleEmailInfo::mutable_email_list() {
  return &email_list_;
}

// optional uint32 is_have_new_email = 2;
inline bool RoleEmailInfo::has_is_have_new_email() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleEmailInfo::set_has_is_have_new_email() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleEmailInfo::clear_has_is_have_new_email() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleEmailInfo::clear_is_have_new_email() {
  is_have_new_email_ = 0u;
  clear_has_is_have_new_email();
}
inline ::google::protobuf::uint32 RoleEmailInfo::is_have_new_email() const {
  return is_have_new_email_;
}
inline void RoleEmailInfo::set_is_have_new_email(::google::protobuf::uint32 value) {
  set_has_is_have_new_email();
  is_have_new_email_ = value;
}

// -------------------------------------------------------------------

// MapData

// required uint32 star = 1;
inline bool MapData::has_star() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapData::set_has_star() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapData::clear_has_star() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapData::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 MapData::star() const {
  return star_;
}
inline void MapData::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// required uint32 battle_times = 2;
inline bool MapData::has_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapData::set_has_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapData::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapData::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 MapData::battle_times() const {
  return battle_times_;
}
inline void MapData::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// required uint32 reset_times = 3;
inline bool MapData::has_reset_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapData::set_has_reset_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapData::clear_has_reset_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapData::clear_reset_times() {
  reset_times_ = 0u;
  clear_has_reset_times();
}
inline ::google::protobuf::uint32 MapData::reset_times() const {
  return reset_times_;
}
inline void MapData::set_reset_times(::google::protobuf::uint32 value) {
  set_has_reset_times();
  reset_times_ = value;
}

// required uint32 is_get_reward = 4;
inline bool MapData::has_is_get_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapData::set_has_is_get_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapData::clear_has_is_get_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapData::clear_is_get_reward() {
  is_get_reward_ = 0u;
  clear_has_is_get_reward();
}
inline ::google::protobuf::uint32 MapData::is_get_reward() const {
  return is_get_reward_;
}
inline void MapData::set_is_get_reward(::google::protobuf::uint32 value) {
  set_has_is_get_reward();
  is_get_reward_ = value;
}

// -------------------------------------------------------------------

// ChapterData

// repeated .PB.MapData map_list = 1;
inline int ChapterData::map_list_size() const {
  return map_list_.size();
}
inline void ChapterData::clear_map_list() {
  map_list_.Clear();
}
inline const ::PB::MapData& ChapterData::map_list(int index) const {
  return map_list_.Get(index);
}
inline ::PB::MapData* ChapterData::mutable_map_list(int index) {
  return map_list_.Mutable(index);
}
inline ::PB::MapData* ChapterData::add_map_list() {
  return map_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MapData >&
ChapterData::map_list() const {
  return map_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MapData >*
ChapterData::mutable_map_list() {
  return &map_list_;
}

// repeated uint32 star_reward_list = 2;
inline int ChapterData::star_reward_list_size() const {
  return star_reward_list_.size();
}
inline void ChapterData::clear_star_reward_list() {
  star_reward_list_.Clear();
}
inline ::google::protobuf::uint32 ChapterData::star_reward_list(int index) const {
  return star_reward_list_.Get(index);
}
inline void ChapterData::set_star_reward_list(int index, ::google::protobuf::uint32 value) {
  star_reward_list_.Set(index, value);
}
inline void ChapterData::add_star_reward_list(::google::protobuf::uint32 value) {
  star_reward_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ChapterData::star_reward_list() const {
  return star_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ChapterData::mutable_star_reward_list() {
  return &star_reward_list_;
}

// -------------------------------------------------------------------

// MainFBData

// repeated .PB.ChapterData chapter_list = 1;
inline int MainFBData::chapter_list_size() const {
  return chapter_list_.size();
}
inline void MainFBData::clear_chapter_list() {
  chapter_list_.Clear();
}
inline const ::PB::ChapterData& MainFBData::chapter_list(int index) const {
  return chapter_list_.Get(index);
}
inline ::PB::ChapterData* MainFBData::mutable_chapter_list(int index) {
  return chapter_list_.Mutable(index);
}
inline ::PB::ChapterData* MainFBData::add_chapter_list() {
  return chapter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ChapterData >&
MainFBData::chapter_list() const {
  return chapter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ChapterData >*
MainFBData::mutable_chapter_list() {
  return &chapter_list_;
}

// optional uint32 take_chapter_reward_record = 2;
inline bool MainFBData::has_take_chapter_reward_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MainFBData::set_has_take_chapter_reward_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MainFBData::clear_has_take_chapter_reward_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MainFBData::clear_take_chapter_reward_record() {
  take_chapter_reward_record_ = 0u;
  clear_has_take_chapter_reward_record();
}
inline ::google::protobuf::uint32 MainFBData::take_chapter_reward_record() const {
  return take_chapter_reward_record_;
}
inline void MainFBData::set_take_chapter_reward_record(::google::protobuf::uint32 value) {
  set_has_take_chapter_reward_record();
  take_chapter_reward_record_ = value;
}

// -------------------------------------------------------------------

// HeroMapData

// required uint32 battle_times = 1;
inline bool HeroMapData::has_battle_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroMapData::set_has_battle_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroMapData::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroMapData::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 HeroMapData::battle_times() const {
  return battle_times_;
}
inline void HeroMapData::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// required uint32 is_get_reward = 2;
inline bool HeroMapData::has_is_get_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroMapData::set_has_is_get_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroMapData::clear_has_is_get_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroMapData::clear_is_get_reward() {
  is_get_reward_ = 0u;
  clear_has_is_get_reward();
}
inline ::google::protobuf::uint32 HeroMapData::is_get_reward() const {
  return is_get_reward_;
}
inline void HeroMapData::set_is_get_reward(::google::protobuf::uint32 value) {
  set_has_is_get_reward();
  is_get_reward_ = value;
}

// -------------------------------------------------------------------

// HeroFBChapter

// repeated .PB.HeroMapData map_list = 1;
inline int HeroFBChapter::map_list_size() const {
  return map_list_.size();
}
inline void HeroFBChapter::clear_map_list() {
  map_list_.Clear();
}
inline const ::PB::HeroMapData& HeroFBChapter::map_list(int index) const {
  return map_list_.Get(index);
}
inline ::PB::HeroMapData* HeroFBChapter::mutable_map_list(int index) {
  return map_list_.Mutable(index);
}
inline ::PB::HeroMapData* HeroFBChapter::add_map_list() {
  return map_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroMapData >&
HeroFBChapter::map_list() const {
  return map_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::HeroMapData >*
HeroFBChapter::mutable_map_list() {
  return &map_list_;
}

// required uint32 is_pass_extra_map = 2;
inline bool HeroFBChapter::has_is_pass_extra_map() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroFBChapter::set_has_is_pass_extra_map() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroFBChapter::clear_has_is_pass_extra_map() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroFBChapter::clear_is_pass_extra_map() {
  is_pass_extra_map_ = 0u;
  clear_has_is_pass_extra_map();
}
inline ::google::protobuf::uint32 HeroFBChapter::is_pass_extra_map() const {
  return is_pass_extra_map_;
}
inline void HeroFBChapter::set_is_pass_extra_map(::google::protobuf::uint32 value) {
  set_has_is_pass_extra_map();
  is_pass_extra_map_ = value;
}

// -------------------------------------------------------------------

// HeroFBData

// repeated .PB.HeroFBChapter chapter_list = 1;
inline int HeroFBData::chapter_list_size() const {
  return chapter_list_.size();
}
inline void HeroFBData::clear_chapter_list() {
  chapter_list_.Clear();
}
inline const ::PB::HeroFBChapter& HeroFBData::chapter_list(int index) const {
  return chapter_list_.Get(index);
}
inline ::PB::HeroFBChapter* HeroFBData::mutable_chapter_list(int index) {
  return chapter_list_.Mutable(index);
}
inline ::PB::HeroFBChapter* HeroFBData::add_chapter_list() {
  return chapter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::HeroFBChapter >&
HeroFBData::chapter_list() const {
  return chapter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::HeroFBChapter >*
HeroFBData::mutable_chapter_list() {
  return &chapter_list_;
}

// required uint32 battle_times = 2;
inline bool HeroFBData::has_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroFBData::set_has_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroFBData::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroFBData::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 HeroFBData::battle_times() const {
  return battle_times_;
}
inline void HeroFBData::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// -------------------------------------------------------------------

// DailyChapterData

// optional uint32 chapter = 1;
inline bool DailyChapterData::has_chapter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyChapterData::set_has_chapter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyChapterData::clear_has_chapter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyChapterData::clear_chapter() {
  chapter_ = 0u;
  clear_has_chapter();
}
inline ::google::protobuf::uint32 DailyChapterData::chapter() const {
  return chapter_;
}
inline void DailyChapterData::set_chapter(::google::protobuf::uint32 value) {
  set_has_chapter();
  chapter_ = value;
}

// optional int32 max_idx_record = 2;
inline bool DailyChapterData::has_max_idx_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyChapterData::set_has_max_idx_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyChapterData::clear_has_max_idx_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyChapterData::clear_max_idx_record() {
  max_idx_record_ = 0;
  clear_has_max_idx_record();
}
inline ::google::protobuf::int32 DailyChapterData::max_idx_record() const {
  return max_idx_record_;
}
inline void DailyChapterData::set_max_idx_record(::google::protobuf::int32 value) {
  set_has_max_idx_record();
  max_idx_record_ = value;
}

// optional uint32 battle_times = 3;
inline bool DailyChapterData::has_battle_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyChapterData::set_has_battle_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyChapterData::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyChapterData::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 DailyChapterData::battle_times() const {
  return battle_times_;
}
inline void DailyChapterData::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// -------------------------------------------------------------------

// DailyFBData

// repeated .PB.DailyChapterData chapter_list = 1;
inline int DailyFBData::chapter_list_size() const {
  return chapter_list_.size();
}
inline void DailyFBData::clear_chapter_list() {
  chapter_list_.Clear();
}
inline const ::PB::DailyChapterData& DailyFBData::chapter_list(int index) const {
  return chapter_list_.Get(index);
}
inline ::PB::DailyChapterData* DailyFBData::mutable_chapter_list(int index) {
  return chapter_list_.Mutable(index);
}
inline ::PB::DailyChapterData* DailyFBData::add_chapter_list() {
  return chapter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::DailyChapterData >&
DailyFBData::chapter_list() const {
  return chapter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::DailyChapterData >*
DailyFBData::mutable_chapter_list() {
  return &chapter_list_;
}

// -------------------------------------------------------------------

// EliteMapEnemyData

// required uint32 map_id = 1;
inline bool EliteMapEnemyData::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EliteMapEnemyData::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EliteMapEnemyData::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EliteMapEnemyData::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 EliteMapEnemyData::map_id() const {
  return map_id_;
}
inline void EliteMapEnemyData::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// repeated .PB.MonsterData monster_list = 2;
inline int EliteMapEnemyData::monster_list_size() const {
  return monster_list_.size();
}
inline void EliteMapEnemyData::clear_monster_list() {
  monster_list_.Clear();
}
inline const ::PB::MonsterData& EliteMapEnemyData::monster_list(int index) const {
  return monster_list_.Get(index);
}
inline ::PB::MonsterData* EliteMapEnemyData::mutable_monster_list(int index) {
  return monster_list_.Mutable(index);
}
inline ::PB::MonsterData* EliteMapEnemyData::add_monster_list() {
  return monster_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >&
EliteMapEnemyData::monster_list() const {
  return monster_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >*
EliteMapEnemyData::mutable_monster_list() {
  return &monster_list_;
}

// optional uint32 is_dead = 3;
inline bool EliteMapEnemyData::has_is_dead() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EliteMapEnemyData::set_has_is_dead() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EliteMapEnemyData::clear_has_is_dead() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EliteMapEnemyData::clear_is_dead() {
  is_dead_ = 0u;
  clear_has_is_dead();
}
inline ::google::protobuf::uint32 EliteMapEnemyData::is_dead() const {
  return is_dead_;
}
inline void EliteMapEnemyData::set_is_dead(::google::protobuf::uint32 value) {
  set_has_is_dead();
  is_dead_ = value;
}

// -------------------------------------------------------------------

// EliteFBChapter

// repeated .PB.MapData map_list = 1;
inline int EliteFBChapter::map_list_size() const {
  return map_list_.size();
}
inline void EliteFBChapter::clear_map_list() {
  map_list_.Clear();
}
inline const ::PB::MapData& EliteFBChapter::map_list(int index) const {
  return map_list_.Get(index);
}
inline ::PB::MapData* EliteFBChapter::mutable_map_list(int index) {
  return map_list_.Mutable(index);
}
inline ::PB::MapData* EliteFBChapter::add_map_list() {
  return map_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MapData >&
EliteFBChapter::map_list() const {
  return map_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MapData >*
EliteFBChapter::mutable_map_list() {
  return &map_list_;
}

// repeated uint32 star_reward_list = 2;
inline int EliteFBChapter::star_reward_list_size() const {
  return star_reward_list_.size();
}
inline void EliteFBChapter::clear_star_reward_list() {
  star_reward_list_.Clear();
}
inline ::google::protobuf::uint32 EliteFBChapter::star_reward_list(int index) const {
  return star_reward_list_.Get(index);
}
inline void EliteFBChapter::set_star_reward_list(int index, ::google::protobuf::uint32 value) {
  star_reward_list_.Set(index, value);
}
inline void EliteFBChapter::add_star_reward_list(::google::protobuf::uint32 value) {
  star_reward_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EliteFBChapter::star_reward_list() const {
  return star_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EliteFBChapter::mutable_star_reward_list() {
  return &star_reward_list_;
}

// required .PB.EliteMapEnemyData enemy_data = 3;
inline bool EliteFBChapter::has_enemy_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EliteFBChapter::set_has_enemy_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EliteFBChapter::clear_has_enemy_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EliteFBChapter::clear_enemy_data() {
  if (enemy_data_ != NULL) enemy_data_->::PB::EliteMapEnemyData::Clear();
  clear_has_enemy_data();
}
inline const ::PB::EliteMapEnemyData& EliteFBChapter::enemy_data() const {
  return enemy_data_ != NULL ? *enemy_data_ : *default_instance_->enemy_data_;
}
inline ::PB::EliteMapEnemyData* EliteFBChapter::mutable_enemy_data() {
  set_has_enemy_data();
  if (enemy_data_ == NULL) enemy_data_ = new ::PB::EliteMapEnemyData;
  return enemy_data_;
}
inline ::PB::EliteMapEnemyData* EliteFBChapter::release_enemy_data() {
  clear_has_enemy_data();
  ::PB::EliteMapEnemyData* temp = enemy_data_;
  enemy_data_ = NULL;
  return temp;
}
inline void EliteFBChapter::set_allocated_enemy_data(::PB::EliteMapEnemyData* enemy_data) {
  delete enemy_data_;
  enemy_data_ = enemy_data;
  if (enemy_data) {
    set_has_enemy_data();
  } else {
    clear_has_enemy_data();
  }
}

// -------------------------------------------------------------------

// EliteFBData

// repeated .PB.EliteFBChapter chapter_list = 1;
inline int EliteFBData::chapter_list_size() const {
  return chapter_list_.size();
}
inline void EliteFBData::clear_chapter_list() {
  chapter_list_.Clear();
}
inline const ::PB::EliteFBChapter& EliteFBData::chapter_list(int index) const {
  return chapter_list_.Get(index);
}
inline ::PB::EliteFBChapter* EliteFBData::mutable_chapter_list(int index) {
  return chapter_list_.Mutable(index);
}
inline ::PB::EliteFBChapter* EliteFBData::add_chapter_list() {
  return chapter_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::EliteFBChapter >&
EliteFBData::chapter_list() const {
  return chapter_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::EliteFBChapter >*
EliteFBData::mutable_chapter_list() {
  return &chapter_list_;
}

// optional uint32 last_refresh_enemy_time = 2;
inline bool EliteFBData::has_last_refresh_enemy_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EliteFBData::set_has_last_refresh_enemy_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EliteFBData::clear_has_last_refresh_enemy_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EliteFBData::clear_last_refresh_enemy_time() {
  last_refresh_enemy_time_ = 0u;
  clear_has_last_refresh_enemy_time();
}
inline ::google::protobuf::uint32 EliteFBData::last_refresh_enemy_time() const {
  return last_refresh_enemy_time_;
}
inline void EliteFBData::set_last_refresh_enemy_time(::google::protobuf::uint32 value) {
  set_has_last_refresh_enemy_time();
  last_refresh_enemy_time_ = value;
}

// -------------------------------------------------------------------

// TowerFBData

// repeated uint32 map_star_list = 1;
inline int TowerFBData::map_star_list_size() const {
  return map_star_list_.size();
}
inline void TowerFBData::clear_map_star_list() {
  map_star_list_.Clear();
}
inline ::google::protobuf::uint32 TowerFBData::map_star_list(int index) const {
  return map_star_list_.Get(index);
}
inline void TowerFBData::set_map_star_list(int index, ::google::protobuf::uint32 value) {
  map_star_list_.Set(index, value);
}
inline void TowerFBData::add_map_star_list(::google::protobuf::uint32 value) {
  map_star_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TowerFBData::map_star_list() const {
  return map_star_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TowerFBData::mutable_map_star_list() {
  return &map_star_list_;
}

// required uint32 map_level_record = 2;
inline bool TowerFBData::has_map_level_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TowerFBData::set_has_map_level_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TowerFBData::clear_has_map_level_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TowerFBData::clear_map_level_record() {
  map_level_record_ = 0u;
  clear_has_map_level_record();
}
inline ::google::protobuf::uint32 TowerFBData::map_level_record() const {
  return map_level_record_;
}
inline void TowerFBData::set_map_level_record(::google::protobuf::uint32 value) {
  set_has_map_level_record();
  map_level_record_ = value;
}

// required uint32 keep_best_star_passed_record = 3;
inline bool TowerFBData::has_keep_best_star_passed_record() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TowerFBData::set_has_keep_best_star_passed_record() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TowerFBData::clear_has_keep_best_star_passed_record() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TowerFBData::clear_keep_best_star_passed_record() {
  keep_best_star_passed_record_ = 0u;
  clear_has_keep_best_star_passed_record();
}
inline ::google::protobuf::uint32 TowerFBData::keep_best_star_passed_record() const {
  return keep_best_star_passed_record_;
}
inline void TowerFBData::set_keep_best_star_passed_record(::google::protobuf::uint32 value) {
  set_has_keep_best_star_passed_record();
  keep_best_star_passed_record_ = value;
}

// repeated .PB.Property select_pro_list = 4;
inline int TowerFBData::select_pro_list_size() const {
  return select_pro_list_.size();
}
inline void TowerFBData::clear_select_pro_list() {
  select_pro_list_.Clear();
}
inline const ::PB::Property& TowerFBData::select_pro_list(int index) const {
  return select_pro_list_.Get(index);
}
inline ::PB::Property* TowerFBData::mutable_select_pro_list(int index) {
  return select_pro_list_.Mutable(index);
}
inline ::PB::Property* TowerFBData::add_select_pro_list() {
  return select_pro_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Property >&
TowerFBData::select_pro_list() const {
  return select_pro_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Property >*
TowerFBData::mutable_select_pro_list() {
  return &select_pro_list_;
}

// required uint32 is_buy_star_goods = 5;
inline bool TowerFBData::has_is_buy_star_goods() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TowerFBData::set_has_is_buy_star_goods() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TowerFBData::clear_has_is_buy_star_goods() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TowerFBData::clear_is_buy_star_goods() {
  is_buy_star_goods_ = 0u;
  clear_has_is_buy_star_goods();
}
inline ::google::protobuf::uint32 TowerFBData::is_buy_star_goods() const {
  return is_buy_star_goods_;
}
inline void TowerFBData::set_is_buy_star_goods(::google::protobuf::uint32 value) {
  set_has_is_buy_star_goods();
  is_buy_star_goods_ = value;
}

// required uint32 star_goods_idx = 6;
inline bool TowerFBData::has_star_goods_idx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TowerFBData::set_has_star_goods_idx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TowerFBData::clear_has_star_goods_idx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TowerFBData::clear_star_goods_idx() {
  star_goods_idx_ = 0u;
  clear_has_star_goods_idx();
}
inline ::google::protobuf::uint32 TowerFBData::star_goods_idx() const {
  return star_goods_idx_;
}
inline void TowerFBData::set_star_goods_idx(::google::protobuf::uint32 value) {
  set_has_star_goods_idx();
  star_goods_idx_ = value;
}

// required uint32 is_need_reset = 7;
inline bool TowerFBData::has_is_need_reset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TowerFBData::set_has_is_need_reset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TowerFBData::clear_has_is_need_reset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TowerFBData::clear_is_need_reset() {
  is_need_reset_ = 0u;
  clear_has_is_need_reset();
}
inline ::google::protobuf::uint32 TowerFBData::is_need_reset() const {
  return is_need_reset_;
}
inline void TowerFBData::set_is_need_reset(::google::protobuf::uint32 value) {
  set_has_is_need_reset();
  is_need_reset_ = value;
}

// required uint32 today_reset_times = 8;
inline bool TowerFBData::has_today_reset_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TowerFBData::set_has_today_reset_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TowerFBData::clear_has_today_reset_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TowerFBData::clear_today_reset_times() {
  today_reset_times_ = 0u;
  clear_has_today_reset_times();
}
inline ::google::protobuf::uint32 TowerFBData::today_reset_times() const {
  return today_reset_times_;
}
inline void TowerFBData::set_today_reset_times(::google::protobuf::uint32 value) {
  set_has_today_reset_times();
  today_reset_times_ = value;
}

// required uint32 cur_star = 9;
inline bool TowerFBData::has_cur_star() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TowerFBData::set_has_cur_star() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TowerFBData::clear_has_cur_star() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TowerFBData::clear_cur_star() {
  cur_star_ = 0u;
  clear_has_cur_star();
}
inline ::google::protobuf::uint32 TowerFBData::cur_star() const {
  return cur_star_;
}
inline void TowerFBData::set_cur_star(::google::protobuf::uint32 value) {
  set_has_cur_star();
  cur_star_ = value;
}

// required uint32 star_max_record = 10;
inline bool TowerFBData::has_star_max_record() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TowerFBData::set_has_star_max_record() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TowerFBData::clear_has_star_max_record() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TowerFBData::clear_star_max_record() {
  star_max_record_ = 0u;
  clear_has_star_max_record();
}
inline ::google::protobuf::uint32 TowerFBData::star_max_record() const {
  return star_max_record_;
}
inline void TowerFBData::set_star_max_record(::google::protobuf::uint32 value) {
  set_has_star_max_record();
  star_max_record_ = value;
}

// required uint32 elite_map_level = 11;
inline bool TowerFBData::has_elite_map_level() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TowerFBData::set_has_elite_map_level() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TowerFBData::clear_has_elite_map_level() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TowerFBData::clear_elite_map_level() {
  elite_map_level_ = 0u;
  clear_has_elite_map_level();
}
inline ::google::protobuf::uint32 TowerFBData::elite_map_level() const {
  return elite_map_level_;
}
inline void TowerFBData::set_elite_map_level(::google::protobuf::uint32 value) {
  set_has_elite_map_level();
  elite_map_level_ = value;
}

// required uint32 elite_map_battle_times = 12;
inline bool TowerFBData::has_elite_map_battle_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TowerFBData::set_has_elite_map_battle_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TowerFBData::clear_has_elite_map_battle_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TowerFBData::clear_elite_map_battle_times() {
  elite_map_battle_times_ = 0u;
  clear_has_elite_map_battle_times();
}
inline ::google::protobuf::uint32 TowerFBData::elite_map_battle_times() const {
  return elite_map_battle_times_;
}
inline void TowerFBData::set_elite_map_battle_times(::google::protobuf::uint32 value) {
  set_has_elite_map_battle_times();
  elite_map_battle_times_ = value;
}

// required uint32 buy_elite_map_battle_times = 13;
inline bool TowerFBData::has_buy_elite_map_battle_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TowerFBData::set_has_buy_elite_map_battle_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TowerFBData::clear_has_buy_elite_map_battle_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TowerFBData::clear_buy_elite_map_battle_times() {
  buy_elite_map_battle_times_ = 0u;
  clear_has_buy_elite_map_battle_times();
}
inline ::google::protobuf::uint32 TowerFBData::buy_elite_map_battle_times() const {
  return buy_elite_map_battle_times_;
}
inline void TowerFBData::set_buy_elite_map_battle_times(::google::protobuf::uint32 value) {
  set_has_buy_elite_map_battle_times();
  buy_elite_map_battle_times_ = value;
}

// repeated uint32 rand_pro_idx_list = 14;
inline int TowerFBData::rand_pro_idx_list_size() const {
  return rand_pro_idx_list_.size();
}
inline void TowerFBData::clear_rand_pro_idx_list() {
  rand_pro_idx_list_.Clear();
}
inline ::google::protobuf::uint32 TowerFBData::rand_pro_idx_list(int index) const {
  return rand_pro_idx_list_.Get(index);
}
inline void TowerFBData::set_rand_pro_idx_list(int index, ::google::protobuf::uint32 value) {
  rand_pro_idx_list_.Set(index, value);
}
inline void TowerFBData::add_rand_pro_idx_list(::google::protobuf::uint32 value) {
  rand_pro_idx_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TowerFBData::rand_pro_idx_list() const {
  return rand_pro_idx_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TowerFBData::mutable_rand_pro_idx_list() {
  return &rand_pro_idx_list_;
}

// -------------------------------------------------------------------

// RoleFBInfo

// required .PB.MainFBData main_fb_data = 1;
inline bool RoleFBInfo::has_main_fb_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleFBInfo::set_has_main_fb_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleFBInfo::clear_has_main_fb_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleFBInfo::clear_main_fb_data() {
  if (main_fb_data_ != NULL) main_fb_data_->::PB::MainFBData::Clear();
  clear_has_main_fb_data();
}
inline const ::PB::MainFBData& RoleFBInfo::main_fb_data() const {
  return main_fb_data_ != NULL ? *main_fb_data_ : *default_instance_->main_fb_data_;
}
inline ::PB::MainFBData* RoleFBInfo::mutable_main_fb_data() {
  set_has_main_fb_data();
  if (main_fb_data_ == NULL) main_fb_data_ = new ::PB::MainFBData;
  return main_fb_data_;
}
inline ::PB::MainFBData* RoleFBInfo::release_main_fb_data() {
  clear_has_main_fb_data();
  ::PB::MainFBData* temp = main_fb_data_;
  main_fb_data_ = NULL;
  return temp;
}
inline void RoleFBInfo::set_allocated_main_fb_data(::PB::MainFBData* main_fb_data) {
  delete main_fb_data_;
  main_fb_data_ = main_fb_data;
  if (main_fb_data) {
    set_has_main_fb_data();
  } else {
    clear_has_main_fb_data();
  }
}

// required .PB.HeroFBData hero_fb_data = 2;
inline bool RoleFBInfo::has_hero_fb_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleFBInfo::set_has_hero_fb_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleFBInfo::clear_has_hero_fb_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleFBInfo::clear_hero_fb_data() {
  if (hero_fb_data_ != NULL) hero_fb_data_->::PB::HeroFBData::Clear();
  clear_has_hero_fb_data();
}
inline const ::PB::HeroFBData& RoleFBInfo::hero_fb_data() const {
  return hero_fb_data_ != NULL ? *hero_fb_data_ : *default_instance_->hero_fb_data_;
}
inline ::PB::HeroFBData* RoleFBInfo::mutable_hero_fb_data() {
  set_has_hero_fb_data();
  if (hero_fb_data_ == NULL) hero_fb_data_ = new ::PB::HeroFBData;
  return hero_fb_data_;
}
inline ::PB::HeroFBData* RoleFBInfo::release_hero_fb_data() {
  clear_has_hero_fb_data();
  ::PB::HeroFBData* temp = hero_fb_data_;
  hero_fb_data_ = NULL;
  return temp;
}
inline void RoleFBInfo::set_allocated_hero_fb_data(::PB::HeroFBData* hero_fb_data) {
  delete hero_fb_data_;
  hero_fb_data_ = hero_fb_data;
  if (hero_fb_data) {
    set_has_hero_fb_data();
  } else {
    clear_has_hero_fb_data();
  }
}

// required .PB.DailyFBData daily_fb_data = 3;
inline bool RoleFBInfo::has_daily_fb_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleFBInfo::set_has_daily_fb_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleFBInfo::clear_has_daily_fb_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleFBInfo::clear_daily_fb_data() {
  if (daily_fb_data_ != NULL) daily_fb_data_->::PB::DailyFBData::Clear();
  clear_has_daily_fb_data();
}
inline const ::PB::DailyFBData& RoleFBInfo::daily_fb_data() const {
  return daily_fb_data_ != NULL ? *daily_fb_data_ : *default_instance_->daily_fb_data_;
}
inline ::PB::DailyFBData* RoleFBInfo::mutable_daily_fb_data() {
  set_has_daily_fb_data();
  if (daily_fb_data_ == NULL) daily_fb_data_ = new ::PB::DailyFBData;
  return daily_fb_data_;
}
inline ::PB::DailyFBData* RoleFBInfo::release_daily_fb_data() {
  clear_has_daily_fb_data();
  ::PB::DailyFBData* temp = daily_fb_data_;
  daily_fb_data_ = NULL;
  return temp;
}
inline void RoleFBInfo::set_allocated_daily_fb_data(::PB::DailyFBData* daily_fb_data) {
  delete daily_fb_data_;
  daily_fb_data_ = daily_fb_data;
  if (daily_fb_data) {
    set_has_daily_fb_data();
  } else {
    clear_has_daily_fb_data();
  }
}

// required .PB.TowerFBData tower_fb_data = 4;
inline bool RoleFBInfo::has_tower_fb_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleFBInfo::set_has_tower_fb_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleFBInfo::clear_has_tower_fb_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleFBInfo::clear_tower_fb_data() {
  if (tower_fb_data_ != NULL) tower_fb_data_->::PB::TowerFBData::Clear();
  clear_has_tower_fb_data();
}
inline const ::PB::TowerFBData& RoleFBInfo::tower_fb_data() const {
  return tower_fb_data_ != NULL ? *tower_fb_data_ : *default_instance_->tower_fb_data_;
}
inline ::PB::TowerFBData* RoleFBInfo::mutable_tower_fb_data() {
  set_has_tower_fb_data();
  if (tower_fb_data_ == NULL) tower_fb_data_ = new ::PB::TowerFBData;
  return tower_fb_data_;
}
inline ::PB::TowerFBData* RoleFBInfo::release_tower_fb_data() {
  clear_has_tower_fb_data();
  ::PB::TowerFBData* temp = tower_fb_data_;
  tower_fb_data_ = NULL;
  return temp;
}
inline void RoleFBInfo::set_allocated_tower_fb_data(::PB::TowerFBData* tower_fb_data) {
  delete tower_fb_data_;
  tower_fb_data_ = tower_fb_data;
  if (tower_fb_data) {
    set_has_tower_fb_data();
  } else {
    clear_has_tower_fb_data();
  }
}

// required .PB.EliteFBData elite_fb_data = 5;
inline bool RoleFBInfo::has_elite_fb_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleFBInfo::set_has_elite_fb_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleFBInfo::clear_has_elite_fb_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleFBInfo::clear_elite_fb_data() {
  if (elite_fb_data_ != NULL) elite_fb_data_->::PB::EliteFBData::Clear();
  clear_has_elite_fb_data();
}
inline const ::PB::EliteFBData& RoleFBInfo::elite_fb_data() const {
  return elite_fb_data_ != NULL ? *elite_fb_data_ : *default_instance_->elite_fb_data_;
}
inline ::PB::EliteFBData* RoleFBInfo::mutable_elite_fb_data() {
  set_has_elite_fb_data();
  if (elite_fb_data_ == NULL) elite_fb_data_ = new ::PB::EliteFBData;
  return elite_fb_data_;
}
inline ::PB::EliteFBData* RoleFBInfo::release_elite_fb_data() {
  clear_has_elite_fb_data();
  ::PB::EliteFBData* temp = elite_fb_data_;
  elite_fb_data_ = NULL;
  return temp;
}
inline void RoleFBInfo::set_allocated_elite_fb_data(::PB::EliteFBData* elite_fb_data) {
  delete elite_fb_data_;
  elite_fb_data_ = elite_fb_data;
  if (elite_fb_data) {
    set_has_elite_fb_data();
  } else {
    clear_has_elite_fb_data();
  }
}

// -------------------------------------------------------------------

// ShopGoods

// required uint32 goods_id = 1;
inline bool ShopGoods::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShopGoods::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShopGoods::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShopGoods::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 ShopGoods::goods_id() const {
  return goods_id_;
}
inline void ShopGoods::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// required uint32 goods_num = 2;
inline bool ShopGoods::has_goods_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShopGoods::set_has_goods_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShopGoods::clear_has_goods_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShopGoods::clear_goods_num() {
  goods_num_ = 0u;
  clear_has_goods_num();
}
inline ::google::protobuf::uint32 ShopGoods::goods_num() const {
  return goods_num_;
}
inline void ShopGoods::set_goods_num(::google::protobuf::uint32 value) {
  set_has_goods_num();
  goods_num_ = value;
}

// -------------------------------------------------------------------

// HeroShopData

// repeated .PB.ShopGoods goods_list = 1;
inline int HeroShopData::goods_list_size() const {
  return goods_list_.size();
}
inline void HeroShopData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::ShopGoods& HeroShopData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::ShopGoods* HeroShopData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::ShopGoods* HeroShopData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
HeroShopData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
HeroShopData::mutable_goods_list() {
  return &goods_list_;
}

// required uint32 last_recover_time = 2;
inline bool HeroShopData::has_last_recover_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroShopData::set_has_last_recover_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroShopData::clear_has_last_recover_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroShopData::clear_last_recover_time() {
  last_recover_time_ = 0u;
  clear_has_last_recover_time();
}
inline ::google::protobuf::uint32 HeroShopData::last_recover_time() const {
  return last_recover_time_;
}
inline void HeroShopData::set_last_recover_time(::google::protobuf::uint32 value) {
  set_has_last_recover_time();
  last_recover_time_ = value;
}

// required uint32 free_refresh_times = 3;
inline bool HeroShopData::has_free_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroShopData::set_has_free_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroShopData::clear_has_free_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroShopData::clear_free_refresh_times() {
  free_refresh_times_ = 0u;
  clear_has_free_refresh_times();
}
inline ::google::protobuf::uint32 HeroShopData::free_refresh_times() const {
  return free_refresh_times_;
}
inline void HeroShopData::set_free_refresh_times(::google::protobuf::uint32 value) {
  set_has_free_refresh_times();
  free_refresh_times_ = value;
}

// required uint32 cost_refresh_times = 4;
inline bool HeroShopData::has_cost_refresh_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HeroShopData::set_has_cost_refresh_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HeroShopData::clear_has_cost_refresh_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HeroShopData::clear_cost_refresh_times() {
  cost_refresh_times_ = 0u;
  clear_has_cost_refresh_times();
}
inline ::google::protobuf::uint32 HeroShopData::cost_refresh_times() const {
  return cost_refresh_times_;
}
inline void HeroShopData::set_cost_refresh_times(::google::protobuf::uint32 value) {
  set_has_cost_refresh_times();
  cost_refresh_times_ = value;
}

// -------------------------------------------------------------------

// GuildShopData

// repeated .PB.ShopGoods reward_goods_buy_record = 1;
inline int GuildShopData::reward_goods_buy_record_size() const {
  return reward_goods_buy_record_.size();
}
inline void GuildShopData::clear_reward_goods_buy_record() {
  reward_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& GuildShopData::reward_goods_buy_record(int index) const {
  return reward_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* GuildShopData::mutable_reward_goods_buy_record(int index) {
  return reward_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* GuildShopData::add_reward_goods_buy_record() {
  return reward_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
GuildShopData::reward_goods_buy_record() const {
  return reward_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
GuildShopData::mutable_reward_goods_buy_record() {
  return &reward_goods_buy_record_;
}

// repeated .PB.ShopGoods item_goods_buy_record = 2;
inline int GuildShopData::item_goods_buy_record_size() const {
  return item_goods_buy_record_.size();
}
inline void GuildShopData::clear_item_goods_buy_record() {
  item_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& GuildShopData::item_goods_buy_record(int index) const {
  return item_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* GuildShopData::mutable_item_goods_buy_record(int index) {
  return item_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* GuildShopData::add_item_goods_buy_record() {
  return item_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
GuildShopData::item_goods_buy_record() const {
  return item_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
GuildShopData::mutable_item_goods_buy_record() {
  return &item_goods_buy_record_;
}

// repeated .PB.ShopGoods limit_goods_buy_record = 3;
inline int GuildShopData::limit_goods_buy_record_size() const {
  return limit_goods_buy_record_.size();
}
inline void GuildShopData::clear_limit_goods_buy_record() {
  limit_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& GuildShopData::limit_goods_buy_record(int index) const {
  return limit_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* GuildShopData::mutable_limit_goods_buy_record(int index) {
  return limit_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* GuildShopData::add_limit_goods_buy_record() {
  return limit_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
GuildShopData::limit_goods_buy_record() const {
  return limit_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
GuildShopData::mutable_limit_goods_buy_record() {
  return &limit_goods_buy_record_;
}

// -------------------------------------------------------------------

// MallShopData

// repeated .PB.ShopGoods item_buy_record = 1;
inline int MallShopData::item_buy_record_size() const {
  return item_buy_record_.size();
}
inline void MallShopData::clear_item_buy_record() {
  item_buy_record_.Clear();
}
inline const ::PB::ShopGoods& MallShopData::item_buy_record(int index) const {
  return item_buy_record_.Get(index);
}
inline ::PB::ShopGoods* MallShopData::mutable_item_buy_record(int index) {
  return item_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* MallShopData::add_item_buy_record() {
  return item_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
MallShopData::item_buy_record() const {
  return item_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
MallShopData::mutable_item_buy_record() {
  return &item_buy_record_;
}

// repeated .PB.ShopGoods gift_buy_record = 2;
inline int MallShopData::gift_buy_record_size() const {
  return gift_buy_record_.size();
}
inline void MallShopData::clear_gift_buy_record() {
  gift_buy_record_.Clear();
}
inline const ::PB::ShopGoods& MallShopData::gift_buy_record(int index) const {
  return gift_buy_record_.Get(index);
}
inline ::PB::ShopGoods* MallShopData::mutable_gift_buy_record(int index) {
  return gift_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* MallShopData::add_gift_buy_record() {
  return gift_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
MallShopData::gift_buy_record() const {
  return gift_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
MallShopData::mutable_gift_buy_record() {
  return &gift_buy_record_;
}

// -------------------------------------------------------------------

// TowerShopData

// repeated .PB.ShopGoods buy_record = 1;
inline int TowerShopData::buy_record_size() const {
  return buy_record_.size();
}
inline void TowerShopData::clear_buy_record() {
  buy_record_.Clear();
}
inline const ::PB::ShopGoods& TowerShopData::buy_record(int index) const {
  return buy_record_.Get(index);
}
inline ::PB::ShopGoods* TowerShopData::mutable_buy_record(int index) {
  return buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* TowerShopData::add_buy_record() {
  return buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
TowerShopData::buy_record() const {
  return buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
TowerShopData::mutable_buy_record() {
  return &buy_record_;
}

// -------------------------------------------------------------------

// ArenaShopData

// repeated .PB.ShopGoods buy_record = 1;
inline int ArenaShopData::buy_record_size() const {
  return buy_record_.size();
}
inline void ArenaShopData::clear_buy_record() {
  buy_record_.Clear();
}
inline const ::PB::ShopGoods& ArenaShopData::buy_record(int index) const {
  return buy_record_.Get(index);
}
inline ::PB::ShopGoods* ArenaShopData::mutable_buy_record(int index) {
  return buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ArenaShopData::add_buy_record() {
  return buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ArenaShopData::buy_record() const {
  return buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ArenaShopData::mutable_buy_record() {
  return &buy_record_;
}

// -------------------------------------------------------------------

// AwakenShopData

// repeated .PB.ShopGoods goods_list = 1;
inline int AwakenShopData::goods_list_size() const {
  return goods_list_.size();
}
inline void AwakenShopData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::ShopGoods& AwakenShopData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::ShopGoods* AwakenShopData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::ShopGoods* AwakenShopData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
AwakenShopData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
AwakenShopData::mutable_goods_list() {
  return &goods_list_;
}

// required uint32 last_recover_time = 2;
inline bool AwakenShopData::has_last_recover_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AwakenShopData::set_has_last_recover_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AwakenShopData::clear_has_last_recover_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AwakenShopData::clear_last_recover_time() {
  last_recover_time_ = 0u;
  clear_has_last_recover_time();
}
inline ::google::protobuf::uint32 AwakenShopData::last_recover_time() const {
  return last_recover_time_;
}
inline void AwakenShopData::set_last_recover_time(::google::protobuf::uint32 value) {
  set_has_last_recover_time();
  last_recover_time_ = value;
}

// required uint32 free_refresh_times = 3;
inline bool AwakenShopData::has_free_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AwakenShopData::set_has_free_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AwakenShopData::clear_has_free_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AwakenShopData::clear_free_refresh_times() {
  free_refresh_times_ = 0u;
  clear_has_free_refresh_times();
}
inline ::google::protobuf::uint32 AwakenShopData::free_refresh_times() const {
  return free_refresh_times_;
}
inline void AwakenShopData::set_free_refresh_times(::google::protobuf::uint32 value) {
  set_has_free_refresh_times();
  free_refresh_times_ = value;
}

// required uint32 cost_refresh_times = 4;
inline bool AwakenShopData::has_cost_refresh_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AwakenShopData::set_has_cost_refresh_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AwakenShopData::clear_has_cost_refresh_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AwakenShopData::clear_cost_refresh_times() {
  cost_refresh_times_ = 0u;
  clear_has_cost_refresh_times();
}
inline ::google::protobuf::uint32 AwakenShopData::cost_refresh_times() const {
  return cost_refresh_times_;
}
inline void AwakenShopData::set_cost_refresh_times(::google::protobuf::uint32 value) {
  set_has_cost_refresh_times();
  cost_refresh_times_ = value;
}

// -------------------------------------------------------------------

// FairyShopData

// repeated .PB.ShopGoods goods_list = 1;
inline int FairyShopData::goods_list_size() const {
  return goods_list_.size();
}
inline void FairyShopData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::ShopGoods& FairyShopData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::ShopGoods* FairyShopData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::ShopGoods* FairyShopData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
FairyShopData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
FairyShopData::mutable_goods_list() {
  return &goods_list_;
}

// required uint32 used_refresh_times = 2;
inline bool FairyShopData::has_used_refresh_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FairyShopData::set_has_used_refresh_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FairyShopData::clear_has_used_refresh_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FairyShopData::clear_used_refresh_times() {
  used_refresh_times_ = 0u;
  clear_has_used_refresh_times();
}
inline ::google::protobuf::uint32 FairyShopData::used_refresh_times() const {
  return used_refresh_times_;
}
inline void FairyShopData::set_used_refresh_times(::google::protobuf::uint32 value) {
  set_has_used_refresh_times();
  used_refresh_times_ = value;
}

// required uint32 last_auto_refresh_time = 3;
inline bool FairyShopData::has_last_auto_refresh_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FairyShopData::set_has_last_auto_refresh_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FairyShopData::clear_has_last_auto_refresh_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FairyShopData::clear_last_auto_refresh_time() {
  last_auto_refresh_time_ = 0u;
  clear_has_last_auto_refresh_time();
}
inline ::google::protobuf::uint32 FairyShopData::last_auto_refresh_time() const {
  return last_auto_refresh_time_;
}
inline void FairyShopData::set_last_auto_refresh_time(::google::protobuf::uint32 value) {
  set_has_last_auto_refresh_time();
  last_auto_refresh_time_ = value;
}

// -------------------------------------------------------------------

// ScoreMatchShopData

// repeated .PB.ShopGoods buy_record = 1;
inline int ScoreMatchShopData::buy_record_size() const {
  return buy_record_.size();
}
inline void ScoreMatchShopData::clear_buy_record() {
  buy_record_.Clear();
}
inline const ::PB::ShopGoods& ScoreMatchShopData::buy_record(int index) const {
  return buy_record_.Get(index);
}
inline ::PB::ShopGoods* ScoreMatchShopData::mutable_buy_record(int index) {
  return buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ScoreMatchShopData::add_buy_record() {
  return buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ScoreMatchShopData::buy_record() const {
  return buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ScoreMatchShopData::mutable_buy_record() {
  return &buy_record_;
}

// -------------------------------------------------------------------

// SevenDayShopData

// repeated .PB.ShopGoods buy_record = 1;
inline int SevenDayShopData::buy_record_size() const {
  return buy_record_.size();
}
inline void SevenDayShopData::clear_buy_record() {
  buy_record_.Clear();
}
inline const ::PB::ShopGoods& SevenDayShopData::buy_record(int index) const {
  return buy_record_.Get(index);
}
inline ::PB::ShopGoods* SevenDayShopData::mutable_buy_record(int index) {
  return buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* SevenDayShopData::add_buy_record() {
  return buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
SevenDayShopData::buy_record() const {
  return buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
SevenDayShopData::mutable_buy_record() {
  return &buy_record_;
}

// -------------------------------------------------------------------

// LevelGiftShopData

// repeated .PB.ShopGoods buy_record = 1;
inline int LevelGiftShopData::buy_record_size() const {
  return buy_record_.size();
}
inline void LevelGiftShopData::clear_buy_record() {
  buy_record_.Clear();
}
inline const ::PB::ShopGoods& LevelGiftShopData::buy_record(int index) const {
  return buy_record_.Get(index);
}
inline ::PB::ShopGoods* LevelGiftShopData::mutable_buy_record(int index) {
  return buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* LevelGiftShopData::add_buy_record() {
  return buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
LevelGiftShopData::buy_record() const {
  return buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
LevelGiftShopData::mutable_buy_record() {
  return &buy_record_;
}

// -------------------------------------------------------------------

// EndlessLandShopData

// repeated .PB.ShopGoods item_goods_buy_record = 1;
inline int EndlessLandShopData::item_goods_buy_record_size() const {
  return item_goods_buy_record_.size();
}
inline void EndlessLandShopData::clear_item_goods_buy_record() {
  item_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& EndlessLandShopData::item_goods_buy_record(int index) const {
  return item_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* EndlessLandShopData::mutable_item_goods_buy_record(int index) {
  return item_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* EndlessLandShopData::add_item_goods_buy_record() {
  return item_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
EndlessLandShopData::item_goods_buy_record() const {
  return item_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
EndlessLandShopData::mutable_item_goods_buy_record() {
  return &item_goods_buy_record_;
}

// repeated .PB.ShopGoods reward_goods_buy_record = 2;
inline int EndlessLandShopData::reward_goods_buy_record_size() const {
  return reward_goods_buy_record_.size();
}
inline void EndlessLandShopData::clear_reward_goods_buy_record() {
  reward_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& EndlessLandShopData::reward_goods_buy_record(int index) const {
  return reward_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* EndlessLandShopData::mutable_reward_goods_buy_record(int index) {
  return reward_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* EndlessLandShopData::add_reward_goods_buy_record() {
  return reward_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
EndlessLandShopData::reward_goods_buy_record() const {
  return reward_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
EndlessLandShopData::mutable_reward_goods_buy_record() {
  return &reward_goods_buy_record_;
}

// -------------------------------------------------------------------

// DirectBuyShopData

// repeated .PB.ShopGoods goods_list = 1;
inline int DirectBuyShopData::goods_list_size() const {
  return goods_list_.size();
}
inline void DirectBuyShopData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::ShopGoods& DirectBuyShopData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::ShopGoods* DirectBuyShopData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::ShopGoods* DirectBuyShopData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
DirectBuyShopData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
DirectBuyShopData::mutable_goods_list() {
  return &goods_list_;
}

// optional uint32 last_refresh_time = 2;
inline bool DirectBuyShopData::has_last_refresh_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DirectBuyShopData::set_has_last_refresh_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DirectBuyShopData::clear_has_last_refresh_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DirectBuyShopData::clear_last_refresh_time() {
  last_refresh_time_ = 0u;
  clear_has_last_refresh_time();
}
inline ::google::protobuf::uint32 DirectBuyShopData::last_refresh_time() const {
  return last_refresh_time_;
}
inline void DirectBuyShopData::set_last_refresh_time(::google::protobuf::uint32 value) {
  set_has_last_refresh_time();
  last_refresh_time_ = value;
}

// repeated uint32 can_take_goods_list = 3;
inline int DirectBuyShopData::can_take_goods_list_size() const {
  return can_take_goods_list_.size();
}
inline void DirectBuyShopData::clear_can_take_goods_list() {
  can_take_goods_list_.Clear();
}
inline ::google::protobuf::uint32 DirectBuyShopData::can_take_goods_list(int index) const {
  return can_take_goods_list_.Get(index);
}
inline void DirectBuyShopData::set_can_take_goods_list(int index, ::google::protobuf::uint32 value) {
  can_take_goods_list_.Set(index, value);
}
inline void DirectBuyShopData::add_can_take_goods_list(::google::protobuf::uint32 value) {
  can_take_goods_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DirectBuyShopData::can_take_goods_list() const {
  return can_take_goods_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DirectBuyShopData::mutable_can_take_goods_list() {
  return &can_take_goods_list_;
}

// optional uint32 last_refresh_year_day = 4;
inline bool DirectBuyShopData::has_last_refresh_year_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DirectBuyShopData::set_has_last_refresh_year_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DirectBuyShopData::clear_has_last_refresh_year_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DirectBuyShopData::clear_last_refresh_year_day() {
  last_refresh_year_day_ = 0u;
  clear_has_last_refresh_year_day();
}
inline ::google::protobuf::uint32 DirectBuyShopData::last_refresh_year_day() const {
  return last_refresh_year_day_;
}
inline void DirectBuyShopData::set_last_refresh_year_day(::google::protobuf::uint32 value) {
  set_has_last_refresh_year_day();
  last_refresh_year_day_ = value;
}

// -------------------------------------------------------------------

// ExchangeShopData

// repeated .PB.ShopGoods goods_buy_record = 1;
inline int ExchangeShopData::goods_buy_record_size() const {
  return goods_buy_record_.size();
}
inline void ExchangeShopData::clear_goods_buy_record() {
  goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& ExchangeShopData::goods_buy_record(int index) const {
  return goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* ExchangeShopData::mutable_goods_buy_record(int index) {
  return goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ExchangeShopData::add_goods_buy_record() {
  return goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ExchangeShopData::goods_buy_record() const {
  return goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ExchangeShopData::mutable_goods_buy_record() {
  return &goods_buy_record_;
}

// -------------------------------------------------------------------

// RecommendShopData

// repeated .PB.ShopGoods goods_buy_record = 1;
inline int RecommendShopData::goods_buy_record_size() const {
  return goods_buy_record_.size();
}
inline void RecommendShopData::clear_goods_buy_record() {
  goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& RecommendShopData::goods_buy_record(int index) const {
  return goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* RecommendShopData::mutable_goods_buy_record(int index) {
  return goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* RecommendShopData::add_goods_buy_record() {
  return goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
RecommendShopData::goods_buy_record() const {
  return goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
RecommendShopData::mutable_goods_buy_record() {
  return &goods_buy_record_;
}

// -------------------------------------------------------------------

// TeamDungeonShop

// repeated .PB.ShopGoods normal_goods_buy_record = 1;
inline int TeamDungeonShop::normal_goods_buy_record_size() const {
  return normal_goods_buy_record_.size();
}
inline void TeamDungeonShop::clear_normal_goods_buy_record() {
  normal_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& TeamDungeonShop::normal_goods_buy_record(int index) const {
  return normal_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* TeamDungeonShop::mutable_normal_goods_buy_record(int index) {
  return normal_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* TeamDungeonShop::add_normal_goods_buy_record() {
  return normal_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
TeamDungeonShop::normal_goods_buy_record() const {
  return normal_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
TeamDungeonShop::mutable_normal_goods_buy_record() {
  return &normal_goods_buy_record_;
}

// repeated .PB.ShopGoods reward_goods_buy_record = 2;
inline int TeamDungeonShop::reward_goods_buy_record_size() const {
  return reward_goods_buy_record_.size();
}
inline void TeamDungeonShop::clear_reward_goods_buy_record() {
  reward_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& TeamDungeonShop::reward_goods_buy_record(int index) const {
  return reward_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* TeamDungeonShop::mutable_reward_goods_buy_record(int index) {
  return reward_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* TeamDungeonShop::add_reward_goods_buy_record() {
  return reward_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
TeamDungeonShop::reward_goods_buy_record() const {
  return reward_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
TeamDungeonShop::mutable_reward_goods_buy_record() {
  return &reward_goods_buy_record_;
}

// -------------------------------------------------------------------

// ChristmasShop

// repeated .PB.ShopGoods score_exchange_goods_buy_record = 1;
inline int ChristmasShop::score_exchange_goods_buy_record_size() const {
  return score_exchange_goods_buy_record_.size();
}
inline void ChristmasShop::clear_score_exchange_goods_buy_record() {
  score_exchange_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& ChristmasShop::score_exchange_goods_buy_record(int index) const {
  return score_exchange_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* ChristmasShop::mutable_score_exchange_goods_buy_record(int index) {
  return score_exchange_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ChristmasShop::add_score_exchange_goods_buy_record() {
  return score_exchange_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ChristmasShop::score_exchange_goods_buy_record() const {
  return score_exchange_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ChristmasShop::mutable_score_exchange_goods_buy_record() {
  return &score_exchange_goods_buy_record_;
}

// repeated .PB.ShopGoods item_exchange_goods_buy_record = 2;
inline int ChristmasShop::item_exchange_goods_buy_record_size() const {
  return item_exchange_goods_buy_record_.size();
}
inline void ChristmasShop::clear_item_exchange_goods_buy_record() {
  item_exchange_goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& ChristmasShop::item_exchange_goods_buy_record(int index) const {
  return item_exchange_goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* ChristmasShop::mutable_item_exchange_goods_buy_record(int index) {
  return item_exchange_goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ChristmasShop::add_item_exchange_goods_buy_record() {
  return item_exchange_goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ChristmasShop::item_exchange_goods_buy_record() const {
  return item_exchange_goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ChristmasShop::mutable_item_exchange_goods_buy_record() {
  return &item_exchange_goods_buy_record_;
}

// -------------------------------------------------------------------

// CrystalShop

// optional uint32 today_refresh_times = 1;
inline bool CrystalShop::has_today_refresh_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CrystalShop::set_has_today_refresh_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CrystalShop::clear_has_today_refresh_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CrystalShop::clear_today_refresh_times() {
  today_refresh_times_ = 0u;
  clear_has_today_refresh_times();
}
inline ::google::protobuf::uint32 CrystalShop::today_refresh_times() const {
  return today_refresh_times_;
}
inline void CrystalShop::set_today_refresh_times(::google::protobuf::uint32 value) {
  set_has_today_refresh_times();
  today_refresh_times_ = value;
}

// repeated .PB.ShopGoods goods_buy_record = 2;
inline int CrystalShop::goods_buy_record_size() const {
  return goods_buy_record_.size();
}
inline void CrystalShop::clear_goods_buy_record() {
  goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& CrystalShop::goods_buy_record(int index) const {
  return goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* CrystalShop::mutable_goods_buy_record(int index) {
  return goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* CrystalShop::add_goods_buy_record() {
  return goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
CrystalShop::goods_buy_record() const {
  return goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
CrystalShop::mutable_goods_buy_record() {
  return &goods_buy_record_;
}

// -------------------------------------------------------------------

// ResourceWarShop

// repeated .PB.ShopGoods goods_buy_record = 1;
inline int ResourceWarShop::goods_buy_record_size() const {
  return goods_buy_record_.size();
}
inline void ResourceWarShop::clear_goods_buy_record() {
  goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& ResourceWarShop::goods_buy_record(int index) const {
  return goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* ResourceWarShop::mutable_goods_buy_record(int index) {
  return goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* ResourceWarShop::add_goods_buy_record() {
  return goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
ResourceWarShop::goods_buy_record() const {
  return goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
ResourceWarShop::mutable_goods_buy_record() {
  return &goods_buy_record_;
}

// -------------------------------------------------------------------

// GMShopData

// repeated .PB.ShopGoods goods_buy_record = 1;
inline int GMShopData::goods_buy_record_size() const {
  return goods_buy_record_.size();
}
inline void GMShopData::clear_goods_buy_record() {
  goods_buy_record_.Clear();
}
inline const ::PB::ShopGoods& GMShopData::goods_buy_record(int index) const {
  return goods_buy_record_.Get(index);
}
inline ::PB::ShopGoods* GMShopData::mutable_goods_buy_record(int index) {
  return goods_buy_record_.Mutable(index);
}
inline ::PB::ShopGoods* GMShopData::add_goods_buy_record() {
  return goods_buy_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
GMShopData::goods_buy_record() const {
  return goods_buy_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
GMShopData::mutable_goods_buy_record() {
  return &goods_buy_record_;
}

// -------------------------------------------------------------------

// RoleShopInfo

// required .PB.HeroShopData hero_shop = 1;
inline bool RoleShopInfo::has_hero_shop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleShopInfo::set_has_hero_shop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleShopInfo::clear_has_hero_shop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleShopInfo::clear_hero_shop() {
  if (hero_shop_ != NULL) hero_shop_->::PB::HeroShopData::Clear();
  clear_has_hero_shop();
}
inline const ::PB::HeroShopData& RoleShopInfo::hero_shop() const {
  return hero_shop_ != NULL ? *hero_shop_ : *default_instance_->hero_shop_;
}
inline ::PB::HeroShopData* RoleShopInfo::mutable_hero_shop() {
  set_has_hero_shop();
  if (hero_shop_ == NULL) hero_shop_ = new ::PB::HeroShopData;
  return hero_shop_;
}
inline ::PB::HeroShopData* RoleShopInfo::release_hero_shop() {
  clear_has_hero_shop();
  ::PB::HeroShopData* temp = hero_shop_;
  hero_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_hero_shop(::PB::HeroShopData* hero_shop) {
  delete hero_shop_;
  hero_shop_ = hero_shop;
  if (hero_shop) {
    set_has_hero_shop();
  } else {
    clear_has_hero_shop();
  }
}

// required .PB.GuildShopData guild_shop = 2;
inline bool RoleShopInfo::has_guild_shop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleShopInfo::set_has_guild_shop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleShopInfo::clear_has_guild_shop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleShopInfo::clear_guild_shop() {
  if (guild_shop_ != NULL) guild_shop_->::PB::GuildShopData::Clear();
  clear_has_guild_shop();
}
inline const ::PB::GuildShopData& RoleShopInfo::guild_shop() const {
  return guild_shop_ != NULL ? *guild_shop_ : *default_instance_->guild_shop_;
}
inline ::PB::GuildShopData* RoleShopInfo::mutable_guild_shop() {
  set_has_guild_shop();
  if (guild_shop_ == NULL) guild_shop_ = new ::PB::GuildShopData;
  return guild_shop_;
}
inline ::PB::GuildShopData* RoleShopInfo::release_guild_shop() {
  clear_has_guild_shop();
  ::PB::GuildShopData* temp = guild_shop_;
  guild_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_guild_shop(::PB::GuildShopData* guild_shop) {
  delete guild_shop_;
  guild_shop_ = guild_shop;
  if (guild_shop) {
    set_has_guild_shop();
  } else {
    clear_has_guild_shop();
  }
}

// required .PB.MallShopData mall_shop = 3;
inline bool RoleShopInfo::has_mall_shop() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleShopInfo::set_has_mall_shop() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleShopInfo::clear_has_mall_shop() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleShopInfo::clear_mall_shop() {
  if (mall_shop_ != NULL) mall_shop_->::PB::MallShopData::Clear();
  clear_has_mall_shop();
}
inline const ::PB::MallShopData& RoleShopInfo::mall_shop() const {
  return mall_shop_ != NULL ? *mall_shop_ : *default_instance_->mall_shop_;
}
inline ::PB::MallShopData* RoleShopInfo::mutable_mall_shop() {
  set_has_mall_shop();
  if (mall_shop_ == NULL) mall_shop_ = new ::PB::MallShopData;
  return mall_shop_;
}
inline ::PB::MallShopData* RoleShopInfo::release_mall_shop() {
  clear_has_mall_shop();
  ::PB::MallShopData* temp = mall_shop_;
  mall_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_mall_shop(::PB::MallShopData* mall_shop) {
  delete mall_shop_;
  mall_shop_ = mall_shop;
  if (mall_shop) {
    set_has_mall_shop();
  } else {
    clear_has_mall_shop();
  }
}

// required .PB.TowerShopData tower_shop = 4;
inline bool RoleShopInfo::has_tower_shop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleShopInfo::set_has_tower_shop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleShopInfo::clear_has_tower_shop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleShopInfo::clear_tower_shop() {
  if (tower_shop_ != NULL) tower_shop_->::PB::TowerShopData::Clear();
  clear_has_tower_shop();
}
inline const ::PB::TowerShopData& RoleShopInfo::tower_shop() const {
  return tower_shop_ != NULL ? *tower_shop_ : *default_instance_->tower_shop_;
}
inline ::PB::TowerShopData* RoleShopInfo::mutable_tower_shop() {
  set_has_tower_shop();
  if (tower_shop_ == NULL) tower_shop_ = new ::PB::TowerShopData;
  return tower_shop_;
}
inline ::PB::TowerShopData* RoleShopInfo::release_tower_shop() {
  clear_has_tower_shop();
  ::PB::TowerShopData* temp = tower_shop_;
  tower_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_tower_shop(::PB::TowerShopData* tower_shop) {
  delete tower_shop_;
  tower_shop_ = tower_shop;
  if (tower_shop) {
    set_has_tower_shop();
  } else {
    clear_has_tower_shop();
  }
}

// required .PB.ArenaShopData arena_shop = 5;
inline bool RoleShopInfo::has_arena_shop() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleShopInfo::set_has_arena_shop() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleShopInfo::clear_has_arena_shop() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleShopInfo::clear_arena_shop() {
  if (arena_shop_ != NULL) arena_shop_->::PB::ArenaShopData::Clear();
  clear_has_arena_shop();
}
inline const ::PB::ArenaShopData& RoleShopInfo::arena_shop() const {
  return arena_shop_ != NULL ? *arena_shop_ : *default_instance_->arena_shop_;
}
inline ::PB::ArenaShopData* RoleShopInfo::mutable_arena_shop() {
  set_has_arena_shop();
  if (arena_shop_ == NULL) arena_shop_ = new ::PB::ArenaShopData;
  return arena_shop_;
}
inline ::PB::ArenaShopData* RoleShopInfo::release_arena_shop() {
  clear_has_arena_shop();
  ::PB::ArenaShopData* temp = arena_shop_;
  arena_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_arena_shop(::PB::ArenaShopData* arena_shop) {
  delete arena_shop_;
  arena_shop_ = arena_shop;
  if (arena_shop) {
    set_has_arena_shop();
  } else {
    clear_has_arena_shop();
  }
}

// required .PB.AwakenShopData awaken_shop = 6;
inline bool RoleShopInfo::has_awaken_shop() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleShopInfo::set_has_awaken_shop() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleShopInfo::clear_has_awaken_shop() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleShopInfo::clear_awaken_shop() {
  if (awaken_shop_ != NULL) awaken_shop_->::PB::AwakenShopData::Clear();
  clear_has_awaken_shop();
}
inline const ::PB::AwakenShopData& RoleShopInfo::awaken_shop() const {
  return awaken_shop_ != NULL ? *awaken_shop_ : *default_instance_->awaken_shop_;
}
inline ::PB::AwakenShopData* RoleShopInfo::mutable_awaken_shop() {
  set_has_awaken_shop();
  if (awaken_shop_ == NULL) awaken_shop_ = new ::PB::AwakenShopData;
  return awaken_shop_;
}
inline ::PB::AwakenShopData* RoleShopInfo::release_awaken_shop() {
  clear_has_awaken_shop();
  ::PB::AwakenShopData* temp = awaken_shop_;
  awaken_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_awaken_shop(::PB::AwakenShopData* awaken_shop) {
  delete awaken_shop_;
  awaken_shop_ = awaken_shop;
  if (awaken_shop) {
    set_has_awaken_shop();
  } else {
    clear_has_awaken_shop();
  }
}

// required .PB.FairyShopData fairy_shop = 7;
inline bool RoleShopInfo::has_fairy_shop() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleShopInfo::set_has_fairy_shop() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleShopInfo::clear_has_fairy_shop() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleShopInfo::clear_fairy_shop() {
  if (fairy_shop_ != NULL) fairy_shop_->::PB::FairyShopData::Clear();
  clear_has_fairy_shop();
}
inline const ::PB::FairyShopData& RoleShopInfo::fairy_shop() const {
  return fairy_shop_ != NULL ? *fairy_shop_ : *default_instance_->fairy_shop_;
}
inline ::PB::FairyShopData* RoleShopInfo::mutable_fairy_shop() {
  set_has_fairy_shop();
  if (fairy_shop_ == NULL) fairy_shop_ = new ::PB::FairyShopData;
  return fairy_shop_;
}
inline ::PB::FairyShopData* RoleShopInfo::release_fairy_shop() {
  clear_has_fairy_shop();
  ::PB::FairyShopData* temp = fairy_shop_;
  fairy_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_fairy_shop(::PB::FairyShopData* fairy_shop) {
  delete fairy_shop_;
  fairy_shop_ = fairy_shop;
  if (fairy_shop) {
    set_has_fairy_shop();
  } else {
    clear_has_fairy_shop();
  }
}

// required .PB.ScoreMatchShopData score_match_shop = 8;
inline bool RoleShopInfo::has_score_match_shop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleShopInfo::set_has_score_match_shop() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleShopInfo::clear_has_score_match_shop() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleShopInfo::clear_score_match_shop() {
  if (score_match_shop_ != NULL) score_match_shop_->::PB::ScoreMatchShopData::Clear();
  clear_has_score_match_shop();
}
inline const ::PB::ScoreMatchShopData& RoleShopInfo::score_match_shop() const {
  return score_match_shop_ != NULL ? *score_match_shop_ : *default_instance_->score_match_shop_;
}
inline ::PB::ScoreMatchShopData* RoleShopInfo::mutable_score_match_shop() {
  set_has_score_match_shop();
  if (score_match_shop_ == NULL) score_match_shop_ = new ::PB::ScoreMatchShopData;
  return score_match_shop_;
}
inline ::PB::ScoreMatchShopData* RoleShopInfo::release_score_match_shop() {
  clear_has_score_match_shop();
  ::PB::ScoreMatchShopData* temp = score_match_shop_;
  score_match_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_score_match_shop(::PB::ScoreMatchShopData* score_match_shop) {
  delete score_match_shop_;
  score_match_shop_ = score_match_shop;
  if (score_match_shop) {
    set_has_score_match_shop();
  } else {
    clear_has_score_match_shop();
  }
}

// optional .PB.SevenDayShopData seven_day_shop = 9;
inline bool RoleShopInfo::has_seven_day_shop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleShopInfo::set_has_seven_day_shop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleShopInfo::clear_has_seven_day_shop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleShopInfo::clear_seven_day_shop() {
  if (seven_day_shop_ != NULL) seven_day_shop_->::PB::SevenDayShopData::Clear();
  clear_has_seven_day_shop();
}
inline const ::PB::SevenDayShopData& RoleShopInfo::seven_day_shop() const {
  return seven_day_shop_ != NULL ? *seven_day_shop_ : *default_instance_->seven_day_shop_;
}
inline ::PB::SevenDayShopData* RoleShopInfo::mutable_seven_day_shop() {
  set_has_seven_day_shop();
  if (seven_day_shop_ == NULL) seven_day_shop_ = new ::PB::SevenDayShopData;
  return seven_day_shop_;
}
inline ::PB::SevenDayShopData* RoleShopInfo::release_seven_day_shop() {
  clear_has_seven_day_shop();
  ::PB::SevenDayShopData* temp = seven_day_shop_;
  seven_day_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_seven_day_shop(::PB::SevenDayShopData* seven_day_shop) {
  delete seven_day_shop_;
  seven_day_shop_ = seven_day_shop;
  if (seven_day_shop) {
    set_has_seven_day_shop();
  } else {
    clear_has_seven_day_shop();
  }
}

// optional .PB.LevelGiftShopData level_gift_shop = 10;
inline bool RoleShopInfo::has_level_gift_shop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleShopInfo::set_has_level_gift_shop() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleShopInfo::clear_has_level_gift_shop() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleShopInfo::clear_level_gift_shop() {
  if (level_gift_shop_ != NULL) level_gift_shop_->::PB::LevelGiftShopData::Clear();
  clear_has_level_gift_shop();
}
inline const ::PB::LevelGiftShopData& RoleShopInfo::level_gift_shop() const {
  return level_gift_shop_ != NULL ? *level_gift_shop_ : *default_instance_->level_gift_shop_;
}
inline ::PB::LevelGiftShopData* RoleShopInfo::mutable_level_gift_shop() {
  set_has_level_gift_shop();
  if (level_gift_shop_ == NULL) level_gift_shop_ = new ::PB::LevelGiftShopData;
  return level_gift_shop_;
}
inline ::PB::LevelGiftShopData* RoleShopInfo::release_level_gift_shop() {
  clear_has_level_gift_shop();
  ::PB::LevelGiftShopData* temp = level_gift_shop_;
  level_gift_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_level_gift_shop(::PB::LevelGiftShopData* level_gift_shop) {
  delete level_gift_shop_;
  level_gift_shop_ = level_gift_shop;
  if (level_gift_shop) {
    set_has_level_gift_shop();
  } else {
    clear_has_level_gift_shop();
  }
}

// optional .PB.EndlessLandShopData endless_land_shop = 11;
inline bool RoleShopInfo::has_endless_land_shop() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleShopInfo::set_has_endless_land_shop() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleShopInfo::clear_has_endless_land_shop() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleShopInfo::clear_endless_land_shop() {
  if (endless_land_shop_ != NULL) endless_land_shop_->::PB::EndlessLandShopData::Clear();
  clear_has_endless_land_shop();
}
inline const ::PB::EndlessLandShopData& RoleShopInfo::endless_land_shop() const {
  return endless_land_shop_ != NULL ? *endless_land_shop_ : *default_instance_->endless_land_shop_;
}
inline ::PB::EndlessLandShopData* RoleShopInfo::mutable_endless_land_shop() {
  set_has_endless_land_shop();
  if (endless_land_shop_ == NULL) endless_land_shop_ = new ::PB::EndlessLandShopData;
  return endless_land_shop_;
}
inline ::PB::EndlessLandShopData* RoleShopInfo::release_endless_land_shop() {
  clear_has_endless_land_shop();
  ::PB::EndlessLandShopData* temp = endless_land_shop_;
  endless_land_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_endless_land_shop(::PB::EndlessLandShopData* endless_land_shop) {
  delete endless_land_shop_;
  endless_land_shop_ = endless_land_shop;
  if (endless_land_shop) {
    set_has_endless_land_shop();
  } else {
    clear_has_endless_land_shop();
  }
}

// optional .PB.DirectBuyShopData direct_buy_shop = 12;
inline bool RoleShopInfo::has_direct_buy_shop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleShopInfo::set_has_direct_buy_shop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleShopInfo::clear_has_direct_buy_shop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleShopInfo::clear_direct_buy_shop() {
  if (direct_buy_shop_ != NULL) direct_buy_shop_->::PB::DirectBuyShopData::Clear();
  clear_has_direct_buy_shop();
}
inline const ::PB::DirectBuyShopData& RoleShopInfo::direct_buy_shop() const {
  return direct_buy_shop_ != NULL ? *direct_buy_shop_ : *default_instance_->direct_buy_shop_;
}
inline ::PB::DirectBuyShopData* RoleShopInfo::mutable_direct_buy_shop() {
  set_has_direct_buy_shop();
  if (direct_buy_shop_ == NULL) direct_buy_shop_ = new ::PB::DirectBuyShopData;
  return direct_buy_shop_;
}
inline ::PB::DirectBuyShopData* RoleShopInfo::release_direct_buy_shop() {
  clear_has_direct_buy_shop();
  ::PB::DirectBuyShopData* temp = direct_buy_shop_;
  direct_buy_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_direct_buy_shop(::PB::DirectBuyShopData* direct_buy_shop) {
  delete direct_buy_shop_;
  direct_buy_shop_ = direct_buy_shop;
  if (direct_buy_shop) {
    set_has_direct_buy_shop();
  } else {
    clear_has_direct_buy_shop();
  }
}

// optional .PB.ExchangeShopData exchange_shop = 13;
inline bool RoleShopInfo::has_exchange_shop() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleShopInfo::set_has_exchange_shop() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleShopInfo::clear_has_exchange_shop() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleShopInfo::clear_exchange_shop() {
  if (exchange_shop_ != NULL) exchange_shop_->::PB::ExchangeShopData::Clear();
  clear_has_exchange_shop();
}
inline const ::PB::ExchangeShopData& RoleShopInfo::exchange_shop() const {
  return exchange_shop_ != NULL ? *exchange_shop_ : *default_instance_->exchange_shop_;
}
inline ::PB::ExchangeShopData* RoleShopInfo::mutable_exchange_shop() {
  set_has_exchange_shop();
  if (exchange_shop_ == NULL) exchange_shop_ = new ::PB::ExchangeShopData;
  return exchange_shop_;
}
inline ::PB::ExchangeShopData* RoleShopInfo::release_exchange_shop() {
  clear_has_exchange_shop();
  ::PB::ExchangeShopData* temp = exchange_shop_;
  exchange_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_exchange_shop(::PB::ExchangeShopData* exchange_shop) {
  delete exchange_shop_;
  exchange_shop_ = exchange_shop;
  if (exchange_shop) {
    set_has_exchange_shop();
  } else {
    clear_has_exchange_shop();
  }
}

// optional .PB.RecommendShopData recommend_shop = 14;
inline bool RoleShopInfo::has_recommend_shop() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleShopInfo::set_has_recommend_shop() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleShopInfo::clear_has_recommend_shop() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleShopInfo::clear_recommend_shop() {
  if (recommend_shop_ != NULL) recommend_shop_->::PB::RecommendShopData::Clear();
  clear_has_recommend_shop();
}
inline const ::PB::RecommendShopData& RoleShopInfo::recommend_shop() const {
  return recommend_shop_ != NULL ? *recommend_shop_ : *default_instance_->recommend_shop_;
}
inline ::PB::RecommendShopData* RoleShopInfo::mutable_recommend_shop() {
  set_has_recommend_shop();
  if (recommend_shop_ == NULL) recommend_shop_ = new ::PB::RecommendShopData;
  return recommend_shop_;
}
inline ::PB::RecommendShopData* RoleShopInfo::release_recommend_shop() {
  clear_has_recommend_shop();
  ::PB::RecommendShopData* temp = recommend_shop_;
  recommend_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_recommend_shop(::PB::RecommendShopData* recommend_shop) {
  delete recommend_shop_;
  recommend_shop_ = recommend_shop;
  if (recommend_shop) {
    set_has_recommend_shop();
  } else {
    clear_has_recommend_shop();
  }
}

// optional .PB.TeamDungeonShop teamdungeon_shop = 15;
inline bool RoleShopInfo::has_teamdungeon_shop() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleShopInfo::set_has_teamdungeon_shop() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleShopInfo::clear_has_teamdungeon_shop() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleShopInfo::clear_teamdungeon_shop() {
  if (teamdungeon_shop_ != NULL) teamdungeon_shop_->::PB::TeamDungeonShop::Clear();
  clear_has_teamdungeon_shop();
}
inline const ::PB::TeamDungeonShop& RoleShopInfo::teamdungeon_shop() const {
  return teamdungeon_shop_ != NULL ? *teamdungeon_shop_ : *default_instance_->teamdungeon_shop_;
}
inline ::PB::TeamDungeonShop* RoleShopInfo::mutable_teamdungeon_shop() {
  set_has_teamdungeon_shop();
  if (teamdungeon_shop_ == NULL) teamdungeon_shop_ = new ::PB::TeamDungeonShop;
  return teamdungeon_shop_;
}
inline ::PB::TeamDungeonShop* RoleShopInfo::release_teamdungeon_shop() {
  clear_has_teamdungeon_shop();
  ::PB::TeamDungeonShop* temp = teamdungeon_shop_;
  teamdungeon_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_teamdungeon_shop(::PB::TeamDungeonShop* teamdungeon_shop) {
  delete teamdungeon_shop_;
  teamdungeon_shop_ = teamdungeon_shop;
  if (teamdungeon_shop) {
    set_has_teamdungeon_shop();
  } else {
    clear_has_teamdungeon_shop();
  }
}

// optional .PB.ChristmasShop christmas_shop = 16;
inline bool RoleShopInfo::has_christmas_shop() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleShopInfo::set_has_christmas_shop() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleShopInfo::clear_has_christmas_shop() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleShopInfo::clear_christmas_shop() {
  if (christmas_shop_ != NULL) christmas_shop_->::PB::ChristmasShop::Clear();
  clear_has_christmas_shop();
}
inline const ::PB::ChristmasShop& RoleShopInfo::christmas_shop() const {
  return christmas_shop_ != NULL ? *christmas_shop_ : *default_instance_->christmas_shop_;
}
inline ::PB::ChristmasShop* RoleShopInfo::mutable_christmas_shop() {
  set_has_christmas_shop();
  if (christmas_shop_ == NULL) christmas_shop_ = new ::PB::ChristmasShop;
  return christmas_shop_;
}
inline ::PB::ChristmasShop* RoleShopInfo::release_christmas_shop() {
  clear_has_christmas_shop();
  ::PB::ChristmasShop* temp = christmas_shop_;
  christmas_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_christmas_shop(::PB::ChristmasShop* christmas_shop) {
  delete christmas_shop_;
  christmas_shop_ = christmas_shop;
  if (christmas_shop) {
    set_has_christmas_shop();
  } else {
    clear_has_christmas_shop();
  }
}

// optional .PB.CrystalShop crystal_shop = 17;
inline bool RoleShopInfo::has_crystal_shop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleShopInfo::set_has_crystal_shop() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleShopInfo::clear_has_crystal_shop() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleShopInfo::clear_crystal_shop() {
  if (crystal_shop_ != NULL) crystal_shop_->::PB::CrystalShop::Clear();
  clear_has_crystal_shop();
}
inline const ::PB::CrystalShop& RoleShopInfo::crystal_shop() const {
  return crystal_shop_ != NULL ? *crystal_shop_ : *default_instance_->crystal_shop_;
}
inline ::PB::CrystalShop* RoleShopInfo::mutable_crystal_shop() {
  set_has_crystal_shop();
  if (crystal_shop_ == NULL) crystal_shop_ = new ::PB::CrystalShop;
  return crystal_shop_;
}
inline ::PB::CrystalShop* RoleShopInfo::release_crystal_shop() {
  clear_has_crystal_shop();
  ::PB::CrystalShop* temp = crystal_shop_;
  crystal_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_crystal_shop(::PB::CrystalShop* crystal_shop) {
  delete crystal_shop_;
  crystal_shop_ = crystal_shop;
  if (crystal_shop) {
    set_has_crystal_shop();
  } else {
    clear_has_crystal_shop();
  }
}

// optional .PB.ResourceWarShop resource_war_shop = 18;
inline bool RoleShopInfo::has_resource_war_shop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleShopInfo::set_has_resource_war_shop() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleShopInfo::clear_has_resource_war_shop() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleShopInfo::clear_resource_war_shop() {
  if (resource_war_shop_ != NULL) resource_war_shop_->::PB::ResourceWarShop::Clear();
  clear_has_resource_war_shop();
}
inline const ::PB::ResourceWarShop& RoleShopInfo::resource_war_shop() const {
  return resource_war_shop_ != NULL ? *resource_war_shop_ : *default_instance_->resource_war_shop_;
}
inline ::PB::ResourceWarShop* RoleShopInfo::mutable_resource_war_shop() {
  set_has_resource_war_shop();
  if (resource_war_shop_ == NULL) resource_war_shop_ = new ::PB::ResourceWarShop;
  return resource_war_shop_;
}
inline ::PB::ResourceWarShop* RoleShopInfo::release_resource_war_shop() {
  clear_has_resource_war_shop();
  ::PB::ResourceWarShop* temp = resource_war_shop_;
  resource_war_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_resource_war_shop(::PB::ResourceWarShop* resource_war_shop) {
  delete resource_war_shop_;
  resource_war_shop_ = resource_war_shop;
  if (resource_war_shop) {
    set_has_resource_war_shop();
  } else {
    clear_has_resource_war_shop();
  }
}

// optional .PB.GMShopData gm_shop = 19;
inline bool RoleShopInfo::has_gm_shop() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleShopInfo::set_has_gm_shop() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleShopInfo::clear_has_gm_shop() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleShopInfo::clear_gm_shop() {
  if (gm_shop_ != NULL) gm_shop_->::PB::GMShopData::Clear();
  clear_has_gm_shop();
}
inline const ::PB::GMShopData& RoleShopInfo::gm_shop() const {
  return gm_shop_ != NULL ? *gm_shop_ : *default_instance_->gm_shop_;
}
inline ::PB::GMShopData* RoleShopInfo::mutable_gm_shop() {
  set_has_gm_shop();
  if (gm_shop_ == NULL) gm_shop_ = new ::PB::GMShopData;
  return gm_shop_;
}
inline ::PB::GMShopData* RoleShopInfo::release_gm_shop() {
  clear_has_gm_shop();
  ::PB::GMShopData* temp = gm_shop_;
  gm_shop_ = NULL;
  return temp;
}
inline void RoleShopInfo::set_allocated_gm_shop(::PB::GMShopData* gm_shop) {
  delete gm_shop_;
  gm_shop_ = gm_shop;
  if (gm_shop) {
    set_has_gm_shop();
  } else {
    clear_has_gm_shop();
  }
}

// -------------------------------------------------------------------

// SpiritData

// optional uint32 id = 1;
inline bool SpiritData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpiritData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpiritData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpiritData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SpiritData::id() const {
  return id_;
}
inline void SpiritData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 enhance_level = 2;
inline bool SpiritData::has_enhance_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpiritData::set_has_enhance_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpiritData::clear_has_enhance_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpiritData::clear_enhance_level() {
  enhance_level_ = 0u;
  clear_has_enhance_level();
}
inline ::google::protobuf::uint32 SpiritData::enhance_level() const {
  return enhance_level_;
}
inline void SpiritData::set_enhance_level(::google::protobuf::uint32 value) {
  set_has_enhance_level();
  enhance_level_ = value;
}

// optional uint32 train_stage = 3;
inline bool SpiritData::has_train_stage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SpiritData::set_has_train_stage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SpiritData::clear_has_train_stage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SpiritData::clear_train_stage() {
  train_stage_ = 0u;
  clear_has_train_stage();
}
inline ::google::protobuf::uint32 SpiritData::train_stage() const {
  return train_stage_;
}
inline void SpiritData::set_train_stage(::google::protobuf::uint32 value) {
  set_has_train_stage();
  train_stage_ = value;
}

// optional uint32 train_times = 4;
inline bool SpiritData::has_train_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SpiritData::set_has_train_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SpiritData::clear_has_train_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SpiritData::clear_train_times() {
  train_times_ = 0u;
  clear_has_train_times();
}
inline ::google::protobuf::uint32 SpiritData::train_times() const {
  return train_times_;
}
inline void SpiritData::set_train_times(::google::protobuf::uint32 value) {
  set_has_train_times();
  train_times_ = value;
}

// optional uint32 star = 5;
inline bool SpiritData::has_star() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SpiritData::set_has_star() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SpiritData::clear_has_star() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SpiritData::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 SpiritData::star() const {
  return star_;
}
inline void SpiritData::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// SpiritPokedex

// optional uint32 id = 1;
inline bool SpiritPokedex::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpiritPokedex::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpiritPokedex::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpiritPokedex::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SpiritPokedex::id() const {
  return id_;
}
inline void SpiritPokedex::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 level = 2;
inline bool SpiritPokedex::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpiritPokedex::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpiritPokedex::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpiritPokedex::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SpiritPokedex::level() const {
  return level_;
}
inline void SpiritPokedex::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// RoleSpiritInfo

// required uint32 stage = 1;
inline bool RoleSpiritInfo::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSpiritInfo::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSpiritInfo::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSpiritInfo::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 RoleSpiritInfo::stage() const {
  return stage_;
}
inline void RoleSpiritInfo::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// required uint32 level = 2;
inline bool RoleSpiritInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleSpiritInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleSpiritInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleSpiritInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 RoleSpiritInfo::level() const {
  return level_;
}
inline void RoleSpiritInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 cur_use_spirit_id = 3;
inline bool RoleSpiritInfo::has_cur_use_spirit_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleSpiritInfo::set_has_cur_use_spirit_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleSpiritInfo::clear_has_cur_use_spirit_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleSpiritInfo::clear_cur_use_spirit_id() {
  cur_use_spirit_id_ = 0u;
  clear_has_cur_use_spirit_id();
}
inline ::google::protobuf::uint32 RoleSpiritInfo::cur_use_spirit_id() const {
  return cur_use_spirit_id_;
}
inline void RoleSpiritInfo::set_cur_use_spirit_id(::google::protobuf::uint32 value) {
  set_has_cur_use_spirit_id();
  cur_use_spirit_id_ = value;
}

// repeated .PB.SpiritData spirit_list = 4;
inline int RoleSpiritInfo::spirit_list_size() const {
  return spirit_list_.size();
}
inline void RoleSpiritInfo::clear_spirit_list() {
  spirit_list_.Clear();
}
inline const ::PB::SpiritData& RoleSpiritInfo::spirit_list(int index) const {
  return spirit_list_.Get(index);
}
inline ::PB::SpiritData* RoleSpiritInfo::mutable_spirit_list(int index) {
  return spirit_list_.Mutable(index);
}
inline ::PB::SpiritData* RoleSpiritInfo::add_spirit_list() {
  return spirit_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SpiritData >&
RoleSpiritInfo::spirit_list() const {
  return spirit_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SpiritData >*
RoleSpiritInfo::mutable_spirit_list() {
  return &spirit_list_;
}

// repeated .PB.SpiritPokedex pokedex_list = 5;
inline int RoleSpiritInfo::pokedex_list_size() const {
  return pokedex_list_.size();
}
inline void RoleSpiritInfo::clear_pokedex_list() {
  pokedex_list_.Clear();
}
inline const ::PB::SpiritPokedex& RoleSpiritInfo::pokedex_list(int index) const {
  return pokedex_list_.Get(index);
}
inline ::PB::SpiritPokedex* RoleSpiritInfo::mutable_pokedex_list(int index) {
  return pokedex_list_.Mutable(index);
}
inline ::PB::SpiritPokedex* RoleSpiritInfo::add_pokedex_list() {
  return pokedex_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SpiritPokedex >&
RoleSpiritInfo::pokedex_list() const {
  return pokedex_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SpiritPokedex >*
RoleSpiritInfo::mutable_pokedex_list() {
  return &pokedex_list_;
}

// -------------------------------------------------------------------

// FriendData

// required uint32 role_id = 1;
inline bool FriendData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FriendData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FriendData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FriendData::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 FriendData::role_id() const {
  return role_id_;
}
inline void FriendData::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// required uint32 is_give_energy = 2;
inline bool FriendData::has_is_give_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FriendData::set_has_is_give_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FriendData::clear_has_is_give_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FriendData::clear_is_give_energy() {
  is_give_energy_ = 0u;
  clear_has_is_give_energy();
}
inline ::google::protobuf::uint32 FriendData::is_give_energy() const {
  return is_give_energy_;
}
inline void FriendData::set_is_give_energy(::google::protobuf::uint32 value) {
  set_has_is_give_energy();
  is_give_energy_ = value;
}

// required uint32 get_energy_state = 3;
inline bool FriendData::has_get_energy_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FriendData::set_has_get_energy_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FriendData::clear_has_get_energy_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FriendData::clear_get_energy_state() {
  get_energy_state_ = 0u;
  clear_has_get_energy_state();
}
inline ::google::protobuf::uint32 FriendData::get_energy_state() const {
  return get_energy_state_;
}
inline void FriendData::set_get_energy_state(::google::protobuf::uint32 value) {
  set_has_get_energy_state();
  get_energy_state_ = value;
}

// optional uint32 help_battle_times = 4;
inline bool FriendData::has_help_battle_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FriendData::set_has_help_battle_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FriendData::clear_has_help_battle_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FriendData::clear_help_battle_times() {
  help_battle_times_ = 0u;
  clear_has_help_battle_times();
}
inline ::google::protobuf::uint32 FriendData::help_battle_times() const {
  return help_battle_times_;
}
inline void FriendData::set_help_battle_times(::google::protobuf::uint32 value) {
  set_has_help_battle_times();
  help_battle_times_ = value;
}

// -------------------------------------------------------------------

// RoleFriendData

// repeated .PB.FriendData friend_list = 1;
inline int RoleFriendData::friend_list_size() const {
  return friend_list_.size();
}
inline void RoleFriendData::clear_friend_list() {
  friend_list_.Clear();
}
inline const ::PB::FriendData& RoleFriendData::friend_list(int index) const {
  return friend_list_.Get(index);
}
inline ::PB::FriendData* RoleFriendData::mutable_friend_list(int index) {
  return friend_list_.Mutable(index);
}
inline ::PB::FriendData* RoleFriendData::add_friend_list() {
  return friend_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::FriendData >&
RoleFriendData::friend_list() const {
  return friend_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::FriendData >*
RoleFriendData::mutable_friend_list() {
  return &friend_list_;
}

// repeated uint32 black_list = 2;
inline int RoleFriendData::black_list_size() const {
  return black_list_.size();
}
inline void RoleFriendData::clear_black_list() {
  black_list_.Clear();
}
inline ::google::protobuf::uint32 RoleFriendData::black_list(int index) const {
  return black_list_.Get(index);
}
inline void RoleFriendData::set_black_list(int index, ::google::protobuf::uint32 value) {
  black_list_.Set(index, value);
}
inline void RoleFriendData::add_black_list(::google::protobuf::uint32 value) {
  black_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleFriendData::black_list() const {
  return black_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleFriendData::mutable_black_list() {
  return &black_list_;
}

// repeated uint32 apply_list = 3;
inline int RoleFriendData::apply_list_size() const {
  return apply_list_.size();
}
inline void RoleFriendData::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint32 RoleFriendData::apply_list(int index) const {
  return apply_list_.Get(index);
}
inline void RoleFriendData::set_apply_list(int index, ::google::protobuf::uint32 value) {
  apply_list_.Set(index, value);
}
inline void RoleFriendData::add_apply_list(::google::protobuf::uint32 value) {
  apply_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleFriendData::apply_list() const {
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleFriendData::mutable_apply_list() {
  return &apply_list_;
}

// required uint32 get_energy_times = 4;
inline bool RoleFriendData::has_get_energy_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleFriendData::set_has_get_energy_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleFriendData::clear_has_get_energy_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleFriendData::clear_get_energy_times() {
  get_energy_times_ = 0u;
  clear_has_get_energy_times();
}
inline ::google::protobuf::uint32 RoleFriendData::get_energy_times() const {
  return get_energy_times_;
}
inline void RoleFriendData::set_get_energy_times(::google::protobuf::uint32 value) {
  set_has_get_energy_times();
  get_energy_times_ = value;
}

// -------------------------------------------------------------------

// RoleRebelInfo

// required uint32 rebel_level = 1;
inline bool RoleRebelInfo::has_rebel_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleRebelInfo::set_has_rebel_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleRebelInfo::clear_has_rebel_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleRebelInfo::clear_rebel_level() {
  rebel_level_ = 0u;
  clear_has_rebel_level();
}
inline ::google::protobuf::uint32 RoleRebelInfo::rebel_level() const {
  return rebel_level_;
}
inline void RoleRebelInfo::set_rebel_level(::google::protobuf::uint32 value) {
  set_has_rebel_level();
  rebel_level_ = value;
}

// required uint32 today_exploit = 2;
inline bool RoleRebelInfo::has_today_exploit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleRebelInfo::set_has_today_exploit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleRebelInfo::clear_has_today_exploit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleRebelInfo::clear_today_exploit() {
  today_exploit_ = 0u;
  clear_has_today_exploit();
}
inline ::google::protobuf::uint32 RoleRebelInfo::today_exploit() const {
  return today_exploit_;
}
inline void RoleRebelInfo::set_today_exploit(::google::protobuf::uint32 value) {
  set_has_today_exploit();
  today_exploit_ = value;
}

// required uint32 today_damage = 3;
inline bool RoleRebelInfo::has_today_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleRebelInfo::set_has_today_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleRebelInfo::clear_has_today_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleRebelInfo::clear_today_damage() {
  today_damage_ = 0u;
  clear_has_today_damage();
}
inline ::google::protobuf::uint32 RoleRebelInfo::today_damage() const {
  return today_damage_;
}
inline void RoleRebelInfo::set_today_damage(::google::protobuf::uint32 value) {
  set_has_today_damage();
  today_damage_ = value;
}

// repeated uint32 reward_get_record_list = 4;
inline int RoleRebelInfo::reward_get_record_list_size() const {
  return reward_get_record_list_.size();
}
inline void RoleRebelInfo::clear_reward_get_record_list() {
  reward_get_record_list_.Clear();
}
inline ::google::protobuf::uint32 RoleRebelInfo::reward_get_record_list(int index) const {
  return reward_get_record_list_.Get(index);
}
inline void RoleRebelInfo::set_reward_get_record_list(int index, ::google::protobuf::uint32 value) {
  reward_get_record_list_.Set(index, value);
}
inline void RoleRebelInfo::add_reward_get_record_list(::google::protobuf::uint32 value) {
  reward_get_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleRebelInfo::reward_get_record_list() const {
  return reward_get_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleRebelInfo::mutable_reward_get_record_list() {
  return &reward_get_record_list_;
}

// required uint32 is_already_share = 5;
inline bool RoleRebelInfo::has_is_already_share() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleRebelInfo::set_has_is_already_share() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleRebelInfo::clear_has_is_already_share() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleRebelInfo::clear_is_already_share() {
  is_already_share_ = 0u;
  clear_has_is_already_share();
}
inline ::google::protobuf::uint32 RoleRebelInfo::is_already_share() const {
  return is_already_share_;
}
inline void RoleRebelInfo::set_is_already_share(::google::protobuf::uint32 value) {
  set_has_is_already_share();
  is_already_share_ = value;
}

// -------------------------------------------------------------------

// RoleDuobaoInfo

// optional uint32 peace_over_time = 1;
inline bool RoleDuobaoInfo::has_peace_over_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDuobaoInfo::set_has_peace_over_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDuobaoInfo::clear_has_peace_over_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDuobaoInfo::clear_peace_over_time() {
  peace_over_time_ = 0u;
  clear_has_peace_over_time();
}
inline ::google::protobuf::uint32 RoleDuobaoInfo::peace_over_time() const {
  return peace_over_time_;
}
inline void RoleDuobaoInfo::set_peace_over_time(::google::protobuf::uint32 value) {
  set_has_peace_over_time();
  peace_over_time_ = value;
}

// repeated uint32 doubao_times_list = 2;
inline int RoleDuobaoInfo::doubao_times_list_size() const {
  return doubao_times_list_.size();
}
inline void RoleDuobaoInfo::clear_doubao_times_list() {
  doubao_times_list_.Clear();
}
inline ::google::protobuf::uint32 RoleDuobaoInfo::doubao_times_list(int index) const {
  return doubao_times_list_.Get(index);
}
inline void RoleDuobaoInfo::set_doubao_times_list(int index, ::google::protobuf::uint32 value) {
  doubao_times_list_.Set(index, value);
}
inline void RoleDuobaoInfo::add_doubao_times_list(::google::protobuf::uint32 value) {
  doubao_times_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleDuobaoInfo::doubao_times_list() const {
  return doubao_times_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleDuobaoInfo::mutable_doubao_times_list() {
  return &doubao_times_list_;
}

// optional uint32 daily_duobao_times = 3;
inline bool RoleDuobaoInfo::has_daily_duobao_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDuobaoInfo::set_has_daily_duobao_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDuobaoInfo::clear_has_daily_duobao_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDuobaoInfo::clear_daily_duobao_times() {
  daily_duobao_times_ = 0u;
  clear_has_daily_duobao_times();
}
inline ::google::protobuf::uint32 RoleDuobaoInfo::daily_duobao_times() const {
  return daily_duobao_times_;
}
inline void RoleDuobaoInfo::set_daily_duobao_times(::google::protobuf::uint32 value) {
  set_has_daily_duobao_times();
  daily_duobao_times_ = value;
}

// repeated uint32 pregross_reward_record = 4;
inline int RoleDuobaoInfo::pregross_reward_record_size() const {
  return pregross_reward_record_.size();
}
inline void RoleDuobaoInfo::clear_pregross_reward_record() {
  pregross_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleDuobaoInfo::pregross_reward_record(int index) const {
  return pregross_reward_record_.Get(index);
}
inline void RoleDuobaoInfo::set_pregross_reward_record(int index, ::google::protobuf::uint32 value) {
  pregross_reward_record_.Set(index, value);
}
inline void RoleDuobaoInfo::add_pregross_reward_record(::google::protobuf::uint32 value) {
  pregross_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleDuobaoInfo::pregross_reward_record() const {
  return pregross_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleDuobaoInfo::mutable_pregross_reward_record() {
  return &pregross_reward_record_;
}

// -------------------------------------------------------------------

// AchievementData

// required uint32 id = 1;
inline bool AchievementData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AchievementData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AchievementData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AchievementData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 AchievementData::id() const {
  return id_;
}
inline void AchievementData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 level = 2;
inline bool AchievementData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AchievementData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AchievementData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AchievementData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 AchievementData::level() const {
  return level_;
}
inline void AchievementData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 value = 3;
inline bool AchievementData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AchievementData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AchievementData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AchievementData::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 AchievementData::value() const {
  return value_;
}
inline void AchievementData::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// required uint32 cur_reward_level = 4;
inline bool AchievementData::has_cur_reward_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AchievementData::set_has_cur_reward_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AchievementData::clear_has_cur_reward_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AchievementData::clear_cur_reward_level() {
  cur_reward_level_ = 0u;
  clear_has_cur_reward_level();
}
inline ::google::protobuf::uint32 AchievementData::cur_reward_level() const {
  return cur_reward_level_;
}
inline void AchievementData::set_cur_reward_level(::google::protobuf::uint32 value) {
  set_has_cur_reward_level();
  cur_reward_level_ = value;
}

// -------------------------------------------------------------------

// RoleAchievemntInfo

// repeated .PB.AchievementData achievement_list = 1;
inline int RoleAchievemntInfo::achievement_list_size() const {
  return achievement_list_.size();
}
inline void RoleAchievemntInfo::clear_achievement_list() {
  achievement_list_.Clear();
}
inline const ::PB::AchievementData& RoleAchievemntInfo::achievement_list(int index) const {
  return achievement_list_.Get(index);
}
inline ::PB::AchievementData* RoleAchievemntInfo::mutable_achievement_list(int index) {
  return achievement_list_.Mutable(index);
}
inline ::PB::AchievementData* RoleAchievemntInfo::add_achievement_list() {
  return achievement_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::AchievementData >&
RoleAchievemntInfo::achievement_list() const {
  return achievement_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::AchievementData >*
RoleAchievemntInfo::mutable_achievement_list() {
  return &achievement_list_;
}

// -------------------------------------------------------------------

// DailyMission

// required uint32 id = 1;
inline bool DailyMission::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyMission::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyMission::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyMission::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DailyMission::id() const {
  return id_;
}
inline void DailyMission::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 is_get_reward = 2;
inline bool DailyMission::has_is_get_reward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyMission::set_has_is_get_reward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyMission::clear_has_is_get_reward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyMission::clear_is_get_reward() {
  is_get_reward_ = 0u;
  clear_has_is_get_reward();
}
inline ::google::protobuf::uint32 DailyMission::is_get_reward() const {
  return is_get_reward_;
}
inline void DailyMission::set_is_get_reward(::google::protobuf::uint32 value) {
  set_has_is_get_reward();
  is_get_reward_ = value;
}

// required uint32 value = 3;
inline bool DailyMission::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyMission::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyMission::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyMission::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 DailyMission::value() const {
  return value_;
}
inline void DailyMission::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// RoleDailyMissionInfo

// required uint32 point = 1;
inline bool RoleDailyMissionInfo::has_point() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDailyMissionInfo::set_has_point() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDailyMissionInfo::clear_has_point() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDailyMissionInfo::clear_point() {
  point_ = 0u;
  clear_has_point();
}
inline ::google::protobuf::uint32 RoleDailyMissionInfo::point() const {
  return point_;
}
inline void RoleDailyMissionInfo::set_point(::google::protobuf::uint32 value) {
  set_has_point();
  point_ = value;
}

// repeated uint32 point_reward_record = 2;
inline int RoleDailyMissionInfo::point_reward_record_size() const {
  return point_reward_record_.size();
}
inline void RoleDailyMissionInfo::clear_point_reward_record() {
  point_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleDailyMissionInfo::point_reward_record(int index) const {
  return point_reward_record_.Get(index);
}
inline void RoleDailyMissionInfo::set_point_reward_record(int index, ::google::protobuf::uint32 value) {
  point_reward_record_.Set(index, value);
}
inline void RoleDailyMissionInfo::add_point_reward_record(::google::protobuf::uint32 value) {
  point_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleDailyMissionInfo::point_reward_record() const {
  return point_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleDailyMissionInfo::mutable_point_reward_record() {
  return &point_reward_record_;
}

// repeated .PB.DailyMission mission_list = 3;
inline int RoleDailyMissionInfo::mission_list_size() const {
  return mission_list_.size();
}
inline void RoleDailyMissionInfo::clear_mission_list() {
  mission_list_.Clear();
}
inline const ::PB::DailyMission& RoleDailyMissionInfo::mission_list(int index) const {
  return mission_list_.Get(index);
}
inline ::PB::DailyMission* RoleDailyMissionInfo::mutable_mission_list(int index) {
  return mission_list_.Mutable(index);
}
inline ::PB::DailyMission* RoleDailyMissionInfo::add_mission_list() {
  return mission_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::DailyMission >&
RoleDailyMissionInfo::mission_list() const {
  return mission_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::DailyMission >*
RoleDailyMissionInfo::mutable_mission_list() {
  return &mission_list_;
}

// -------------------------------------------------------------------

// SkillData

// required uint32 skill_id = 1;
inline bool SkillData::has_skill_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SkillData::set_has_skill_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SkillData::clear_has_skill_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SkillData::clear_skill_id() {
  skill_id_ = 0u;
  clear_has_skill_id();
}
inline ::google::protobuf::uint32 SkillData::skill_id() const {
  return skill_id_;
}
inline void SkillData::set_skill_id(::google::protobuf::uint32 value) {
  set_has_skill_id();
  skill_id_ = value;
}

// required uint32 level = 2;
inline bool SkillData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SkillData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SkillData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SkillData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SkillData::level() const {
  return level_;
}
inline void SkillData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// RoleGuildSkillInfo

// repeated .PB.SkillData skill_list = 1;
inline int RoleGuildSkillInfo::skill_list_size() const {
  return skill_list_.size();
}
inline void RoleGuildSkillInfo::clear_skill_list() {
  skill_list_.Clear();
}
inline const ::PB::SkillData& RoleGuildSkillInfo::skill_list(int index) const {
  return skill_list_.Get(index);
}
inline ::PB::SkillData* RoleGuildSkillInfo::mutable_skill_list(int index) {
  return skill_list_.Mutable(index);
}
inline ::PB::SkillData* RoleGuildSkillInfo::add_skill_list() {
  return skill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SkillData >&
RoleGuildSkillInfo::skill_list() const {
  return skill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SkillData >*
RoleGuildSkillInfo::mutable_skill_list() {
  return &skill_list_;
}

// -------------------------------------------------------------------

// RoleSignInData

// required uint32 cur_sign_in_day = 1;
inline bool RoleSignInData::has_cur_sign_in_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSignInData::set_has_cur_sign_in_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSignInData::clear_has_cur_sign_in_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSignInData::clear_cur_sign_in_day() {
  cur_sign_in_day_ = 0u;
  clear_has_cur_sign_in_day();
}
inline ::google::protobuf::uint32 RoleSignInData::cur_sign_in_day() const {
  return cur_sign_in_day_;
}
inline void RoleSignInData::set_cur_sign_in_day(::google::protobuf::uint32 value) {
  set_has_cur_sign_in_day();
  cur_sign_in_day_ = value;
}

// required uint32 last_sign_in_time = 2;
inline bool RoleSignInData::has_last_sign_in_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleSignInData::set_has_last_sign_in_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleSignInData::clear_has_last_sign_in_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleSignInData::clear_last_sign_in_time() {
  last_sign_in_time_ = 0u;
  clear_has_last_sign_in_time();
}
inline ::google::protobuf::uint32 RoleSignInData::last_sign_in_time() const {
  return last_sign_in_time_;
}
inline void RoleSignInData::set_last_sign_in_time(::google::protobuf::uint32 value) {
  set_has_last_sign_in_time();
  last_sign_in_time_ = value;
}

// -------------------------------------------------------------------

// LoginRewardData

// repeated uint32 reward_record_list = 1;
inline int LoginRewardData::reward_record_list_size() const {
  return reward_record_list_.size();
}
inline void LoginRewardData::clear_reward_record_list() {
  reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 LoginRewardData::reward_record_list(int index) const {
  return reward_record_list_.Get(index);
}
inline void LoginRewardData::set_reward_record_list(int index, ::google::protobuf::uint32 value) {
  reward_record_list_.Set(index, value);
}
inline void LoginRewardData::add_reward_record_list(::google::protobuf::uint32 value) {
  reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LoginRewardData::reward_record_list() const {
  return reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LoginRewardData::mutable_reward_record_list() {
  return &reward_record_list_;
}

// optional uint32 login_days = 2;
inline bool LoginRewardData::has_login_days() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginRewardData::set_has_login_days() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginRewardData::clear_has_login_days() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginRewardData::clear_login_days() {
  login_days_ = 0u;
  clear_has_login_days();
}
inline ::google::protobuf::uint32 LoginRewardData::login_days() const {
  return login_days_;
}
inline void LoginRewardData::set_login_days(::google::protobuf::uint32 value) {
  set_has_login_days();
  login_days_ = value;
}

// -------------------------------------------------------------------

// RoleKingMatchData

// optional uint32 last_season = 1;
inline bool RoleKingMatchData::has_last_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleKingMatchData::set_has_last_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleKingMatchData::clear_has_last_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleKingMatchData::clear_last_season() {
  last_season_ = 0u;
  clear_has_last_season();
}
inline ::google::protobuf::uint32 RoleKingMatchData::last_season() const {
  return last_season_;
}
inline void RoleKingMatchData::set_last_season(::google::protobuf::uint32 value) {
  set_has_last_season();
  last_season_ = value;
}

// optional uint32 total_battle_times = 2;
inline bool RoleKingMatchData::has_total_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleKingMatchData::set_has_total_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleKingMatchData::clear_has_total_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleKingMatchData::clear_total_battle_times() {
  total_battle_times_ = 0u;
  clear_has_total_battle_times();
}
inline ::google::protobuf::uint32 RoleKingMatchData::total_battle_times() const {
  return total_battle_times_;
}
inline void RoleKingMatchData::set_total_battle_times(::google::protobuf::uint32 value) {
  set_has_total_battle_times();
  total_battle_times_ = value;
}

// optional uint32 total_win_times = 3;
inline bool RoleKingMatchData::has_total_win_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleKingMatchData::set_has_total_win_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleKingMatchData::clear_has_total_win_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleKingMatchData::clear_total_win_times() {
  total_win_times_ = 0u;
  clear_has_total_win_times();
}
inline ::google::protobuf::uint32 RoleKingMatchData::total_win_times() const {
  return total_win_times_;
}
inline void RoleKingMatchData::set_total_win_times(::google::protobuf::uint32 value) {
  set_has_total_win_times();
  total_win_times_ = value;
}

// optional uint32 today_win_times = 4;
inline bool RoleKingMatchData::has_today_win_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleKingMatchData::set_has_today_win_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleKingMatchData::clear_has_today_win_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleKingMatchData::clear_today_win_times() {
  today_win_times_ = 0u;
  clear_has_today_win_times();
}
inline ::google::protobuf::uint32 RoleKingMatchData::today_win_times() const {
  return today_win_times_;
}
inline void RoleKingMatchData::set_today_win_times(::google::protobuf::uint32 value) {
  set_has_today_win_times();
  today_win_times_ = value;
}

// optional uint32 stage_level = 5;
inline bool RoleKingMatchData::has_stage_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleKingMatchData::set_has_stage_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleKingMatchData::clear_has_stage_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleKingMatchData::clear_stage_level() {
  stage_level_ = 0u;
  clear_has_stage_level();
}
inline ::google::protobuf::uint32 RoleKingMatchData::stage_level() const {
  return stage_level_;
}
inline void RoleKingMatchData::set_stage_level(::google::protobuf::uint32 value) {
  set_has_stage_level();
  stage_level_ = value;
}

// optional uint32 context = 6;
inline bool RoleKingMatchData::has_context() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleKingMatchData::set_has_context() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleKingMatchData::clear_has_context() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleKingMatchData::clear_context() {
  context_ = 0u;
  clear_has_context();
}
inline ::google::protobuf::uint32 RoleKingMatchData::context() const {
  return context_;
}
inline void RoleKingMatchData::set_context(::google::protobuf::uint32 value) {
  set_has_context();
  context_ = value;
}

// optional uint32 history_stage_level = 7;
inline bool RoleKingMatchData::has_history_stage_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleKingMatchData::set_has_history_stage_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleKingMatchData::clear_has_history_stage_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleKingMatchData::clear_history_stage_level() {
  history_stage_level_ = 0u;
  clear_has_history_stage_level();
}
inline ::google::protobuf::uint32 RoleKingMatchData::history_stage_level() const {
  return history_stage_level_;
}
inline void RoleKingMatchData::set_history_stage_level(::google::protobuf::uint32 value) {
  set_has_history_stage_level();
  history_stage_level_ = value;
}

// repeated uint32 season_task_reward_record = 8;
inline int RoleKingMatchData::season_task_reward_record_size() const {
  return season_task_reward_record_.size();
}
inline void RoleKingMatchData::clear_season_task_reward_record() {
  season_task_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleKingMatchData::season_task_reward_record(int index) const {
  return season_task_reward_record_.Get(index);
}
inline void RoleKingMatchData::set_season_task_reward_record(int index, ::google::protobuf::uint32 value) {
  season_task_reward_record_.Set(index, value);
}
inline void RoleKingMatchData::add_season_task_reward_record(::google::protobuf::uint32 value) {
  season_task_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleKingMatchData::season_task_reward_record() const {
  return season_task_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleKingMatchData::mutable_season_task_reward_record() {
  return &season_task_reward_record_;
}

// -------------------------------------------------------------------

// PlayerTeamDungeonData

// optional uint32 today_battle_times = 1;
inline bool PlayerTeamDungeonData::has_today_battle_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerTeamDungeonData::set_has_today_battle_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerTeamDungeonData::clear_has_today_battle_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerTeamDungeonData::clear_today_battle_times() {
  today_battle_times_ = 0u;
  clear_has_today_battle_times();
}
inline ::google::protobuf::uint32 PlayerTeamDungeonData::today_battle_times() const {
  return today_battle_times_;
}
inline void PlayerTeamDungeonData::set_today_battle_times(::google::protobuf::uint32 value) {
  set_has_today_battle_times();
  today_battle_times_ = value;
}

// repeated uint32 pass_dungeon_list = 2;
inline int PlayerTeamDungeonData::pass_dungeon_list_size() const {
  return pass_dungeon_list_.size();
}
inline void PlayerTeamDungeonData::clear_pass_dungeon_list() {
  pass_dungeon_list_.Clear();
}
inline ::google::protobuf::uint32 PlayerTeamDungeonData::pass_dungeon_list(int index) const {
  return pass_dungeon_list_.Get(index);
}
inline void PlayerTeamDungeonData::set_pass_dungeon_list(int index, ::google::protobuf::uint32 value) {
  pass_dungeon_list_.Set(index, value);
}
inline void PlayerTeamDungeonData::add_pass_dungeon_list(::google::protobuf::uint32 value) {
  pass_dungeon_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PlayerTeamDungeonData::pass_dungeon_list() const {
  return pass_dungeon_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PlayerTeamDungeonData::mutable_pass_dungeon_list() {
  return &pass_dungeon_list_;
}

// optional uint32 today_kill_reward_times = 3;
inline bool PlayerTeamDungeonData::has_today_kill_reward_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerTeamDungeonData::set_has_today_kill_reward_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerTeamDungeonData::clear_has_today_kill_reward_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerTeamDungeonData::clear_today_kill_reward_times() {
  today_kill_reward_times_ = 0u;
  clear_has_today_kill_reward_times();
}
inline ::google::protobuf::uint32 PlayerTeamDungeonData::today_kill_reward_times() const {
  return today_kill_reward_times_;
}
inline void PlayerTeamDungeonData::set_today_kill_reward_times(::google::protobuf::uint32 value) {
  set_has_today_kill_reward_times();
  today_kill_reward_times_ = value;
}

// optional uint32 today_mvp_reward_times = 4;
inline bool PlayerTeamDungeonData::has_today_mvp_reward_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerTeamDungeonData::set_has_today_mvp_reward_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerTeamDungeonData::clear_has_today_mvp_reward_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerTeamDungeonData::clear_today_mvp_reward_times() {
  today_mvp_reward_times_ = 0u;
  clear_has_today_mvp_reward_times();
}
inline ::google::protobuf::uint32 PlayerTeamDungeonData::today_mvp_reward_times() const {
  return today_mvp_reward_times_;
}
inline void PlayerTeamDungeonData::set_today_mvp_reward_times(::google::protobuf::uint32 value) {
  set_has_today_mvp_reward_times();
  today_mvp_reward_times_ = value;
}

// -------------------------------------------------------------------

// CardGroupData

// optional uint32 card_id = 1;
inline bool CardGroupData::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CardGroupData::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CardGroupData::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CardGroupData::clear_card_id() {
  card_id_ = 0u;
  clear_has_card_id();
}
inline ::google::protobuf::uint32 CardGroupData::card_id() const {
  return card_id_;
}
inline void CardGroupData::set_card_id(::google::protobuf::uint32 value) {
  set_has_card_id();
  card_id_ = value;
}

// optional uint32 is_already_open = 2;
inline bool CardGroupData::has_is_already_open() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CardGroupData::set_has_is_already_open() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CardGroupData::clear_has_is_already_open() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CardGroupData::clear_is_already_open() {
  is_already_open_ = 0u;
  clear_has_is_already_open();
}
inline ::google::protobuf::uint32 CardGroupData::is_already_open() const {
  return is_already_open_;
}
inline void CardGroupData::set_is_already_open(::google::protobuf::uint32 value) {
  set_has_is_already_open();
  is_already_open_ = value;
}

// -------------------------------------------------------------------

// CollectionGroup

// optional uint32 id = 1;
inline bool CollectionGroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectionGroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectionGroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectionGroup::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CollectionGroup::id() const {
  return id_;
}
inline void CollectionGroup::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 star = 2;
inline bool CollectionGroup::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CollectionGroup::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CollectionGroup::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CollectionGroup::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 CollectionGroup::star() const {
  return star_;
}
inline void CollectionGroup::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// -------------------------------------------------------------------

// CollectionBook

// optional uint32 book_id = 1;
inline bool CollectionBook::has_book_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CollectionBook::set_has_book_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CollectionBook::clear_has_book_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CollectionBook::clear_book_id() {
  book_id_ = 0u;
  clear_has_book_id();
}
inline ::google::protobuf::uint32 CollectionBook::book_id() const {
  return book_id_;
}
inline void CollectionBook::set_book_id(::google::protobuf::uint32 value) {
  set_has_book_id();
  book_id_ = value;
}

// repeated .PB.CollectionGroup collection_group_list = 2;
inline int CollectionBook::collection_group_list_size() const {
  return collection_group_list_.size();
}
inline void CollectionBook::clear_collection_group_list() {
  collection_group_list_.Clear();
}
inline const ::PB::CollectionGroup& CollectionBook::collection_group_list(int index) const {
  return collection_group_list_.Get(index);
}
inline ::PB::CollectionGroup* CollectionBook::mutable_collection_group_list(int index) {
  return collection_group_list_.Mutable(index);
}
inline ::PB::CollectionGroup* CollectionBook::add_collection_group_list() {
  return collection_group_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CollectionGroup >&
CollectionBook::collection_group_list() const {
  return collection_group_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CollectionGroup >*
CollectionBook::mutable_collection_group_list() {
  return &collection_group_list_;
}

// -------------------------------------------------------------------

// RoleZhanBuData

// repeated .PB.Card card_list = 1;
inline int RoleZhanBuData::card_list_size() const {
  return card_list_.size();
}
inline void RoleZhanBuData::clear_card_list() {
  card_list_.Clear();
}
inline const ::PB::Card& RoleZhanBuData::card_list(int index) const {
  return card_list_.Get(index);
}
inline ::PB::Card* RoleZhanBuData::mutable_card_list(int index) {
  return card_list_.Mutable(index);
}
inline ::PB::Card* RoleZhanBuData::add_card_list() {
  return card_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Card >&
RoleZhanBuData::card_list() const {
  return card_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Card >*
RoleZhanBuData::mutable_card_list() {
  return &card_list_;
}

// optional uint32 history_collection_value = 2;
inline bool RoleZhanBuData::has_history_collection_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleZhanBuData::set_has_history_collection_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleZhanBuData::clear_has_history_collection_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleZhanBuData::clear_history_collection_value() {
  history_collection_value_ = 0u;
  clear_has_history_collection_value();
}
inline ::google::protobuf::uint32 RoleZhanBuData::history_collection_value() const {
  return history_collection_value_;
}
inline void RoleZhanBuData::set_history_collection_value(::google::protobuf::uint32 value) {
  set_has_history_collection_value();
  history_collection_value_ = value;
}

// optional uint32 low_card_group_map_idx = 3;
inline bool RoleZhanBuData::has_low_card_group_map_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleZhanBuData::set_has_low_card_group_map_idx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleZhanBuData::clear_has_low_card_group_map_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleZhanBuData::clear_low_card_group_map_idx() {
  low_card_group_map_idx_ = 0u;
  clear_has_low_card_group_map_idx();
}
inline ::google::protobuf::uint32 RoleZhanBuData::low_card_group_map_idx() const {
  return low_card_group_map_idx_;
}
inline void RoleZhanBuData::set_low_card_group_map_idx(::google::protobuf::uint32 value) {
  set_has_low_card_group_map_idx();
  low_card_group_map_idx_ = value;
}

// optional uint32 cur_low_card_group_id = 4;
inline bool RoleZhanBuData::has_cur_low_card_group_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleZhanBuData::set_has_cur_low_card_group_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleZhanBuData::clear_has_cur_low_card_group_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleZhanBuData::clear_cur_low_card_group_id() {
  cur_low_card_group_id_ = 0u;
  clear_has_cur_low_card_group_id();
}
inline ::google::protobuf::uint32 RoleZhanBuData::cur_low_card_group_id() const {
  return cur_low_card_group_id_;
}
inline void RoleZhanBuData::set_cur_low_card_group_id(::google::protobuf::uint32 value) {
  set_has_cur_low_card_group_id();
  cur_low_card_group_id_ = value;
}

// optional uint32 low_card_group_last_recover_time = 5;
inline bool RoleZhanBuData::has_low_card_group_last_recover_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleZhanBuData::set_has_low_card_group_last_recover_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleZhanBuData::clear_has_low_card_group_last_recover_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleZhanBuData::clear_low_card_group_last_recover_time() {
  low_card_group_last_recover_time_ = 0u;
  clear_has_low_card_group_last_recover_time();
}
inline ::google::protobuf::uint32 RoleZhanBuData::low_card_group_last_recover_time() const {
  return low_card_group_last_recover_time_;
}
inline void RoleZhanBuData::set_low_card_group_last_recover_time(::google::protobuf::uint32 value) {
  set_has_low_card_group_last_recover_time();
  low_card_group_last_recover_time_ = value;
}

// optional uint32 cur_low_card_group_refresh_times = 6;
inline bool RoleZhanBuData::has_cur_low_card_group_refresh_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleZhanBuData::set_has_cur_low_card_group_refresh_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleZhanBuData::clear_has_cur_low_card_group_refresh_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleZhanBuData::clear_cur_low_card_group_refresh_times() {
  cur_low_card_group_refresh_times_ = 0u;
  clear_has_cur_low_card_group_refresh_times();
}
inline ::google::protobuf::uint32 RoleZhanBuData::cur_low_card_group_refresh_times() const {
  return cur_low_card_group_refresh_times_;
}
inline void RoleZhanBuData::set_cur_low_card_group_refresh_times(::google::protobuf::uint32 value) {
  set_has_cur_low_card_group_refresh_times();
  cur_low_card_group_refresh_times_ = value;
}

// optional uint32 today_low_card_group_open_card_times = 7;
inline bool RoleZhanBuData::has_today_low_card_group_open_card_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleZhanBuData::set_has_today_low_card_group_open_card_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleZhanBuData::clear_has_today_low_card_group_open_card_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleZhanBuData::clear_today_low_card_group_open_card_times() {
  today_low_card_group_open_card_times_ = 0u;
  clear_has_today_low_card_group_open_card_times();
}
inline ::google::protobuf::uint32 RoleZhanBuData::today_low_card_group_open_card_times() const {
  return today_low_card_group_open_card_times_;
}
inline void RoleZhanBuData::set_today_low_card_group_open_card_times(::google::protobuf::uint32 value) {
  set_has_today_low_card_group_open_card_times();
  today_low_card_group_open_card_times_ = value;
}

// optional uint32 high_card_group_last_refresh_time = 8;
inline bool RoleZhanBuData::has_high_card_group_last_refresh_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleZhanBuData::set_has_high_card_group_last_refresh_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleZhanBuData::clear_has_high_card_group_last_refresh_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleZhanBuData::clear_high_card_group_last_refresh_time() {
  high_card_group_last_refresh_time_ = 0u;
  clear_has_high_card_group_last_refresh_time();
}
inline ::google::protobuf::uint32 RoleZhanBuData::high_card_group_last_refresh_time() const {
  return high_card_group_last_refresh_time_;
}
inline void RoleZhanBuData::set_high_card_group_last_refresh_time(::google::protobuf::uint32 value) {
  set_has_high_card_group_last_refresh_time();
  high_card_group_last_refresh_time_ = value;
}

// repeated .PB.CardGroupData low_card_group = 9;
inline int RoleZhanBuData::low_card_group_size() const {
  return low_card_group_.size();
}
inline void RoleZhanBuData::clear_low_card_group() {
  low_card_group_.Clear();
}
inline const ::PB::CardGroupData& RoleZhanBuData::low_card_group(int index) const {
  return low_card_group_.Get(index);
}
inline ::PB::CardGroupData* RoleZhanBuData::mutable_low_card_group(int index) {
  return low_card_group_.Mutable(index);
}
inline ::PB::CardGroupData* RoleZhanBuData::add_low_card_group() {
  return low_card_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >&
RoleZhanBuData::low_card_group() const {
  return low_card_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >*
RoleZhanBuData::mutable_low_card_group() {
  return &low_card_group_;
}

// repeated .PB.CardGroupData high_card_group = 10;
inline int RoleZhanBuData::high_card_group_size() const {
  return high_card_group_.size();
}
inline void RoleZhanBuData::clear_high_card_group() {
  high_card_group_.Clear();
}
inline const ::PB::CardGroupData& RoleZhanBuData::high_card_group(int index) const {
  return high_card_group_.Get(index);
}
inline ::PB::CardGroupData* RoleZhanBuData::mutable_high_card_group(int index) {
  return high_card_group_.Mutable(index);
}
inline ::PB::CardGroupData* RoleZhanBuData::add_high_card_group() {
  return high_card_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >&
RoleZhanBuData::high_card_group() const {
  return high_card_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CardGroupData >*
RoleZhanBuData::mutable_high_card_group() {
  return &high_card_group_;
}

// repeated .PB.CollectionBook collection_book_list = 11;
inline int RoleZhanBuData::collection_book_list_size() const {
  return collection_book_list_.size();
}
inline void RoleZhanBuData::clear_collection_book_list() {
  collection_book_list_.Clear();
}
inline const ::PB::CollectionBook& RoleZhanBuData::collection_book_list(int index) const {
  return collection_book_list_.Get(index);
}
inline ::PB::CollectionBook* RoleZhanBuData::mutable_collection_book_list(int index) {
  return collection_book_list_.Mutable(index);
}
inline ::PB::CollectionBook* RoleZhanBuData::add_collection_book_list() {
  return collection_book_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CollectionBook >&
RoleZhanBuData::collection_book_list() const {
  return collection_book_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CollectionBook >*
RoleZhanBuData::mutable_collection_book_list() {
  return &collection_book_list_;
}

// optional uint32 achievement_level = 12;
inline bool RoleZhanBuData::has_achievement_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleZhanBuData::set_has_achievement_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleZhanBuData::clear_has_achievement_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleZhanBuData::clear_achievement_level() {
  achievement_level_ = 0u;
  clear_has_achievement_level();
}
inline ::google::protobuf::uint32 RoleZhanBuData::achievement_level() const {
  return achievement_level_;
}
inline void RoleZhanBuData::set_achievement_level(::google::protobuf::uint32 value) {
  set_has_achievement_level();
  achievement_level_ = value;
}

// optional uint32 today_low_card_group_cost_refresh_times = 13;
inline bool RoleZhanBuData::has_today_low_card_group_cost_refresh_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleZhanBuData::set_has_today_low_card_group_cost_refresh_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleZhanBuData::clear_has_today_low_card_group_cost_refresh_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleZhanBuData::clear_today_low_card_group_cost_refresh_times() {
  today_low_card_group_cost_refresh_times_ = 0u;
  clear_has_today_low_card_group_cost_refresh_times();
}
inline ::google::protobuf::uint32 RoleZhanBuData::today_low_card_group_cost_refresh_times() const {
  return today_low_card_group_cost_refresh_times_;
}
inline void RoleZhanBuData::set_today_low_card_group_cost_refresh_times(::google::protobuf::uint32 value) {
  set_has_today_low_card_group_cost_refresh_times();
  today_low_card_group_cost_refresh_times_ = value;
}

// optional uint32 today_high_card_group_cost_refresh_times = 14;
inline bool RoleZhanBuData::has_today_high_card_group_cost_refresh_times() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleZhanBuData::set_has_today_high_card_group_cost_refresh_times() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleZhanBuData::clear_has_today_high_card_group_cost_refresh_times() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleZhanBuData::clear_today_high_card_group_cost_refresh_times() {
  today_high_card_group_cost_refresh_times_ = 0u;
  clear_has_today_high_card_group_cost_refresh_times();
}
inline ::google::protobuf::uint32 RoleZhanBuData::today_high_card_group_cost_refresh_times() const {
  return today_high_card_group_cost_refresh_times_;
}
inline void RoleZhanBuData::set_today_high_card_group_cost_refresh_times(::google::protobuf::uint32 value) {
  set_has_today_high_card_group_cost_refresh_times();
  today_high_card_group_cost_refresh_times_ = value;
}

// -------------------------------------------------------------------

// WorldLevelTaskData

// optional uint32 task_id = 1;
inline bool WorldLevelTaskData::has_task_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldLevelTaskData::set_has_task_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldLevelTaskData::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldLevelTaskData::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 WorldLevelTaskData::task_id() const {
  return task_id_;
}
inline void WorldLevelTaskData::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
}

// optional uint32 context = 2;
inline bool WorldLevelTaskData::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldLevelTaskData::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldLevelTaskData::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldLevelTaskData::clear_context() {
  context_ = 0u;
  clear_has_context();
}
inline ::google::protobuf::uint32 WorldLevelTaskData::context() const {
  return context_;
}
inline void WorldLevelTaskData::set_context(::google::protobuf::uint32 value) {
  set_has_context();
  context_ = value;
}

// optional uint32 is_already_take = 3;
inline bool WorldLevelTaskData::has_is_already_take() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldLevelTaskData::set_has_is_already_take() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldLevelTaskData::clear_has_is_already_take() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldLevelTaskData::clear_is_already_take() {
  is_already_take_ = 0u;
  clear_has_is_already_take();
}
inline ::google::protobuf::uint32 WorldLevelTaskData::is_already_take() const {
  return is_already_take_;
}
inline void WorldLevelTaskData::set_is_already_take(::google::protobuf::uint32 value) {
  set_has_is_already_take();
  is_already_take_ = value;
}

// optional uint32 task_type = 4;
inline bool WorldLevelTaskData::has_task_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldLevelTaskData::set_has_task_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldLevelTaskData::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldLevelTaskData::clear_task_type() {
  task_type_ = 0u;
  clear_has_task_type();
}
inline ::google::protobuf::uint32 WorldLevelTaskData::task_type() const {
  return task_type_;
}
inline void WorldLevelTaskData::set_task_type(::google::protobuf::uint32 value) {
  set_has_task_type();
  task_type_ = value;
}

// optional uint32 task_level = 5;
inline bool WorldLevelTaskData::has_task_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WorldLevelTaskData::set_has_task_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WorldLevelTaskData::clear_has_task_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WorldLevelTaskData::clear_task_level() {
  task_level_ = 0u;
  clear_has_task_level();
}
inline ::google::protobuf::uint32 WorldLevelTaskData::task_level() const {
  return task_level_;
}
inline void WorldLevelTaskData::set_task_level(::google::protobuf::uint32 value) {
  set_has_task_level();
  task_level_ = value;
}

// -------------------------------------------------------------------

// RoleWorldLevelTaskInfo

// optional uint32 is_already_take_final_reward = 1;
inline bool RoleWorldLevelTaskInfo::has_is_already_take_final_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleWorldLevelTaskInfo::set_has_is_already_take_final_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleWorldLevelTaskInfo::clear_has_is_already_take_final_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleWorldLevelTaskInfo::clear_is_already_take_final_reward() {
  is_already_take_final_reward_ = 0u;
  clear_has_is_already_take_final_reward();
}
inline ::google::protobuf::uint32 RoleWorldLevelTaskInfo::is_already_take_final_reward() const {
  return is_already_take_final_reward_;
}
inline void RoleWorldLevelTaskInfo::set_is_already_take_final_reward(::google::protobuf::uint32 value) {
  set_has_is_already_take_final_reward();
  is_already_take_final_reward_ = value;
}

// repeated .PB.WorldLevelTaskData task_event_list = 2;
inline int RoleWorldLevelTaskInfo::task_event_list_size() const {
  return task_event_list_.size();
}
inline void RoleWorldLevelTaskInfo::clear_task_event_list() {
  task_event_list_.Clear();
}
inline const ::PB::WorldLevelTaskData& RoleWorldLevelTaskInfo::task_event_list(int index) const {
  return task_event_list_.Get(index);
}
inline ::PB::WorldLevelTaskData* RoleWorldLevelTaskInfo::mutable_task_event_list(int index) {
  return task_event_list_.Mutable(index);
}
inline ::PB::WorldLevelTaskData* RoleWorldLevelTaskInfo::add_task_event_list() {
  return task_event_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::WorldLevelTaskData >&
RoleWorldLevelTaskInfo::task_event_list() const {
  return task_event_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::WorldLevelTaskData >*
RoleWorldLevelTaskInfo::mutable_task_event_list() {
  return &task_event_list_;
}

// -------------------------------------------------------------------

// RoleHangUpDropData

// optional uint32 last_obtain_reward_time = 1;
inline bool RoleHangUpDropData::has_last_obtain_reward_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleHangUpDropData::set_has_last_obtain_reward_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleHangUpDropData::clear_has_last_obtain_reward_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleHangUpDropData::clear_last_obtain_reward_time() {
  last_obtain_reward_time_ = 0u;
  clear_has_last_obtain_reward_time();
}
inline ::google::protobuf::uint32 RoleHangUpDropData::last_obtain_reward_time() const {
  return last_obtain_reward_time_;
}
inline void RoleHangUpDropData::set_last_obtain_reward_time(::google::protobuf::uint32 value) {
  set_has_last_obtain_reward_time();
  last_obtain_reward_time_ = value;
}

// -------------------------------------------------------------------

// RoleSecondInfo

// optional .PB.RolePVPData pvp_data = 1;
inline bool RoleSecondInfo::has_pvp_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSecondInfo::set_has_pvp_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSecondInfo::clear_has_pvp_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSecondInfo::clear_pvp_data() {
  if (pvp_data_ != NULL) pvp_data_->::PB::RolePVPData::Clear();
  clear_has_pvp_data();
}
inline const ::PB::RolePVPData& RoleSecondInfo::pvp_data() const {
  return pvp_data_ != NULL ? *pvp_data_ : *default_instance_->pvp_data_;
}
inline ::PB::RolePVPData* RoleSecondInfo::mutable_pvp_data() {
  set_has_pvp_data();
  if (pvp_data_ == NULL) pvp_data_ = new ::PB::RolePVPData;
  return pvp_data_;
}
inline ::PB::RolePVPData* RoleSecondInfo::release_pvp_data() {
  clear_has_pvp_data();
  ::PB::RolePVPData* temp = pvp_data_;
  pvp_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_pvp_data(::PB::RolePVPData* pvp_data) {
  delete pvp_data_;
  pvp_data_ = pvp_data;
  if (pvp_data) {
    set_has_pvp_data();
  } else {
    clear_has_pvp_data();
  }
}

// optional .PB.RoleTitleInfo title_info = 2;
inline bool RoleSecondInfo::has_title_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleSecondInfo::set_has_title_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleSecondInfo::clear_has_title_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleSecondInfo::clear_title_info() {
  if (title_info_ != NULL) title_info_->::PB::RoleTitleInfo::Clear();
  clear_has_title_info();
}
inline const ::PB::RoleTitleInfo& RoleSecondInfo::title_info() const {
  return title_info_ != NULL ? *title_info_ : *default_instance_->title_info_;
}
inline ::PB::RoleTitleInfo* RoleSecondInfo::mutable_title_info() {
  set_has_title_info();
  if (title_info_ == NULL) title_info_ = new ::PB::RoleTitleInfo;
  return title_info_;
}
inline ::PB::RoleTitleInfo* RoleSecondInfo::release_title_info() {
  clear_has_title_info();
  ::PB::RoleTitleInfo* temp = title_info_;
  title_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_title_info(::PB::RoleTitleInfo* title_info) {
  delete title_info_;
  title_info_ = title_info;
  if (title_info) {
    set_has_title_info();
  } else {
    clear_has_title_info();
  }
}

// optional .PB.RoleEndlessLandInfo endless_land_info = 3;
inline bool RoleSecondInfo::has_endless_land_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleSecondInfo::set_has_endless_land_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleSecondInfo::clear_has_endless_land_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleSecondInfo::clear_endless_land_info() {
  if (endless_land_info_ != NULL) endless_land_info_->::PB::RoleEndlessLandInfo::Clear();
  clear_has_endless_land_info();
}
inline const ::PB::RoleEndlessLandInfo& RoleSecondInfo::endless_land_info() const {
  return endless_land_info_ != NULL ? *endless_land_info_ : *default_instance_->endless_land_info_;
}
inline ::PB::RoleEndlessLandInfo* RoleSecondInfo::mutable_endless_land_info() {
  set_has_endless_land_info();
  if (endless_land_info_ == NULL) endless_land_info_ = new ::PB::RoleEndlessLandInfo;
  return endless_land_info_;
}
inline ::PB::RoleEndlessLandInfo* RoleSecondInfo::release_endless_land_info() {
  clear_has_endless_land_info();
  ::PB::RoleEndlessLandInfo* temp = endless_land_info_;
  endless_land_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_endless_land_info(::PB::RoleEndlessLandInfo* endless_land_info) {
  delete endless_land_info_;
  endless_land_info_ = endless_land_info;
  if (endless_land_info) {
    set_has_endless_land_info();
  } else {
    clear_has_endless_land_info();
  }
}

// optional .PB.RoleGuildData guild_data = 4;
inline bool RoleSecondInfo::has_guild_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleSecondInfo::set_has_guild_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleSecondInfo::clear_has_guild_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleSecondInfo::clear_guild_data() {
  if (guild_data_ != NULL) guild_data_->::PB::RoleGuildData::Clear();
  clear_has_guild_data();
}
inline const ::PB::RoleGuildData& RoleSecondInfo::guild_data() const {
  return guild_data_ != NULL ? *guild_data_ : *default_instance_->guild_data_;
}
inline ::PB::RoleGuildData* RoleSecondInfo::mutable_guild_data() {
  set_has_guild_data();
  if (guild_data_ == NULL) guild_data_ = new ::PB::RoleGuildData;
  return guild_data_;
}
inline ::PB::RoleGuildData* RoleSecondInfo::release_guild_data() {
  clear_has_guild_data();
  ::PB::RoleGuildData* temp = guild_data_;
  guild_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_guild_data(::PB::RoleGuildData* guild_data) {
  delete guild_data_;
  guild_data_ = guild_data;
  if (guild_data) {
    set_has_guild_data();
  } else {
    clear_has_guild_data();
  }
}

// optional .PB.PlayerLuxurySignInData luxury_sign_in_data = 5;
inline bool RoleSecondInfo::has_luxury_sign_in_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleSecondInfo::set_has_luxury_sign_in_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleSecondInfo::clear_has_luxury_sign_in_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleSecondInfo::clear_luxury_sign_in_data() {
  if (luxury_sign_in_data_ != NULL) luxury_sign_in_data_->::PB::PlayerLuxurySignInData::Clear();
  clear_has_luxury_sign_in_data();
}
inline const ::PB::PlayerLuxurySignInData& RoleSecondInfo::luxury_sign_in_data() const {
  return luxury_sign_in_data_ != NULL ? *luxury_sign_in_data_ : *default_instance_->luxury_sign_in_data_;
}
inline ::PB::PlayerLuxurySignInData* RoleSecondInfo::mutable_luxury_sign_in_data() {
  set_has_luxury_sign_in_data();
  if (luxury_sign_in_data_ == NULL) luxury_sign_in_data_ = new ::PB::PlayerLuxurySignInData;
  return luxury_sign_in_data_;
}
inline ::PB::PlayerLuxurySignInData* RoleSecondInfo::release_luxury_sign_in_data() {
  clear_has_luxury_sign_in_data();
  ::PB::PlayerLuxurySignInData* temp = luxury_sign_in_data_;
  luxury_sign_in_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_luxury_sign_in_data(::PB::PlayerLuxurySignInData* luxury_sign_in_data) {
  delete luxury_sign_in_data_;
  luxury_sign_in_data_ = luxury_sign_in_data;
  if (luxury_sign_in_data) {
    set_has_luxury_sign_in_data();
  } else {
    clear_has_luxury_sign_in_data();
  }
}

// optional .PB.PlayerGemInfo gem_info = 6;
inline bool RoleSecondInfo::has_gem_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleSecondInfo::set_has_gem_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleSecondInfo::clear_has_gem_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleSecondInfo::clear_gem_info() {
  if (gem_info_ != NULL) gem_info_->::PB::PlayerGemInfo::Clear();
  clear_has_gem_info();
}
inline const ::PB::PlayerGemInfo& RoleSecondInfo::gem_info() const {
  return gem_info_ != NULL ? *gem_info_ : *default_instance_->gem_info_;
}
inline ::PB::PlayerGemInfo* RoleSecondInfo::mutable_gem_info() {
  set_has_gem_info();
  if (gem_info_ == NULL) gem_info_ = new ::PB::PlayerGemInfo;
  return gem_info_;
}
inline ::PB::PlayerGemInfo* RoleSecondInfo::release_gem_info() {
  clear_has_gem_info();
  ::PB::PlayerGemInfo* temp = gem_info_;
  gem_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_gem_info(::PB::PlayerGemInfo* gem_info) {
  delete gem_info_;
  gem_info_ = gem_info;
  if (gem_info) {
    set_has_gem_info();
  } else {
    clear_has_gem_info();
  }
}

// optional .PB.RoleItemInfo role_item_info = 7;
inline bool RoleSecondInfo::has_role_item_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleSecondInfo::set_has_role_item_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleSecondInfo::clear_has_role_item_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleSecondInfo::clear_role_item_info() {
  if (role_item_info_ != NULL) role_item_info_->::PB::RoleItemInfo::Clear();
  clear_has_role_item_info();
}
inline const ::PB::RoleItemInfo& RoleSecondInfo::role_item_info() const {
  return role_item_info_ != NULL ? *role_item_info_ : *default_instance_->role_item_info_;
}
inline ::PB::RoleItemInfo* RoleSecondInfo::mutable_role_item_info() {
  set_has_role_item_info();
  if (role_item_info_ == NULL) role_item_info_ = new ::PB::RoleItemInfo;
  return role_item_info_;
}
inline ::PB::RoleItemInfo* RoleSecondInfo::release_role_item_info() {
  clear_has_role_item_info();
  ::PB::RoleItemInfo* temp = role_item_info_;
  role_item_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_item_info(::PB::RoleItemInfo* role_item_info) {
  delete role_item_info_;
  role_item_info_ = role_item_info;
  if (role_item_info) {
    set_has_role_item_info();
  } else {
    clear_has_role_item_info();
  }
}

// optional .PB.RoleEquipmentInfo role_equipment_info = 8;
inline bool RoleSecondInfo::has_role_equipment_info() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleSecondInfo::set_has_role_equipment_info() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleSecondInfo::clear_has_role_equipment_info() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleSecondInfo::clear_role_equipment_info() {
  if (role_equipment_info_ != NULL) role_equipment_info_->::PB::RoleEquipmentInfo::Clear();
  clear_has_role_equipment_info();
}
inline const ::PB::RoleEquipmentInfo& RoleSecondInfo::role_equipment_info() const {
  return role_equipment_info_ != NULL ? *role_equipment_info_ : *default_instance_->role_equipment_info_;
}
inline ::PB::RoleEquipmentInfo* RoleSecondInfo::mutable_role_equipment_info() {
  set_has_role_equipment_info();
  if (role_equipment_info_ == NULL) role_equipment_info_ = new ::PB::RoleEquipmentInfo;
  return role_equipment_info_;
}
inline ::PB::RoleEquipmentInfo* RoleSecondInfo::release_role_equipment_info() {
  clear_has_role_equipment_info();
  ::PB::RoleEquipmentInfo* temp = role_equipment_info_;
  role_equipment_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_equipment_info(::PB::RoleEquipmentInfo* role_equipment_info) {
  delete role_equipment_info_;
  role_equipment_info_ = role_equipment_info;
  if (role_equipment_info) {
    set_has_role_equipment_info();
  } else {
    clear_has_role_equipment_info();
  }
}

// optional .PB.RoleTreasureInfo role_treasure_info = 9;
inline bool RoleSecondInfo::has_role_treasure_info() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleSecondInfo::set_has_role_treasure_info() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleSecondInfo::clear_has_role_treasure_info() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleSecondInfo::clear_role_treasure_info() {
  if (role_treasure_info_ != NULL) role_treasure_info_->::PB::RoleTreasureInfo::Clear();
  clear_has_role_treasure_info();
}
inline const ::PB::RoleTreasureInfo& RoleSecondInfo::role_treasure_info() const {
  return role_treasure_info_ != NULL ? *role_treasure_info_ : *default_instance_->role_treasure_info_;
}
inline ::PB::RoleTreasureInfo* RoleSecondInfo::mutable_role_treasure_info() {
  set_has_role_treasure_info();
  if (role_treasure_info_ == NULL) role_treasure_info_ = new ::PB::RoleTreasureInfo;
  return role_treasure_info_;
}
inline ::PB::RoleTreasureInfo* RoleSecondInfo::release_role_treasure_info() {
  clear_has_role_treasure_info();
  ::PB::RoleTreasureInfo* temp = role_treasure_info_;
  role_treasure_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_treasure_info(::PB::RoleTreasureInfo* role_treasure_info) {
  delete role_treasure_info_;
  role_treasure_info_ = role_treasure_info;
  if (role_treasure_info) {
    set_has_role_treasure_info();
  } else {
    clear_has_role_treasure_info();
  }
}

// optional .PB.RoleShopInfo role_shop_info = 10;
inline bool RoleSecondInfo::has_role_shop_info() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleSecondInfo::set_has_role_shop_info() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleSecondInfo::clear_has_role_shop_info() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleSecondInfo::clear_role_shop_info() {
  if (role_shop_info_ != NULL) role_shop_info_->::PB::RoleShopInfo::Clear();
  clear_has_role_shop_info();
}
inline const ::PB::RoleShopInfo& RoleSecondInfo::role_shop_info() const {
  return role_shop_info_ != NULL ? *role_shop_info_ : *default_instance_->role_shop_info_;
}
inline ::PB::RoleShopInfo* RoleSecondInfo::mutable_role_shop_info() {
  set_has_role_shop_info();
  if (role_shop_info_ == NULL) role_shop_info_ = new ::PB::RoleShopInfo;
  return role_shop_info_;
}
inline ::PB::RoleShopInfo* RoleSecondInfo::release_role_shop_info() {
  clear_has_role_shop_info();
  ::PB::RoleShopInfo* temp = role_shop_info_;
  role_shop_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_shop_info(::PB::RoleShopInfo* role_shop_info) {
  delete role_shop_info_;
  role_shop_info_ = role_shop_info;
  if (role_shop_info) {
    set_has_role_shop_info();
  } else {
    clear_has_role_shop_info();
  }
}

// optional .PB.RoleSpiritInfo role_sprite_info = 11;
inline bool RoleSecondInfo::has_role_sprite_info() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleSecondInfo::set_has_role_sprite_info() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleSecondInfo::clear_has_role_sprite_info() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleSecondInfo::clear_role_sprite_info() {
  if (role_sprite_info_ != NULL) role_sprite_info_->::PB::RoleSpiritInfo::Clear();
  clear_has_role_sprite_info();
}
inline const ::PB::RoleSpiritInfo& RoleSecondInfo::role_sprite_info() const {
  return role_sprite_info_ != NULL ? *role_sprite_info_ : *default_instance_->role_sprite_info_;
}
inline ::PB::RoleSpiritInfo* RoleSecondInfo::mutable_role_sprite_info() {
  set_has_role_sprite_info();
  if (role_sprite_info_ == NULL) role_sprite_info_ = new ::PB::RoleSpiritInfo;
  return role_sprite_info_;
}
inline ::PB::RoleSpiritInfo* RoleSecondInfo::release_role_sprite_info() {
  clear_has_role_sprite_info();
  ::PB::RoleSpiritInfo* temp = role_sprite_info_;
  role_sprite_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_sprite_info(::PB::RoleSpiritInfo* role_sprite_info) {
  delete role_sprite_info_;
  role_sprite_info_ = role_sprite_info;
  if (role_sprite_info) {
    set_has_role_sprite_info();
  } else {
    clear_has_role_sprite_info();
  }
}

// optional .PB.RoleRebelInfo role_rebel_info = 12;
inline bool RoleSecondInfo::has_role_rebel_info() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleSecondInfo::set_has_role_rebel_info() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleSecondInfo::clear_has_role_rebel_info() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleSecondInfo::clear_role_rebel_info() {
  if (role_rebel_info_ != NULL) role_rebel_info_->::PB::RoleRebelInfo::Clear();
  clear_has_role_rebel_info();
}
inline const ::PB::RoleRebelInfo& RoleSecondInfo::role_rebel_info() const {
  return role_rebel_info_ != NULL ? *role_rebel_info_ : *default_instance_->role_rebel_info_;
}
inline ::PB::RoleRebelInfo* RoleSecondInfo::mutable_role_rebel_info() {
  set_has_role_rebel_info();
  if (role_rebel_info_ == NULL) role_rebel_info_ = new ::PB::RoleRebelInfo;
  return role_rebel_info_;
}
inline ::PB::RoleRebelInfo* RoleSecondInfo::release_role_rebel_info() {
  clear_has_role_rebel_info();
  ::PB::RoleRebelInfo* temp = role_rebel_info_;
  role_rebel_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_rebel_info(::PB::RoleRebelInfo* role_rebel_info) {
  delete role_rebel_info_;
  role_rebel_info_ = role_rebel_info;
  if (role_rebel_info) {
    set_has_role_rebel_info();
  } else {
    clear_has_role_rebel_info();
  }
}

// optional .PB.RoleDuobaoInfo role_duobao_info = 13;
inline bool RoleSecondInfo::has_role_duobao_info() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleSecondInfo::set_has_role_duobao_info() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleSecondInfo::clear_has_role_duobao_info() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleSecondInfo::clear_role_duobao_info() {
  if (role_duobao_info_ != NULL) role_duobao_info_->::PB::RoleDuobaoInfo::Clear();
  clear_has_role_duobao_info();
}
inline const ::PB::RoleDuobaoInfo& RoleSecondInfo::role_duobao_info() const {
  return role_duobao_info_ != NULL ? *role_duobao_info_ : *default_instance_->role_duobao_info_;
}
inline ::PB::RoleDuobaoInfo* RoleSecondInfo::mutable_role_duobao_info() {
  set_has_role_duobao_info();
  if (role_duobao_info_ == NULL) role_duobao_info_ = new ::PB::RoleDuobaoInfo;
  return role_duobao_info_;
}
inline ::PB::RoleDuobaoInfo* RoleSecondInfo::release_role_duobao_info() {
  clear_has_role_duobao_info();
  ::PB::RoleDuobaoInfo* temp = role_duobao_info_;
  role_duobao_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_duobao_info(::PB::RoleDuobaoInfo* role_duobao_info) {
  delete role_duobao_info_;
  role_duobao_info_ = role_duobao_info;
  if (role_duobao_info) {
    set_has_role_duobao_info();
  } else {
    clear_has_role_duobao_info();
  }
}

// optional .PB.RoleFBInfo role_fb_info = 14;
inline bool RoleSecondInfo::has_role_fb_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleSecondInfo::set_has_role_fb_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleSecondInfo::clear_has_role_fb_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleSecondInfo::clear_role_fb_info() {
  if (role_fb_info_ != NULL) role_fb_info_->::PB::RoleFBInfo::Clear();
  clear_has_role_fb_info();
}
inline const ::PB::RoleFBInfo& RoleSecondInfo::role_fb_info() const {
  return role_fb_info_ != NULL ? *role_fb_info_ : *default_instance_->role_fb_info_;
}
inline ::PB::RoleFBInfo* RoleSecondInfo::mutable_role_fb_info() {
  set_has_role_fb_info();
  if (role_fb_info_ == NULL) role_fb_info_ = new ::PB::RoleFBInfo;
  return role_fb_info_;
}
inline ::PB::RoleFBInfo* RoleSecondInfo::release_role_fb_info() {
  clear_has_role_fb_info();
  ::PB::RoleFBInfo* temp = role_fb_info_;
  role_fb_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_fb_info(::PB::RoleFBInfo* role_fb_info) {
  delete role_fb_info_;
  role_fb_info_ = role_fb_info;
  if (role_fb_info) {
    set_has_role_fb_info();
  } else {
    clear_has_role_fb_info();
  }
}

// optional .PB.RoleAchievemntInfo role_achievement_info = 15;
inline bool RoleSecondInfo::has_role_achievement_info() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleSecondInfo::set_has_role_achievement_info() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleSecondInfo::clear_has_role_achievement_info() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleSecondInfo::clear_role_achievement_info() {
  if (role_achievement_info_ != NULL) role_achievement_info_->::PB::RoleAchievemntInfo::Clear();
  clear_has_role_achievement_info();
}
inline const ::PB::RoleAchievemntInfo& RoleSecondInfo::role_achievement_info() const {
  return role_achievement_info_ != NULL ? *role_achievement_info_ : *default_instance_->role_achievement_info_;
}
inline ::PB::RoleAchievemntInfo* RoleSecondInfo::mutable_role_achievement_info() {
  set_has_role_achievement_info();
  if (role_achievement_info_ == NULL) role_achievement_info_ = new ::PB::RoleAchievemntInfo;
  return role_achievement_info_;
}
inline ::PB::RoleAchievemntInfo* RoleSecondInfo::release_role_achievement_info() {
  clear_has_role_achievement_info();
  ::PB::RoleAchievemntInfo* temp = role_achievement_info_;
  role_achievement_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_achievement_info(::PB::RoleAchievemntInfo* role_achievement_info) {
  delete role_achievement_info_;
  role_achievement_info_ = role_achievement_info;
  if (role_achievement_info) {
    set_has_role_achievement_info();
  } else {
    clear_has_role_achievement_info();
  }
}

// optional .PB.RoleDailyMissionInfo role_daily_mission_info = 16;
inline bool RoleSecondInfo::has_role_daily_mission_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleSecondInfo::set_has_role_daily_mission_info() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleSecondInfo::clear_has_role_daily_mission_info() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleSecondInfo::clear_role_daily_mission_info() {
  if (role_daily_mission_info_ != NULL) role_daily_mission_info_->::PB::RoleDailyMissionInfo::Clear();
  clear_has_role_daily_mission_info();
}
inline const ::PB::RoleDailyMissionInfo& RoleSecondInfo::role_daily_mission_info() const {
  return role_daily_mission_info_ != NULL ? *role_daily_mission_info_ : *default_instance_->role_daily_mission_info_;
}
inline ::PB::RoleDailyMissionInfo* RoleSecondInfo::mutable_role_daily_mission_info() {
  set_has_role_daily_mission_info();
  if (role_daily_mission_info_ == NULL) role_daily_mission_info_ = new ::PB::RoleDailyMissionInfo;
  return role_daily_mission_info_;
}
inline ::PB::RoleDailyMissionInfo* RoleSecondInfo::release_role_daily_mission_info() {
  clear_has_role_daily_mission_info();
  ::PB::RoleDailyMissionInfo* temp = role_daily_mission_info_;
  role_daily_mission_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_daily_mission_info(::PB::RoleDailyMissionInfo* role_daily_mission_info) {
  delete role_daily_mission_info_;
  role_daily_mission_info_ = role_daily_mission_info;
  if (role_daily_mission_info) {
    set_has_role_daily_mission_info();
  } else {
    clear_has_role_daily_mission_info();
  }
}

// optional .PB.RoleGuildSkillInfo role_guild_skill_info = 17;
inline bool RoleSecondInfo::has_role_guild_skill_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleSecondInfo::set_has_role_guild_skill_info() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleSecondInfo::clear_has_role_guild_skill_info() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleSecondInfo::clear_role_guild_skill_info() {
  if (role_guild_skill_info_ != NULL) role_guild_skill_info_->::PB::RoleGuildSkillInfo::Clear();
  clear_has_role_guild_skill_info();
}
inline const ::PB::RoleGuildSkillInfo& RoleSecondInfo::role_guild_skill_info() const {
  return role_guild_skill_info_ != NULL ? *role_guild_skill_info_ : *default_instance_->role_guild_skill_info_;
}
inline ::PB::RoleGuildSkillInfo* RoleSecondInfo::mutable_role_guild_skill_info() {
  set_has_role_guild_skill_info();
  if (role_guild_skill_info_ == NULL) role_guild_skill_info_ = new ::PB::RoleGuildSkillInfo;
  return role_guild_skill_info_;
}
inline ::PB::RoleGuildSkillInfo* RoleSecondInfo::release_role_guild_skill_info() {
  clear_has_role_guild_skill_info();
  ::PB::RoleGuildSkillInfo* temp = role_guild_skill_info_;
  role_guild_skill_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_guild_skill_info(::PB::RoleGuildSkillInfo* role_guild_skill_info) {
  delete role_guild_skill_info_;
  role_guild_skill_info_ = role_guild_skill_info;
  if (role_guild_skill_info) {
    set_has_role_guild_skill_info();
  } else {
    clear_has_role_guild_skill_info();
  }
}

// optional .PB.RoleSignInData role_sign_in_data = 18;
inline bool RoleSecondInfo::has_role_sign_in_data() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleSecondInfo::set_has_role_sign_in_data() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleSecondInfo::clear_has_role_sign_in_data() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleSecondInfo::clear_role_sign_in_data() {
  if (role_sign_in_data_ != NULL) role_sign_in_data_->::PB::RoleSignInData::Clear();
  clear_has_role_sign_in_data();
}
inline const ::PB::RoleSignInData& RoleSecondInfo::role_sign_in_data() const {
  return role_sign_in_data_ != NULL ? *role_sign_in_data_ : *default_instance_->role_sign_in_data_;
}
inline ::PB::RoleSignInData* RoleSecondInfo::mutable_role_sign_in_data() {
  set_has_role_sign_in_data();
  if (role_sign_in_data_ == NULL) role_sign_in_data_ = new ::PB::RoleSignInData;
  return role_sign_in_data_;
}
inline ::PB::RoleSignInData* RoleSecondInfo::release_role_sign_in_data() {
  clear_has_role_sign_in_data();
  ::PB::RoleSignInData* temp = role_sign_in_data_;
  role_sign_in_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_sign_in_data(::PB::RoleSignInData* role_sign_in_data) {
  delete role_sign_in_data_;
  role_sign_in_data_ = role_sign_in_data;
  if (role_sign_in_data) {
    set_has_role_sign_in_data();
  } else {
    clear_has_role_sign_in_data();
  }
}

// optional .PB.LoginRewardData login_reward_data = 19;
inline bool RoleSecondInfo::has_login_reward_data() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleSecondInfo::set_has_login_reward_data() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleSecondInfo::clear_has_login_reward_data() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleSecondInfo::clear_login_reward_data() {
  if (login_reward_data_ != NULL) login_reward_data_->::PB::LoginRewardData::Clear();
  clear_has_login_reward_data();
}
inline const ::PB::LoginRewardData& RoleSecondInfo::login_reward_data() const {
  return login_reward_data_ != NULL ? *login_reward_data_ : *default_instance_->login_reward_data_;
}
inline ::PB::LoginRewardData* RoleSecondInfo::mutable_login_reward_data() {
  set_has_login_reward_data();
  if (login_reward_data_ == NULL) login_reward_data_ = new ::PB::LoginRewardData;
  return login_reward_data_;
}
inline ::PB::LoginRewardData* RoleSecondInfo::release_login_reward_data() {
  clear_has_login_reward_data();
  ::PB::LoginRewardData* temp = login_reward_data_;
  login_reward_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_login_reward_data(::PB::LoginRewardData* login_reward_data) {
  delete login_reward_data_;
  login_reward_data_ = login_reward_data;
  if (login_reward_data) {
    set_has_login_reward_data();
  } else {
    clear_has_login_reward_data();
  }
}

// optional .PB.RoleKingMatchData king_match_data = 20;
inline bool RoleSecondInfo::has_king_match_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoleSecondInfo::set_has_king_match_data() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoleSecondInfo::clear_has_king_match_data() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoleSecondInfo::clear_king_match_data() {
  if (king_match_data_ != NULL) king_match_data_->::PB::RoleKingMatchData::Clear();
  clear_has_king_match_data();
}
inline const ::PB::RoleKingMatchData& RoleSecondInfo::king_match_data() const {
  return king_match_data_ != NULL ? *king_match_data_ : *default_instance_->king_match_data_;
}
inline ::PB::RoleKingMatchData* RoleSecondInfo::mutable_king_match_data() {
  set_has_king_match_data();
  if (king_match_data_ == NULL) king_match_data_ = new ::PB::RoleKingMatchData;
  return king_match_data_;
}
inline ::PB::RoleKingMatchData* RoleSecondInfo::release_king_match_data() {
  clear_has_king_match_data();
  ::PB::RoleKingMatchData* temp = king_match_data_;
  king_match_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_king_match_data(::PB::RoleKingMatchData* king_match_data) {
  delete king_match_data_;
  king_match_data_ = king_match_data;
  if (king_match_data) {
    set_has_king_match_data();
  } else {
    clear_has_king_match_data();
  }
}

// optional .PB.PlayerTeamDungeonData team_dungeon_data = 21;
inline bool RoleSecondInfo::has_team_dungeon_data() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoleSecondInfo::set_has_team_dungeon_data() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoleSecondInfo::clear_has_team_dungeon_data() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoleSecondInfo::clear_team_dungeon_data() {
  if (team_dungeon_data_ != NULL) team_dungeon_data_->::PB::PlayerTeamDungeonData::Clear();
  clear_has_team_dungeon_data();
}
inline const ::PB::PlayerTeamDungeonData& RoleSecondInfo::team_dungeon_data() const {
  return team_dungeon_data_ != NULL ? *team_dungeon_data_ : *default_instance_->team_dungeon_data_;
}
inline ::PB::PlayerTeamDungeonData* RoleSecondInfo::mutable_team_dungeon_data() {
  set_has_team_dungeon_data();
  if (team_dungeon_data_ == NULL) team_dungeon_data_ = new ::PB::PlayerTeamDungeonData;
  return team_dungeon_data_;
}
inline ::PB::PlayerTeamDungeonData* RoleSecondInfo::release_team_dungeon_data() {
  clear_has_team_dungeon_data();
  ::PB::PlayerTeamDungeonData* temp = team_dungeon_data_;
  team_dungeon_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_team_dungeon_data(::PB::PlayerTeamDungeonData* team_dungeon_data) {
  delete team_dungeon_data_;
  team_dungeon_data_ = team_dungeon_data;
  if (team_dungeon_data) {
    set_has_team_dungeon_data();
  } else {
    clear_has_team_dungeon_data();
  }
}

// optional .PB.RoleZhanBuData role_zhanbu_data = 22;
inline bool RoleSecondInfo::has_role_zhanbu_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoleSecondInfo::set_has_role_zhanbu_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoleSecondInfo::clear_has_role_zhanbu_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoleSecondInfo::clear_role_zhanbu_data() {
  if (role_zhanbu_data_ != NULL) role_zhanbu_data_->::PB::RoleZhanBuData::Clear();
  clear_has_role_zhanbu_data();
}
inline const ::PB::RoleZhanBuData& RoleSecondInfo::role_zhanbu_data() const {
  return role_zhanbu_data_ != NULL ? *role_zhanbu_data_ : *default_instance_->role_zhanbu_data_;
}
inline ::PB::RoleZhanBuData* RoleSecondInfo::mutable_role_zhanbu_data() {
  set_has_role_zhanbu_data();
  if (role_zhanbu_data_ == NULL) role_zhanbu_data_ = new ::PB::RoleZhanBuData;
  return role_zhanbu_data_;
}
inline ::PB::RoleZhanBuData* RoleSecondInfo::release_role_zhanbu_data() {
  clear_has_role_zhanbu_data();
  ::PB::RoleZhanBuData* temp = role_zhanbu_data_;
  role_zhanbu_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_zhanbu_data(::PB::RoleZhanBuData* role_zhanbu_data) {
  delete role_zhanbu_data_;
  role_zhanbu_data_ = role_zhanbu_data;
  if (role_zhanbu_data) {
    set_has_role_zhanbu_data();
  } else {
    clear_has_role_zhanbu_data();
  }
}

// optional .PB.RoleWorldLevelTaskInfo role_world_level_task_info = 23;
inline bool RoleSecondInfo::has_role_world_level_task_info() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoleSecondInfo::set_has_role_world_level_task_info() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoleSecondInfo::clear_has_role_world_level_task_info() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoleSecondInfo::clear_role_world_level_task_info() {
  if (role_world_level_task_info_ != NULL) role_world_level_task_info_->::PB::RoleWorldLevelTaskInfo::Clear();
  clear_has_role_world_level_task_info();
}
inline const ::PB::RoleWorldLevelTaskInfo& RoleSecondInfo::role_world_level_task_info() const {
  return role_world_level_task_info_ != NULL ? *role_world_level_task_info_ : *default_instance_->role_world_level_task_info_;
}
inline ::PB::RoleWorldLevelTaskInfo* RoleSecondInfo::mutable_role_world_level_task_info() {
  set_has_role_world_level_task_info();
  if (role_world_level_task_info_ == NULL) role_world_level_task_info_ = new ::PB::RoleWorldLevelTaskInfo;
  return role_world_level_task_info_;
}
inline ::PB::RoleWorldLevelTaskInfo* RoleSecondInfo::release_role_world_level_task_info() {
  clear_has_role_world_level_task_info();
  ::PB::RoleWorldLevelTaskInfo* temp = role_world_level_task_info_;
  role_world_level_task_info_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_world_level_task_info(::PB::RoleWorldLevelTaskInfo* role_world_level_task_info) {
  delete role_world_level_task_info_;
  role_world_level_task_info_ = role_world_level_task_info;
  if (role_world_level_task_info) {
    set_has_role_world_level_task_info();
  } else {
    clear_has_role_world_level_task_info();
  }
}

// optional .PB.RoleHangUpDropData role_hang_up_drop_data = 24;
inline bool RoleSecondInfo::has_role_hang_up_drop_data() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoleSecondInfo::set_has_role_hang_up_drop_data() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoleSecondInfo::clear_has_role_hang_up_drop_data() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoleSecondInfo::clear_role_hang_up_drop_data() {
  if (role_hang_up_drop_data_ != NULL) role_hang_up_drop_data_->::PB::RoleHangUpDropData::Clear();
  clear_has_role_hang_up_drop_data();
}
inline const ::PB::RoleHangUpDropData& RoleSecondInfo::role_hang_up_drop_data() const {
  return role_hang_up_drop_data_ != NULL ? *role_hang_up_drop_data_ : *default_instance_->role_hang_up_drop_data_;
}
inline ::PB::RoleHangUpDropData* RoleSecondInfo::mutable_role_hang_up_drop_data() {
  set_has_role_hang_up_drop_data();
  if (role_hang_up_drop_data_ == NULL) role_hang_up_drop_data_ = new ::PB::RoleHangUpDropData;
  return role_hang_up_drop_data_;
}
inline ::PB::RoleHangUpDropData* RoleSecondInfo::release_role_hang_up_drop_data() {
  clear_has_role_hang_up_drop_data();
  ::PB::RoleHangUpDropData* temp = role_hang_up_drop_data_;
  role_hang_up_drop_data_ = NULL;
  return temp;
}
inline void RoleSecondInfo::set_allocated_role_hang_up_drop_data(::PB::RoleHangUpDropData* role_hang_up_drop_data) {
  delete role_hang_up_drop_data_;
  role_hang_up_drop_data_ = role_hang_up_drop_data;
  if (role_hang_up_drop_data) {
    set_has_role_hang_up_drop_data();
  } else {
    clear_has_role_hang_up_drop_data();
  }
}

// -------------------------------------------------------------------

// RewardData

// optional uint32 uid = 1;
inline bool RewardData::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardData::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RewardData::uid() const {
  return uid_;
}
inline void RewardData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional uint32 info_id = 2;
inline bool RewardData::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardData::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardData::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardData::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 RewardData::info_id() const {
  return info_id_;
}
inline void RewardData::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// optional uint32 value1 = 3;
inline bool RewardData::has_value1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardData::set_has_value1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardData::clear_has_value1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardData::clear_value1() {
  value1_ = 0u;
  clear_has_value1();
}
inline ::google::protobuf::uint32 RewardData::value1() const {
  return value1_;
}
inline void RewardData::set_value1(::google::protobuf::uint32 value) {
  set_has_value1();
  value1_ = value;
}

// optional uint32 value2 = 4;
inline bool RewardData::has_value2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RewardData::set_has_value2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RewardData::clear_has_value2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RewardData::clear_value2() {
  value2_ = 0u;
  clear_has_value2();
}
inline ::google::protobuf::uint32 RewardData::value2() const {
  return value2_;
}
inline void RewardData::set_value2(::google::protobuf::uint32 value) {
  set_has_value2();
  value2_ = value;
}

// optional uint32 time = 5;
inline bool RewardData::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RewardData::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RewardData::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RewardData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 RewardData::time() const {
  return time_;
}
inline void RewardData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required string text = 6;
inline bool RewardData::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RewardData::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RewardData::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RewardData::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& RewardData::text() const {
  return *text_;
}
inline void RewardData::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void RewardData::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void RewardData::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RewardData::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* RewardData::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RewardData::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RoleRewardData

// repeated .PB.RewardData reward_list = 1;
inline int RoleRewardData::reward_list_size() const {
  return reward_list_.size();
}
inline void RoleRewardData::clear_reward_list() {
  reward_list_.Clear();
}
inline const ::PB::RewardData& RoleRewardData::reward_list(int index) const {
  return reward_list_.Get(index);
}
inline ::PB::RewardData* RoleRewardData::mutable_reward_list(int index) {
  return reward_list_.Mutable(index);
}
inline ::PB::RewardData* RoleRewardData::add_reward_list() {
  return reward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RewardData >&
RoleRewardData::reward_list() const {
  return reward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RewardData >*
RoleRewardData::mutable_reward_list() {
  return &reward_list_;
}

// -------------------------------------------------------------------

// YCSData

// optional uint32 today_get_times = 1;
inline bool YCSData::has_today_get_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YCSData::set_has_today_get_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YCSData::clear_has_today_get_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YCSData::clear_today_get_times() {
  today_get_times_ = 0u;
  clear_has_today_get_times();
}
inline ::google::protobuf::uint32 YCSData::today_get_times() const {
  return today_get_times_;
}
inline void YCSData::set_today_get_times(::google::protobuf::uint32 value) {
  set_has_today_get_times();
  today_get_times_ = value;
}

// optional uint32 total_get_times = 2;
inline bool YCSData::has_total_get_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YCSData::set_has_total_get_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YCSData::clear_has_total_get_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YCSData::clear_total_get_times() {
  total_get_times_ = 0u;
  clear_has_total_get_times();
}
inline ::google::protobuf::uint32 YCSData::total_get_times() const {
  return total_get_times_;
}
inline void YCSData::set_total_get_times(::google::protobuf::uint32 value) {
  set_has_total_get_times();
  total_get_times_ = value;
}

// optional uint32 total_reward_value = 3;
inline bool YCSData::has_total_reward_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YCSData::set_has_total_reward_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YCSData::clear_has_total_reward_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YCSData::clear_total_reward_value() {
  total_reward_value_ = 0u;
  clear_has_total_reward_value();
}
inline ::google::protobuf::uint32 YCSData::total_reward_value() const {
  return total_reward_value_;
}
inline void YCSData::set_total_reward_value(::google::protobuf::uint32 value) {
  set_has_total_reward_value();
  total_reward_value_ = value;
}

// optional uint32 last_get_time = 4;
inline bool YCSData::has_last_get_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YCSData::set_has_last_get_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YCSData::clear_has_last_get_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YCSData::clear_last_get_time() {
  last_get_time_ = 0u;
  clear_has_last_get_time();
}
inline ::google::protobuf::uint32 YCSData::last_get_time() const {
  return last_get_time_;
}
inline void YCSData::set_last_get_time(::google::protobuf::uint32 value) {
  set_has_last_get_time();
  last_get_time_ = value;
}

// -------------------------------------------------------------------

// TQTData

// optional uint32 last_get_time = 1;
inline bool TQTData::has_last_get_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TQTData::set_has_last_get_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TQTData::clear_has_last_get_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TQTData::clear_last_get_time() {
  last_get_time_ = 0u;
  clear_has_last_get_time();
}
inline ::google::protobuf::uint32 TQTData::last_get_time() const {
  return last_get_time_;
}
inline void TQTData::set_last_get_time(::google::protobuf::uint32 value) {
  set_has_last_get_time();
  last_get_time_ = value;
}

// repeated uint32 take_record_list = 2;
inline int TQTData::take_record_list_size() const {
  return take_record_list_.size();
}
inline void TQTData::clear_take_record_list() {
  take_record_list_.Clear();
}
inline ::google::protobuf::uint32 TQTData::take_record_list(int index) const {
  return take_record_list_.Get(index);
}
inline void TQTData::set_take_record_list(int index, ::google::protobuf::uint32 value) {
  take_record_list_.Set(index, value);
}
inline void TQTData::add_take_record_list(::google::protobuf::uint32 value) {
  take_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TQTData::take_record_list() const {
  return take_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TQTData::mutable_take_record_list() {
  return &take_record_list_;
}

// -------------------------------------------------------------------

// SevenDayTargetData

// optional uint32 target_id = 1;
inline bool SevenDayTargetData::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SevenDayTargetData::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SevenDayTargetData::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SevenDayTargetData::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 SevenDayTargetData::target_id() const {
  return target_id_;
}
inline void SevenDayTargetData::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 value = 2;
inline bool SevenDayTargetData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SevenDayTargetData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SevenDayTargetData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SevenDayTargetData::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 SevenDayTargetData::value() const {
  return value_;
}
inline void SevenDayTargetData::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional uint32 is_get_reward = 3;
inline bool SevenDayTargetData::has_is_get_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SevenDayTargetData::set_has_is_get_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SevenDayTargetData::clear_has_is_get_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SevenDayTargetData::clear_is_get_reward() {
  is_get_reward_ = 0u;
  clear_has_is_get_reward();
}
inline ::google::protobuf::uint32 SevenDayTargetData::is_get_reward() const {
  return is_get_reward_;
}
inline void SevenDayTargetData::set_is_get_reward(::google::protobuf::uint32 value) {
  set_has_is_get_reward();
  is_get_reward_ = value;
}

// -------------------------------------------------------------------

// LevelShopActivityData

// optional uint32 level = 1;
inline bool LevelShopActivityData::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LevelShopActivityData::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LevelShopActivityData::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LevelShopActivityData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 LevelShopActivityData::level() const {
  return level_;
}
inline void LevelShopActivityData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 activate_time = 2;
inline bool LevelShopActivityData::has_activate_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LevelShopActivityData::set_has_activate_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LevelShopActivityData::clear_has_activate_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LevelShopActivityData::clear_activate_time() {
  activate_time_ = 0u;
  clear_has_activate_time();
}
inline ::google::protobuf::uint32 LevelShopActivityData::activate_time() const {
  return activate_time_;
}
inline void LevelShopActivityData::set_activate_time(::google::protobuf::uint32 value) {
  set_has_activate_time();
  activate_time_ = value;
}

// -------------------------------------------------------------------

// Gift

// optional uint32 id = 1;
inline bool Gift::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Gift::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Gift::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Gift::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 Gift::id() const {
  return id_;
}
inline void Gift::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool Gift::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Gift::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Gift::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Gift::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Gift::num() const {
  return num_;
}
inline void Gift::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// VipGiftData

// optional uint32 init_vip_level = 1;
inline bool VipGiftData::has_init_vip_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VipGiftData::set_has_init_vip_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VipGiftData::clear_has_init_vip_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VipGiftData::clear_init_vip_level() {
  init_vip_level_ = 0u;
  clear_has_init_vip_level();
}
inline ::google::protobuf::uint32 VipGiftData::init_vip_level() const {
  return init_vip_level_;
}
inline void VipGiftData::set_init_vip_level(::google::protobuf::uint32 value) {
  set_has_init_vip_level();
  init_vip_level_ = value;
}

// optional int32 vip_level_reward_record = 2;
inline bool VipGiftData::has_vip_level_reward_record() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VipGiftData::set_has_vip_level_reward_record() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VipGiftData::clear_has_vip_level_reward_record() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VipGiftData::clear_vip_level_reward_record() {
  vip_level_reward_record_ = 0;
  clear_has_vip_level_reward_record();
}
inline ::google::protobuf::int32 VipGiftData::vip_level_reward_record() const {
  return vip_level_reward_record_;
}
inline void VipGiftData::set_vip_level_reward_record(::google::protobuf::int32 value) {
  set_has_vip_level_reward_record();
  vip_level_reward_record_ = value;
}

// repeated .PB.Gift week_gift_list = 3;
inline int VipGiftData::week_gift_list_size() const {
  return week_gift_list_.size();
}
inline void VipGiftData::clear_week_gift_list() {
  week_gift_list_.Clear();
}
inline const ::PB::Gift& VipGiftData::week_gift_list(int index) const {
  return week_gift_list_.Get(index);
}
inline ::PB::Gift* VipGiftData::mutable_week_gift_list(int index) {
  return week_gift_list_.Mutable(index);
}
inline ::PB::Gift* VipGiftData::add_week_gift_list() {
  return week_gift_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::Gift >&
VipGiftData::week_gift_list() const {
  return week_gift_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::Gift >*
VipGiftData::mutable_week_gift_list() {
  return &week_gift_list_;
}

// optional uint32 today_recommend_recharge_reward_id = 4;
inline bool VipGiftData::has_today_recommend_recharge_reward_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VipGiftData::set_has_today_recommend_recharge_reward_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VipGiftData::clear_has_today_recommend_recharge_reward_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VipGiftData::clear_today_recommend_recharge_reward_id() {
  today_recommend_recharge_reward_id_ = 0u;
  clear_has_today_recommend_recharge_reward_id();
}
inline ::google::protobuf::uint32 VipGiftData::today_recommend_recharge_reward_id() const {
  return today_recommend_recharge_reward_id_;
}
inline void VipGiftData::set_today_recommend_recharge_reward_id(::google::protobuf::uint32 value) {
  set_has_today_recommend_recharge_reward_id();
  today_recommend_recharge_reward_id_ = value;
}

// optional uint32 today_recommend_recharge_reward_status = 5;
inline bool VipGiftData::has_today_recommend_recharge_reward_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VipGiftData::set_has_today_recommend_recharge_reward_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VipGiftData::clear_has_today_recommend_recharge_reward_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VipGiftData::clear_today_recommend_recharge_reward_status() {
  today_recommend_recharge_reward_status_ = 0u;
  clear_has_today_recommend_recharge_reward_status();
}
inline ::google::protobuf::uint32 VipGiftData::today_recommend_recharge_reward_status() const {
  return today_recommend_recharge_reward_status_;
}
inline void VipGiftData::set_today_recommend_recharge_reward_status(::google::protobuf::uint32 value) {
  set_has_today_recommend_recharge_reward_status();
  today_recommend_recharge_reward_status_ = value;
}

// -------------------------------------------------------------------

// CommonRecharge

// optional uint32 id = 1;
inline bool CommonRecharge::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonRecharge::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonRecharge::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonRecharge::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CommonRecharge::id() const {
  return id_;
}
inline void CommonRecharge::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 times = 2;
inline bool CommonRecharge::has_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonRecharge::set_has_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonRecharge::clear_has_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonRecharge::clear_times() {
  times_ = 0u;
  clear_has_times();
}
inline ::google::protobuf::uint32 CommonRecharge::times() const {
  return times_;
}
inline void CommonRecharge::set_times(::google::protobuf::uint32 value) {
  set_has_times();
  times_ = value;
}

// -------------------------------------------------------------------

// MonthCardData

// optional uint32 card_id = 1;
inline bool MonthCardData::has_card_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MonthCardData::set_has_card_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MonthCardData::clear_has_card_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MonthCardData::clear_card_id() {
  card_id_ = 0u;
  clear_has_card_id();
}
inline ::google::protobuf::uint32 MonthCardData::card_id() const {
  return card_id_;
}
inline void MonthCardData::set_card_id(::google::protobuf::uint32 value) {
  set_has_card_id();
  card_id_ = value;
}

// optional uint32 buy_time = 2;
inline bool MonthCardData::has_buy_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MonthCardData::set_has_buy_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MonthCardData::clear_has_buy_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MonthCardData::clear_buy_time() {
  buy_time_ = 0u;
  clear_has_buy_time();
}
inline ::google::protobuf::uint32 MonthCardData::buy_time() const {
  return buy_time_;
}
inline void MonthCardData::set_buy_time(::google::protobuf::uint32 value) {
  set_has_buy_time();
  buy_time_ = value;
}

// optional uint32 last_take_reward_time = 3;
inline bool MonthCardData::has_last_take_reward_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MonthCardData::set_has_last_take_reward_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MonthCardData::clear_has_last_take_reward_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MonthCardData::clear_last_take_reward_time() {
  last_take_reward_time_ = 0u;
  clear_has_last_take_reward_time();
}
inline ::google::protobuf::uint32 MonthCardData::last_take_reward_time() const {
  return last_take_reward_time_;
}
inline void MonthCardData::set_last_take_reward_time(::google::protobuf::uint32 value) {
  set_has_last_take_reward_time();
  last_take_reward_time_ = value;
}

// -------------------------------------------------------------------

// RoleRechargeData

// repeated .PB.CommonRecharge recharge_list = 1;
inline int RoleRechargeData::recharge_list_size() const {
  return recharge_list_.size();
}
inline void RoleRechargeData::clear_recharge_list() {
  recharge_list_.Clear();
}
inline const ::PB::CommonRecharge& RoleRechargeData::recharge_list(int index) const {
  return recharge_list_.Get(index);
}
inline ::PB::CommonRecharge* RoleRechargeData::mutable_recharge_list(int index) {
  return recharge_list_.Mutable(index);
}
inline ::PB::CommonRecharge* RoleRechargeData::add_recharge_list() {
  return recharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >&
RoleRechargeData::recharge_list() const {
  return recharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >*
RoleRechargeData::mutable_recharge_list() {
  return &recharge_list_;
}

// repeated .PB.MonthCardData month_card_list = 2;
inline int RoleRechargeData::month_card_list_size() const {
  return month_card_list_.size();
}
inline void RoleRechargeData::clear_month_card_list() {
  month_card_list_.Clear();
}
inline const ::PB::MonthCardData& RoleRechargeData::month_card_list(int index) const {
  return month_card_list_.Get(index);
}
inline ::PB::MonthCardData* RoleRechargeData::mutable_month_card_list(int index) {
  return month_card_list_.Mutable(index);
}
inline ::PB::MonthCardData* RoleRechargeData::add_month_card_list() {
  return month_card_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MonthCardData >&
RoleRechargeData::month_card_list() const {
  return month_card_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MonthCardData >*
RoleRechargeData::mutable_month_card_list() {
  return &month_card_list_;
}

// repeated uint32 order_record_list = 3;
inline int RoleRechargeData::order_record_list_size() const {
  return order_record_list_.size();
}
inline void RoleRechargeData::clear_order_record_list() {
  order_record_list_.Clear();
}
inline ::google::protobuf::uint32 RoleRechargeData::order_record_list(int index) const {
  return order_record_list_.Get(index);
}
inline void RoleRechargeData::set_order_record_list(int index, ::google::protobuf::uint32 value) {
  order_record_list_.Set(index, value);
}
inline void RoleRechargeData::add_order_record_list(::google::protobuf::uint32 value) {
  order_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleRechargeData::order_record_list() const {
  return order_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleRechargeData::mutable_order_record_list() {
  return &order_record_list_;
}

// optional uint32 today_recharge_times = 4;
inline bool RoleRechargeData::has_today_recharge_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleRechargeData::set_has_today_recharge_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleRechargeData::clear_has_today_recharge_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleRechargeData::clear_today_recharge_times() {
  today_recharge_times_ = 0u;
  clear_has_today_recharge_times();
}
inline ::google::protobuf::uint32 RoleRechargeData::today_recharge_times() const {
  return today_recharge_times_;
}
inline void RoleRechargeData::set_today_recharge_times(::google::protobuf::uint32 value) {
  set_has_today_recharge_times();
  today_recharge_times_ = value;
}

// -------------------------------------------------------------------

// OpenServerFundData

// optional uint32 is_already_buy_fund = 1;
inline bool OpenServerFundData::has_is_already_buy_fund() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenServerFundData::set_has_is_already_buy_fund() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenServerFundData::clear_has_is_already_buy_fund() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenServerFundData::clear_is_already_buy_fund() {
  is_already_buy_fund_ = 0u;
  clear_has_is_already_buy_fund();
}
inline ::google::protobuf::uint32 OpenServerFundData::is_already_buy_fund() const {
  return is_already_buy_fund_;
}
inline void OpenServerFundData::set_is_already_buy_fund(::google::protobuf::uint32 value) {
  set_has_is_already_buy_fund();
  is_already_buy_fund_ = value;
}

// repeated uint32 fund_reward_take_record = 2;
inline int OpenServerFundData::fund_reward_take_record_size() const {
  return fund_reward_take_record_.size();
}
inline void OpenServerFundData::clear_fund_reward_take_record() {
  fund_reward_take_record_.Clear();
}
inline ::google::protobuf::uint32 OpenServerFundData::fund_reward_take_record(int index) const {
  return fund_reward_take_record_.Get(index);
}
inline void OpenServerFundData::set_fund_reward_take_record(int index, ::google::protobuf::uint32 value) {
  fund_reward_take_record_.Set(index, value);
}
inline void OpenServerFundData::add_fund_reward_take_record(::google::protobuf::uint32 value) {
  fund_reward_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OpenServerFundData::fund_reward_take_record() const {
  return fund_reward_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OpenServerFundData::mutable_fund_reward_take_record() {
  return &fund_reward_take_record_;
}

// -------------------------------------------------------------------

// AllPeopleWelfareData

// repeated uint32 welfare_take_record = 1;
inline int AllPeopleWelfareData::welfare_take_record_size() const {
  return welfare_take_record_.size();
}
inline void AllPeopleWelfareData::clear_welfare_take_record() {
  welfare_take_record_.Clear();
}
inline ::google::protobuf::uint32 AllPeopleWelfareData::welfare_take_record(int index) const {
  return welfare_take_record_.Get(index);
}
inline void AllPeopleWelfareData::set_welfare_take_record(int index, ::google::protobuf::uint32 value) {
  welfare_take_record_.Set(index, value);
}
inline void AllPeopleWelfareData::add_welfare_take_record(::google::protobuf::uint32 value) {
  welfare_take_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AllPeopleWelfareData::welfare_take_record() const {
  return welfare_take_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AllPeopleWelfareData::mutable_welfare_take_record() {
  return &welfare_take_record_;
}

// -------------------------------------------------------------------

// LimitActivityData

// optional uint32 recruit_times = 1;
inline bool LimitActivityData::has_recruit_times() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitActivityData::set_has_recruit_times() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitActivityData::clear_has_recruit_times() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitActivityData::clear_recruit_times() {
  recruit_times_ = 0u;
  clear_has_recruit_times();
}
inline ::google::protobuf::uint32 LimitActivityData::recruit_times() const {
  return recruit_times_;
}
inline void LimitActivityData::set_recruit_times(::google::protobuf::uint32 value) {
  set_has_recruit_times();
  recruit_times_ = value;
}

// optional uint32 accumulate_recharge = 2;
inline bool LimitActivityData::has_accumulate_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitActivityData::set_has_accumulate_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitActivityData::clear_has_accumulate_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitActivityData::clear_accumulate_recharge() {
  accumulate_recharge_ = 0u;
  clear_has_accumulate_recharge();
}
inline ::google::protobuf::uint32 LimitActivityData::accumulate_recharge() const {
  return accumulate_recharge_;
}
inline void LimitActivityData::set_accumulate_recharge(::google::protobuf::uint32 value) {
  set_has_accumulate_recharge();
  accumulate_recharge_ = value;
}

// repeated uint32 recruit_reward_record = 3;
inline int LimitActivityData::recruit_reward_record_size() const {
  return recruit_reward_record_.size();
}
inline void LimitActivityData::clear_recruit_reward_record() {
  recruit_reward_record_.Clear();
}
inline ::google::protobuf::uint32 LimitActivityData::recruit_reward_record(int index) const {
  return recruit_reward_record_.Get(index);
}
inline void LimitActivityData::set_recruit_reward_record(int index, ::google::protobuf::uint32 value) {
  recruit_reward_record_.Set(index, value);
}
inline void LimitActivityData::add_recruit_reward_record(::google::protobuf::uint32 value) {
  recruit_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LimitActivityData::recruit_reward_record() const {
  return recruit_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LimitActivityData::mutable_recruit_reward_record() {
  return &recruit_reward_record_;
}

// repeated uint32 accumulate_recharge_reward_record = 4;
inline int LimitActivityData::accumulate_recharge_reward_record_size() const {
  return accumulate_recharge_reward_record_.size();
}
inline void LimitActivityData::clear_accumulate_recharge_reward_record() {
  accumulate_recharge_reward_record_.Clear();
}
inline ::google::protobuf::uint32 LimitActivityData::accumulate_recharge_reward_record(int index) const {
  return accumulate_recharge_reward_record_.Get(index);
}
inline void LimitActivityData::set_accumulate_recharge_reward_record(int index, ::google::protobuf::uint32 value) {
  accumulate_recharge_reward_record_.Set(index, value);
}
inline void LimitActivityData::add_accumulate_recharge_reward_record(::google::protobuf::uint32 value) {
  accumulate_recharge_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LimitActivityData::accumulate_recharge_reward_record() const {
  return accumulate_recharge_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LimitActivityData::mutable_accumulate_recharge_reward_record() {
  return &accumulate_recharge_reward_record_;
}

// repeated .PB.RecordData single_recharge_reward_record = 5;
inline int LimitActivityData::single_recharge_reward_record_size() const {
  return single_recharge_reward_record_.size();
}
inline void LimitActivityData::clear_single_recharge_reward_record() {
  single_recharge_reward_record_.Clear();
}
inline const ::PB::RecordData& LimitActivityData::single_recharge_reward_record(int index) const {
  return single_recharge_reward_record_.Get(index);
}
inline ::PB::RecordData* LimitActivityData::mutable_single_recharge_reward_record(int index) {
  return single_recharge_reward_record_.Mutable(index);
}
inline ::PB::RecordData* LimitActivityData::add_single_recharge_reward_record() {
  return single_recharge_reward_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RecordData >&
LimitActivityData::single_recharge_reward_record() const {
  return single_recharge_reward_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RecordData >*
LimitActivityData::mutable_single_recharge_reward_record() {
  return &single_recharge_reward_record_;
}

// repeated uint32 first_recharge_reward_record = 6;
inline int LimitActivityData::first_recharge_reward_record_size() const {
  return first_recharge_reward_record_.size();
}
inline void LimitActivityData::clear_first_recharge_reward_record() {
  first_recharge_reward_record_.Clear();
}
inline ::google::protobuf::uint32 LimitActivityData::first_recharge_reward_record(int index) const {
  return first_recharge_reward_record_.Get(index);
}
inline void LimitActivityData::set_first_recharge_reward_record(int index, ::google::protobuf::uint32 value) {
  first_recharge_reward_record_.Set(index, value);
}
inline void LimitActivityData::add_first_recharge_reward_record(::google::protobuf::uint32 value) {
  first_recharge_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
LimitActivityData::first_recharge_reward_record() const {
  return first_recharge_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
LimitActivityData::mutable_first_recharge_reward_record() {
  return &first_recharge_reward_record_;
}

// optional uint32 total_recharge = 7;
inline bool LimitActivityData::has_total_recharge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LimitActivityData::set_has_total_recharge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LimitActivityData::clear_has_total_recharge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LimitActivityData::clear_total_recharge() {
  total_recharge_ = 0u;
  clear_has_total_recharge();
}
inline ::google::protobuf::uint32 LimitActivityData::total_recharge() const {
  return total_recharge_;
}
inline void LimitActivityData::set_total_recharge(::google::protobuf::uint32 value) {
  set_has_total_recharge();
  total_recharge_ = value;
}

// optional uint32 last_single_recharge_data_id = 8;
inline bool LimitActivityData::has_last_single_recharge_data_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LimitActivityData::set_has_last_single_recharge_data_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LimitActivityData::clear_has_last_single_recharge_data_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LimitActivityData::clear_last_single_recharge_data_id() {
  last_single_recharge_data_id_ = 0u;
  clear_has_last_single_recharge_data_id();
}
inline ::google::protobuf::uint32 LimitActivityData::last_single_recharge_data_id() const {
  return last_single_recharge_data_id_;
}
inline void LimitActivityData::set_last_single_recharge_data_id(::google::protobuf::uint32 value) {
  set_has_last_single_recharge_data_id();
  last_single_recharge_data_id_ = value;
}

// optional uint32 last_accumulate_recharge_data_id = 9;
inline bool LimitActivityData::has_last_accumulate_recharge_data_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LimitActivityData::set_has_last_accumulate_recharge_data_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LimitActivityData::clear_has_last_accumulate_recharge_data_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LimitActivityData::clear_last_accumulate_recharge_data_id() {
  last_accumulate_recharge_data_id_ = 0u;
  clear_has_last_accumulate_recharge_data_id();
}
inline ::google::protobuf::uint32 LimitActivityData::last_accumulate_recharge_data_id() const {
  return last_accumulate_recharge_data_id_;
}
inline void LimitActivityData::set_last_accumulate_recharge_data_id(::google::protobuf::uint32 value) {
  set_has_last_accumulate_recharge_data_id();
  last_accumulate_recharge_data_id_ = value;
}

// repeated .PB.CommonRecharge recharge_list = 10;
inline int LimitActivityData::recharge_list_size() const {
  return recharge_list_.size();
}
inline void LimitActivityData::clear_recharge_list() {
  recharge_list_.Clear();
}
inline const ::PB::CommonRecharge& LimitActivityData::recharge_list(int index) const {
  return recharge_list_.Get(index);
}
inline ::PB::CommonRecharge* LimitActivityData::mutable_recharge_list(int index) {
  return recharge_list_.Mutable(index);
}
inline ::PB::CommonRecharge* LimitActivityData::add_recharge_list() {
  return recharge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >&
LimitActivityData::recharge_list() const {
  return recharge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::CommonRecharge >*
LimitActivityData::mutable_recharge_list() {
  return &recharge_list_;
}

// -------------------------------------------------------------------

// SuperDiscountData

// optional uint32 status = 1;
inline bool SuperDiscountData::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SuperDiscountData::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SuperDiscountData::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SuperDiscountData::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 SuperDiscountData::status() const {
  return status_;
}
inline void SuperDiscountData::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// optional uint32 take_accumulate_reward_times = 2;
inline bool SuperDiscountData::has_take_accumulate_reward_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SuperDiscountData::set_has_take_accumulate_reward_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SuperDiscountData::clear_has_take_accumulate_reward_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SuperDiscountData::clear_take_accumulate_reward_times() {
  take_accumulate_reward_times_ = 0u;
  clear_has_take_accumulate_reward_times();
}
inline ::google::protobuf::uint32 SuperDiscountData::take_accumulate_reward_times() const {
  return take_accumulate_reward_times_;
}
inline void SuperDiscountData::set_take_accumulate_reward_times(::google::protobuf::uint32 value) {
  set_has_take_accumulate_reward_times();
  take_accumulate_reward_times_ = value;
}

// optional uint32 cur_buy_times = 3;
inline bool SuperDiscountData::has_cur_buy_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SuperDiscountData::set_has_cur_buy_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SuperDiscountData::clear_has_cur_buy_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SuperDiscountData::clear_cur_buy_times() {
  cur_buy_times_ = 0u;
  clear_has_cur_buy_times();
}
inline ::google::protobuf::uint32 SuperDiscountData::cur_buy_times() const {
  return cur_buy_times_;
}
inline void SuperDiscountData::set_cur_buy_times(::google::protobuf::uint32 value) {
  set_has_cur_buy_times();
  cur_buy_times_ = value;
}

// optional uint32 last_activity_data_id = 4;
inline bool SuperDiscountData::has_last_activity_data_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SuperDiscountData::set_has_last_activity_data_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SuperDiscountData::clear_has_last_activity_data_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SuperDiscountData::clear_last_activity_data_id() {
  last_activity_data_id_ = 0u;
  clear_has_last_activity_data_id();
}
inline ::google::protobuf::uint32 SuperDiscountData::last_activity_data_id() const {
  return last_activity_data_id_;
}
inline void SuperDiscountData::set_last_activity_data_id(::google::protobuf::uint32 value) {
  set_has_last_activity_data_id();
  last_activity_data_id_ = value;
}

// repeated uint32 took_accumulate_reward_list = 5;
inline int SuperDiscountData::took_accumulate_reward_list_size() const {
  return took_accumulate_reward_list_.size();
}
inline void SuperDiscountData::clear_took_accumulate_reward_list() {
  took_accumulate_reward_list_.Clear();
}
inline ::google::protobuf::uint32 SuperDiscountData::took_accumulate_reward_list(int index) const {
  return took_accumulate_reward_list_.Get(index);
}
inline void SuperDiscountData::set_took_accumulate_reward_list(int index, ::google::protobuf::uint32 value) {
  took_accumulate_reward_list_.Set(index, value);
}
inline void SuperDiscountData::add_took_accumulate_reward_list(::google::protobuf::uint32 value) {
  took_accumulate_reward_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SuperDiscountData::took_accumulate_reward_list() const {
  return took_accumulate_reward_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SuperDiscountData::mutable_took_accumulate_reward_list() {
  return &took_accumulate_reward_list_;
}

// -------------------------------------------------------------------

// ActivityTarget

// optional uint32 target_id = 1;
inline bool ActivityTarget::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityTarget::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityTarget::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityTarget::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 ActivityTarget::target_id() const {
  return target_id_;
}
inline void ActivityTarget::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 context = 2;
inline bool ActivityTarget::has_context() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityTarget::set_has_context() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityTarget::clear_has_context() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityTarget::clear_context() {
  context_ = 0u;
  clear_has_context();
}
inline ::google::protobuf::uint32 ActivityTarget::context() const {
  return context_;
}
inline void ActivityTarget::set_context(::google::protobuf::uint32 value) {
  set_has_context();
  context_ = value;
}

// optional uint32 take_reward_times = 3;
inline bool ActivityTarget::has_take_reward_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityTarget::set_has_take_reward_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityTarget::clear_has_take_reward_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityTarget::clear_take_reward_times() {
  take_reward_times_ = 0u;
  clear_has_take_reward_times();
}
inline ::google::protobuf::uint32 ActivityTarget::take_reward_times() const {
  return take_reward_times_;
}
inline void ActivityTarget::set_take_reward_times(::google::protobuf::uint32 value) {
  set_has_take_reward_times();
  take_reward_times_ = value;
}

// -------------------------------------------------------------------

// FestivalActivity

// optional uint32 data_reset_time = 1;
inline bool FestivalActivity::has_data_reset_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FestivalActivity::set_has_data_reset_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FestivalActivity::clear_has_data_reset_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FestivalActivity::clear_data_reset_time() {
  data_reset_time_ = 0u;
  clear_has_data_reset_time();
}
inline ::google::protobuf::uint32 FestivalActivity::data_reset_time() const {
  return data_reset_time_;
}
inline void FestivalActivity::set_data_reset_time(::google::protobuf::uint32 value) {
  set_has_data_reset_time();
  data_reset_time_ = value;
}

// repeated .PB.ActivityTarget target_list = 2;
inline int FestivalActivity::target_list_size() const {
  return target_list_.size();
}
inline void FestivalActivity::clear_target_list() {
  target_list_.Clear();
}
inline const ::PB::ActivityTarget& FestivalActivity::target_list(int index) const {
  return target_list_.Get(index);
}
inline ::PB::ActivityTarget* FestivalActivity::mutable_target_list(int index) {
  return target_list_.Mutable(index);
}
inline ::PB::ActivityTarget* FestivalActivity::add_target_list() {
  return target_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ActivityTarget >&
FestivalActivity::target_list() const {
  return target_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ActivityTarget >*
FestivalActivity::mutable_target_list() {
  return &target_list_;
}

// -------------------------------------------------------------------

// RoleFestivalActivityInfo

// optional .PB.FestivalActivity loop_once_recharge = 1;
inline bool RoleFestivalActivityInfo::has_loop_once_recharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_loop_once_recharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleFestivalActivityInfo::clear_has_loop_once_recharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleFestivalActivityInfo::clear_loop_once_recharge() {
  if (loop_once_recharge_ != NULL) loop_once_recharge_->::PB::FestivalActivity::Clear();
  clear_has_loop_once_recharge();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::loop_once_recharge() const {
  return loop_once_recharge_ != NULL ? *loop_once_recharge_ : *default_instance_->loop_once_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_loop_once_recharge() {
  set_has_loop_once_recharge();
  if (loop_once_recharge_ == NULL) loop_once_recharge_ = new ::PB::FestivalActivity;
  return loop_once_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_loop_once_recharge() {
  clear_has_loop_once_recharge();
  ::PB::FestivalActivity* temp = loop_once_recharge_;
  loop_once_recharge_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_loop_once_recharge(::PB::FestivalActivity* loop_once_recharge) {
  delete loop_once_recharge_;
  loop_once_recharge_ = loop_once_recharge;
  if (loop_once_recharge) {
    set_has_loop_once_recharge();
  } else {
    clear_has_loop_once_recharge();
  }
}

// optional .PB.FestivalActivity loop_accumulate_recharge = 2;
inline bool RoleFestivalActivityInfo::has_loop_accumulate_recharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_loop_accumulate_recharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleFestivalActivityInfo::clear_has_loop_accumulate_recharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleFestivalActivityInfo::clear_loop_accumulate_recharge() {
  if (loop_accumulate_recharge_ != NULL) loop_accumulate_recharge_->::PB::FestivalActivity::Clear();
  clear_has_loop_accumulate_recharge();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::loop_accumulate_recharge() const {
  return loop_accumulate_recharge_ != NULL ? *loop_accumulate_recharge_ : *default_instance_->loop_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_loop_accumulate_recharge() {
  set_has_loop_accumulate_recharge();
  if (loop_accumulate_recharge_ == NULL) loop_accumulate_recharge_ = new ::PB::FestivalActivity;
  return loop_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_loop_accumulate_recharge() {
  clear_has_loop_accumulate_recharge();
  ::PB::FestivalActivity* temp = loop_accumulate_recharge_;
  loop_accumulate_recharge_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_loop_accumulate_recharge(::PB::FestivalActivity* loop_accumulate_recharge) {
  delete loop_accumulate_recharge_;
  loop_accumulate_recharge_ = loop_accumulate_recharge;
  if (loop_accumulate_recharge) {
    set_has_loop_accumulate_recharge();
  } else {
    clear_has_loop_accumulate_recharge();
  }
}

// optional .PB.FestivalActivity limit_recruit = 3;
inline bool RoleFestivalActivityInfo::has_limit_recruit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_limit_recruit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleFestivalActivityInfo::clear_has_limit_recruit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleFestivalActivityInfo::clear_limit_recruit() {
  if (limit_recruit_ != NULL) limit_recruit_->::PB::FestivalActivity::Clear();
  clear_has_limit_recruit();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::limit_recruit() const {
  return limit_recruit_ != NULL ? *limit_recruit_ : *default_instance_->limit_recruit_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_limit_recruit() {
  set_has_limit_recruit();
  if (limit_recruit_ == NULL) limit_recruit_ = new ::PB::FestivalActivity;
  return limit_recruit_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_limit_recruit() {
  clear_has_limit_recruit();
  ::PB::FestivalActivity* temp = limit_recruit_;
  limit_recruit_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_limit_recruit(::PB::FestivalActivity* limit_recruit) {
  delete limit_recruit_;
  limit_recruit_ = limit_recruit;
  if (limit_recruit) {
    set_has_limit_recruit();
  } else {
    clear_has_limit_recruit();
  }
}

// optional .PB.FestivalActivity activity_once_recharge = 4;
inline bool RoleFestivalActivityInfo::has_activity_once_recharge() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_activity_once_recharge() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleFestivalActivityInfo::clear_has_activity_once_recharge() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleFestivalActivityInfo::clear_activity_once_recharge() {
  if (activity_once_recharge_ != NULL) activity_once_recharge_->::PB::FestivalActivity::Clear();
  clear_has_activity_once_recharge();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::activity_once_recharge() const {
  return activity_once_recharge_ != NULL ? *activity_once_recharge_ : *default_instance_->activity_once_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_activity_once_recharge() {
  set_has_activity_once_recharge();
  if (activity_once_recharge_ == NULL) activity_once_recharge_ = new ::PB::FestivalActivity;
  return activity_once_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_activity_once_recharge() {
  clear_has_activity_once_recharge();
  ::PB::FestivalActivity* temp = activity_once_recharge_;
  activity_once_recharge_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_activity_once_recharge(::PB::FestivalActivity* activity_once_recharge) {
  delete activity_once_recharge_;
  activity_once_recharge_ = activity_once_recharge;
  if (activity_once_recharge) {
    set_has_activity_once_recharge();
  } else {
    clear_has_activity_once_recharge();
  }
}

// optional .PB.FestivalActivity activity_accumulate_recharge = 5;
inline bool RoleFestivalActivityInfo::has_activity_accumulate_recharge() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_activity_accumulate_recharge() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleFestivalActivityInfo::clear_has_activity_accumulate_recharge() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleFestivalActivityInfo::clear_activity_accumulate_recharge() {
  if (activity_accumulate_recharge_ != NULL) activity_accumulate_recharge_->::PB::FestivalActivity::Clear();
  clear_has_activity_accumulate_recharge();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::activity_accumulate_recharge() const {
  return activity_accumulate_recharge_ != NULL ? *activity_accumulate_recharge_ : *default_instance_->activity_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_activity_accumulate_recharge() {
  set_has_activity_accumulate_recharge();
  if (activity_accumulate_recharge_ == NULL) activity_accumulate_recharge_ = new ::PB::FestivalActivity;
  return activity_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_activity_accumulate_recharge() {
  clear_has_activity_accumulate_recharge();
  ::PB::FestivalActivity* temp = activity_accumulate_recharge_;
  activity_accumulate_recharge_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_activity_accumulate_recharge(::PB::FestivalActivity* activity_accumulate_recharge) {
  delete activity_accumulate_recharge_;
  activity_accumulate_recharge_ = activity_accumulate_recharge;
  if (activity_accumulate_recharge) {
    set_has_activity_accumulate_recharge();
  } else {
    clear_has_activity_accumulate_recharge();
  }
}

// optional .PB.FestivalActivity diamond_exchange = 6;
inline bool RoleFestivalActivityInfo::has_diamond_exchange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_diamond_exchange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleFestivalActivityInfo::clear_has_diamond_exchange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleFestivalActivityInfo::clear_diamond_exchange() {
  if (diamond_exchange_ != NULL) diamond_exchange_->::PB::FestivalActivity::Clear();
  clear_has_diamond_exchange();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::diamond_exchange() const {
  return diamond_exchange_ != NULL ? *diamond_exchange_ : *default_instance_->diamond_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_diamond_exchange() {
  set_has_diamond_exchange();
  if (diamond_exchange_ == NULL) diamond_exchange_ = new ::PB::FestivalActivity;
  return diamond_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_diamond_exchange() {
  clear_has_diamond_exchange();
  ::PB::FestivalActivity* temp = diamond_exchange_;
  diamond_exchange_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_diamond_exchange(::PB::FestivalActivity* diamond_exchange) {
  delete diamond_exchange_;
  diamond_exchange_ = diamond_exchange;
  if (diamond_exchange) {
    set_has_diamond_exchange();
  } else {
    clear_has_diamond_exchange();
  }
}

// optional .PB.FestivalActivity active_target = 7;
inline bool RoleFestivalActivityInfo::has_active_target() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_active_target() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleFestivalActivityInfo::clear_has_active_target() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleFestivalActivityInfo::clear_active_target() {
  if (active_target_ != NULL) active_target_->::PB::FestivalActivity::Clear();
  clear_has_active_target();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::active_target() const {
  return active_target_ != NULL ? *active_target_ : *default_instance_->active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_active_target() {
  set_has_active_target();
  if (active_target_ == NULL) active_target_ = new ::PB::FestivalActivity;
  return active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_active_target() {
  clear_has_active_target();
  ::PB::FestivalActivity* temp = active_target_;
  active_target_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_active_target(::PB::FestivalActivity* active_target) {
  delete active_target_;
  active_target_ = active_target;
  if (active_target) {
    set_has_active_target();
  } else {
    clear_has_active_target();
  }
}

// optional .PB.FestivalActivity item_exchange = 8;
inline bool RoleFestivalActivityInfo::has_item_exchange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_item_exchange() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleFestivalActivityInfo::clear_has_item_exchange() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleFestivalActivityInfo::clear_item_exchange() {
  if (item_exchange_ != NULL) item_exchange_->::PB::FestivalActivity::Clear();
  clear_has_item_exchange();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::item_exchange() const {
  return item_exchange_ != NULL ? *item_exchange_ : *default_instance_->item_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_item_exchange() {
  set_has_item_exchange();
  if (item_exchange_ == NULL) item_exchange_ = new ::PB::FestivalActivity;
  return item_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_item_exchange() {
  clear_has_item_exchange();
  ::PB::FestivalActivity* temp = item_exchange_;
  item_exchange_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_item_exchange(::PB::FestivalActivity* item_exchange) {
  delete item_exchange_;
  item_exchange_ = item_exchange;
  if (item_exchange) {
    set_has_item_exchange();
  } else {
    clear_has_item_exchange();
  }
}

// optional .PB.FestivalActivity festival_login = 9;
inline bool RoleFestivalActivityInfo::has_festival_login() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_festival_login() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleFestivalActivityInfo::clear_has_festival_login() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleFestivalActivityInfo::clear_festival_login() {
  if (festival_login_ != NULL) festival_login_->::PB::FestivalActivity::Clear();
  clear_has_festival_login();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::festival_login() const {
  return festival_login_ != NULL ? *festival_login_ : *default_instance_->festival_login_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_festival_login() {
  set_has_festival_login();
  if (festival_login_ == NULL) festival_login_ = new ::PB::FestivalActivity;
  return festival_login_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_festival_login() {
  clear_has_festival_login();
  ::PB::FestivalActivity* temp = festival_login_;
  festival_login_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_festival_login(::PB::FestivalActivity* festival_login) {
  delete festival_login_;
  festival_login_ = festival_login;
  if (festival_login) {
    set_has_festival_login();
  } else {
    clear_has_festival_login();
  }
}

// optional .PB.FestivalActivity open_server_login = 10;
inline bool RoleFestivalActivityInfo::has_open_server_login() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_open_server_login() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleFestivalActivityInfo::clear_has_open_server_login() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleFestivalActivityInfo::clear_open_server_login() {
  if (open_server_login_ != NULL) open_server_login_->::PB::FestivalActivity::Clear();
  clear_has_open_server_login();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::open_server_login() const {
  return open_server_login_ != NULL ? *open_server_login_ : *default_instance_->open_server_login_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_open_server_login() {
  set_has_open_server_login();
  if (open_server_login_ == NULL) open_server_login_ = new ::PB::FestivalActivity;
  return open_server_login_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_open_server_login() {
  clear_has_open_server_login();
  ::PB::FestivalActivity* temp = open_server_login_;
  open_server_login_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_open_server_login(::PB::FestivalActivity* open_server_login) {
  delete open_server_login_;
  open_server_login_ = open_server_login;
  if (open_server_login) {
    set_has_open_server_login();
  } else {
    clear_has_open_server_login();
  }
}

// optional .PB.FestivalActivity open_svr_accumulate_recharge = 11;
inline bool RoleFestivalActivityInfo::has_open_svr_accumulate_recharge() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_open_svr_accumulate_recharge() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleFestivalActivityInfo::clear_has_open_svr_accumulate_recharge() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleFestivalActivityInfo::clear_open_svr_accumulate_recharge() {
  if (open_svr_accumulate_recharge_ != NULL) open_svr_accumulate_recharge_->::PB::FestivalActivity::Clear();
  clear_has_open_svr_accumulate_recharge();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::open_svr_accumulate_recharge() const {
  return open_svr_accumulate_recharge_ != NULL ? *open_svr_accumulate_recharge_ : *default_instance_->open_svr_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_open_svr_accumulate_recharge() {
  set_has_open_svr_accumulate_recharge();
  if (open_svr_accumulate_recharge_ == NULL) open_svr_accumulate_recharge_ = new ::PB::FestivalActivity;
  return open_svr_accumulate_recharge_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_open_svr_accumulate_recharge() {
  clear_has_open_svr_accumulate_recharge();
  ::PB::FestivalActivity* temp = open_svr_accumulate_recharge_;
  open_svr_accumulate_recharge_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_open_svr_accumulate_recharge(::PB::FestivalActivity* open_svr_accumulate_recharge) {
  delete open_svr_accumulate_recharge_;
  open_svr_accumulate_recharge_ = open_svr_accumulate_recharge;
  if (open_svr_accumulate_recharge) {
    set_has_open_svr_accumulate_recharge();
  } else {
    clear_has_open_svr_accumulate_recharge();
  }
}

// optional .PB.FestivalActivity festival_item_exchange = 12;
inline bool RoleFestivalActivityInfo::has_festival_item_exchange() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_festival_item_exchange() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleFestivalActivityInfo::clear_has_festival_item_exchange() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleFestivalActivityInfo::clear_festival_item_exchange() {
  if (festival_item_exchange_ != NULL) festival_item_exchange_->::PB::FestivalActivity::Clear();
  clear_has_festival_item_exchange();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::festival_item_exchange() const {
  return festival_item_exchange_ != NULL ? *festival_item_exchange_ : *default_instance_->festival_item_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_festival_item_exchange() {
  set_has_festival_item_exchange();
  if (festival_item_exchange_ == NULL) festival_item_exchange_ = new ::PB::FestivalActivity;
  return festival_item_exchange_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_festival_item_exchange() {
  clear_has_festival_item_exchange();
  ::PB::FestivalActivity* temp = festival_item_exchange_;
  festival_item_exchange_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_festival_item_exchange(::PB::FestivalActivity* festival_item_exchange) {
  delete festival_item_exchange_;
  festival_item_exchange_ = festival_item_exchange;
  if (festival_item_exchange) {
    set_has_festival_item_exchange();
  } else {
    clear_has_festival_item_exchange();
  }
}

// optional .PB.FestivalActivity festival_discount_sell = 13;
inline bool RoleFestivalActivityInfo::has_festival_discount_sell() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_festival_discount_sell() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleFestivalActivityInfo::clear_has_festival_discount_sell() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleFestivalActivityInfo::clear_festival_discount_sell() {
  if (festival_discount_sell_ != NULL) festival_discount_sell_->::PB::FestivalActivity::Clear();
  clear_has_festival_discount_sell();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::festival_discount_sell() const {
  return festival_discount_sell_ != NULL ? *festival_discount_sell_ : *default_instance_->festival_discount_sell_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_festival_discount_sell() {
  set_has_festival_discount_sell();
  if (festival_discount_sell_ == NULL) festival_discount_sell_ = new ::PB::FestivalActivity;
  return festival_discount_sell_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_festival_discount_sell() {
  clear_has_festival_discount_sell();
  ::PB::FestivalActivity* temp = festival_discount_sell_;
  festival_discount_sell_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_festival_discount_sell(::PB::FestivalActivity* festival_discount_sell) {
  delete festival_discount_sell_;
  festival_discount_sell_ = festival_discount_sell;
  if (festival_discount_sell) {
    set_has_festival_discount_sell();
  } else {
    clear_has_festival_discount_sell();
  }
}

// optional .PB.FestivalActivity festival_active_target = 14;
inline bool RoleFestivalActivityInfo::has_festival_active_target() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_festival_active_target() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleFestivalActivityInfo::clear_has_festival_active_target() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleFestivalActivityInfo::clear_festival_active_target() {
  if (festival_active_target_ != NULL) festival_active_target_->::PB::FestivalActivity::Clear();
  clear_has_festival_active_target();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::festival_active_target() const {
  return festival_active_target_ != NULL ? *festival_active_target_ : *default_instance_->festival_active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_festival_active_target() {
  set_has_festival_active_target();
  if (festival_active_target_ == NULL) festival_active_target_ = new ::PB::FestivalActivity;
  return festival_active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_festival_active_target() {
  clear_has_festival_active_target();
  ::PB::FestivalActivity* temp = festival_active_target_;
  festival_active_target_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_festival_active_target(::PB::FestivalActivity* festival_active_target) {
  delete festival_active_target_;
  festival_active_target_ = festival_active_target;
  if (festival_active_target) {
    set_has_festival_active_target();
  } else {
    clear_has_festival_active_target();
  }
}

// optional .PB.FestivalActivity open_server_active_target = 15;
inline bool RoleFestivalActivityInfo::has_open_server_active_target() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_open_server_active_target() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleFestivalActivityInfo::clear_has_open_server_active_target() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleFestivalActivityInfo::clear_open_server_active_target() {
  if (open_server_active_target_ != NULL) open_server_active_target_->::PB::FestivalActivity::Clear();
  clear_has_open_server_active_target();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::open_server_active_target() const {
  return open_server_active_target_ != NULL ? *open_server_active_target_ : *default_instance_->open_server_active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_open_server_active_target() {
  set_has_open_server_active_target();
  if (open_server_active_target_ == NULL) open_server_active_target_ = new ::PB::FestivalActivity;
  return open_server_active_target_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_open_server_active_target() {
  clear_has_open_server_active_target();
  ::PB::FestivalActivity* temp = open_server_active_target_;
  open_server_active_target_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_open_server_active_target(::PB::FestivalActivity* open_server_active_target) {
  delete open_server_active_target_;
  open_server_active_target_ = open_server_active_target;
  if (open_server_active_target) {
    set_has_open_server_active_target();
  } else {
    clear_has_open_server_active_target();
  }
}

// optional .PB.FestivalActivity festival_active_target_2 = 16;
inline bool RoleFestivalActivityInfo::has_festival_active_target_2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_festival_active_target_2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleFestivalActivityInfo::clear_has_festival_active_target_2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleFestivalActivityInfo::clear_festival_active_target_2() {
  if (festival_active_target_2_ != NULL) festival_active_target_2_->::PB::FestivalActivity::Clear();
  clear_has_festival_active_target_2();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::festival_active_target_2() const {
  return festival_active_target_2_ != NULL ? *festival_active_target_2_ : *default_instance_->festival_active_target_2_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_festival_active_target_2() {
  set_has_festival_active_target_2();
  if (festival_active_target_2_ == NULL) festival_active_target_2_ = new ::PB::FestivalActivity;
  return festival_active_target_2_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_festival_active_target_2() {
  clear_has_festival_active_target_2();
  ::PB::FestivalActivity* temp = festival_active_target_2_;
  festival_active_target_2_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_festival_active_target_2(::PB::FestivalActivity* festival_active_target_2) {
  delete festival_active_target_2_;
  festival_active_target_2_ = festival_active_target_2;
  if (festival_active_target_2) {
    set_has_festival_active_target_2();
  } else {
    clear_has_festival_active_target_2();
  }
}

// optional .PB.FestivalActivity activity_once_recharge_2 = 17;
inline bool RoleFestivalActivityInfo::has_activity_once_recharge_2() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleFestivalActivityInfo::set_has_activity_once_recharge_2() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleFestivalActivityInfo::clear_has_activity_once_recharge_2() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleFestivalActivityInfo::clear_activity_once_recharge_2() {
  if (activity_once_recharge_2_ != NULL) activity_once_recharge_2_->::PB::FestivalActivity::Clear();
  clear_has_activity_once_recharge_2();
}
inline const ::PB::FestivalActivity& RoleFestivalActivityInfo::activity_once_recharge_2() const {
  return activity_once_recharge_2_ != NULL ? *activity_once_recharge_2_ : *default_instance_->activity_once_recharge_2_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::mutable_activity_once_recharge_2() {
  set_has_activity_once_recharge_2();
  if (activity_once_recharge_2_ == NULL) activity_once_recharge_2_ = new ::PB::FestivalActivity;
  return activity_once_recharge_2_;
}
inline ::PB::FestivalActivity* RoleFestivalActivityInfo::release_activity_once_recharge_2() {
  clear_has_activity_once_recharge_2();
  ::PB::FestivalActivity* temp = activity_once_recharge_2_;
  activity_once_recharge_2_ = NULL;
  return temp;
}
inline void RoleFestivalActivityInfo::set_allocated_activity_once_recharge_2(::PB::FestivalActivity* activity_once_recharge_2) {
  delete activity_once_recharge_2_;
  activity_once_recharge_2_ = activity_once_recharge_2;
  if (activity_once_recharge_2) {
    set_has_activity_once_recharge_2();
  } else {
    clear_has_activity_once_recharge_2();
  }
}

// -------------------------------------------------------------------

// AccurateRecommendGoods

// optional uint32 goods_id = 1;
inline bool AccurateRecommendGoods::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccurateRecommendGoods::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccurateRecommendGoods::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccurateRecommendGoods::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 AccurateRecommendGoods::goods_id() const {
  return goods_id_;
}
inline void AccurateRecommendGoods::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// optional uint32 buy_times = 2;
inline bool AccurateRecommendGoods::has_buy_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccurateRecommendGoods::set_has_buy_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccurateRecommendGoods::clear_has_buy_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccurateRecommendGoods::clear_buy_times() {
  buy_times_ = 0u;
  clear_has_buy_times();
}
inline ::google::protobuf::uint32 AccurateRecommendGoods::buy_times() const {
  return buy_times_;
}
inline void AccurateRecommendGoods::set_buy_times(::google::protobuf::uint32 value) {
  set_has_buy_times();
  buy_times_ = value;
}

// optional uint32 can_take_times = 3;
inline bool AccurateRecommendGoods::has_can_take_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccurateRecommendGoods::set_has_can_take_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccurateRecommendGoods::clear_has_can_take_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccurateRecommendGoods::clear_can_take_times() {
  can_take_times_ = 0u;
  clear_has_can_take_times();
}
inline ::google::protobuf::uint32 AccurateRecommendGoods::can_take_times() const {
  return can_take_times_;
}
inline void AccurateRecommendGoods::set_can_take_times(::google::protobuf::uint32 value) {
  set_has_can_take_times();
  can_take_times_ = value;
}

// -------------------------------------------------------------------

// RoleAccurateRecommendData

// repeated .PB.AccurateRecommendGoods goods_list = 1;
inline int RoleAccurateRecommendData::goods_list_size() const {
  return goods_list_.size();
}
inline void RoleAccurateRecommendData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::AccurateRecommendGoods& RoleAccurateRecommendData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::AccurateRecommendGoods* RoleAccurateRecommendData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::AccurateRecommendGoods* RoleAccurateRecommendData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::AccurateRecommendGoods >&
RoleAccurateRecommendData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::AccurateRecommendGoods >*
RoleAccurateRecommendData::mutable_goods_list() {
  return &goods_list_;
}

// -------------------------------------------------------------------

// RoleChristmasData

// optional uint32 total_score = 1;
inline bool RoleChristmasData::has_total_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleChristmasData::set_has_total_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleChristmasData::clear_has_total_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleChristmasData::clear_total_score() {
  total_score_ = 0u;
  clear_has_total_score();
}
inline ::google::protobuf::uint32 RoleChristmasData::total_score() const {
  return total_score_;
}
inline void RoleChristmasData::set_total_score(::google::protobuf::uint32 value) {
  set_has_total_score();
  total_score_ = value;
}

// optional uint32 cur_score = 2;
inline bool RoleChristmasData::has_cur_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleChristmasData::set_has_cur_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleChristmasData::clear_has_cur_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleChristmasData::clear_cur_score() {
  cur_score_ = 0u;
  clear_has_cur_score();
}
inline ::google::protobuf::uint32 RoleChristmasData::cur_score() const {
  return cur_score_;
}
inline void RoleChristmasData::set_cur_score(::google::protobuf::uint32 value) {
  set_has_cur_score();
  cur_score_ = value;
}

// optional uint32 already_take_lower_boss_reward_level = 3;
inline bool RoleChristmasData::has_already_take_lower_boss_reward_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleChristmasData::set_has_already_take_lower_boss_reward_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleChristmasData::clear_has_already_take_lower_boss_reward_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleChristmasData::clear_already_take_lower_boss_reward_level() {
  already_take_lower_boss_reward_level_ = 0u;
  clear_has_already_take_lower_boss_reward_level();
}
inline ::google::protobuf::uint32 RoleChristmasData::already_take_lower_boss_reward_level() const {
  return already_take_lower_boss_reward_level_;
}
inline void RoleChristmasData::set_already_take_lower_boss_reward_level(::google::protobuf::uint32 value) {
  set_has_already_take_lower_boss_reward_level();
  already_take_lower_boss_reward_level_ = value;
}

// optional uint32 already_take_high_boss_reward_level = 4;
inline bool RoleChristmasData::has_already_take_high_boss_reward_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleChristmasData::set_has_already_take_high_boss_reward_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleChristmasData::clear_has_already_take_high_boss_reward_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleChristmasData::clear_already_take_high_boss_reward_level() {
  already_take_high_boss_reward_level_ = 0u;
  clear_has_already_take_high_boss_reward_level();
}
inline ::google::protobuf::uint32 RoleChristmasData::already_take_high_boss_reward_level() const {
  return already_take_high_boss_reward_level_;
}
inline void RoleChristmasData::set_already_take_high_boss_reward_level(::google::protobuf::uint32 value) {
  set_has_already_take_high_boss_reward_level();
  already_take_high_boss_reward_level_ = value;
}

// optional uint32 last_reset_data_time = 5;
inline bool RoleChristmasData::has_last_reset_data_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleChristmasData::set_has_last_reset_data_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleChristmasData::clear_has_last_reset_data_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleChristmasData::clear_last_reset_data_time() {
  last_reset_data_time_ = 0u;
  clear_has_last_reset_data_time();
}
inline ::google::protobuf::uint32 RoleChristmasData::last_reset_data_time() const {
  return last_reset_data_time_;
}
inline void RoleChristmasData::set_last_reset_data_time(::google::protobuf::uint32 value) {
  set_has_last_reset_data_time();
  last_reset_data_time_ = value;
}

// -------------------------------------------------------------------

// OnlineRewardRecord

// optional uint32 days = 1;
inline bool OnlineRewardRecord::has_days() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineRewardRecord::set_has_days() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineRewardRecord::clear_has_days() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineRewardRecord::clear_days() {
  days_ = 0u;
  clear_has_days();
}
inline ::google::protobuf::uint32 OnlineRewardRecord::days() const {
  return days_;
}
inline void OnlineRewardRecord::set_days(::google::protobuf::uint32 value) {
  set_has_days();
  days_ = value;
}

// repeated uint32 flag_list = 2;
inline int OnlineRewardRecord::flag_list_size() const {
  return flag_list_.size();
}
inline void OnlineRewardRecord::clear_flag_list() {
  flag_list_.Clear();
}
inline ::google::protobuf::uint32 OnlineRewardRecord::flag_list(int index) const {
  return flag_list_.Get(index);
}
inline void OnlineRewardRecord::set_flag_list(int index, ::google::protobuf::uint32 value) {
  flag_list_.Set(index, value);
}
inline void OnlineRewardRecord::add_flag_list(::google::protobuf::uint32 value) {
  flag_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
OnlineRewardRecord::flag_list() const {
  return flag_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
OnlineRewardRecord::mutable_flag_list() {
  return &flag_list_;
}

// -------------------------------------------------------------------

// OnlineRewardData

// optional uint32 online_time = 1;
inline bool OnlineRewardData::has_online_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OnlineRewardData::set_has_online_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OnlineRewardData::clear_has_online_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OnlineRewardData::clear_online_time() {
  online_time_ = 0u;
  clear_has_online_time();
}
inline ::google::protobuf::uint32 OnlineRewardData::online_time() const {
  return online_time_;
}
inline void OnlineRewardData::set_online_time(::google::protobuf::uint32 value) {
  set_has_online_time();
  online_time_ = value;
}

// repeated .PB.OnlineRewardRecord reward_record_list = 2;
inline int OnlineRewardData::reward_record_list_size() const {
  return reward_record_list_.size();
}
inline void OnlineRewardData::clear_reward_record_list() {
  reward_record_list_.Clear();
}
inline const ::PB::OnlineRewardRecord& OnlineRewardData::reward_record_list(int index) const {
  return reward_record_list_.Get(index);
}
inline ::PB::OnlineRewardRecord* OnlineRewardData::mutable_reward_record_list(int index) {
  return reward_record_list_.Mutable(index);
}
inline ::PB::OnlineRewardRecord* OnlineRewardData::add_reward_record_list() {
  return reward_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::OnlineRewardRecord >&
OnlineRewardData::reward_record_list() const {
  return reward_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::OnlineRewardRecord >*
OnlineRewardData::mutable_reward_record_list() {
  return &reward_record_list_;
}

// -------------------------------------------------------------------

// SevenDayLoginData

// repeated uint32 daily_data_list = 1;
inline int SevenDayLoginData::daily_data_list_size() const {
  return daily_data_list_.size();
}
inline void SevenDayLoginData::clear_daily_data_list() {
  daily_data_list_.Clear();
}
inline ::google::protobuf::uint32 SevenDayLoginData::daily_data_list(int index) const {
  return daily_data_list_.Get(index);
}
inline void SevenDayLoginData::set_daily_data_list(int index, ::google::protobuf::uint32 value) {
  daily_data_list_.Set(index, value);
}
inline void SevenDayLoginData::add_daily_data_list(::google::protobuf::uint32 value) {
  daily_data_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SevenDayLoginData::daily_data_list() const {
  return daily_data_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SevenDayLoginData::mutable_daily_data_list() {
  return &daily_data_list_;
}

// -------------------------------------------------------------------

// RecallFriendData

// optional uint32 friend_id = 1;
inline bool RecallFriendData::has_friend_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecallFriendData::set_has_friend_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecallFriendData::clear_has_friend_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecallFriendData::clear_friend_id() {
  friend_id_ = 0u;
  clear_has_friend_id();
}
inline ::google::protobuf::uint32 RecallFriendData::friend_id() const {
  return friend_id_;
}
inline void RecallFriendData::set_friend_id(::google::protobuf::uint32 value) {
  set_has_friend_id();
  friend_id_ = value;
}

// optional uint32 send_time = 2;
inline bool RecallFriendData::has_send_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecallFriendData::set_has_send_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecallFriendData::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecallFriendData::clear_send_time() {
  send_time_ = 0u;
  clear_has_send_time();
}
inline ::google::protobuf::uint32 RecallFriendData::send_time() const {
  return send_time_;
}
inline void RecallFriendData::set_send_time(::google::protobuf::uint32 value) {
  set_has_send_time();
  send_time_ = value;
}

// -------------------------------------------------------------------

// FacebookActivityData

// optional uint32 is_already_take_account_bingding_reward = 1;
inline bool FacebookActivityData::has_is_already_take_account_bingding_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FacebookActivityData::set_has_is_already_take_account_bingding_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FacebookActivityData::clear_has_is_already_take_account_bingding_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FacebookActivityData::clear_is_already_take_account_bingding_reward() {
  is_already_take_account_bingding_reward_ = 0u;
  clear_has_is_already_take_account_bingding_reward();
}
inline ::google::protobuf::uint32 FacebookActivityData::is_already_take_account_bingding_reward() const {
  return is_already_take_account_bingding_reward_;
}
inline void FacebookActivityData::set_is_already_take_account_bingding_reward(::google::protobuf::uint32 value) {
  set_has_is_already_take_account_bingding_reward();
  is_already_take_account_bingding_reward_ = value;
}

// optional uint32 ready_to_share_time = 2;
inline bool FacebookActivityData::has_ready_to_share_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FacebookActivityData::set_has_ready_to_share_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FacebookActivityData::clear_has_ready_to_share_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FacebookActivityData::clear_ready_to_share_time() {
  ready_to_share_time_ = 0u;
  clear_has_ready_to_share_time();
}
inline ::google::protobuf::uint32 FacebookActivityData::ready_to_share_time() const {
  return ready_to_share_time_;
}
inline void FacebookActivityData::set_ready_to_share_time(::google::protobuf::uint32 value) {
  set_has_ready_to_share_time();
  ready_to_share_time_ = value;
}

// optional uint32 recall_success_friend_num = 3;
inline bool FacebookActivityData::has_recall_success_friend_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FacebookActivityData::set_has_recall_success_friend_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FacebookActivityData::clear_has_recall_success_friend_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FacebookActivityData::clear_recall_success_friend_num() {
  recall_success_friend_num_ = 0u;
  clear_has_recall_success_friend_num();
}
inline ::google::protobuf::uint32 FacebookActivityData::recall_success_friend_num() const {
  return recall_success_friend_num_;
}
inline void FacebookActivityData::set_recall_success_friend_num(::google::protobuf::uint32 value) {
  set_has_recall_success_friend_num();
  recall_success_friend_num_ = value;
}

// optional uint32 invite_success_friend_num = 4;
inline bool FacebookActivityData::has_invite_success_friend_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FacebookActivityData::set_has_invite_success_friend_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FacebookActivityData::clear_has_invite_success_friend_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FacebookActivityData::clear_invite_success_friend_num() {
  invite_success_friend_num_ = 0u;
  clear_has_invite_success_friend_num();
}
inline ::google::protobuf::uint32 FacebookActivityData::invite_success_friend_num() const {
  return invite_success_friend_num_;
}
inline void FacebookActivityData::set_invite_success_friend_num(::google::protobuf::uint32 value) {
  set_has_invite_success_friend_num();
  invite_success_friend_num_ = value;
}

// repeated uint32 recall_reward_record_list = 5;
inline int FacebookActivityData::recall_reward_record_list_size() const {
  return recall_reward_record_list_.size();
}
inline void FacebookActivityData::clear_recall_reward_record_list() {
  recall_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 FacebookActivityData::recall_reward_record_list(int index) const {
  return recall_reward_record_list_.Get(index);
}
inline void FacebookActivityData::set_recall_reward_record_list(int index, ::google::protobuf::uint32 value) {
  recall_reward_record_list_.Set(index, value);
}
inline void FacebookActivityData::add_recall_reward_record_list(::google::protobuf::uint32 value) {
  recall_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FacebookActivityData::recall_reward_record_list() const {
  return recall_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FacebookActivityData::mutable_recall_reward_record_list() {
  return &recall_reward_record_list_;
}

// repeated uint32 invite_reward_record_list = 6;
inline int FacebookActivityData::invite_reward_record_list_size() const {
  return invite_reward_record_list_.size();
}
inline void FacebookActivityData::clear_invite_reward_record_list() {
  invite_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 FacebookActivityData::invite_reward_record_list(int index) const {
  return invite_reward_record_list_.Get(index);
}
inline void FacebookActivityData::set_invite_reward_record_list(int index, ::google::protobuf::uint32 value) {
  invite_reward_record_list_.Set(index, value);
}
inline void FacebookActivityData::add_invite_reward_record_list(::google::protobuf::uint32 value) {
  invite_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
FacebookActivityData::invite_reward_record_list() const {
  return invite_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
FacebookActivityData::mutable_invite_reward_record_list() {
  return &invite_reward_record_list_;
}

// repeated .PB.RecallFriendData send_recall_friend_record = 7;
inline int FacebookActivityData::send_recall_friend_record_size() const {
  return send_recall_friend_record_.size();
}
inline void FacebookActivityData::clear_send_recall_friend_record() {
  send_recall_friend_record_.Clear();
}
inline const ::PB::RecallFriendData& FacebookActivityData::send_recall_friend_record(int index) const {
  return send_recall_friend_record_.Get(index);
}
inline ::PB::RecallFriendData* FacebookActivityData::mutable_send_recall_friend_record(int index) {
  return send_recall_friend_record_.Mutable(index);
}
inline ::PB::RecallFriendData* FacebookActivityData::add_send_recall_friend_record() {
  return send_recall_friend_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RecallFriendData >&
FacebookActivityData::send_recall_friend_record() const {
  return send_recall_friend_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RecallFriendData >*
FacebookActivityData::mutable_send_recall_friend_record() {
  return &send_recall_friend_record_;
}

// repeated string send_invite_friend_record = 8;
inline int FacebookActivityData::send_invite_friend_record_size() const {
  return send_invite_friend_record_.size();
}
inline void FacebookActivityData::clear_send_invite_friend_record() {
  send_invite_friend_record_.Clear();
}
inline const ::std::string& FacebookActivityData::send_invite_friend_record(int index) const {
  return send_invite_friend_record_.Get(index);
}
inline ::std::string* FacebookActivityData::mutable_send_invite_friend_record(int index) {
  return send_invite_friend_record_.Mutable(index);
}
inline void FacebookActivityData::set_send_invite_friend_record(int index, const ::std::string& value) {
  send_invite_friend_record_.Mutable(index)->assign(value);
}
inline void FacebookActivityData::set_send_invite_friend_record(int index, const char* value) {
  send_invite_friend_record_.Mutable(index)->assign(value);
}
inline void FacebookActivityData::set_send_invite_friend_record(int index, const char* value, size_t size) {
  send_invite_friend_record_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FacebookActivityData::add_send_invite_friend_record() {
  return send_invite_friend_record_.Add();
}
inline void FacebookActivityData::add_send_invite_friend_record(const ::std::string& value) {
  send_invite_friend_record_.Add()->assign(value);
}
inline void FacebookActivityData::add_send_invite_friend_record(const char* value) {
  send_invite_friend_record_.Add()->assign(value);
}
inline void FacebookActivityData::add_send_invite_friend_record(const char* value, size_t size) {
  send_invite_friend_record_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FacebookActivityData::send_invite_friend_record() const {
  return send_invite_friend_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FacebookActivityData::mutable_send_invite_friend_record() {
  return &send_invite_friend_record_;
}

// optional uint32 ready_to_commend_time = 9;
inline bool FacebookActivityData::has_ready_to_commend_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FacebookActivityData::set_has_ready_to_commend_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FacebookActivityData::clear_has_ready_to_commend_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FacebookActivityData::clear_ready_to_commend_time() {
  ready_to_commend_time_ = 0u;
  clear_has_ready_to_commend_time();
}
inline ::google::protobuf::uint32 FacebookActivityData::ready_to_commend_time() const {
  return ready_to_commend_time_;
}
inline void FacebookActivityData::set_ready_to_commend_time(::google::protobuf::uint32 value) {
  set_has_ready_to_commend_time();
  ready_to_commend_time_ = value;
}

// -------------------------------------------------------------------

// RechargeRewardData

// optional uint32 is_took_extra_reward = 1;
inline bool RechargeRewardData::has_is_took_extra_reward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeRewardData::set_has_is_took_extra_reward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeRewardData::clear_has_is_took_extra_reward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeRewardData::clear_is_took_extra_reward() {
  is_took_extra_reward_ = 0u;
  clear_has_is_took_extra_reward();
}
inline ::google::protobuf::uint32 RechargeRewardData::is_took_extra_reward() const {
  return is_took_extra_reward_;
}
inline void RechargeRewardData::set_is_took_extra_reward(::google::protobuf::uint32 value) {
  set_has_is_took_extra_reward();
  is_took_extra_reward_ = value;
}

// repeated uint32 daily_data_list = 2;
inline int RechargeRewardData::daily_data_list_size() const {
  return daily_data_list_.size();
}
inline void RechargeRewardData::clear_daily_data_list() {
  daily_data_list_.Clear();
}
inline ::google::protobuf::uint32 RechargeRewardData::daily_data_list(int index) const {
  return daily_data_list_.Get(index);
}
inline void RechargeRewardData::set_daily_data_list(int index, ::google::protobuf::uint32 value) {
  daily_data_list_.Set(index, value);
}
inline void RechargeRewardData::add_daily_data_list(::google::protobuf::uint32 value) {
  daily_data_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RechargeRewardData::daily_data_list() const {
  return daily_data_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RechargeRewardData::mutable_daily_data_list() {
  return &daily_data_list_;
}

// optional uint32 last_activity_data_id = 3;
inline bool RechargeRewardData::has_last_activity_data_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeRewardData::set_has_last_activity_data_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeRewardData::clear_has_last_activity_data_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeRewardData::clear_last_activity_data_id() {
  last_activity_data_id_ = 0u;
  clear_has_last_activity_data_id();
}
inline ::google::protobuf::uint32 RechargeRewardData::last_activity_data_id() const {
  return last_activity_data_id_;
}
inline void RechargeRewardData::set_last_activity_data_id(::google::protobuf::uint32 value) {
  set_has_last_activity_data_id();
  last_activity_data_id_ = value;
}

// -------------------------------------------------------------------

// TotalRechargeRewardData

// optional uint32 total_amount = 1;
inline bool TotalRechargeRewardData::has_total_amount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TotalRechargeRewardData::set_has_total_amount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TotalRechargeRewardData::clear_has_total_amount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TotalRechargeRewardData::clear_total_amount() {
  total_amount_ = 0u;
  clear_has_total_amount();
}
inline ::google::protobuf::uint32 TotalRechargeRewardData::total_amount() const {
  return total_amount_;
}
inline void TotalRechargeRewardData::set_total_amount(::google::protobuf::uint32 value) {
  set_has_total_amount();
  total_amount_ = value;
}

// repeated uint32 reward_record_list = 2;
inline int TotalRechargeRewardData::reward_record_list_size() const {
  return reward_record_list_.size();
}
inline void TotalRechargeRewardData::clear_reward_record_list() {
  reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 TotalRechargeRewardData::reward_record_list(int index) const {
  return reward_record_list_.Get(index);
}
inline void TotalRechargeRewardData::set_reward_record_list(int index, ::google::protobuf::uint32 value) {
  reward_record_list_.Set(index, value);
}
inline void TotalRechargeRewardData::add_reward_record_list(::google::protobuf::uint32 value) {
  reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TotalRechargeRewardData::reward_record_list() const {
  return reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TotalRechargeRewardData::mutable_reward_record_list() {
  return &reward_record_list_;
}

// optional uint32 last_activity_data_id = 3;
inline bool TotalRechargeRewardData::has_last_activity_data_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TotalRechargeRewardData::set_has_last_activity_data_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TotalRechargeRewardData::clear_has_last_activity_data_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TotalRechargeRewardData::clear_last_activity_data_id() {
  last_activity_data_id_ = 0u;
  clear_has_last_activity_data_id();
}
inline ::google::protobuf::uint32 TotalRechargeRewardData::last_activity_data_id() const {
  return last_activity_data_id_;
}
inline void TotalRechargeRewardData::set_last_activity_data_id(::google::protobuf::uint32 value) {
  set_has_last_activity_data_id();
  last_activity_data_id_ = value;
}

// -------------------------------------------------------------------

// HotSaleGoods

// optional uint32 goods_id = 1;
inline bool HotSaleGoods::has_goods_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HotSaleGoods::set_has_goods_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HotSaleGoods::clear_has_goods_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HotSaleGoods::clear_goods_id() {
  goods_id_ = 0u;
  clear_has_goods_id();
}
inline ::google::protobuf::uint32 HotSaleGoods::goods_id() const {
  return goods_id_;
}
inline void HotSaleGoods::set_goods_id(::google::protobuf::uint32 value) {
  set_has_goods_id();
  goods_id_ = value;
}

// optional uint32 cur_data_idx = 2;
inline bool HotSaleGoods::has_cur_data_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HotSaleGoods::set_has_cur_data_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HotSaleGoods::clear_has_cur_data_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HotSaleGoods::clear_cur_data_idx() {
  cur_data_idx_ = 0u;
  clear_has_cur_data_idx();
}
inline ::google::protobuf::uint32 HotSaleGoods::cur_data_idx() const {
  return cur_data_idx_;
}
inline void HotSaleGoods::set_cur_data_idx(::google::protobuf::uint32 value) {
  set_has_cur_data_idx();
  cur_data_idx_ = value;
}

// optional uint32 buy_times = 3;
inline bool HotSaleGoods::has_buy_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HotSaleGoods::set_has_buy_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HotSaleGoods::clear_has_buy_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HotSaleGoods::clear_buy_times() {
  buy_times_ = 0u;
  clear_has_buy_times();
}
inline ::google::protobuf::uint32 HotSaleGoods::buy_times() const {
  return buy_times_;
}
inline void HotSaleGoods::set_buy_times(::google::protobuf::uint32 value) {
  set_has_buy_times();
  buy_times_ = value;
}

// optional uint32 take_times = 4;
inline bool HotSaleGoods::has_take_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HotSaleGoods::set_has_take_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HotSaleGoods::clear_has_take_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HotSaleGoods::clear_take_times() {
  take_times_ = 0u;
  clear_has_take_times();
}
inline ::google::protobuf::uint32 HotSaleGoods::take_times() const {
  return take_times_;
}
inline void HotSaleGoods::set_take_times(::google::protobuf::uint32 value) {
  set_has_take_times();
  take_times_ = value;
}

// -------------------------------------------------------------------

// RoleHotSaleGoodsData

// optional uint32 last_activity_data_id = 1;
inline bool RoleHotSaleGoodsData::has_last_activity_data_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleHotSaleGoodsData::set_has_last_activity_data_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleHotSaleGoodsData::clear_has_last_activity_data_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleHotSaleGoodsData::clear_last_activity_data_id() {
  last_activity_data_id_ = 0u;
  clear_has_last_activity_data_id();
}
inline ::google::protobuf::uint32 RoleHotSaleGoodsData::last_activity_data_id() const {
  return last_activity_data_id_;
}
inline void RoleHotSaleGoodsData::set_last_activity_data_id(::google::protobuf::uint32 value) {
  set_has_last_activity_data_id();
  last_activity_data_id_ = value;
}

// repeated .PB.HotSaleGoods goods_list = 2;
inline int RoleHotSaleGoodsData::goods_list_size() const {
  return goods_list_.size();
}
inline void RoleHotSaleGoodsData::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::HotSaleGoods& RoleHotSaleGoodsData::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::HotSaleGoods* RoleHotSaleGoodsData::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::HotSaleGoods* RoleHotSaleGoodsData::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::HotSaleGoods >&
RoleHotSaleGoodsData::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::HotSaleGoods >*
RoleHotSaleGoodsData::mutable_goods_list() {
  return &goods_list_;
}

// -------------------------------------------------------------------

// RoleCampRecruitData

// optional uint32 cur_data_id = 1;
inline bool RoleCampRecruitData::has_cur_data_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleCampRecruitData::set_has_cur_data_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleCampRecruitData::clear_has_cur_data_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleCampRecruitData::clear_cur_data_id() {
  cur_data_id_ = 0u;
  clear_has_cur_data_id();
}
inline ::google::protobuf::uint32 RoleCampRecruitData::cur_data_id() const {
  return cur_data_id_;
}
inline void RoleCampRecruitData::set_cur_data_id(::google::protobuf::uint32 value) {
  set_has_cur_data_id();
  cur_data_id_ = value;
}

// optional uint32 today_already_recruit_times = 2;
inline bool RoleCampRecruitData::has_today_already_recruit_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleCampRecruitData::set_has_today_already_recruit_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleCampRecruitData::clear_has_today_already_recruit_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleCampRecruitData::clear_today_already_recruit_times() {
  today_already_recruit_times_ = 0u;
  clear_has_today_already_recruit_times();
}
inline ::google::protobuf::uint32 RoleCampRecruitData::today_already_recruit_times() const {
  return today_already_recruit_times_;
}
inline void RoleCampRecruitData::set_today_already_recruit_times(::google::protobuf::uint32 value) {
  set_has_today_already_recruit_times();
  today_already_recruit_times_ = value;
}

// repeated uint32 camp_score_list = 3;
inline int RoleCampRecruitData::camp_score_list_size() const {
  return camp_score_list_.size();
}
inline void RoleCampRecruitData::clear_camp_score_list() {
  camp_score_list_.Clear();
}
inline ::google::protobuf::uint32 RoleCampRecruitData::camp_score_list(int index) const {
  return camp_score_list_.Get(index);
}
inline void RoleCampRecruitData::set_camp_score_list(int index, ::google::protobuf::uint32 value) {
  camp_score_list_.Set(index, value);
}
inline void RoleCampRecruitData::add_camp_score_list(::google::protobuf::uint32 value) {
  camp_score_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleCampRecruitData::camp_score_list() const {
  return camp_score_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleCampRecruitData::mutable_camp_score_list() {
  return &camp_score_list_;
}

// repeated uint32 score_task_reward_record_list = 4;
inline int RoleCampRecruitData::score_task_reward_record_list_size() const {
  return score_task_reward_record_list_.size();
}
inline void RoleCampRecruitData::clear_score_task_reward_record_list() {
  score_task_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 RoleCampRecruitData::score_task_reward_record_list(int index) const {
  return score_task_reward_record_list_.Get(index);
}
inline void RoleCampRecruitData::set_score_task_reward_record_list(int index, ::google::protobuf::uint32 value) {
  score_task_reward_record_list_.Set(index, value);
}
inline void RoleCampRecruitData::add_score_task_reward_record_list(::google::protobuf::uint32 value) {
  score_task_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleCampRecruitData::score_task_reward_record_list() const {
  return score_task_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleCampRecruitData::mutable_score_task_reward_record_list() {
  return &score_task_reward_record_list_;
}

// -------------------------------------------------------------------

// UnlockActivityData

// optional uint32 is_score_for_shop = 1;
inline bool UnlockActivityData::has_is_score_for_shop() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnlockActivityData::set_has_is_score_for_shop() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnlockActivityData::clear_has_is_score_for_shop() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnlockActivityData::clear_is_score_for_shop() {
  is_score_for_shop_ = 0u;
  clear_has_is_score_for_shop();
}
inline ::google::protobuf::uint32 UnlockActivityData::is_score_for_shop() const {
  return is_score_for_shop_;
}
inline void UnlockActivityData::set_is_score_for_shop(::google::protobuf::uint32 value) {
  set_has_is_score_for_shop();
  is_score_for_shop_ = value;
}

// optional uint32 watching_video_times = 2;
inline bool UnlockActivityData::has_watching_video_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnlockActivityData::set_has_watching_video_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnlockActivityData::clear_has_watching_video_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnlockActivityData::clear_watching_video_times() {
  watching_video_times_ = 0u;
  clear_has_watching_video_times();
}
inline ::google::protobuf::uint32 UnlockActivityData::watching_video_times() const {
  return watching_video_times_;
}
inline void UnlockActivityData::set_watching_video_times(::google::protobuf::uint32 value) {
  set_has_watching_video_times();
  watching_video_times_ = value;
}

// -------------------------------------------------------------------

// RechargeAndCostRankData

// optional uint32 last_activity_data_id = 1;
inline bool RechargeAndCostRankData::has_last_activity_data_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RechargeAndCostRankData::set_has_last_activity_data_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RechargeAndCostRankData::clear_has_last_activity_data_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RechargeAndCostRankData::clear_last_activity_data_id() {
  last_activity_data_id_ = 0u;
  clear_has_last_activity_data_id();
}
inline ::google::protobuf::uint32 RechargeAndCostRankData::last_activity_data_id() const {
  return last_activity_data_id_;
}
inline void RechargeAndCostRankData::set_last_activity_data_id(::google::protobuf::uint32 value) {
  set_has_last_activity_data_id();
  last_activity_data_id_ = value;
}

// optional uint32 cost_diamond = 2;
inline bool RechargeAndCostRankData::has_cost_diamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RechargeAndCostRankData::set_has_cost_diamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RechargeAndCostRankData::clear_has_cost_diamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RechargeAndCostRankData::clear_cost_diamond() {
  cost_diamond_ = 0u;
  clear_has_cost_diamond();
}
inline ::google::protobuf::uint32 RechargeAndCostRankData::cost_diamond() const {
  return cost_diamond_;
}
inline void RechargeAndCostRankData::set_cost_diamond(::google::protobuf::uint32 value) {
  set_has_cost_diamond();
  cost_diamond_ = value;
}

// optional uint32 recharge_amount = 3;
inline bool RechargeAndCostRankData::has_recharge_amount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RechargeAndCostRankData::set_has_recharge_amount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RechargeAndCostRankData::clear_has_recharge_amount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RechargeAndCostRankData::clear_recharge_amount() {
  recharge_amount_ = 0u;
  clear_has_recharge_amount();
}
inline ::google::protobuf::uint32 RechargeAndCostRankData::recharge_amount() const {
  return recharge_amount_;
}
inline void RechargeAndCostRankData::set_recharge_amount(::google::protobuf::uint32 value) {
  set_has_recharge_amount();
  recharge_amount_ = value;
}

// -------------------------------------------------------------------

// RoleActivityData

// optional .PB.TQTData tqt_data = 1;
inline bool RoleActivityData::has_tqt_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleActivityData::set_has_tqt_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleActivityData::clear_has_tqt_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleActivityData::clear_tqt_data() {
  if (tqt_data_ != NULL) tqt_data_->::PB::TQTData::Clear();
  clear_has_tqt_data();
}
inline const ::PB::TQTData& RoleActivityData::tqt_data() const {
  return tqt_data_ != NULL ? *tqt_data_ : *default_instance_->tqt_data_;
}
inline ::PB::TQTData* RoleActivityData::mutable_tqt_data() {
  set_has_tqt_data();
  if (tqt_data_ == NULL) tqt_data_ = new ::PB::TQTData;
  return tqt_data_;
}
inline ::PB::TQTData* RoleActivityData::release_tqt_data() {
  clear_has_tqt_data();
  ::PB::TQTData* temp = tqt_data_;
  tqt_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_tqt_data(::PB::TQTData* tqt_data) {
  delete tqt_data_;
  tqt_data_ = tqt_data;
  if (tqt_data) {
    set_has_tqt_data();
  } else {
    clear_has_tqt_data();
  }
}

// optional .PB.YCSData ycs_data = 2;
inline bool RoleActivityData::has_ycs_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleActivityData::set_has_ycs_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleActivityData::clear_has_ycs_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleActivityData::clear_ycs_data() {
  if (ycs_data_ != NULL) ycs_data_->::PB::YCSData::Clear();
  clear_has_ycs_data();
}
inline const ::PB::YCSData& RoleActivityData::ycs_data() const {
  return ycs_data_ != NULL ? *ycs_data_ : *default_instance_->ycs_data_;
}
inline ::PB::YCSData* RoleActivityData::mutable_ycs_data() {
  set_has_ycs_data();
  if (ycs_data_ == NULL) ycs_data_ = new ::PB::YCSData;
  return ycs_data_;
}
inline ::PB::YCSData* RoleActivityData::release_ycs_data() {
  clear_has_ycs_data();
  ::PB::YCSData* temp = ycs_data_;
  ycs_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_ycs_data(::PB::YCSData* ycs_data) {
  delete ycs_data_;
  ycs_data_ = ycs_data;
  if (ycs_data) {
    set_has_ycs_data();
  } else {
    clear_has_ycs_data();
  }
}

// repeated .PB.SevenDayTargetData seven_day_target_list = 3;
inline int RoleActivityData::seven_day_target_list_size() const {
  return seven_day_target_list_.size();
}
inline void RoleActivityData::clear_seven_day_target_list() {
  seven_day_target_list_.Clear();
}
inline const ::PB::SevenDayTargetData& RoleActivityData::seven_day_target_list(int index) const {
  return seven_day_target_list_.Get(index);
}
inline ::PB::SevenDayTargetData* RoleActivityData::mutable_seven_day_target_list(int index) {
  return seven_day_target_list_.Mutable(index);
}
inline ::PB::SevenDayTargetData* RoleActivityData::add_seven_day_target_list() {
  return seven_day_target_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SevenDayTargetData >&
RoleActivityData::seven_day_target_list() const {
  return seven_day_target_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SevenDayTargetData >*
RoleActivityData::mutable_seven_day_target_list() {
  return &seven_day_target_list_;
}

// repeated uint32 completion_reward_record_list = 4;
inline int RoleActivityData::completion_reward_record_list_size() const {
  return completion_reward_record_list_.size();
}
inline void RoleActivityData::clear_completion_reward_record_list() {
  completion_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 RoleActivityData::completion_reward_record_list(int index) const {
  return completion_reward_record_list_.Get(index);
}
inline void RoleActivityData::set_completion_reward_record_list(int index, ::google::protobuf::uint32 value) {
  completion_reward_record_list_.Set(index, value);
}
inline void RoleActivityData::add_completion_reward_record_list(::google::protobuf::uint32 value) {
  completion_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleActivityData::completion_reward_record_list() const {
  return completion_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleActivityData::mutable_completion_reward_record_list() {
  return &completion_reward_record_list_;
}

// repeated .PB.LevelShopActivityData level_shop_activity_data_list = 5;
inline int RoleActivityData::level_shop_activity_data_list_size() const {
  return level_shop_activity_data_list_.size();
}
inline void RoleActivityData::clear_level_shop_activity_data_list() {
  level_shop_activity_data_list_.Clear();
}
inline const ::PB::LevelShopActivityData& RoleActivityData::level_shop_activity_data_list(int index) const {
  return level_shop_activity_data_list_.Get(index);
}
inline ::PB::LevelShopActivityData* RoleActivityData::mutable_level_shop_activity_data_list(int index) {
  return level_shop_activity_data_list_.Mutable(index);
}
inline ::PB::LevelShopActivityData* RoleActivityData::add_level_shop_activity_data_list() {
  return level_shop_activity_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::LevelShopActivityData >&
RoleActivityData::level_shop_activity_data_list() const {
  return level_shop_activity_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::LevelShopActivityData >*
RoleActivityData::mutable_level_shop_activity_data_list() {
  return &level_shop_activity_data_list_;
}

// repeated uint32 level_gift_take_record_list = 6;
inline int RoleActivityData::level_gift_take_record_list_size() const {
  return level_gift_take_record_list_.size();
}
inline void RoleActivityData::clear_level_gift_take_record_list() {
  level_gift_take_record_list_.Clear();
}
inline ::google::protobuf::uint32 RoleActivityData::level_gift_take_record_list(int index) const {
  return level_gift_take_record_list_.Get(index);
}
inline void RoleActivityData::set_level_gift_take_record_list(int index, ::google::protobuf::uint32 value) {
  level_gift_take_record_list_.Set(index, value);
}
inline void RoleActivityData::add_level_gift_take_record_list(::google::protobuf::uint32 value) {
  level_gift_take_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleActivityData::level_gift_take_record_list() const {
  return level_gift_take_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleActivityData::mutable_level_gift_take_record_list() {
  return &level_gift_take_record_list_;
}

// optional .PB.VipGiftData vip_gift_data = 7;
inline bool RoleActivityData::has_vip_gift_data() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoleActivityData::set_has_vip_gift_data() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoleActivityData::clear_has_vip_gift_data() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoleActivityData::clear_vip_gift_data() {
  if (vip_gift_data_ != NULL) vip_gift_data_->::PB::VipGiftData::Clear();
  clear_has_vip_gift_data();
}
inline const ::PB::VipGiftData& RoleActivityData::vip_gift_data() const {
  return vip_gift_data_ != NULL ? *vip_gift_data_ : *default_instance_->vip_gift_data_;
}
inline ::PB::VipGiftData* RoleActivityData::mutable_vip_gift_data() {
  set_has_vip_gift_data();
  if (vip_gift_data_ == NULL) vip_gift_data_ = new ::PB::VipGiftData;
  return vip_gift_data_;
}
inline ::PB::VipGiftData* RoleActivityData::release_vip_gift_data() {
  clear_has_vip_gift_data();
  ::PB::VipGiftData* temp = vip_gift_data_;
  vip_gift_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_vip_gift_data(::PB::VipGiftData* vip_gift_data) {
  delete vip_gift_data_;
  vip_gift_data_ = vip_gift_data;
  if (vip_gift_data) {
    set_has_vip_gift_data();
  } else {
    clear_has_vip_gift_data();
  }
}

// optional .PB.RoleRechargeData recharge_data = 8;
inline bool RoleActivityData::has_recharge_data() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoleActivityData::set_has_recharge_data() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoleActivityData::clear_has_recharge_data() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoleActivityData::clear_recharge_data() {
  if (recharge_data_ != NULL) recharge_data_->::PB::RoleRechargeData::Clear();
  clear_has_recharge_data();
}
inline const ::PB::RoleRechargeData& RoleActivityData::recharge_data() const {
  return recharge_data_ != NULL ? *recharge_data_ : *default_instance_->recharge_data_;
}
inline ::PB::RoleRechargeData* RoleActivityData::mutable_recharge_data() {
  set_has_recharge_data();
  if (recharge_data_ == NULL) recharge_data_ = new ::PB::RoleRechargeData;
  return recharge_data_;
}
inline ::PB::RoleRechargeData* RoleActivityData::release_recharge_data() {
  clear_has_recharge_data();
  ::PB::RoleRechargeData* temp = recharge_data_;
  recharge_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_recharge_data(::PB::RoleRechargeData* recharge_data) {
  delete recharge_data_;
  recharge_data_ = recharge_data;
  if (recharge_data) {
    set_has_recharge_data();
  } else {
    clear_has_recharge_data();
  }
}

// optional .PB.OpenServerFundData open_server_fund_data = 9;
inline bool RoleActivityData::has_open_server_fund_data() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoleActivityData::set_has_open_server_fund_data() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoleActivityData::clear_has_open_server_fund_data() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoleActivityData::clear_open_server_fund_data() {
  if (open_server_fund_data_ != NULL) open_server_fund_data_->::PB::OpenServerFundData::Clear();
  clear_has_open_server_fund_data();
}
inline const ::PB::OpenServerFundData& RoleActivityData::open_server_fund_data() const {
  return open_server_fund_data_ != NULL ? *open_server_fund_data_ : *default_instance_->open_server_fund_data_;
}
inline ::PB::OpenServerFundData* RoleActivityData::mutable_open_server_fund_data() {
  set_has_open_server_fund_data();
  if (open_server_fund_data_ == NULL) open_server_fund_data_ = new ::PB::OpenServerFundData;
  return open_server_fund_data_;
}
inline ::PB::OpenServerFundData* RoleActivityData::release_open_server_fund_data() {
  clear_has_open_server_fund_data();
  ::PB::OpenServerFundData* temp = open_server_fund_data_;
  open_server_fund_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_open_server_fund_data(::PB::OpenServerFundData* open_server_fund_data) {
  delete open_server_fund_data_;
  open_server_fund_data_ = open_server_fund_data;
  if (open_server_fund_data) {
    set_has_open_server_fund_data();
  } else {
    clear_has_open_server_fund_data();
  }
}

// optional .PB.AllPeopleWelfareData all_people_welfare_data = 10;
inline bool RoleActivityData::has_all_people_welfare_data() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoleActivityData::set_has_all_people_welfare_data() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoleActivityData::clear_has_all_people_welfare_data() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoleActivityData::clear_all_people_welfare_data() {
  if (all_people_welfare_data_ != NULL) all_people_welfare_data_->::PB::AllPeopleWelfareData::Clear();
  clear_has_all_people_welfare_data();
}
inline const ::PB::AllPeopleWelfareData& RoleActivityData::all_people_welfare_data() const {
  return all_people_welfare_data_ != NULL ? *all_people_welfare_data_ : *default_instance_->all_people_welfare_data_;
}
inline ::PB::AllPeopleWelfareData* RoleActivityData::mutable_all_people_welfare_data() {
  set_has_all_people_welfare_data();
  if (all_people_welfare_data_ == NULL) all_people_welfare_data_ = new ::PB::AllPeopleWelfareData;
  return all_people_welfare_data_;
}
inline ::PB::AllPeopleWelfareData* RoleActivityData::release_all_people_welfare_data() {
  clear_has_all_people_welfare_data();
  ::PB::AllPeopleWelfareData* temp = all_people_welfare_data_;
  all_people_welfare_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_all_people_welfare_data(::PB::AllPeopleWelfareData* all_people_welfare_data) {
  delete all_people_welfare_data_;
  all_people_welfare_data_ = all_people_welfare_data;
  if (all_people_welfare_data) {
    set_has_all_people_welfare_data();
  } else {
    clear_has_all_people_welfare_data();
  }
}

// optional .PB.LimitActivityData limit_activity_data = 11;
inline bool RoleActivityData::has_limit_activity_data() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoleActivityData::set_has_limit_activity_data() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoleActivityData::clear_has_limit_activity_data() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoleActivityData::clear_limit_activity_data() {
  if (limit_activity_data_ != NULL) limit_activity_data_->::PB::LimitActivityData::Clear();
  clear_has_limit_activity_data();
}
inline const ::PB::LimitActivityData& RoleActivityData::limit_activity_data() const {
  return limit_activity_data_ != NULL ? *limit_activity_data_ : *default_instance_->limit_activity_data_;
}
inline ::PB::LimitActivityData* RoleActivityData::mutable_limit_activity_data() {
  set_has_limit_activity_data();
  if (limit_activity_data_ == NULL) limit_activity_data_ = new ::PB::LimitActivityData;
  return limit_activity_data_;
}
inline ::PB::LimitActivityData* RoleActivityData::release_limit_activity_data() {
  clear_has_limit_activity_data();
  ::PB::LimitActivityData* temp = limit_activity_data_;
  limit_activity_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_limit_activity_data(::PB::LimitActivityData* limit_activity_data) {
  delete limit_activity_data_;
  limit_activity_data_ = limit_activity_data;
  if (limit_activity_data) {
    set_has_limit_activity_data();
  } else {
    clear_has_limit_activity_data();
  }
}

// optional uint32 is_take_next_day_reward = 12;
inline bool RoleActivityData::has_is_take_next_day_reward() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoleActivityData::set_has_is_take_next_day_reward() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoleActivityData::clear_has_is_take_next_day_reward() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoleActivityData::clear_is_take_next_day_reward() {
  is_take_next_day_reward_ = 0u;
  clear_has_is_take_next_day_reward();
}
inline ::google::protobuf::uint32 RoleActivityData::is_take_next_day_reward() const {
  return is_take_next_day_reward_;
}
inline void RoleActivityData::set_is_take_next_day_reward(::google::protobuf::uint32 value) {
  set_has_is_take_next_day_reward();
  is_take_next_day_reward_ = value;
}

// optional .PB.SuperDiscountData super_discount_data = 13;
inline bool RoleActivityData::has_super_discount_data() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoleActivityData::set_has_super_discount_data() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoleActivityData::clear_has_super_discount_data() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoleActivityData::clear_super_discount_data() {
  if (super_discount_data_ != NULL) super_discount_data_->::PB::SuperDiscountData::Clear();
  clear_has_super_discount_data();
}
inline const ::PB::SuperDiscountData& RoleActivityData::super_discount_data() const {
  return super_discount_data_ != NULL ? *super_discount_data_ : *default_instance_->super_discount_data_;
}
inline ::PB::SuperDiscountData* RoleActivityData::mutable_super_discount_data() {
  set_has_super_discount_data();
  if (super_discount_data_ == NULL) super_discount_data_ = new ::PB::SuperDiscountData;
  return super_discount_data_;
}
inline ::PB::SuperDiscountData* RoleActivityData::release_super_discount_data() {
  clear_has_super_discount_data();
  ::PB::SuperDiscountData* temp = super_discount_data_;
  super_discount_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_super_discount_data(::PB::SuperDiscountData* super_discount_data) {
  delete super_discount_data_;
  super_discount_data_ = super_discount_data;
  if (super_discount_data) {
    set_has_super_discount_data();
  } else {
    clear_has_super_discount_data();
  }
}

// optional .PB.RoleFestivalActivityInfo role_festival_activity_info = 14;
inline bool RoleActivityData::has_role_festival_activity_info() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoleActivityData::set_has_role_festival_activity_info() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoleActivityData::clear_has_role_festival_activity_info() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoleActivityData::clear_role_festival_activity_info() {
  if (role_festival_activity_info_ != NULL) role_festival_activity_info_->::PB::RoleFestivalActivityInfo::Clear();
  clear_has_role_festival_activity_info();
}
inline const ::PB::RoleFestivalActivityInfo& RoleActivityData::role_festival_activity_info() const {
  return role_festival_activity_info_ != NULL ? *role_festival_activity_info_ : *default_instance_->role_festival_activity_info_;
}
inline ::PB::RoleFestivalActivityInfo* RoleActivityData::mutable_role_festival_activity_info() {
  set_has_role_festival_activity_info();
  if (role_festival_activity_info_ == NULL) role_festival_activity_info_ = new ::PB::RoleFestivalActivityInfo;
  return role_festival_activity_info_;
}
inline ::PB::RoleFestivalActivityInfo* RoleActivityData::release_role_festival_activity_info() {
  clear_has_role_festival_activity_info();
  ::PB::RoleFestivalActivityInfo* temp = role_festival_activity_info_;
  role_festival_activity_info_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_festival_activity_info(::PB::RoleFestivalActivityInfo* role_festival_activity_info) {
  delete role_festival_activity_info_;
  role_festival_activity_info_ = role_festival_activity_info;
  if (role_festival_activity_info) {
    set_has_role_festival_activity_info();
  } else {
    clear_has_role_festival_activity_info();
  }
}

// optional .PB.RoleAccurateRecommendData role_accurate_recommend_data = 15;
inline bool RoleActivityData::has_role_accurate_recommend_data() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoleActivityData::set_has_role_accurate_recommend_data() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoleActivityData::clear_has_role_accurate_recommend_data() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoleActivityData::clear_role_accurate_recommend_data() {
  if (role_accurate_recommend_data_ != NULL) role_accurate_recommend_data_->::PB::RoleAccurateRecommendData::Clear();
  clear_has_role_accurate_recommend_data();
}
inline const ::PB::RoleAccurateRecommendData& RoleActivityData::role_accurate_recommend_data() const {
  return role_accurate_recommend_data_ != NULL ? *role_accurate_recommend_data_ : *default_instance_->role_accurate_recommend_data_;
}
inline ::PB::RoleAccurateRecommendData* RoleActivityData::mutable_role_accurate_recommend_data() {
  set_has_role_accurate_recommend_data();
  if (role_accurate_recommend_data_ == NULL) role_accurate_recommend_data_ = new ::PB::RoleAccurateRecommendData;
  return role_accurate_recommend_data_;
}
inline ::PB::RoleAccurateRecommendData* RoleActivityData::release_role_accurate_recommend_data() {
  clear_has_role_accurate_recommend_data();
  ::PB::RoleAccurateRecommendData* temp = role_accurate_recommend_data_;
  role_accurate_recommend_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_accurate_recommend_data(::PB::RoleAccurateRecommendData* role_accurate_recommend_data) {
  delete role_accurate_recommend_data_;
  role_accurate_recommend_data_ = role_accurate_recommend_data;
  if (role_accurate_recommend_data) {
    set_has_role_accurate_recommend_data();
  } else {
    clear_has_role_accurate_recommend_data();
  }
}

// optional .PB.RoleChristmasData role_christmas_data = 16;
inline bool RoleActivityData::has_role_christmas_data() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoleActivityData::set_has_role_christmas_data() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoleActivityData::clear_has_role_christmas_data() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoleActivityData::clear_role_christmas_data() {
  if (role_christmas_data_ != NULL) role_christmas_data_->::PB::RoleChristmasData::Clear();
  clear_has_role_christmas_data();
}
inline const ::PB::RoleChristmasData& RoleActivityData::role_christmas_data() const {
  return role_christmas_data_ != NULL ? *role_christmas_data_ : *default_instance_->role_christmas_data_;
}
inline ::PB::RoleChristmasData* RoleActivityData::mutable_role_christmas_data() {
  set_has_role_christmas_data();
  if (role_christmas_data_ == NULL) role_christmas_data_ = new ::PB::RoleChristmasData;
  return role_christmas_data_;
}
inline ::PB::RoleChristmasData* RoleActivityData::release_role_christmas_data() {
  clear_has_role_christmas_data();
  ::PB::RoleChristmasData* temp = role_christmas_data_;
  role_christmas_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_christmas_data(::PB::RoleChristmasData* role_christmas_data) {
  delete role_christmas_data_;
  role_christmas_data_ = role_christmas_data;
  if (role_christmas_data) {
    set_has_role_christmas_data();
  } else {
    clear_has_role_christmas_data();
  }
}

// optional .PB.OnlineRewardData online_reward_data = 17;
inline bool RoleActivityData::has_online_reward_data() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoleActivityData::set_has_online_reward_data() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoleActivityData::clear_has_online_reward_data() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoleActivityData::clear_online_reward_data() {
  if (online_reward_data_ != NULL) online_reward_data_->::PB::OnlineRewardData::Clear();
  clear_has_online_reward_data();
}
inline const ::PB::OnlineRewardData& RoleActivityData::online_reward_data() const {
  return online_reward_data_ != NULL ? *online_reward_data_ : *default_instance_->online_reward_data_;
}
inline ::PB::OnlineRewardData* RoleActivityData::mutable_online_reward_data() {
  set_has_online_reward_data();
  if (online_reward_data_ == NULL) online_reward_data_ = new ::PB::OnlineRewardData;
  return online_reward_data_;
}
inline ::PB::OnlineRewardData* RoleActivityData::release_online_reward_data() {
  clear_has_online_reward_data();
  ::PB::OnlineRewardData* temp = online_reward_data_;
  online_reward_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_online_reward_data(::PB::OnlineRewardData* online_reward_data) {
  delete online_reward_data_;
  online_reward_data_ = online_reward_data;
  if (online_reward_data) {
    set_has_online_reward_data();
  } else {
    clear_has_online_reward_data();
  }
}

// optional .PB.SevenDayLoginData seven_day_login_data = 18;
inline bool RoleActivityData::has_seven_day_login_data() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoleActivityData::set_has_seven_day_login_data() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoleActivityData::clear_has_seven_day_login_data() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoleActivityData::clear_seven_day_login_data() {
  if (seven_day_login_data_ != NULL) seven_day_login_data_->::PB::SevenDayLoginData::Clear();
  clear_has_seven_day_login_data();
}
inline const ::PB::SevenDayLoginData& RoleActivityData::seven_day_login_data() const {
  return seven_day_login_data_ != NULL ? *seven_day_login_data_ : *default_instance_->seven_day_login_data_;
}
inline ::PB::SevenDayLoginData* RoleActivityData::mutable_seven_day_login_data() {
  set_has_seven_day_login_data();
  if (seven_day_login_data_ == NULL) seven_day_login_data_ = new ::PB::SevenDayLoginData;
  return seven_day_login_data_;
}
inline ::PB::SevenDayLoginData* RoleActivityData::release_seven_day_login_data() {
  clear_has_seven_day_login_data();
  ::PB::SevenDayLoginData* temp = seven_day_login_data_;
  seven_day_login_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_seven_day_login_data(::PB::SevenDayLoginData* seven_day_login_data) {
  delete seven_day_login_data_;
  seven_day_login_data_ = seven_day_login_data;
  if (seven_day_login_data) {
    set_has_seven_day_login_data();
  } else {
    clear_has_seven_day_login_data();
  }
}

// optional .PB.FacebookActivityData facebook_activity_data = 19;
inline bool RoleActivityData::has_facebook_activity_data() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoleActivityData::set_has_facebook_activity_data() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoleActivityData::clear_has_facebook_activity_data() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoleActivityData::clear_facebook_activity_data() {
  if (facebook_activity_data_ != NULL) facebook_activity_data_->::PB::FacebookActivityData::Clear();
  clear_has_facebook_activity_data();
}
inline const ::PB::FacebookActivityData& RoleActivityData::facebook_activity_data() const {
  return facebook_activity_data_ != NULL ? *facebook_activity_data_ : *default_instance_->facebook_activity_data_;
}
inline ::PB::FacebookActivityData* RoleActivityData::mutable_facebook_activity_data() {
  set_has_facebook_activity_data();
  if (facebook_activity_data_ == NULL) facebook_activity_data_ = new ::PB::FacebookActivityData;
  return facebook_activity_data_;
}
inline ::PB::FacebookActivityData* RoleActivityData::release_facebook_activity_data() {
  clear_has_facebook_activity_data();
  ::PB::FacebookActivityData* temp = facebook_activity_data_;
  facebook_activity_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_facebook_activity_data(::PB::FacebookActivityData* facebook_activity_data) {
  delete facebook_activity_data_;
  facebook_activity_data_ = facebook_activity_data;
  if (facebook_activity_data) {
    set_has_facebook_activity_data();
  } else {
    clear_has_facebook_activity_data();
  }
}

// optional .PB.RechargeRewardData recharge_reward_data = 20;
inline bool RoleActivityData::has_recharge_reward_data() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoleActivityData::set_has_recharge_reward_data() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoleActivityData::clear_has_recharge_reward_data() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoleActivityData::clear_recharge_reward_data() {
  if (recharge_reward_data_ != NULL) recharge_reward_data_->::PB::RechargeRewardData::Clear();
  clear_has_recharge_reward_data();
}
inline const ::PB::RechargeRewardData& RoleActivityData::recharge_reward_data() const {
  return recharge_reward_data_ != NULL ? *recharge_reward_data_ : *default_instance_->recharge_reward_data_;
}
inline ::PB::RechargeRewardData* RoleActivityData::mutable_recharge_reward_data() {
  set_has_recharge_reward_data();
  if (recharge_reward_data_ == NULL) recharge_reward_data_ = new ::PB::RechargeRewardData;
  return recharge_reward_data_;
}
inline ::PB::RechargeRewardData* RoleActivityData::release_recharge_reward_data() {
  clear_has_recharge_reward_data();
  ::PB::RechargeRewardData* temp = recharge_reward_data_;
  recharge_reward_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_recharge_reward_data(::PB::RechargeRewardData* recharge_reward_data) {
  delete recharge_reward_data_;
  recharge_reward_data_ = recharge_reward_data;
  if (recharge_reward_data) {
    set_has_recharge_reward_data();
  } else {
    clear_has_recharge_reward_data();
  }
}

// optional .PB.TotalRechargeRewardData total_recharge_reward_data = 21;
inline bool RoleActivityData::has_total_recharge_reward_data() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoleActivityData::set_has_total_recharge_reward_data() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoleActivityData::clear_has_total_recharge_reward_data() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoleActivityData::clear_total_recharge_reward_data() {
  if (total_recharge_reward_data_ != NULL) total_recharge_reward_data_->::PB::TotalRechargeRewardData::Clear();
  clear_has_total_recharge_reward_data();
}
inline const ::PB::TotalRechargeRewardData& RoleActivityData::total_recharge_reward_data() const {
  return total_recharge_reward_data_ != NULL ? *total_recharge_reward_data_ : *default_instance_->total_recharge_reward_data_;
}
inline ::PB::TotalRechargeRewardData* RoleActivityData::mutable_total_recharge_reward_data() {
  set_has_total_recharge_reward_data();
  if (total_recharge_reward_data_ == NULL) total_recharge_reward_data_ = new ::PB::TotalRechargeRewardData;
  return total_recharge_reward_data_;
}
inline ::PB::TotalRechargeRewardData* RoleActivityData::release_total_recharge_reward_data() {
  clear_has_total_recharge_reward_data();
  ::PB::TotalRechargeRewardData* temp = total_recharge_reward_data_;
  total_recharge_reward_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_total_recharge_reward_data(::PB::TotalRechargeRewardData* total_recharge_reward_data) {
  delete total_recharge_reward_data_;
  total_recharge_reward_data_ = total_recharge_reward_data;
  if (total_recharge_reward_data) {
    set_has_total_recharge_reward_data();
  } else {
    clear_has_total_recharge_reward_data();
  }
}

// optional .PB.SuperDiscountData new_super_discount_data = 22;
inline bool RoleActivityData::has_new_super_discount_data() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoleActivityData::set_has_new_super_discount_data() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoleActivityData::clear_has_new_super_discount_data() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoleActivityData::clear_new_super_discount_data() {
  if (new_super_discount_data_ != NULL) new_super_discount_data_->::PB::SuperDiscountData::Clear();
  clear_has_new_super_discount_data();
}
inline const ::PB::SuperDiscountData& RoleActivityData::new_super_discount_data() const {
  return new_super_discount_data_ != NULL ? *new_super_discount_data_ : *default_instance_->new_super_discount_data_;
}
inline ::PB::SuperDiscountData* RoleActivityData::mutable_new_super_discount_data() {
  set_has_new_super_discount_data();
  if (new_super_discount_data_ == NULL) new_super_discount_data_ = new ::PB::SuperDiscountData;
  return new_super_discount_data_;
}
inline ::PB::SuperDiscountData* RoleActivityData::release_new_super_discount_data() {
  clear_has_new_super_discount_data();
  ::PB::SuperDiscountData* temp = new_super_discount_data_;
  new_super_discount_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_new_super_discount_data(::PB::SuperDiscountData* new_super_discount_data) {
  delete new_super_discount_data_;
  new_super_discount_data_ = new_super_discount_data;
  if (new_super_discount_data) {
    set_has_new_super_discount_data();
  } else {
    clear_has_new_super_discount_data();
  }
}

// optional .PB.RoleHotSaleGoodsData role_hot_sale_goods = 23;
inline bool RoleActivityData::has_role_hot_sale_goods() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RoleActivityData::set_has_role_hot_sale_goods() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RoleActivityData::clear_has_role_hot_sale_goods() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RoleActivityData::clear_role_hot_sale_goods() {
  if (role_hot_sale_goods_ != NULL) role_hot_sale_goods_->::PB::RoleHotSaleGoodsData::Clear();
  clear_has_role_hot_sale_goods();
}
inline const ::PB::RoleHotSaleGoodsData& RoleActivityData::role_hot_sale_goods() const {
  return role_hot_sale_goods_ != NULL ? *role_hot_sale_goods_ : *default_instance_->role_hot_sale_goods_;
}
inline ::PB::RoleHotSaleGoodsData* RoleActivityData::mutable_role_hot_sale_goods() {
  set_has_role_hot_sale_goods();
  if (role_hot_sale_goods_ == NULL) role_hot_sale_goods_ = new ::PB::RoleHotSaleGoodsData;
  return role_hot_sale_goods_;
}
inline ::PB::RoleHotSaleGoodsData* RoleActivityData::release_role_hot_sale_goods() {
  clear_has_role_hot_sale_goods();
  ::PB::RoleHotSaleGoodsData* temp = role_hot_sale_goods_;
  role_hot_sale_goods_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_hot_sale_goods(::PB::RoleHotSaleGoodsData* role_hot_sale_goods) {
  delete role_hot_sale_goods_;
  role_hot_sale_goods_ = role_hot_sale_goods;
  if (role_hot_sale_goods) {
    set_has_role_hot_sale_goods();
  } else {
    clear_has_role_hot_sale_goods();
  }
}

// optional .PB.RoleCampRecruitData role_camp_recruit_data = 24;
inline bool RoleActivityData::has_role_camp_recruit_data() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RoleActivityData::set_has_role_camp_recruit_data() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RoleActivityData::clear_has_role_camp_recruit_data() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RoleActivityData::clear_role_camp_recruit_data() {
  if (role_camp_recruit_data_ != NULL) role_camp_recruit_data_->::PB::RoleCampRecruitData::Clear();
  clear_has_role_camp_recruit_data();
}
inline const ::PB::RoleCampRecruitData& RoleActivityData::role_camp_recruit_data() const {
  return role_camp_recruit_data_ != NULL ? *role_camp_recruit_data_ : *default_instance_->role_camp_recruit_data_;
}
inline ::PB::RoleCampRecruitData* RoleActivityData::mutable_role_camp_recruit_data() {
  set_has_role_camp_recruit_data();
  if (role_camp_recruit_data_ == NULL) role_camp_recruit_data_ = new ::PB::RoleCampRecruitData;
  return role_camp_recruit_data_;
}
inline ::PB::RoleCampRecruitData* RoleActivityData::release_role_camp_recruit_data() {
  clear_has_role_camp_recruit_data();
  ::PB::RoleCampRecruitData* temp = role_camp_recruit_data_;
  role_camp_recruit_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_camp_recruit_data(::PB::RoleCampRecruitData* role_camp_recruit_data) {
  delete role_camp_recruit_data_;
  role_camp_recruit_data_ = role_camp_recruit_data;
  if (role_camp_recruit_data) {
    set_has_role_camp_recruit_data();
  } else {
    clear_has_role_camp_recruit_data();
  }
}

// optional .PB.UnlockActivityData role_unlock_activity_data = 25;
inline bool RoleActivityData::has_role_unlock_activity_data() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RoleActivityData::set_has_role_unlock_activity_data() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RoleActivityData::clear_has_role_unlock_activity_data() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RoleActivityData::clear_role_unlock_activity_data() {
  if (role_unlock_activity_data_ != NULL) role_unlock_activity_data_->::PB::UnlockActivityData::Clear();
  clear_has_role_unlock_activity_data();
}
inline const ::PB::UnlockActivityData& RoleActivityData::role_unlock_activity_data() const {
  return role_unlock_activity_data_ != NULL ? *role_unlock_activity_data_ : *default_instance_->role_unlock_activity_data_;
}
inline ::PB::UnlockActivityData* RoleActivityData::mutable_role_unlock_activity_data() {
  set_has_role_unlock_activity_data();
  if (role_unlock_activity_data_ == NULL) role_unlock_activity_data_ = new ::PB::UnlockActivityData;
  return role_unlock_activity_data_;
}
inline ::PB::UnlockActivityData* RoleActivityData::release_role_unlock_activity_data() {
  clear_has_role_unlock_activity_data();
  ::PB::UnlockActivityData* temp = role_unlock_activity_data_;
  role_unlock_activity_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_unlock_activity_data(::PB::UnlockActivityData* role_unlock_activity_data) {
  delete role_unlock_activity_data_;
  role_unlock_activity_data_ = role_unlock_activity_data;
  if (role_unlock_activity_data) {
    set_has_role_unlock_activity_data();
  } else {
    clear_has_role_unlock_activity_data();
  }
}

// optional .PB.RechargeAndCostRankData role_recharge_and_cost_rank_data = 26;
inline bool RoleActivityData::has_role_recharge_and_cost_rank_data() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RoleActivityData::set_has_role_recharge_and_cost_rank_data() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RoleActivityData::clear_has_role_recharge_and_cost_rank_data() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RoleActivityData::clear_role_recharge_and_cost_rank_data() {
  if (role_recharge_and_cost_rank_data_ != NULL) role_recharge_and_cost_rank_data_->::PB::RechargeAndCostRankData::Clear();
  clear_has_role_recharge_and_cost_rank_data();
}
inline const ::PB::RechargeAndCostRankData& RoleActivityData::role_recharge_and_cost_rank_data() const {
  return role_recharge_and_cost_rank_data_ != NULL ? *role_recharge_and_cost_rank_data_ : *default_instance_->role_recharge_and_cost_rank_data_;
}
inline ::PB::RechargeAndCostRankData* RoleActivityData::mutable_role_recharge_and_cost_rank_data() {
  set_has_role_recharge_and_cost_rank_data();
  if (role_recharge_and_cost_rank_data_ == NULL) role_recharge_and_cost_rank_data_ = new ::PB::RechargeAndCostRankData;
  return role_recharge_and_cost_rank_data_;
}
inline ::PB::RechargeAndCostRankData* RoleActivityData::release_role_recharge_and_cost_rank_data() {
  clear_has_role_recharge_and_cost_rank_data();
  ::PB::RechargeAndCostRankData* temp = role_recharge_and_cost_rank_data_;
  role_recharge_and_cost_rank_data_ = NULL;
  return temp;
}
inline void RoleActivityData::set_allocated_role_recharge_and_cost_rank_data(::PB::RechargeAndCostRankData* role_recharge_and_cost_rank_data) {
  delete role_recharge_and_cost_rank_data_;
  role_recharge_and_cost_rank_data_ = role_recharge_and_cost_rank_data;
  if (role_recharge_and_cost_rank_data) {
    set_has_role_recharge_and_cost_rank_data();
  } else {
    clear_has_role_recharge_and_cost_rank_data();
  }
}

// -------------------------------------------------------------------

// LandPatrolEvent

// optional uint32 event_id = 1;
inline bool LandPatrolEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LandPatrolEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LandPatrolEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LandPatrolEvent::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 LandPatrolEvent::event_id() const {
  return event_id_;
}
inline void LandPatrolEvent::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional uint32 happen_time = 2;
inline bool LandPatrolEvent::has_happen_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LandPatrolEvent::set_has_happen_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LandPatrolEvent::clear_has_happen_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LandPatrolEvent::clear_happen_time() {
  happen_time_ = 0u;
  clear_has_happen_time();
}
inline ::google::protobuf::uint32 LandPatrolEvent::happen_time() const {
  return happen_time_;
}
inline void LandPatrolEvent::set_happen_time(::google::protobuf::uint32 value) {
  set_has_happen_time();
  happen_time_ = value;
}

// optional uint32 is_double_reward = 3;
inline bool LandPatrolEvent::has_is_double_reward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LandPatrolEvent::set_has_is_double_reward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LandPatrolEvent::clear_has_is_double_reward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LandPatrolEvent::clear_is_double_reward() {
  is_double_reward_ = 0u;
  clear_has_is_double_reward();
}
inline ::google::protobuf::uint32 LandPatrolEvent::is_double_reward() const {
  return is_double_reward_;
}
inline void LandPatrolEvent::set_is_double_reward(::google::protobuf::uint32 value) {
  set_has_is_double_reward();
  is_double_reward_ = value;
}

// -------------------------------------------------------------------

// LandCityData

// required uint32 city_id = 1;
inline bool LandCityData::has_city_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LandCityData::set_has_city_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LandCityData::clear_has_city_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LandCityData::clear_city_id() {
  city_id_ = 0u;
  clear_has_city_id();
}
inline ::google::protobuf::uint32 LandCityData::city_id() const {
  return city_id_;
}
inline void LandCityData::set_city_id(::google::protobuf::uint32 value) {
  set_has_city_id();
  city_id_ = value;
}

// optional uint32 skill_level = 2;
inline bool LandCityData::has_skill_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LandCityData::set_has_skill_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LandCityData::clear_has_skill_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LandCityData::clear_skill_level() {
  skill_level_ = 0u;
  clear_has_skill_level();
}
inline ::google::protobuf::uint32 LandCityData::skill_level() const {
  return skill_level_;
}
inline void LandCityData::set_skill_level(::google::protobuf::uint32 value) {
  set_has_skill_level();
  skill_level_ = value;
}

// optional uint32 patrol_hero_info_id = 3;
inline bool LandCityData::has_patrol_hero_info_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LandCityData::set_has_patrol_hero_info_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LandCityData::clear_has_patrol_hero_info_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LandCityData::clear_patrol_hero_info_id() {
  patrol_hero_info_id_ = 0u;
  clear_has_patrol_hero_info_id();
}
inline ::google::protobuf::uint32 LandCityData::patrol_hero_info_id() const {
  return patrol_hero_info_id_;
}
inline void LandCityData::set_patrol_hero_info_id(::google::protobuf::uint32 value) {
  set_has_patrol_hero_info_id();
  patrol_hero_info_id_ = value;
}

// optional uint32 start_patrol_time = 4;
inline bool LandCityData::has_start_patrol_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LandCityData::set_has_start_patrol_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LandCityData::clear_has_start_patrol_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LandCityData::clear_start_patrol_time() {
  start_patrol_time_ = 0u;
  clear_has_start_patrol_time();
}
inline ::google::protobuf::uint32 LandCityData::start_patrol_time() const {
  return start_patrol_time_;
}
inline void LandCityData::set_start_patrol_time(::google::protobuf::uint32 value) {
  set_has_start_patrol_time();
  start_patrol_time_ = value;
}

// optional uint32 patrol_type = 5;
inline bool LandCityData::has_patrol_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LandCityData::set_has_patrol_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LandCityData::clear_has_patrol_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LandCityData::clear_patrol_type() {
  patrol_type_ = 0u;
  clear_has_patrol_type();
}
inline ::google::protobuf::uint32 LandCityData::patrol_type() const {
  return patrol_type_;
}
inline void LandCityData::set_patrol_type(::google::protobuf::uint32 value) {
  set_has_patrol_type();
  patrol_type_ = value;
}

// optional uint32 time_type = 6;
inline bool LandCityData::has_time_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LandCityData::set_has_time_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LandCityData::clear_has_time_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LandCityData::clear_time_type() {
  time_type_ = 0u;
  clear_has_time_type();
}
inline ::google::protobuf::uint32 LandCityData::time_type() const {
  return time_type_;
}
inline void LandCityData::set_time_type(::google::protobuf::uint32 value) {
  set_has_time_type();
  time_type_ = value;
}

// optional uint32 is_riot = 7;
inline bool LandCityData::has_is_riot() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LandCityData::set_has_is_riot() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LandCityData::clear_has_is_riot() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LandCityData::clear_is_riot() {
  is_riot_ = 0u;
  clear_has_is_riot();
}
inline ::google::protobuf::uint32 LandCityData::is_riot() const {
  return is_riot_;
}
inline void LandCityData::set_is_riot(::google::protobuf::uint32 value) {
  set_has_is_riot();
  is_riot_ = value;
}

// optional uint32 is_take_reward = 8;
inline bool LandCityData::has_is_take_reward() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LandCityData::set_has_is_take_reward() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LandCityData::clear_has_is_take_reward() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LandCityData::clear_is_take_reward() {
  is_take_reward_ = 0u;
  clear_has_is_take_reward();
}
inline ::google::protobuf::uint32 LandCityData::is_take_reward() const {
  return is_take_reward_;
}
inline void LandCityData::set_is_take_reward(::google::protobuf::uint32 value) {
  set_has_is_take_reward();
  is_take_reward_ = value;
}

// optional uint32 reward_item_num = 9;
inline bool LandCityData::has_reward_item_num() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LandCityData::set_has_reward_item_num() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LandCityData::clear_has_reward_item_num() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LandCityData::clear_reward_item_num() {
  reward_item_num_ = 0u;
  clear_has_reward_item_num();
}
inline ::google::protobuf::uint32 LandCityData::reward_item_num() const {
  return reward_item_num_;
}
inline void LandCityData::set_reward_item_num(::google::protobuf::uint32 value) {
  set_has_reward_item_num();
  reward_item_num_ = value;
}

// optional uint32 last_happen_event_time = 10;
inline bool LandCityData::has_last_happen_event_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LandCityData::set_has_last_happen_event_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LandCityData::clear_has_last_happen_event_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LandCityData::clear_last_happen_event_time() {
  last_happen_event_time_ = 0u;
  clear_has_last_happen_event_time();
}
inline ::google::protobuf::uint32 LandCityData::last_happen_event_time() const {
  return last_happen_event_time_;
}
inline void LandCityData::set_last_happen_event_time(::google::protobuf::uint32 value) {
  set_has_last_happen_event_time();
  last_happen_event_time_ = value;
}

// optional uint32 interval_time = 11;
inline bool LandCityData::has_interval_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LandCityData::set_has_interval_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LandCityData::clear_has_interval_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LandCityData::clear_interval_time() {
  interval_time_ = 0u;
  clear_has_interval_time();
}
inline ::google::protobuf::uint32 LandCityData::interval_time() const {
  return interval_time_;
}
inline void LandCityData::set_interval_time(::google::protobuf::uint32 value) {
  set_has_interval_time();
  interval_time_ = value;
}

// optional .PB.LandPatrolEvent patrol_event_list = 12;
inline bool LandCityData::has_patrol_event_list() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LandCityData::set_has_patrol_event_list() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LandCityData::clear_has_patrol_event_list() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LandCityData::clear_patrol_event_list() {
  if (patrol_event_list_ != NULL) patrol_event_list_->::PB::LandPatrolEvent::Clear();
  clear_has_patrol_event_list();
}
inline const ::PB::LandPatrolEvent& LandCityData::patrol_event_list() const {
  return patrol_event_list_ != NULL ? *patrol_event_list_ : *default_instance_->patrol_event_list_;
}
inline ::PB::LandPatrolEvent* LandCityData::mutable_patrol_event_list() {
  set_has_patrol_event_list();
  if (patrol_event_list_ == NULL) patrol_event_list_ = new ::PB::LandPatrolEvent;
  return patrol_event_list_;
}
inline ::PB::LandPatrolEvent* LandCityData::release_patrol_event_list() {
  clear_has_patrol_event_list();
  ::PB::LandPatrolEvent* temp = patrol_event_list_;
  patrol_event_list_ = NULL;
  return temp;
}
inline void LandCityData::set_allocated_patrol_event_list(::PB::LandPatrolEvent* patrol_event_list) {
  delete patrol_event_list_;
  patrol_event_list_ = patrol_event_list;
  if (patrol_event_list) {
    set_has_patrol_event_list();
  } else {
    clear_has_patrol_event_list();
  }
}

// optional .PB.LandPatrolEvent riot_event_list = 13;
inline bool LandCityData::has_riot_event_list() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LandCityData::set_has_riot_event_list() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LandCityData::clear_has_riot_event_list() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LandCityData::clear_riot_event_list() {
  if (riot_event_list_ != NULL) riot_event_list_->::PB::LandPatrolEvent::Clear();
  clear_has_riot_event_list();
}
inline const ::PB::LandPatrolEvent& LandCityData::riot_event_list() const {
  return riot_event_list_ != NULL ? *riot_event_list_ : *default_instance_->riot_event_list_;
}
inline ::PB::LandPatrolEvent* LandCityData::mutable_riot_event_list() {
  set_has_riot_event_list();
  if (riot_event_list_ == NULL) riot_event_list_ = new ::PB::LandPatrolEvent;
  return riot_event_list_;
}
inline ::PB::LandPatrolEvent* LandCityData::release_riot_event_list() {
  clear_has_riot_event_list();
  ::PB::LandPatrolEvent* temp = riot_event_list_;
  riot_event_list_ = NULL;
  return temp;
}
inline void LandCityData::set_allocated_riot_event_list(::PB::LandPatrolEvent* riot_event_list) {
  delete riot_event_list_;
  riot_event_list_ = riot_event_list;
  if (riot_event_list) {
    set_has_riot_event_list();
  } else {
    clear_has_riot_event_list();
  }
}

// -------------------------------------------------------------------

// GuildBaseData

// required uint32 guild_id = 1;
inline bool GuildBaseData::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildBaseData::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildBaseData::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildBaseData::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 GuildBaseData::guild_id() const {
  return guild_id_;
}
inline void GuildBaseData::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint32 server_id = 2;
inline bool GuildBaseData::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildBaseData::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildBaseData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildBaseData::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 GuildBaseData::server_id() const {
  return server_id_;
}
inline void GuildBaseData::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string guild_name = 3;
inline bool GuildBaseData::has_guild_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildBaseData::set_has_guild_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildBaseData::clear_has_guild_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildBaseData::clear_guild_name() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    guild_name_->clear();
  }
  clear_has_guild_name();
}
inline const ::std::string& GuildBaseData::guild_name() const {
  return *guild_name_;
}
inline void GuildBaseData::set_guild_name(const ::std::string& value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildBaseData::set_guild_name(const char* value) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(value);
}
inline void GuildBaseData::set_guild_name(const char* value, size_t size) {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  guild_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseData::mutable_guild_name() {
  set_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    guild_name_ = new ::std::string;
  }
  return guild_name_;
}
inline ::std::string* GuildBaseData::release_guild_name() {
  clear_has_guild_name();
  if (guild_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guild_name_;
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseData::set_allocated_guild_name(::std::string* guild_name) {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (guild_name) {
    set_has_guild_name();
    guild_name_ = guild_name;
  } else {
    clear_has_guild_name();
    guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 icon_id = 4;
inline bool GuildBaseData::has_icon_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildBaseData::set_has_icon_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildBaseData::clear_has_icon_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildBaseData::clear_icon_id() {
  icon_id_ = 0u;
  clear_has_icon_id();
}
inline ::google::protobuf::uint32 GuildBaseData::icon_id() const {
  return icon_id_;
}
inline void GuildBaseData::set_icon_id(::google::protobuf::uint32 value) {
  set_has_icon_id();
  icon_id_ = value;
}

// optional uint32 create_time = 5;
inline bool GuildBaseData::has_create_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildBaseData::set_has_create_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildBaseData::clear_has_create_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildBaseData::clear_create_time() {
  create_time_ = 0u;
  clear_has_create_time();
}
inline ::google::protobuf::uint32 GuildBaseData::create_time() const {
  return create_time_;
}
inline void GuildBaseData::set_create_time(::google::protobuf::uint32 value) {
  set_has_create_time();
  create_time_ = value;
}

// optional uint32 level = 6;
inline bool GuildBaseData::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildBaseData::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildBaseData::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildBaseData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 GuildBaseData::level() const {
  return level_;
}
inline void GuildBaseData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 7;
inline bool GuildBaseData::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildBaseData::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildBaseData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildBaseData::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 GuildBaseData::exp() const {
  return exp_;
}
inline void GuildBaseData::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 qs = 8;
inline bool GuildBaseData::has_qs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildBaseData::set_has_qs() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildBaseData::clear_has_qs() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildBaseData::clear_qs() {
  qs_ = 0u;
  clear_has_qs();
}
inline ::google::protobuf::uint32 GuildBaseData::qs() const {
  return qs_;
}
inline void GuildBaseData::set_qs(::google::protobuf::uint32 value) {
  set_has_qs();
  qs_ = value;
}

// optional uint32 qy_times = 9;
inline bool GuildBaseData::has_qy_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildBaseData::set_has_qy_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildBaseData::clear_has_qy_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildBaseData::clear_qy_times() {
  qy_times_ = 0u;
  clear_has_qy_times();
}
inline ::google::protobuf::uint32 GuildBaseData::qy_times() const {
  return qy_times_;
}
inline void GuildBaseData::set_qy_times(::google::protobuf::uint32 value) {
  set_has_qy_times();
  qy_times_ = value;
}

// optional string notice = 10;
inline bool GuildBaseData::has_notice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GuildBaseData::set_has_notice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GuildBaseData::clear_has_notice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GuildBaseData::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& GuildBaseData::notice() const {
  return *notice_;
}
inline void GuildBaseData::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseData::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void GuildBaseData::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseData::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* GuildBaseData::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseData::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string declaration = 11;
inline bool GuildBaseData::has_declaration() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildBaseData::set_has_declaration() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildBaseData::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildBaseData::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& GuildBaseData::declaration() const {
  return *declaration_;
}
inline void GuildBaseData::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void GuildBaseData::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void GuildBaseData::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildBaseData::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* GuildBaseData::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildBaseData::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cur_pass_chapter = 12;
inline bool GuildBaseData::has_cur_pass_chapter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildBaseData::set_has_cur_pass_chapter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildBaseData::clear_has_cur_pass_chapter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildBaseData::clear_cur_pass_chapter() {
  cur_pass_chapter_ = 0u;
  clear_has_cur_pass_chapter();
}
inline ::google::protobuf::uint32 GuildBaseData::cur_pass_chapter() const {
  return cur_pass_chapter_;
}
inline void GuildBaseData::set_cur_pass_chapter(::google::protobuf::uint32 value) {
  set_has_cur_pass_chapter();
  cur_pass_chapter_ = value;
}

// optional uint32 today_start_chapter = 13;
inline bool GuildBaseData::has_today_start_chapter() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GuildBaseData::set_has_today_start_chapter() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GuildBaseData::clear_has_today_start_chapter() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GuildBaseData::clear_today_start_chapter() {
  today_start_chapter_ = 0u;
  clear_has_today_start_chapter();
}
inline ::google::protobuf::uint32 GuildBaseData::today_start_chapter() const {
  return today_start_chapter_;
}
inline void GuildBaseData::set_today_start_chapter(::google::protobuf::uint32 value) {
  set_has_today_start_chapter();
  today_start_chapter_ = value;
}

// optional uint32 history_chapter_record = 14;
inline bool GuildBaseData::has_history_chapter_record() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GuildBaseData::set_has_history_chapter_record() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GuildBaseData::clear_has_history_chapter_record() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GuildBaseData::clear_history_chapter_record() {
  history_chapter_record_ = 0u;
  clear_has_history_chapter_record();
}
inline ::google::protobuf::uint32 GuildBaseData::history_chapter_record() const {
  return history_chapter_record_;
}
inline void GuildBaseData::set_history_chapter_record(::google::protobuf::uint32 value) {
  set_has_history_chapter_record();
  history_chapter_record_ = value;
}

// optional uint32 is_from_history_chapter = 15;
inline bool GuildBaseData::has_is_from_history_chapter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GuildBaseData::set_has_is_from_history_chapter() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GuildBaseData::clear_has_is_from_history_chapter() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GuildBaseData::clear_is_from_history_chapter() {
  is_from_history_chapter_ = 0u;
  clear_has_is_from_history_chapter();
}
inline ::google::protobuf::uint32 GuildBaseData::is_from_history_chapter() const {
  return is_from_history_chapter_;
}
inline void GuildBaseData::set_is_from_history_chapter(::google::protobuf::uint32 value) {
  set_has_is_from_history_chapter();
  is_from_history_chapter_ = value;
}

// optional uint32 active = 16;
inline bool GuildBaseData::has_active() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GuildBaseData::set_has_active() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GuildBaseData::clear_has_active() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GuildBaseData::clear_active() {
  active_ = 0u;
  clear_has_active();
}
inline ::google::protobuf::uint32 GuildBaseData::active() const {
  return active_;
}
inline void GuildBaseData::set_active(::google::protobuf::uint32 value) {
  set_has_active();
  active_ = value;
}

// -------------------------------------------------------------------

// GuildMember

// required uint32 role_id = 1;
inline bool GuildMember::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMember::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMember::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMember::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 GuildMember::role_id() const {
  return role_id_;
}
inline void GuildMember::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 position = 2;
inline bool GuildMember::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMember::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMember::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMember::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 GuildMember::position() const {
  return position_;
}
inline void GuildMember::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional uint32 total_contribution = 3;
inline bool GuildMember::has_total_contribution() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildMember::set_has_total_contribution() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildMember::clear_has_total_contribution() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildMember::clear_total_contribution() {
  total_contribution_ = 0u;
  clear_has_total_contribution();
}
inline ::google::protobuf::uint32 GuildMember::total_contribution() const {
  return total_contribution_;
}
inline void GuildMember::set_total_contribution(::google::protobuf::uint32 value) {
  set_has_total_contribution();
  total_contribution_ = value;
}

// optional uint32 cur_contribution = 4;
inline bool GuildMember::has_cur_contribution() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildMember::set_has_cur_contribution() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildMember::clear_has_cur_contribution() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildMember::clear_cur_contribution() {
  cur_contribution_ = 0u;
  clear_has_cur_contribution();
}
inline ::google::protobuf::uint32 GuildMember::cur_contribution() const {
  return cur_contribution_;
}
inline void GuildMember::set_cur_contribution(::google::protobuf::uint32 value) {
  set_has_cur_contribution();
  cur_contribution_ = value;
}

// optional uint32 today_contribution = 5;
inline bool GuildMember::has_today_contribution() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuildMember::set_has_today_contribution() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuildMember::clear_has_today_contribution() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuildMember::clear_today_contribution() {
  today_contribution_ = 0u;
  clear_has_today_contribution();
}
inline ::google::protobuf::uint32 GuildMember::today_contribution() const {
  return today_contribution_;
}
inline void GuildMember::set_today_contribution(::google::protobuf::uint32 value) {
  set_has_today_contribution();
  today_contribution_ = value;
}

// optional uint32 last_logout_time = 6;
inline bool GuildMember::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuildMember::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuildMember::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuildMember::clear_last_logout_time() {
  last_logout_time_ = 0u;
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint32 GuildMember::last_logout_time() const {
  return last_logout_time_;
}
inline void GuildMember::set_last_logout_time(::google::protobuf::uint32 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// optional uint32 qy_type = 7;
inline bool GuildMember::has_qy_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuildMember::set_has_qy_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuildMember::clear_has_qy_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuildMember::clear_qy_type() {
  qy_type_ = 0u;
  clear_has_qy_type();
}
inline ::google::protobuf::uint32 GuildMember::qy_type() const {
  return qy_type_;
}
inline void GuildMember::set_qy_type(::google::protobuf::uint32 value) {
  set_has_qy_type();
  qy_type_ = value;
}

// optional uint32 battle_fb_times = 8;
inline bool GuildMember::has_battle_fb_times() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GuildMember::set_has_battle_fb_times() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GuildMember::clear_has_battle_fb_times() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GuildMember::clear_battle_fb_times() {
  battle_fb_times_ = 0u;
  clear_has_battle_fb_times();
}
inline ::google::protobuf::uint32 GuildMember::battle_fb_times() const {
  return battle_fb_times_;
}
inline void GuildMember::set_battle_fb_times(::google::protobuf::uint32 value) {
  set_has_battle_fb_times();
  battle_fb_times_ = value;
}

// optional uint32 buy_battle_fb_times = 9;
inline bool GuildMember::has_buy_battle_fb_times() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GuildMember::set_has_buy_battle_fb_times() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GuildMember::clear_has_buy_battle_fb_times() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GuildMember::clear_buy_battle_fb_times() {
  buy_battle_fb_times_ = 0u;
  clear_has_buy_battle_fb_times();
}
inline ::google::protobuf::uint32 GuildMember::buy_battle_fb_times() const {
  return buy_battle_fb_times_;
}
inline void GuildMember::set_buy_battle_fb_times(::google::protobuf::uint32 value) {
  set_has_buy_battle_fb_times();
  buy_battle_fb_times_ = value;
}

// repeated uint32 qs_reward_record_list = 10;
inline int GuildMember::qs_reward_record_list_size() const {
  return qs_reward_record_list_.size();
}
inline void GuildMember::clear_qs_reward_record_list() {
  qs_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 GuildMember::qs_reward_record_list(int index) const {
  return qs_reward_record_list_.Get(index);
}
inline void GuildMember::set_qs_reward_record_list(int index, ::google::protobuf::uint32 value) {
  qs_reward_record_list_.Set(index, value);
}
inline void GuildMember::add_qs_reward_record_list(::google::protobuf::uint32 value) {
  qs_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildMember::qs_reward_record_list() const {
  return qs_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildMember::mutable_qs_reward_record_list() {
  return &qs_reward_record_list_;
}

// optional uint32 battle_times_last_recover_time = 11;
inline bool GuildMember::has_battle_times_last_recover_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GuildMember::set_has_battle_times_last_recover_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GuildMember::clear_has_battle_times_last_recover_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GuildMember::clear_battle_times_last_recover_time() {
  battle_times_last_recover_time_ = 0u;
  clear_has_battle_times_last_recover_time();
}
inline ::google::protobuf::uint32 GuildMember::battle_times_last_recover_time() const {
  return battle_times_last_recover_time_;
}
inline void GuildMember::set_battle_times_last_recover_time(::google::protobuf::uint32 value) {
  set_has_battle_times_last_recover_time();
  battle_times_last_recover_time_ = value;
}

// repeated uint32 take_chapter_reward_record = 12;
inline int GuildMember::take_chapter_reward_record_size() const {
  return take_chapter_reward_record_.size();
}
inline void GuildMember::clear_take_chapter_reward_record() {
  take_chapter_reward_record_.Clear();
}
inline ::google::protobuf::uint32 GuildMember::take_chapter_reward_record(int index) const {
  return take_chapter_reward_record_.Get(index);
}
inline void GuildMember::set_take_chapter_reward_record(int index, ::google::protobuf::uint32 value) {
  take_chapter_reward_record_.Set(index, value);
}
inline void GuildMember::add_take_chapter_reward_record(::google::protobuf::uint32 value) {
  take_chapter_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildMember::take_chapter_reward_record() const {
  return take_chapter_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildMember::mutable_take_chapter_reward_record() {
  return &take_chapter_reward_record_;
}

// -------------------------------------------------------------------

// GuildEvent

// required uint32 event_id = 1;
inline bool GuildEvent::has_event_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildEvent::set_has_event_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildEvent::clear_has_event_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildEvent::clear_event_id() {
  event_id_ = 0u;
  clear_has_event_id();
}
inline ::google::protobuf::uint32 GuildEvent::event_id() const {
  return event_id_;
}
inline void GuildEvent::set_event_id(::google::protobuf::uint32 value) {
  set_has_event_id();
  event_id_ = value;
}

// optional string target_name = 2;
inline bool GuildEvent::has_target_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildEvent::set_has_target_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildEvent::clear_has_target_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildEvent::clear_target_name() {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    target_name_->clear();
  }
  clear_has_target_name();
}
inline const ::std::string& GuildEvent::target_name() const {
  return *target_name_;
}
inline void GuildEvent::set_target_name(const ::std::string& value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void GuildEvent::set_target_name(const char* value) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(value);
}
inline void GuildEvent::set_target_name(const char* value, size_t size) {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  target_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildEvent::mutable_target_name() {
  set_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    target_name_ = new ::std::string;
  }
  return target_name_;
}
inline ::std::string* GuildEvent::release_target_name() {
  clear_has_target_name();
  if (target_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_name_;
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildEvent::set_allocated_target_name(::std::string* target_name) {
  if (target_name_ != &::google::protobuf::internal::kEmptyString) {
    delete target_name_;
  }
  if (target_name) {
    set_has_target_name();
    target_name_ = target_name;
  } else {
    clear_has_target_name();
    target_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 value = 3;
inline bool GuildEvent::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildEvent::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildEvent::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildEvent::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 GuildEvent::value() const {
  return value_;
}
inline void GuildEvent::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// optional uint32 time = 4;
inline bool GuildEvent::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildEvent::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildEvent::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildEvent::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 GuildEvent::time() const {
  return time_;
}
inline void GuildEvent::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// GuildLeaveMessage

// optional uint32 time = 1;
inline bool GuildLeaveMessage::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildLeaveMessage::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildLeaveMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildLeaveMessage::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 GuildLeaveMessage::time() const {
  return time_;
}
inline void GuildLeaveMessage::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional string name = 2;
inline bool GuildLeaveMessage::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildLeaveMessage::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildLeaveMessage::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildLeaveMessage::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GuildLeaveMessage::name() const {
  return *name_;
}
inline void GuildLeaveMessage::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildLeaveMessage::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GuildLeaveMessage::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildLeaveMessage::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GuildLeaveMessage::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildLeaveMessage::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 position = 3;
inline bool GuildLeaveMessage::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildLeaveMessage::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildLeaveMessage::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildLeaveMessage::clear_position() {
  position_ = 0u;
  clear_has_position();
}
inline ::google::protobuf::uint32 GuildLeaveMessage::position() const {
  return position_;
}
inline void GuildLeaveMessage::set_position(::google::protobuf::uint32 value) {
  set_has_position();
  position_ = value;
}

// optional string text = 4;
inline bool GuildLeaveMessage::has_text() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuildLeaveMessage::set_has_text() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuildLeaveMessage::clear_has_text() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuildLeaveMessage::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& GuildLeaveMessage::text() const {
  return *text_;
}
inline void GuildLeaveMessage::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void GuildLeaveMessage::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void GuildLeaveMessage::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildLeaveMessage::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* GuildLeaveMessage::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildLeaveMessage::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ChatRecord

// optional uint32 role_id = 1;
inline bool ChatRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRecord::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 ChatRecord::role_id() const {
  return role_id_;
}
inline void ChatRecord::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 head_img_id = 2;
inline bool ChatRecord::has_head_img_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRecord::set_has_head_img_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRecord::clear_has_head_img_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRecord::clear_head_img_id() {
  head_img_id_ = 0u;
  clear_has_head_img_id();
}
inline ::google::protobuf::uint32 ChatRecord::head_img_id() const {
  return head_img_id_;
}
inline void ChatRecord::set_head_img_id(::google::protobuf::uint32 value) {
  set_has_head_img_id();
  head_img_id_ = value;
}

// optional uint32 role_vip_level = 3;
inline bool ChatRecord::has_role_vip_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRecord::set_has_role_vip_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRecord::clear_has_role_vip_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRecord::clear_role_vip_level() {
  role_vip_level_ = 0u;
  clear_has_role_vip_level();
}
inline ::google::protobuf::uint32 ChatRecord::role_vip_level() const {
  return role_vip_level_;
}
inline void ChatRecord::set_role_vip_level(::google::protobuf::uint32 value) {
  set_has_role_vip_level();
  role_vip_level_ = value;
}

// optional string role_name = 4;
inline bool ChatRecord::has_role_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRecord::set_has_role_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRecord::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRecord::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& ChatRecord::role_name() const {
  return *role_name_;
}
inline void ChatRecord::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ChatRecord::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void ChatRecord::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* ChatRecord::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatRecord::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string chat_text = 5;
inline bool ChatRecord::has_chat_text() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRecord::set_has_chat_text() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRecord::clear_has_chat_text() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRecord::clear_chat_text() {
  if (chat_text_ != &::google::protobuf::internal::kEmptyString) {
    chat_text_->clear();
  }
  clear_has_chat_text();
}
inline const ::std::string& ChatRecord::chat_text() const {
  return *chat_text_;
}
inline void ChatRecord::set_chat_text(const ::std::string& value) {
  set_has_chat_text();
  if (chat_text_ == &::google::protobuf::internal::kEmptyString) {
    chat_text_ = new ::std::string;
  }
  chat_text_->assign(value);
}
inline void ChatRecord::set_chat_text(const char* value) {
  set_has_chat_text();
  if (chat_text_ == &::google::protobuf::internal::kEmptyString) {
    chat_text_ = new ::std::string;
  }
  chat_text_->assign(value);
}
inline void ChatRecord::set_chat_text(const char* value, size_t size) {
  set_has_chat_text();
  if (chat_text_ == &::google::protobuf::internal::kEmptyString) {
    chat_text_ = new ::std::string;
  }
  chat_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ChatRecord::mutable_chat_text() {
  set_has_chat_text();
  if (chat_text_ == &::google::protobuf::internal::kEmptyString) {
    chat_text_ = new ::std::string;
  }
  return chat_text_;
}
inline ::std::string* ChatRecord::release_chat_text() {
  clear_has_chat_text();
  if (chat_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = chat_text_;
    chat_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ChatRecord::set_allocated_chat_text(::std::string* chat_text) {
  if (chat_text_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_text_;
  }
  if (chat_text) {
    set_has_chat_text();
    chat_text_ = chat_text;
  } else {
    clear_has_chat_text();
    chat_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time = 6;
inline bool ChatRecord::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRecord::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRecord::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ChatRecord::time() const {
  return time_;
}
inline void ChatRecord::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 role_use_title_id = 7;
inline bool ChatRecord::has_role_use_title_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRecord::set_has_role_use_title_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRecord::clear_has_role_use_title_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRecord::clear_role_use_title_id() {
  role_use_title_id_ = 0u;
  clear_has_role_use_title_id();
}
inline ::google::protobuf::uint32 ChatRecord::role_use_title_id() const {
  return role_use_title_id_;
}
inline void ChatRecord::set_role_use_title_id(::google::protobuf::uint32 value) {
  set_has_role_use_title_id();
  role_use_title_id_ = value;
}

// -------------------------------------------------------------------

// GuildCampMonster

// optional uint32 camp = 1;
inline bool GuildCampMonster::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCampMonster::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCampMonster::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCampMonster::clear_camp() {
  camp_ = 0u;
  clear_has_camp();
}
inline ::google::protobuf::uint32 GuildCampMonster::camp() const {
  return camp_;
}
inline void GuildCampMonster::set_camp(::google::protobuf::uint32 value) {
  set_has_camp();
  camp_ = value;
}

// optional string killer_name = 2;
inline bool GuildCampMonster::has_killer_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildCampMonster::set_has_killer_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildCampMonster::clear_has_killer_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildCampMonster::clear_killer_name() {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    killer_name_->clear();
  }
  clear_has_killer_name();
}
inline const ::std::string& GuildCampMonster::killer_name() const {
  return *killer_name_;
}
inline void GuildCampMonster::set_killer_name(const ::std::string& value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void GuildCampMonster::set_killer_name(const char* value) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(value);
}
inline void GuildCampMonster::set_killer_name(const char* value, size_t size) {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  killer_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildCampMonster::mutable_killer_name() {
  set_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    killer_name_ = new ::std::string;
  }
  return killer_name_;
}
inline ::std::string* GuildCampMonster::release_killer_name() {
  clear_has_killer_name();
  if (killer_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = killer_name_;
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildCampMonster::set_allocated_killer_name(::std::string* killer_name) {
  if (killer_name_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_name_;
  }
  if (killer_name) {
    set_has_killer_name();
    killer_name_ = killer_name;
  } else {
    clear_has_killer_name();
    killer_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .PB.MonsterData monster_list = 3;
inline int GuildCampMonster::monster_list_size() const {
  return monster_list_.size();
}
inline void GuildCampMonster::clear_monster_list() {
  monster_list_.Clear();
}
inline const ::PB::MonsterData& GuildCampMonster::monster_list(int index) const {
  return monster_list_.Get(index);
}
inline ::PB::MonsterData* GuildCampMonster::mutable_monster_list(int index) {
  return monster_list_.Mutable(index);
}
inline ::PB::MonsterData* GuildCampMonster::add_monster_list() {
  return monster_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >&
GuildCampMonster::monster_list() const {
  return monster_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MonsterData >*
GuildCampMonster::mutable_monster_list() {
  return &monster_list_;
}

// -------------------------------------------------------------------

// GuildFBBox

// optional uint32 box_idx = 1;
inline bool GuildFBBox::has_box_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildFBBox::set_has_box_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildFBBox::clear_has_box_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildFBBox::clear_box_idx() {
  box_idx_ = 0u;
  clear_has_box_idx();
}
inline ::google::protobuf::uint32 GuildFBBox::box_idx() const {
  return box_idx_;
}
inline void GuildFBBox::set_box_idx(::google::protobuf::uint32 value) {
  set_has_box_idx();
  box_idx_ = value;
}

// optional uint32 box_reward_idx = 2;
inline bool GuildFBBox::has_box_reward_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildFBBox::set_has_box_reward_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildFBBox::clear_has_box_reward_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildFBBox::clear_box_reward_idx() {
  box_reward_idx_ = 0u;
  clear_has_box_reward_idx();
}
inline ::google::protobuf::uint32 GuildFBBox::box_reward_idx() const {
  return box_reward_idx_;
}
inline void GuildFBBox::set_box_reward_idx(::google::protobuf::uint32 value) {
  set_has_box_reward_idx();
  box_reward_idx_ = value;
}

// optional string role_name = 3;
inline bool GuildFBBox::has_role_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuildFBBox::set_has_role_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuildFBBox::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuildFBBox::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& GuildFBBox::role_name() const {
  return *role_name_;
}
inline void GuildFBBox::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void GuildFBBox::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void GuildFBBox::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GuildFBBox::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* GuildFBBox::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GuildFBBox::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GuildCampBox

// optional uint32 camp = 1;
inline bool GuildCampBox::has_camp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildCampBox::set_has_camp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildCampBox::clear_has_camp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildCampBox::clear_camp() {
  camp_ = 0u;
  clear_has_camp();
}
inline ::google::protobuf::uint32 GuildCampBox::camp() const {
  return camp_;
}
inline void GuildCampBox::set_camp(::google::protobuf::uint32 value) {
  set_has_camp();
  camp_ = value;
}

// repeated .PB.GuildFBBox take_box_record_list = 2;
inline int GuildCampBox::take_box_record_list_size() const {
  return take_box_record_list_.size();
}
inline void GuildCampBox::clear_take_box_record_list() {
  take_box_record_list_.Clear();
}
inline const ::PB::GuildFBBox& GuildCampBox::take_box_record_list(int index) const {
  return take_box_record_list_.Get(index);
}
inline ::PB::GuildFBBox* GuildCampBox::mutable_take_box_record_list(int index) {
  return take_box_record_list_.Mutable(index);
}
inline ::PB::GuildFBBox* GuildCampBox::add_take_box_record_list() {
  return take_box_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildFBBox >&
GuildCampBox::take_box_record_list() const {
  return take_box_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildFBBox >*
GuildCampBox::mutable_take_box_record_list() {
  return &take_box_record_list_;
}

// repeated uint32 take_reward_player_list = 3;
inline int GuildCampBox::take_reward_player_list_size() const {
  return take_reward_player_list_.size();
}
inline void GuildCampBox::clear_take_reward_player_list() {
  take_reward_player_list_.Clear();
}
inline ::google::protobuf::uint32 GuildCampBox::take_reward_player_list(int index) const {
  return take_reward_player_list_.Get(index);
}
inline void GuildCampBox::set_take_reward_player_list(int index, ::google::protobuf::uint32 value) {
  take_reward_player_list_.Set(index, value);
}
inline void GuildCampBox::add_take_reward_player_list(::google::protobuf::uint32 value) {
  take_reward_player_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildCampBox::take_reward_player_list() const {
  return take_reward_player_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildCampBox::mutable_take_reward_player_list() {
  return &take_reward_player_list_;
}

// -------------------------------------------------------------------

// GuildMapRewardRecord

// optional uint32 chapter = 1;
inline bool GuildMapRewardRecord::has_chapter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMapRewardRecord::set_has_chapter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMapRewardRecord::clear_has_chapter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMapRewardRecord::clear_chapter() {
  chapter_ = 0u;
  clear_has_chapter();
}
inline ::google::protobuf::uint32 GuildMapRewardRecord::chapter() const {
  return chapter_;
}
inline void GuildMapRewardRecord::set_chapter(::google::protobuf::uint32 value) {
  set_has_chapter();
  chapter_ = value;
}

// repeated .PB.GuildCampBox camp_box_list = 2;
inline int GuildMapRewardRecord::camp_box_list_size() const {
  return camp_box_list_.size();
}
inline void GuildMapRewardRecord::clear_camp_box_list() {
  camp_box_list_.Clear();
}
inline const ::PB::GuildCampBox& GuildMapRewardRecord::camp_box_list(int index) const {
  return camp_box_list_.Get(index);
}
inline ::PB::GuildCampBox* GuildMapRewardRecord::mutable_camp_box_list(int index) {
  return camp_box_list_.Mutable(index);
}
inline ::PB::GuildCampBox* GuildMapRewardRecord::add_camp_box_list() {
  return camp_box_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildCampBox >&
GuildMapRewardRecord::camp_box_list() const {
  return camp_box_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildCampBox >*
GuildMapRewardRecord::mutable_camp_box_list() {
  return &camp_box_list_;
}

// -------------------------------------------------------------------

// GuildMonsterDamageRecord

// optional uint32 role_id = 1;
inline bool GuildMonsterDamageRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildMonsterDamageRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildMonsterDamageRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildMonsterDamageRecord::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 GuildMonsterDamageRecord::role_id() const {
  return role_id_;
}
inline void GuildMonsterDamageRecord::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 damage = 2;
inline bool GuildMonsterDamageRecord::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildMonsterDamageRecord::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildMonsterDamageRecord::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildMonsterDamageRecord::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 GuildMonsterDamageRecord::damage() const {
  return damage_;
}
inline void GuildMonsterDamageRecord::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// GuildInfo

// optional .PB.GuildBaseData base_data = 1;
inline bool GuildInfo::has_base_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildInfo::set_has_base_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildInfo::clear_has_base_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildInfo::clear_base_data() {
  if (base_data_ != NULL) base_data_->::PB::GuildBaseData::Clear();
  clear_has_base_data();
}
inline const ::PB::GuildBaseData& GuildInfo::base_data() const {
  return base_data_ != NULL ? *base_data_ : *default_instance_->base_data_;
}
inline ::PB::GuildBaseData* GuildInfo::mutable_base_data() {
  set_has_base_data();
  if (base_data_ == NULL) base_data_ = new ::PB::GuildBaseData;
  return base_data_;
}
inline ::PB::GuildBaseData* GuildInfo::release_base_data() {
  clear_has_base_data();
  ::PB::GuildBaseData* temp = base_data_;
  base_data_ = NULL;
  return temp;
}
inline void GuildInfo::set_allocated_base_data(::PB::GuildBaseData* base_data) {
  delete base_data_;
  base_data_ = base_data;
  if (base_data) {
    set_has_base_data();
  } else {
    clear_has_base_data();
  }
}

// repeated .PB.GuildMember member_list = 2;
inline int GuildInfo::member_list_size() const {
  return member_list_.size();
}
inline void GuildInfo::clear_member_list() {
  member_list_.Clear();
}
inline const ::PB::GuildMember& GuildInfo::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::PB::GuildMember* GuildInfo::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::PB::GuildMember* GuildInfo::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMember >&
GuildInfo::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMember >*
GuildInfo::mutable_member_list() {
  return &member_list_;
}

// repeated .PB.GuildLeaveMessage leave_message_list = 3;
inline int GuildInfo::leave_message_list_size() const {
  return leave_message_list_.size();
}
inline void GuildInfo::clear_leave_message_list() {
  leave_message_list_.Clear();
}
inline const ::PB::GuildLeaveMessage& GuildInfo::leave_message_list(int index) const {
  return leave_message_list_.Get(index);
}
inline ::PB::GuildLeaveMessage* GuildInfo::mutable_leave_message_list(int index) {
  return leave_message_list_.Mutable(index);
}
inline ::PB::GuildLeaveMessage* GuildInfo::add_leave_message_list() {
  return leave_message_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildLeaveMessage >&
GuildInfo::leave_message_list() const {
  return leave_message_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildLeaveMessage >*
GuildInfo::mutable_leave_message_list() {
  return &leave_message_list_;
}

// repeated .PB.GuildEvent event_list = 4;
inline int GuildInfo::event_list_size() const {
  return event_list_.size();
}
inline void GuildInfo::clear_event_list() {
  event_list_.Clear();
}
inline const ::PB::GuildEvent& GuildInfo::event_list(int index) const {
  return event_list_.Get(index);
}
inline ::PB::GuildEvent* GuildInfo::mutable_event_list(int index) {
  return event_list_.Mutable(index);
}
inline ::PB::GuildEvent* GuildInfo::add_event_list() {
  return event_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildEvent >&
GuildInfo::event_list() const {
  return event_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildEvent >*
GuildInfo::mutable_event_list() {
  return &event_list_;
}

// repeated .PB.SkillData skill_list = 5;
inline int GuildInfo::skill_list_size() const {
  return skill_list_.size();
}
inline void GuildInfo::clear_skill_list() {
  skill_list_.Clear();
}
inline const ::PB::SkillData& GuildInfo::skill_list(int index) const {
  return skill_list_.Get(index);
}
inline ::PB::SkillData* GuildInfo::mutable_skill_list(int index) {
  return skill_list_.Mutable(index);
}
inline ::PB::SkillData* GuildInfo::add_skill_list() {
  return skill_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SkillData >&
GuildInfo::skill_list() const {
  return skill_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SkillData >*
GuildInfo::mutable_skill_list() {
  return &skill_list_;
}

// repeated uint32 apply_list = 6;
inline int GuildInfo::apply_list_size() const {
  return apply_list_.size();
}
inline void GuildInfo::clear_apply_list() {
  apply_list_.Clear();
}
inline ::google::protobuf::uint32 GuildInfo::apply_list(int index) const {
  return apply_list_.Get(index);
}
inline void GuildInfo::set_apply_list(int index, ::google::protobuf::uint32 value) {
  apply_list_.Set(index, value);
}
inline void GuildInfo::add_apply_list(::google::protobuf::uint32 value) {
  apply_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GuildInfo::apply_list() const {
  return apply_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GuildInfo::mutable_apply_list() {
  return &apply_list_;
}

// repeated .PB.ShopGoods goods_list = 7;
inline int GuildInfo::goods_list_size() const {
  return goods_list_.size();
}
inline void GuildInfo::clear_goods_list() {
  goods_list_.Clear();
}
inline const ::PB::ShopGoods& GuildInfo::goods_list(int index) const {
  return goods_list_.Get(index);
}
inline ::PB::ShopGoods* GuildInfo::mutable_goods_list(int index) {
  return goods_list_.Mutable(index);
}
inline ::PB::ShopGoods* GuildInfo::add_goods_list() {
  return goods_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >&
GuildInfo::goods_list() const {
  return goods_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ShopGoods >*
GuildInfo::mutable_goods_list() {
  return &goods_list_;
}

// repeated .PB.ChatRecord chat_record_list = 8;
inline int GuildInfo::chat_record_list_size() const {
  return chat_record_list_.size();
}
inline void GuildInfo::clear_chat_record_list() {
  chat_record_list_.Clear();
}
inline const ::PB::ChatRecord& GuildInfo::chat_record_list(int index) const {
  return chat_record_list_.Get(index);
}
inline ::PB::ChatRecord* GuildInfo::mutable_chat_record_list(int index) {
  return chat_record_list_.Mutable(index);
}
inline ::PB::ChatRecord* GuildInfo::add_chat_record_list() {
  return chat_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ChatRecord >&
GuildInfo::chat_record_list() const {
  return chat_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ChatRecord >*
GuildInfo::mutable_chat_record_list() {
  return &chat_record_list_;
}

// repeated .PB.GuildMonsterDamageRecord damage_record_list = 9;
inline int GuildInfo::damage_record_list_size() const {
  return damage_record_list_.size();
}
inline void GuildInfo::clear_damage_record_list() {
  damage_record_list_.Clear();
}
inline const ::PB::GuildMonsterDamageRecord& GuildInfo::damage_record_list(int index) const {
  return damage_record_list_.Get(index);
}
inline ::PB::GuildMonsterDamageRecord* GuildInfo::mutable_damage_record_list(int index) {
  return damage_record_list_.Mutable(index);
}
inline ::PB::GuildMonsterDamageRecord* GuildInfo::add_damage_record_list() {
  return damage_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMonsterDamageRecord >&
GuildInfo::damage_record_list() const {
  return damage_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMonsterDamageRecord >*
GuildInfo::mutable_damage_record_list() {
  return &damage_record_list_;
}

// repeated .PB.GuildCampMonster camp_monster_list = 10;
inline int GuildInfo::camp_monster_list_size() const {
  return camp_monster_list_.size();
}
inline void GuildInfo::clear_camp_monster_list() {
  camp_monster_list_.Clear();
}
inline const ::PB::GuildCampMonster& GuildInfo::camp_monster_list(int index) const {
  return camp_monster_list_.Get(index);
}
inline ::PB::GuildCampMonster* GuildInfo::mutable_camp_monster_list(int index) {
  return camp_monster_list_.Mutable(index);
}
inline ::PB::GuildCampMonster* GuildInfo::add_camp_monster_list() {
  return camp_monster_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildCampMonster >&
GuildInfo::camp_monster_list() const {
  return camp_monster_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildCampMonster >*
GuildInfo::mutable_camp_monster_list() {
  return &camp_monster_list_;
}

// repeated .PB.GuildMapRewardRecord map_reward_record_list = 11;
inline int GuildInfo::map_reward_record_list_size() const {
  return map_reward_record_list_.size();
}
inline void GuildInfo::clear_map_reward_record_list() {
  map_reward_record_list_.Clear();
}
inline const ::PB::GuildMapRewardRecord& GuildInfo::map_reward_record_list(int index) const {
  return map_reward_record_list_.Get(index);
}
inline ::PB::GuildMapRewardRecord* GuildInfo::mutable_map_reward_record_list(int index) {
  return map_reward_record_list_.Mutable(index);
}
inline ::PB::GuildMapRewardRecord* GuildInfo::add_map_reward_record_list() {
  return map_reward_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildMapRewardRecord >&
GuildInfo::map_reward_record_list() const {
  return map_reward_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildMapRewardRecord >*
GuildInfo::mutable_map_reward_record_list() {
  return &map_reward_record_list_;
}

// optional uint32 create_monster_time = 12;
inline bool GuildInfo::has_create_monster_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GuildInfo::set_has_create_monster_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GuildInfo::clear_has_create_monster_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GuildInfo::clear_create_monster_time() {
  create_monster_time_ = 0u;
  clear_has_create_monster_time();
}
inline ::google::protobuf::uint32 GuildInfo::create_monster_time() const {
  return create_monster_time_;
}
inline void GuildInfo::set_create_monster_time(::google::protobuf::uint32 value) {
  set_has_create_monster_time();
  create_monster_time_ = value;
}

// -------------------------------------------------------------------

// MapComment

// optional uint32 role_id = 1;
inline bool MapComment::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapComment::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapComment::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapComment::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 MapComment::role_id() const {
  return role_id_;
}
inline void MapComment::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 comment_id = 2;
inline bool MapComment::has_comment_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapComment::set_has_comment_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapComment::clear_has_comment_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapComment::clear_comment_id() {
  comment_id_ = 0u;
  clear_has_comment_id();
}
inline ::google::protobuf::uint32 MapComment::comment_id() const {
  return comment_id_;
}
inline void MapComment::set_comment_id(::google::protobuf::uint32 value) {
  set_has_comment_id();
  comment_id_ = value;
}

// optional string text = 3;
inline bool MapComment::has_text() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapComment::set_has_text() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapComment::clear_has_text() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapComment::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& MapComment::text() const {
  return *text_;
}
inline void MapComment::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MapComment::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void MapComment::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapComment::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* MapComment::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapComment::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time = 4;
inline bool MapComment::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapComment::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapComment::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapComment::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MapComment::time() const {
  return time_;
}
inline void MapComment::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 like_times = 5;
inline bool MapComment::has_like_times() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapComment::set_has_like_times() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapComment::clear_has_like_times() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapComment::clear_like_times() {
  like_times_ = 0u;
  clear_has_like_times();
}
inline ::google::protobuf::uint32 MapComment::like_times() const {
  return like_times_;
}
inline void MapComment::set_like_times(::google::protobuf::uint32 value) {
  set_has_like_times();
  like_times_ = value;
}

// repeated uint32 like_player_list = 6;
inline int MapComment::like_player_list_size() const {
  return like_player_list_.size();
}
inline void MapComment::clear_like_player_list() {
  like_player_list_.Clear();
}
inline ::google::protobuf::uint32 MapComment::like_player_list(int index) const {
  return like_player_list_.Get(index);
}
inline void MapComment::set_like_player_list(int index, ::google::protobuf::uint32 value) {
  like_player_list_.Set(index, value);
}
inline void MapComment::add_like_player_list(::google::protobuf::uint32 value) {
  like_player_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MapComment::like_player_list() const {
  return like_player_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MapComment::mutable_like_player_list() {
  return &like_player_list_;
}

// -------------------------------------------------------------------

// MapComments

// optional uint32 map_id = 1;
inline bool MapComments::has_map_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapComments::set_has_map_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapComments::clear_has_map_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapComments::clear_map_id() {
  map_id_ = 0u;
  clear_has_map_id();
}
inline ::google::protobuf::uint32 MapComments::map_id() const {
  return map_id_;
}
inline void MapComments::set_map_id(::google::protobuf::uint32 value) {
  set_has_map_id();
  map_id_ = value;
}

// repeated .PB.MapComment comment_list = 2;
inline int MapComments::comment_list_size() const {
  return comment_list_.size();
}
inline void MapComments::clear_comment_list() {
  comment_list_.Clear();
}
inline const ::PB::MapComment& MapComments::comment_list(int index) const {
  return comment_list_.Get(index);
}
inline ::PB::MapComment* MapComments::mutable_comment_list(int index) {
  return comment_list_.Mutable(index);
}
inline ::PB::MapComment* MapComments::add_comment_list() {
  return comment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::MapComment >&
MapComments::comment_list() const {
  return comment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::MapComment >*
MapComments::mutable_comment_list() {
  return &comment_list_;
}

// -------------------------------------------------------------------

// RoleTempData

// optional uint32 type = 1;
inline bool RoleTempData::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleTempData::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleTempData::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleTempData::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 RoleTempData::type() const {
  return type_;
}
inline void RoleTempData::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional string text = 2;
inline bool RoleTempData::has_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleTempData::set_has_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleTempData::clear_has_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleTempData::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& RoleTempData::text() const {
  return *text_;
}
inline void RoleTempData::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void RoleTempData::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void RoleTempData::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleTempData::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* RoleTempData::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleTempData::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 param_list = 3;
inline int RoleTempData::param_list_size() const {
  return param_list_.size();
}
inline void RoleTempData::clear_param_list() {
  param_list_.Clear();
}
inline ::google::protobuf::uint32 RoleTempData::param_list(int index) const {
  return param_list_.Get(index);
}
inline void RoleTempData::set_param_list(int index, ::google::protobuf::uint32 value) {
  param_list_.Set(index, value);
}
inline void RoleTempData::add_param_list(::google::protobuf::uint32 value) {
  param_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleTempData::param_list() const {
  return param_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleTempData::mutable_param_list() {
  return &param_list_;
}

// -------------------------------------------------------------------

// RoleTempDatas

// repeated .PB.RoleTempData temp_data_list = 1;
inline int RoleTempDatas::temp_data_list_size() const {
  return temp_data_list_.size();
}
inline void RoleTempDatas::clear_temp_data_list() {
  temp_data_list_.Clear();
}
inline const ::PB::RoleTempData& RoleTempDatas::temp_data_list(int index) const {
  return temp_data_list_.Get(index);
}
inline ::PB::RoleTempData* RoleTempDatas::mutable_temp_data_list(int index) {
  return temp_data_list_.Mutable(index);
}
inline ::PB::RoleTempData* RoleTempDatas::add_temp_data_list() {
  return temp_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleTempData >&
RoleTempDatas::temp_data_list() const {
  return temp_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RoleTempData >*
RoleTempDatas::mutable_temp_data_list() {
  return &temp_data_list_;
}

// -------------------------------------------------------------------

// KingMatchBattleTarget

// optional uint32 role_id = 1;
inline bool KingMatchBattleTarget::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingMatchBattleTarget::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingMatchBattleTarget::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingMatchBattleTarget::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 KingMatchBattleTarget::role_id() const {
  return role_id_;
}
inline void KingMatchBattleTarget::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 server_id = 2;
inline bool KingMatchBattleTarget::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KingMatchBattleTarget::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KingMatchBattleTarget::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KingMatchBattleTarget::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 KingMatchBattleTarget::server_id() const {
  return server_id_;
}
inline void KingMatchBattleTarget::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 star = 3;
inline bool KingMatchBattleTarget::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KingMatchBattleTarget::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KingMatchBattleTarget::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KingMatchBattleTarget::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 KingMatchBattleTarget::star() const {
  return star_;
}
inline void KingMatchBattleTarget::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
}

// optional uint32 battle_times = 4;
inline bool KingMatchBattleTarget::has_battle_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KingMatchBattleTarget::set_has_battle_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KingMatchBattleTarget::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KingMatchBattleTarget::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 KingMatchBattleTarget::battle_times() const {
  return battle_times_;
}
inline void KingMatchBattleTarget::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// optional uint32 stage_level = 5;
inline bool KingMatchBattleTarget::has_stage_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KingMatchBattleTarget::set_has_stage_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KingMatchBattleTarget::clear_has_stage_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KingMatchBattleTarget::clear_stage_level() {
  stage_level_ = 0u;
  clear_has_stage_level();
}
inline ::google::protobuf::uint32 KingMatchBattleTarget::stage_level() const {
  return stage_level_;
}
inline void KingMatchBattleTarget::set_stage_level(::google::protobuf::uint32 value) {
  set_has_stage_level();
  stage_level_ = value;
}

// -------------------------------------------------------------------

// KingMatchStage

// optional uint32 stage = 1;
inline bool KingMatchStage::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KingMatchStage::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KingMatchStage::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KingMatchStage::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 KingMatchStage::stage() const {
  return stage_;
}
inline void KingMatchStage::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// repeated .PB.KingMatchBattleTarget battle_target_list = 2;
inline int KingMatchStage::battle_target_list_size() const {
  return battle_target_list_.size();
}
inline void KingMatchStage::clear_battle_target_list() {
  battle_target_list_.Clear();
}
inline const ::PB::KingMatchBattleTarget& KingMatchStage::battle_target_list(int index) const {
  return battle_target_list_.Get(index);
}
inline ::PB::KingMatchBattleTarget* KingMatchStage::mutable_battle_target_list(int index) {
  return battle_target_list_.Mutable(index);
}
inline ::PB::KingMatchBattleTarget* KingMatchStage::add_battle_target_list() {
  return battle_target_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::KingMatchBattleTarget >&
KingMatchStage::battle_target_list() const {
  return battle_target_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::KingMatchBattleTarget >*
KingMatchStage::mutable_battle_target_list() {
  return &battle_target_list_;
}

// -------------------------------------------------------------------

// RoleSeasonRank

// optional uint32 role_id = 1;
inline bool RoleSeasonRank::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleSeasonRank::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleSeasonRank::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleSeasonRank::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RoleSeasonRank::role_id() const {
  return role_id_;
}
inline void RoleSeasonRank::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 server_id = 2;
inline bool RoleSeasonRank::has_server_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleSeasonRank::set_has_server_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleSeasonRank::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleSeasonRank::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 RoleSeasonRank::server_id() const {
  return server_id_;
}
inline void RoleSeasonRank::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// -------------------------------------------------------------------

// SeasonRankData

// optional uint32 season = 1;
inline bool SeasonRankData::has_season() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeasonRankData::set_has_season() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeasonRankData::clear_has_season() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeasonRankData::clear_season() {
  season_ = 0u;
  clear_has_season();
}
inline ::google::protobuf::uint32 SeasonRankData::season() const {
  return season_;
}
inline void SeasonRankData::set_season(::google::protobuf::uint32 value) {
  set_has_season();
  season_ = value;
}

// repeated .PB.RoleSeasonRank rank_list = 2;
inline int SeasonRankData::rank_list_size() const {
  return rank_list_.size();
}
inline void SeasonRankData::clear_rank_list() {
  rank_list_.Clear();
}
inline const ::PB::RoleSeasonRank& SeasonRankData::rank_list(int index) const {
  return rank_list_.Get(index);
}
inline ::PB::RoleSeasonRank* SeasonRankData::mutable_rank_list(int index) {
  return rank_list_.Mutable(index);
}
inline ::PB::RoleSeasonRank* SeasonRankData::add_rank_list() {
  return rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleSeasonRank >&
SeasonRankData::rank_list() const {
  return rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RoleSeasonRank >*
SeasonRankData::mutable_rank_list() {
  return &rank_list_;
}

// -------------------------------------------------------------------

// KingMatchData

// repeated .PB.KingMatchStage stage_list = 1;
inline int KingMatchData::stage_list_size() const {
  return stage_list_.size();
}
inline void KingMatchData::clear_stage_list() {
  stage_list_.Clear();
}
inline const ::PB::KingMatchStage& KingMatchData::stage_list(int index) const {
  return stage_list_.Get(index);
}
inline ::PB::KingMatchStage* KingMatchData::mutable_stage_list(int index) {
  return stage_list_.Mutable(index);
}
inline ::PB::KingMatchStage* KingMatchData::add_stage_list() {
  return stage_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::KingMatchStage >&
KingMatchData::stage_list() const {
  return stage_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::KingMatchStage >*
KingMatchData::mutable_stage_list() {
  return &stage_list_;
}

// repeated .PB.SeasonRankData last_season_rank_list = 2;
inline int KingMatchData::last_season_rank_list_size() const {
  return last_season_rank_list_.size();
}
inline void KingMatchData::clear_last_season_rank_list() {
  last_season_rank_list_.Clear();
}
inline const ::PB::SeasonRankData& KingMatchData::last_season_rank_list(int index) const {
  return last_season_rank_list_.Get(index);
}
inline ::PB::SeasonRankData* KingMatchData::mutable_last_season_rank_list(int index) {
  return last_season_rank_list_.Mutable(index);
}
inline ::PB::SeasonRankData* KingMatchData::add_last_season_rank_list() {
  return last_season_rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::SeasonRankData >&
KingMatchData::last_season_rank_list() const {
  return last_season_rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::SeasonRankData >*
KingMatchData::mutable_last_season_rank_list() {
  return &last_season_rank_list_;
}

// -------------------------------------------------------------------

// TeamDungeonMember

// optional uint32 server_id = 1;
inline bool TeamDungeonMember::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamDungeonMember::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamDungeonMember::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamDungeonMember::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 TeamDungeonMember::server_id() const {
  return server_id_;
}
inline void TeamDungeonMember::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string role_name = 2;
inline bool TeamDungeonMember::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamDungeonMember::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamDungeonMember::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamDungeonMember::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& TeamDungeonMember::role_name() const {
  return *role_name_;
}
inline void TeamDungeonMember::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void TeamDungeonMember::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void TeamDungeonMember::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamDungeonMember::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* TeamDungeonMember::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamDungeonMember::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 role_id = 3;
inline bool TeamDungeonMember::has_role_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamDungeonMember::set_has_role_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamDungeonMember::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamDungeonMember::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 TeamDungeonMember::role_id() const {
  return role_id_;
}
inline void TeamDungeonMember::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// -------------------------------------------------------------------

// TeamDungeonRoleRank

// optional uint32 rank = 1;
inline bool TeamDungeonRoleRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamDungeonRoleRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamDungeonRoleRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamDungeonRoleRank::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TeamDungeonRoleRank::rank() const {
  return rank_;
}
inline void TeamDungeonRoleRank::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 use_time = 2;
inline bool TeamDungeonRoleRank::has_use_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamDungeonRoleRank::set_has_use_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamDungeonRoleRank::clear_has_use_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamDungeonRoleRank::clear_use_time() {
  use_time_ = 0u;
  clear_has_use_time();
}
inline ::google::protobuf::uint32 TeamDungeonRoleRank::use_time() const {
  return use_time_;
}
inline void TeamDungeonRoleRank::set_use_time(::google::protobuf::uint32 value) {
  set_has_use_time();
  use_time_ = value;
}

// optional uint32 finish_time = 3;
inline bool TeamDungeonRoleRank::has_finish_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamDungeonRoleRank::set_has_finish_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamDungeonRoleRank::clear_has_finish_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamDungeonRoleRank::clear_finish_time() {
  finish_time_ = 0u;
  clear_has_finish_time();
}
inline ::google::protobuf::uint32 TeamDungeonRoleRank::finish_time() const {
  return finish_time_;
}
inline void TeamDungeonRoleRank::set_finish_time(::google::protobuf::uint32 value) {
  set_has_finish_time();
  finish_time_ = value;
}

// optional uint32 captain_head_img_id = 4;
inline bool TeamDungeonRoleRank::has_captain_head_img_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamDungeonRoleRank::set_has_captain_head_img_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamDungeonRoleRank::clear_has_captain_head_img_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamDungeonRoleRank::clear_captain_head_img_id() {
  captain_head_img_id_ = 0u;
  clear_has_captain_head_img_id();
}
inline ::google::protobuf::uint32 TeamDungeonRoleRank::captain_head_img_id() const {
  return captain_head_img_id_;
}
inline void TeamDungeonRoleRank::set_captain_head_img_id(::google::protobuf::uint32 value) {
  set_has_captain_head_img_id();
  captain_head_img_id_ = value;
}

// repeated .PB.TeamDungeonMember member_list = 5;
inline int TeamDungeonRoleRank::member_list_size() const {
  return member_list_.size();
}
inline void TeamDungeonRoleRank::clear_member_list() {
  member_list_.Clear();
}
inline const ::PB::TeamDungeonMember& TeamDungeonRoleRank::member_list(int index) const {
  return member_list_.Get(index);
}
inline ::PB::TeamDungeonMember* TeamDungeonRoleRank::mutable_member_list(int index) {
  return member_list_.Mutable(index);
}
inline ::PB::TeamDungeonMember* TeamDungeonRoleRank::add_member_list() {
  return member_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonMember >&
TeamDungeonRoleRank::member_list() const {
  return member_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonMember >*
TeamDungeonRoleRank::mutable_member_list() {
  return &member_list_;
}

// -------------------------------------------------------------------

// TeamDungeonRank

// optional uint32 dungeon_id = 1;
inline bool TeamDungeonRank::has_dungeon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamDungeonRank::set_has_dungeon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamDungeonRank::clear_has_dungeon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamDungeonRank::clear_dungeon_id() {
  dungeon_id_ = 0u;
  clear_has_dungeon_id();
}
inline ::google::protobuf::uint32 TeamDungeonRank::dungeon_id() const {
  return dungeon_id_;
}
inline void TeamDungeonRank::set_dungeon_id(::google::protobuf::uint32 value) {
  set_has_dungeon_id();
  dungeon_id_ = value;
}

// repeated .PB.TeamDungeonRoleRank role_rank_list = 2;
inline int TeamDungeonRank::role_rank_list_size() const {
  return role_rank_list_.size();
}
inline void TeamDungeonRank::clear_role_rank_list() {
  role_rank_list_.Clear();
}
inline const ::PB::TeamDungeonRoleRank& TeamDungeonRank::role_rank_list(int index) const {
  return role_rank_list_.Get(index);
}
inline ::PB::TeamDungeonRoleRank* TeamDungeonRank::mutable_role_rank_list(int index) {
  return role_rank_list_.Mutable(index);
}
inline ::PB::TeamDungeonRoleRank* TeamDungeonRank::add_role_rank_list() {
  return role_rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRoleRank >&
TeamDungeonRank::role_rank_list() const {
  return role_rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRoleRank >*
TeamDungeonRank::mutable_role_rank_list() {
  return &role_rank_list_;
}

// -------------------------------------------------------------------

// TeamDungeonLotteryRecord

// optional uint32 server_id = 1;
inline bool TeamDungeonLotteryRecord::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamDungeonLotteryRecord::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamDungeonLotteryRecord::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamDungeonLotteryRecord::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 TeamDungeonLotteryRecord::server_id() const {
  return server_id_;
}
inline void TeamDungeonLotteryRecord::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional string role_name = 2;
inline bool TeamDungeonLotteryRecord::has_role_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamDungeonLotteryRecord::set_has_role_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamDungeonLotteryRecord::clear_has_role_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamDungeonLotteryRecord::clear_role_name() {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    role_name_->clear();
  }
  clear_has_role_name();
}
inline const ::std::string& TeamDungeonLotteryRecord::role_name() const {
  return *role_name_;
}
inline void TeamDungeonLotteryRecord::set_role_name(const ::std::string& value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void TeamDungeonLotteryRecord::set_role_name(const char* value) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(value);
}
inline void TeamDungeonLotteryRecord::set_role_name(const char* value, size_t size) {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  role_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamDungeonLotteryRecord::mutable_role_name() {
  set_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    role_name_ = new ::std::string;
  }
  return role_name_;
}
inline ::std::string* TeamDungeonLotteryRecord::release_role_name() {
  clear_has_role_name();
  if (role_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = role_name_;
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamDungeonLotteryRecord::set_allocated_role_name(::std::string* role_name) {
  if (role_name_ != &::google::protobuf::internal::kEmptyString) {
    delete role_name_;
  }
  if (role_name) {
    set_has_role_name();
    role_name_ = role_name;
  } else {
    clear_has_role_name();
    role_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 item_id = 3;
inline bool TeamDungeonLotteryRecord::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamDungeonLotteryRecord::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamDungeonLotteryRecord::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamDungeonLotteryRecord::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 TeamDungeonLotteryRecord::item_id() const {
  return item_id_;
}
inline void TeamDungeonLotteryRecord::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
}

// optional uint32 item_num = 4;
inline bool TeamDungeonLotteryRecord::has_item_num() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamDungeonLotteryRecord::set_has_item_num() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamDungeonLotteryRecord::clear_has_item_num() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamDungeonLotteryRecord::clear_item_num() {
  item_num_ = 0u;
  clear_has_item_num();
}
inline ::google::protobuf::uint32 TeamDungeonLotteryRecord::item_num() const {
  return item_num_;
}
inline void TeamDungeonLotteryRecord::set_item_num(::google::protobuf::uint32 value) {
  set_has_item_num();
  item_num_ = value;
}

// optional uint32 record_time = 5;
inline bool TeamDungeonLotteryRecord::has_record_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamDungeonLotteryRecord::set_has_record_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamDungeonLotteryRecord::clear_has_record_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamDungeonLotteryRecord::clear_record_time() {
  record_time_ = 0u;
  clear_has_record_time();
}
inline ::google::protobuf::uint32 TeamDungeonLotteryRecord::record_time() const {
  return record_time_;
}
inline void TeamDungeonLotteryRecord::set_record_time(::google::protobuf::uint32 value) {
  set_has_record_time();
  record_time_ = value;
}

// -------------------------------------------------------------------

// TeamDungeonData

// repeated .PB.TeamDungeonRank dungeon_rank_list = 1;
inline int TeamDungeonData::dungeon_rank_list_size() const {
  return dungeon_rank_list_.size();
}
inline void TeamDungeonData::clear_dungeon_rank_list() {
  dungeon_rank_list_.Clear();
}
inline const ::PB::TeamDungeonRank& TeamDungeonData::dungeon_rank_list(int index) const {
  return dungeon_rank_list_.Get(index);
}
inline ::PB::TeamDungeonRank* TeamDungeonData::mutable_dungeon_rank_list(int index) {
  return dungeon_rank_list_.Mutable(index);
}
inline ::PB::TeamDungeonRank* TeamDungeonData::add_dungeon_rank_list() {
  return dungeon_rank_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRank >&
TeamDungeonData::dungeon_rank_list() const {
  return dungeon_rank_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonRank >*
TeamDungeonData::mutable_dungeon_rank_list() {
  return &dungeon_rank_list_;
}

// repeated .PB.TeamDungeonLotteryRecord lottery_record = 2;
inline int TeamDungeonData::lottery_record_size() const {
  return lottery_record_.size();
}
inline void TeamDungeonData::clear_lottery_record() {
  lottery_record_.Clear();
}
inline const ::PB::TeamDungeonLotteryRecord& TeamDungeonData::lottery_record(int index) const {
  return lottery_record_.Get(index);
}
inline ::PB::TeamDungeonLotteryRecord* TeamDungeonData::mutable_lottery_record(int index) {
  return lottery_record_.Mutable(index);
}
inline ::PB::TeamDungeonLotteryRecord* TeamDungeonData::add_lottery_record() {
  return lottery_record_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonLotteryRecord >&
TeamDungeonData::lottery_record() const {
  return lottery_record_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TeamDungeonLotteryRecord >*
TeamDungeonData::mutable_lottery_record() {
  return &lottery_record_;
}

// -------------------------------------------------------------------

// TurntableLotteryRecord

// optional uint32 role_id = 1;
inline bool TurntableLotteryRecord::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableLotteryRecord::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableLotteryRecord::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableLotteryRecord::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 TurntableLotteryRecord::role_id() const {
  return role_id_;
}
inline void TurntableLotteryRecord::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 time = 2;
inline bool TurntableLotteryRecord::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurntableLotteryRecord::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurntableLotteryRecord::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurntableLotteryRecord::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TurntableLotteryRecord::time() const {
  return time_;
}
inline void TurntableLotteryRecord::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 index = 3;
inline bool TurntableLotteryRecord::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurntableLotteryRecord::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurntableLotteryRecord::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurntableLotteryRecord::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TurntableLotteryRecord::index() const {
  return index_;
}
inline void TurntableLotteryRecord::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 context = 4;
inline bool TurntableLotteryRecord::has_context() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TurntableLotteryRecord::set_has_context() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TurntableLotteryRecord::clear_has_context() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TurntableLotteryRecord::clear_context() {
  context_ = 0u;
  clear_has_context();
}
inline ::google::protobuf::uint32 TurntableLotteryRecord::context() const {
  return context_;
}
inline void TurntableLotteryRecord::set_context(::google::protobuf::uint32 value) {
  set_has_context();
  context_ = value;
}

// -------------------------------------------------------------------

// TurntableData

// optional uint32 server_id = 1;
inline bool TurntableData::has_server_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TurntableData::set_has_server_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TurntableData::clear_has_server_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TurntableData::clear_server_id() {
  server_id_ = 0u;
  clear_has_server_id();
}
inline ::google::protobuf::uint32 TurntableData::server_id() const {
  return server_id_;
}
inline void TurntableData::set_server_id(::google::protobuf::uint32 value) {
  set_has_server_id();
  server_id_ = value;
}

// optional uint32 cur_activity_data_id = 2;
inline bool TurntableData::has_cur_activity_data_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TurntableData::set_has_cur_activity_data_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TurntableData::clear_has_cur_activity_data_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TurntableData::clear_cur_activity_data_id() {
  cur_activity_data_id_ = 0u;
  clear_has_cur_activity_data_id();
}
inline ::google::protobuf::uint32 TurntableData::cur_activity_data_id() const {
  return cur_activity_data_id_;
}
inline void TurntableData::set_cur_activity_data_id(::google::protobuf::uint32 value) {
  set_has_cur_activity_data_id();
  cur_activity_data_id_ = value;
}

// optional uint32 diamond = 3;
inline bool TurntableData::has_diamond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TurntableData::set_has_diamond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TurntableData::clear_has_diamond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TurntableData::clear_diamond() {
  diamond_ = 0u;
  clear_has_diamond();
}
inline ::google::protobuf::uint32 TurntableData::diamond() const {
  return diamond_;
}
inline void TurntableData::set_diamond(::google::protobuf::uint32 value) {
  set_has_diamond();
  diamond_ = value;
}

// repeated .PB.TurntableLotteryRecord lottery_record_list = 4;
inline int TurntableData::lottery_record_list_size() const {
  return lottery_record_list_.size();
}
inline void TurntableData::clear_lottery_record_list() {
  lottery_record_list_.Clear();
}
inline const ::PB::TurntableLotteryRecord& TurntableData::lottery_record_list(int index) const {
  return lottery_record_list_.Get(index);
}
inline ::PB::TurntableLotteryRecord* TurntableData::mutable_lottery_record_list(int index) {
  return lottery_record_list_.Mutable(index);
}
inline ::PB::TurntableLotteryRecord* TurntableData::add_lottery_record_list() {
  return lottery_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TurntableLotteryRecord >&
TurntableData::lottery_record_list() const {
  return lottery_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TurntableLotteryRecord >*
TurntableData::mutable_lottery_record_list() {
  return &lottery_record_list_;
}

// -------------------------------------------------------------------

// AllServerTurntableData

// repeated .PB.TurntableData turntable_data_list = 1;
inline int AllServerTurntableData::turntable_data_list_size() const {
  return turntable_data_list_.size();
}
inline void AllServerTurntableData::clear_turntable_data_list() {
  turntable_data_list_.Clear();
}
inline const ::PB::TurntableData& AllServerTurntableData::turntable_data_list(int index) const {
  return turntable_data_list_.Get(index);
}
inline ::PB::TurntableData* AllServerTurntableData::mutable_turntable_data_list(int index) {
  return turntable_data_list_.Mutable(index);
}
inline ::PB::TurntableData* AllServerTurntableData::add_turntable_data_list() {
  return turntable_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::TurntableData >&
AllServerTurntableData::turntable_data_list() const {
  return turntable_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::TurntableData >*
AllServerTurntableData::mutable_turntable_data_list() {
  return &turntable_data_list_;
}

// -------------------------------------------------------------------

// ScoreMatchTarget

// optional uint32 target_id = 1;
inline bool ScoreMatchTarget::has_target_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreMatchTarget::set_has_target_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreMatchTarget::clear_has_target_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreMatchTarget::clear_target_id() {
  target_id_ = 0u;
  clear_has_target_id();
}
inline ::google::protobuf::uint32 ScoreMatchTarget::target_id() const {
  return target_id_;
}
inline void ScoreMatchTarget::set_target_id(::google::protobuf::uint32 value) {
  set_has_target_id();
  target_id_ = value;
}

// optional uint32 status = 2;
inline bool ScoreMatchTarget::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreMatchTarget::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreMatchTarget::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreMatchTarget::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 ScoreMatchTarget::status() const {
  return status_;
}
inline void ScoreMatchTarget::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
}

// -------------------------------------------------------------------

// RoleScoreMatchData

// optional uint32 role_id = 1;
inline bool RoleScoreMatchData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleScoreMatchData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleScoreMatchData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleScoreMatchData::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::role_id() const {
  return role_id_;
}
inline void RoleScoreMatchData::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 battle_times = 2;
inline bool RoleScoreMatchData::has_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleScoreMatchData::set_has_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleScoreMatchData::clear_has_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleScoreMatchData::clear_battle_times() {
  battle_times_ = 0u;
  clear_has_battle_times();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::battle_times() const {
  return battle_times_;
}
inline void RoleScoreMatchData::set_battle_times(::google::protobuf::uint32 value) {
  set_has_battle_times();
  battle_times_ = value;
}

// optional uint32 refresh_times = 3;
inline bool RoleScoreMatchData::has_refresh_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleScoreMatchData::set_has_refresh_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleScoreMatchData::clear_has_refresh_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleScoreMatchData::clear_refresh_times() {
  refresh_times_ = 0u;
  clear_has_refresh_times();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::refresh_times() const {
  return refresh_times_;
}
inline void RoleScoreMatchData::set_refresh_times(::google::protobuf::uint32 value) {
  set_has_refresh_times();
  refresh_times_ = value;
}

// optional uint32 buy_battle_times = 4;
inline bool RoleScoreMatchData::has_buy_battle_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleScoreMatchData::set_has_buy_battle_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleScoreMatchData::clear_has_buy_battle_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleScoreMatchData::clear_buy_battle_times() {
  buy_battle_times_ = 0u;
  clear_has_buy_battle_times();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::buy_battle_times() const {
  return buy_battle_times_;
}
inline void RoleScoreMatchData::set_buy_battle_times(::google::protobuf::uint32 value) {
  set_has_buy_battle_times();
  buy_battle_times_ = value;
}

// optional uint32 camp = 5;
inline bool RoleScoreMatchData::has_camp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleScoreMatchData::set_has_camp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleScoreMatchData::clear_has_camp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleScoreMatchData::clear_camp() {
  camp_ = 0u;
  clear_has_camp();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::camp() const {
  return camp_;
}
inline void RoleScoreMatchData::set_camp(::google::protobuf::uint32 value) {
  set_has_camp();
  camp_ = value;
}

// optional uint32 win_times = 6;
inline bool RoleScoreMatchData::has_win_times() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoleScoreMatchData::set_has_win_times() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoleScoreMatchData::clear_has_win_times() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoleScoreMatchData::clear_win_times() {
  win_times_ = 0u;
  clear_has_win_times();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::win_times() const {
  return win_times_;
}
inline void RoleScoreMatchData::set_win_times(::google::protobuf::uint32 value) {
  set_has_win_times();
  win_times_ = value;
}

// repeated uint32 task_reward_record = 7;
inline int RoleScoreMatchData::task_reward_record_size() const {
  return task_reward_record_.size();
}
inline void RoleScoreMatchData::clear_task_reward_record() {
  task_reward_record_.Clear();
}
inline ::google::protobuf::uint32 RoleScoreMatchData::task_reward_record(int index) const {
  return task_reward_record_.Get(index);
}
inline void RoleScoreMatchData::set_task_reward_record(int index, ::google::protobuf::uint32 value) {
  task_reward_record_.Set(index, value);
}
inline void RoleScoreMatchData::add_task_reward_record(::google::protobuf::uint32 value) {
  task_reward_record_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
RoleScoreMatchData::task_reward_record() const {
  return task_reward_record_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
RoleScoreMatchData::mutable_task_reward_record() {
  return &task_reward_record_;
}

// repeated .PB.ScoreMatchTarget battle_target_list = 8;
inline int RoleScoreMatchData::battle_target_list_size() const {
  return battle_target_list_.size();
}
inline void RoleScoreMatchData::clear_battle_target_list() {
  battle_target_list_.Clear();
}
inline const ::PB::ScoreMatchTarget& RoleScoreMatchData::battle_target_list(int index) const {
  return battle_target_list_.Get(index);
}
inline ::PB::ScoreMatchTarget* RoleScoreMatchData::mutable_battle_target_list(int index) {
  return battle_target_list_.Mutable(index);
}
inline ::PB::ScoreMatchTarget* RoleScoreMatchData::add_battle_target_list() {
  return battle_target_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ScoreMatchTarget >&
RoleScoreMatchData::battle_target_list() const {
  return battle_target_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ScoreMatchTarget >*
RoleScoreMatchData::mutable_battle_target_list() {
  return &battle_target_list_;
}

// -------------------------------------------------------------------

// ScoreMatchData

// optional uint32 cur_activity_index = 1;
inline bool ScoreMatchData::has_cur_activity_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ScoreMatchData::set_has_cur_activity_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ScoreMatchData::clear_has_cur_activity_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ScoreMatchData::clear_cur_activity_index() {
  cur_activity_index_ = 0u;
  clear_has_cur_activity_index();
}
inline ::google::protobuf::uint32 ScoreMatchData::cur_activity_index() const {
  return cur_activity_index_;
}
inline void ScoreMatchData::set_cur_activity_index(::google::protobuf::uint32 value) {
  set_has_cur_activity_index();
  cur_activity_index_ = value;
}

// optional uint32 activity_status = 2;
inline bool ScoreMatchData::has_activity_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ScoreMatchData::set_has_activity_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ScoreMatchData::clear_has_activity_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ScoreMatchData::clear_activity_status() {
  activity_status_ = 0u;
  clear_has_activity_status();
}
inline ::google::protobuf::uint32 ScoreMatchData::activity_status() const {
  return activity_status_;
}
inline void ScoreMatchData::set_activity_status(::google::protobuf::uint32 value) {
  set_has_activity_status();
  activity_status_ = value;
}

// optional uint32 activity_over_time = 3;
inline bool ScoreMatchData::has_activity_over_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ScoreMatchData::set_has_activity_over_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ScoreMatchData::clear_has_activity_over_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ScoreMatchData::clear_activity_over_time() {
  activity_over_time_ = 0u;
  clear_has_activity_over_time();
}
inline ::google::protobuf::uint32 ScoreMatchData::activity_over_time() const {
  return activity_over_time_;
}
inline void ScoreMatchData::set_activity_over_time(::google::protobuf::uint32 value) {
  set_has_activity_over_time();
  activity_over_time_ = value;
}

// repeated .PB.RoleScoreMatchData role_score_match_data_list = 4;
inline int ScoreMatchData::role_score_match_data_list_size() const {
  return role_score_match_data_list_.size();
}
inline void ScoreMatchData::clear_role_score_match_data_list() {
  role_score_match_data_list_.Clear();
}
inline const ::PB::RoleScoreMatchData& ScoreMatchData::role_score_match_data_list(int index) const {
  return role_score_match_data_list_.Get(index);
}
inline ::PB::RoleScoreMatchData* ScoreMatchData::mutable_role_score_match_data_list(int index) {
  return role_score_match_data_list_.Mutable(index);
}
inline ::PB::RoleScoreMatchData* ScoreMatchData::add_role_score_match_data_list() {
  return role_score_match_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleScoreMatchData >&
ScoreMatchData::role_score_match_data_list() const {
  return role_score_match_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RoleScoreMatchData >*
ScoreMatchData::mutable_role_score_match_data_list() {
  return &role_score_match_data_list_;
}

// -------------------------------------------------------------------

// RoleResourceWarData

// optional uint32 role_id = 1;
inline bool RoleResourceWarData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleResourceWarData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleResourceWarData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleResourceWarData::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RoleResourceWarData::role_id() const {
  return role_id_;
}
inline void RoleResourceWarData::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 technology_level = 2;
inline bool RoleResourceWarData::has_technology_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleResourceWarData::set_has_technology_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleResourceWarData::clear_has_technology_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleResourceWarData::clear_technology_level() {
  technology_level_ = 0u;
  clear_has_technology_level();
}
inline ::google::protobuf::uint32 RoleResourceWarData::technology_level() const {
  return technology_level_;
}
inline void RoleResourceWarData::set_technology_level(::google::protobuf::uint32 value) {
  set_has_technology_level();
  technology_level_ = value;
}

// optional uint32 total_accupy_time = 3;
inline bool RoleResourceWarData::has_total_accupy_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleResourceWarData::set_has_total_accupy_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleResourceWarData::clear_has_total_accupy_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleResourceWarData::clear_total_accupy_time() {
  total_accupy_time_ = 0u;
  clear_has_total_accupy_time();
}
inline ::google::protobuf::uint32 RoleResourceWarData::total_accupy_time() const {
  return total_accupy_time_;
}
inline void RoleResourceWarData::set_total_accupy_time(::google::protobuf::uint32 value) {
  set_has_total_accupy_time();
  total_accupy_time_ = value;
}

// optional uint32 reward_resource_war_score = 4;
inline bool RoleResourceWarData::has_reward_resource_war_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleResourceWarData::set_has_reward_resource_war_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleResourceWarData::clear_has_reward_resource_war_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleResourceWarData::clear_reward_resource_war_score() {
  reward_resource_war_score_ = 0u;
  clear_has_reward_resource_war_score();
}
inline ::google::protobuf::uint32 RoleResourceWarData::reward_resource_war_score() const {
  return reward_resource_war_score_;
}
inline void RoleResourceWarData::set_reward_resource_war_score(::google::protobuf::uint32 value) {
  set_has_reward_resource_war_score();
  reward_resource_war_score_ = value;
}

// -------------------------------------------------------------------

// ResourceWarEnemy

// optional uint32 role_id = 1;
inline bool ResourceWarEnemy::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceWarEnemy::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceWarEnemy::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceWarEnemy::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 ResourceWarEnemy::role_id() const {
  return role_id_;
}
inline void ResourceWarEnemy::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 be_attack_times = 2;
inline bool ResourceWarEnemy::has_be_attack_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceWarEnemy::set_has_be_attack_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceWarEnemy::clear_has_be_attack_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceWarEnemy::clear_be_attack_times() {
  be_attack_times_ = 0u;
  clear_has_be_attack_times();
}
inline ::google::protobuf::uint32 ResourceWarEnemy::be_attack_times() const {
  return be_attack_times_;
}
inline void ResourceWarEnemy::set_be_attack_times(::google::protobuf::uint32 value) {
  set_has_be_attack_times();
  be_attack_times_ = value;
}

// optional uint32 enemy_id = 3;
inline bool ResourceWarEnemy::has_enemy_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceWarEnemy::set_has_enemy_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceWarEnemy::clear_has_enemy_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceWarEnemy::clear_enemy_id() {
  enemy_id_ = 0u;
  clear_has_enemy_id();
}
inline ::google::protobuf::uint32 ResourceWarEnemy::enemy_id() const {
  return enemy_id_;
}
inline void ResourceWarEnemy::set_enemy_id(::google::protobuf::uint32 value) {
  set_has_enemy_id();
  enemy_id_ = value;
}

// -------------------------------------------------------------------

// ResourceWarBattleRecord

// optional uint32 attacker_id = 1;
inline bool ResourceWarBattleRecord::has_attacker_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceWarBattleRecord::set_has_attacker_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceWarBattleRecord::clear_has_attacker_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceWarBattleRecord::clear_attacker_id() {
  attacker_id_ = 0u;
  clear_has_attacker_id();
}
inline ::google::protobuf::uint32 ResourceWarBattleRecord::attacker_id() const {
  return attacker_id_;
}
inline void ResourceWarBattleRecord::set_attacker_id(::google::protobuf::uint32 value) {
  set_has_attacker_id();
  attacker_id_ = value;
}

// optional uint32 defender_id = 2;
inline bool ResourceWarBattleRecord::has_defender_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceWarBattleRecord::set_has_defender_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceWarBattleRecord::clear_has_defender_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceWarBattleRecord::clear_defender_id() {
  defender_id_ = 0u;
  clear_has_defender_id();
}
inline ::google::protobuf::uint32 ResourceWarBattleRecord::defender_id() const {
  return defender_id_;
}
inline void ResourceWarBattleRecord::set_defender_id(::google::protobuf::uint32 value) {
  set_has_defender_id();
  defender_id_ = value;
}

// optional uint32 battle_time = 3;
inline bool ResourceWarBattleRecord::has_battle_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceWarBattleRecord::set_has_battle_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceWarBattleRecord::clear_has_battle_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceWarBattleRecord::clear_battle_time() {
  battle_time_ = 0u;
  clear_has_battle_time();
}
inline ::google::protobuf::uint32 ResourceWarBattleRecord::battle_time() const {
  return battle_time_;
}
inline void ResourceWarBattleRecord::set_battle_time(::google::protobuf::uint32 value) {
  set_has_battle_time();
  battle_time_ = value;
}

// optional uint32 chapter = 4;
inline bool ResourceWarBattleRecord::has_chapter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceWarBattleRecord::set_has_chapter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceWarBattleRecord::clear_has_chapter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceWarBattleRecord::clear_chapter() {
  chapter_ = 0u;
  clear_has_chapter();
}
inline ::google::protobuf::uint32 ResourceWarBattleRecord::chapter() const {
  return chapter_;
}
inline void ResourceWarBattleRecord::set_chapter(::google::protobuf::uint32 value) {
  set_has_chapter();
  chapter_ = value;
}

// optional uint32 resource_id = 5;
inline bool ResourceWarBattleRecord::has_resource_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceWarBattleRecord::set_has_resource_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResourceWarBattleRecord::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResourceWarBattleRecord::clear_resource_id() {
  resource_id_ = 0u;
  clear_has_resource_id();
}
inline ::google::protobuf::uint32 ResourceWarBattleRecord::resource_id() const {
  return resource_id_;
}
inline void ResourceWarBattleRecord::set_resource_id(::google::protobuf::uint32 value) {
  set_has_resource_id();
  resource_id_ = value;
}

// -------------------------------------------------------------------

// ResourceWarResourceData

// optional uint32 chapter = 1;
inline bool ResourceWarResourceData::has_chapter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResourceWarResourceData::set_has_chapter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResourceWarResourceData::clear_has_chapter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResourceWarResourceData::clear_chapter() {
  chapter_ = 0u;
  clear_has_chapter();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::chapter() const {
  return chapter_;
}
inline void ResourceWarResourceData::set_chapter(::google::protobuf::uint32 value) {
  set_has_chapter();
  chapter_ = value;
}

// optional uint32 resource_id = 2;
inline bool ResourceWarResourceData::has_resource_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResourceWarResourceData::set_has_resource_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResourceWarResourceData::clear_has_resource_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResourceWarResourceData::clear_resource_id() {
  resource_id_ = 0u;
  clear_has_resource_id();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::resource_id() const {
  return resource_id_;
}
inline void ResourceWarResourceData::set_resource_id(::google::protobuf::uint32 value) {
  set_has_resource_id();
  resource_id_ = value;
}

// optional uint32 resource_type = 3;
inline bool ResourceWarResourceData::has_resource_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResourceWarResourceData::set_has_resource_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResourceWarResourceData::clear_has_resource_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResourceWarResourceData::clear_resource_type() {
  resource_type_ = 0u;
  clear_has_resource_type();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::resource_type() const {
  return resource_type_;
}
inline void ResourceWarResourceData::set_resource_type(::google::protobuf::uint32 value) {
  set_has_resource_type();
  resource_type_ = value;
}

// optional uint32 occupy_start_time = 4;
inline bool ResourceWarResourceData::has_occupy_start_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResourceWarResourceData::set_has_occupy_start_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResourceWarResourceData::clear_has_occupy_start_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResourceWarResourceData::clear_occupy_start_time() {
  occupy_start_time_ = 0u;
  clear_has_occupy_start_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::occupy_start_time() const {
  return occupy_start_time_;
}
inline void ResourceWarResourceData::set_occupy_start_time(::google::protobuf::uint32 value) {
  set_has_occupy_start_time();
  occupy_start_time_ = value;
}

// optional uint32 occupy_over_time = 5;
inline bool ResourceWarResourceData::has_occupy_over_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResourceWarResourceData::set_has_occupy_over_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResourceWarResourceData::clear_has_occupy_over_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResourceWarResourceData::clear_occupy_over_time() {
  occupy_over_time_ = 0u;
  clear_has_occupy_over_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::occupy_over_time() const {
  return occupy_over_time_;
}
inline void ResourceWarResourceData::set_occupy_over_time(::google::protobuf::uint32 value) {
  set_has_occupy_over_time();
  occupy_over_time_ = value;
}

// optional uint32 owner_id = 6;
inline bool ResourceWarResourceData::has_owner_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResourceWarResourceData::set_has_owner_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResourceWarResourceData::clear_has_owner_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResourceWarResourceData::clear_owner_id() {
  owner_id_ = 0u;
  clear_has_owner_id();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::owner_id() const {
  return owner_id_;
}
inline void ResourceWarResourceData::set_owner_id(::google::protobuf::uint32 value) {
  set_has_owner_id();
  owner_id_ = value;
}

// optional uint32 keep_occupy_times = 7;
inline bool ResourceWarResourceData::has_keep_occupy_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResourceWarResourceData::set_has_keep_occupy_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResourceWarResourceData::clear_has_keep_occupy_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResourceWarResourceData::clear_keep_occupy_times() {
  keep_occupy_times_ = 0u;
  clear_has_keep_occupy_times();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::keep_occupy_times() const {
  return keep_occupy_times_;
}
inline void ResourceWarResourceData::set_keep_occupy_times(::google::protobuf::uint32 value) {
  set_has_keep_occupy_times();
  keep_occupy_times_ = value;
}

// optional uint32 last_base_reward_time = 8;
inline bool ResourceWarResourceData::has_last_base_reward_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResourceWarResourceData::set_has_last_base_reward_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResourceWarResourceData::clear_has_last_base_reward_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResourceWarResourceData::clear_last_base_reward_time() {
  last_base_reward_time_ = 0u;
  clear_has_last_base_reward_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::last_base_reward_time() const {
  return last_base_reward_time_;
}
inline void ResourceWarResourceData::set_last_base_reward_time(::google::protobuf::uint32 value) {
  set_has_last_base_reward_time();
  last_base_reward_time_ = value;
}

// optional uint32 last_extra_reward_time = 9;
inline bool ResourceWarResourceData::has_last_extra_reward_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ResourceWarResourceData::set_has_last_extra_reward_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ResourceWarResourceData::clear_has_last_extra_reward_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ResourceWarResourceData::clear_last_extra_reward_time() {
  last_extra_reward_time_ = 0u;
  clear_has_last_extra_reward_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::last_extra_reward_time() const {
  return last_extra_reward_time_;
}
inline void ResourceWarResourceData::set_last_extra_reward_time(::google::protobuf::uint32 value) {
  set_has_last_extra_reward_time();
  last_extra_reward_time_ = value;
}

// optional uint32 base_reward_interval_time = 10;
inline bool ResourceWarResourceData::has_base_reward_interval_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ResourceWarResourceData::set_has_base_reward_interval_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ResourceWarResourceData::clear_has_base_reward_interval_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ResourceWarResourceData::clear_base_reward_interval_time() {
  base_reward_interval_time_ = 0u;
  clear_has_base_reward_interval_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::base_reward_interval_time() const {
  return base_reward_interval_time_;
}
inline void ResourceWarResourceData::set_base_reward_interval_time(::google::protobuf::uint32 value) {
  set_has_base_reward_interval_time();
  base_reward_interval_time_ = value;
}

// optional uint32 cur_extra_reward_need_time = 11;
inline bool ResourceWarResourceData::has_cur_extra_reward_need_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ResourceWarResourceData::set_has_cur_extra_reward_need_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ResourceWarResourceData::clear_has_cur_extra_reward_need_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ResourceWarResourceData::clear_cur_extra_reward_need_time() {
  cur_extra_reward_need_time_ = 0u;
  clear_has_cur_extra_reward_need_time();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::cur_extra_reward_need_time() const {
  return cur_extra_reward_need_time_;
}
inline void ResourceWarResourceData::set_cur_extra_reward_need_time(::google::protobuf::uint32 value) {
  set_has_cur_extra_reward_need_time();
  cur_extra_reward_need_time_ = value;
}

// optional uint32 already_send_base_reward_times = 12;
inline bool ResourceWarResourceData::has_already_send_base_reward_times() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ResourceWarResourceData::set_has_already_send_base_reward_times() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ResourceWarResourceData::clear_has_already_send_base_reward_times() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ResourceWarResourceData::clear_already_send_base_reward_times() {
  already_send_base_reward_times_ = 0u;
  clear_has_already_send_base_reward_times();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::already_send_base_reward_times() const {
  return already_send_base_reward_times_;
}
inline void ResourceWarResourceData::set_already_send_base_reward_times(::google::protobuf::uint32 value) {
  set_has_already_send_base_reward_times();
  already_send_base_reward_times_ = value;
}

// optional uint32 already_send_extra_reward_times = 13;
inline bool ResourceWarResourceData::has_already_send_extra_reward_times() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ResourceWarResourceData::set_has_already_send_extra_reward_times() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ResourceWarResourceData::clear_has_already_send_extra_reward_times() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ResourceWarResourceData::clear_already_send_extra_reward_times() {
  already_send_extra_reward_times_ = 0u;
  clear_has_already_send_extra_reward_times();
}
inline ::google::protobuf::uint32 ResourceWarResourceData::already_send_extra_reward_times() const {
  return already_send_extra_reward_times_;
}
inline void ResourceWarResourceData::set_already_send_extra_reward_times(::google::protobuf::uint32 value) {
  set_has_already_send_extra_reward_times();
  already_send_extra_reward_times_ = value;
}

// -------------------------------------------------------------------

// ResourceWarData

// repeated .PB.ResourceWarResourceData resource_data_list = 1;
inline int ResourceWarData::resource_data_list_size() const {
  return resource_data_list_.size();
}
inline void ResourceWarData::clear_resource_data_list() {
  resource_data_list_.Clear();
}
inline const ::PB::ResourceWarResourceData& ResourceWarData::resource_data_list(int index) const {
  return resource_data_list_.Get(index);
}
inline ::PB::ResourceWarResourceData* ResourceWarData::mutable_resource_data_list(int index) {
  return resource_data_list_.Mutable(index);
}
inline ::PB::ResourceWarResourceData* ResourceWarData::add_resource_data_list() {
  return resource_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarResourceData >&
ResourceWarData::resource_data_list() const {
  return resource_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarResourceData >*
ResourceWarData::mutable_resource_data_list() {
  return &resource_data_list_;
}

// repeated .PB.RoleResourceWarData role_resource_war_data_list = 2;
inline int ResourceWarData::role_resource_war_data_list_size() const {
  return role_resource_war_data_list_.size();
}
inline void ResourceWarData::clear_role_resource_war_data_list() {
  role_resource_war_data_list_.Clear();
}
inline const ::PB::RoleResourceWarData& ResourceWarData::role_resource_war_data_list(int index) const {
  return role_resource_war_data_list_.Get(index);
}
inline ::PB::RoleResourceWarData* ResourceWarData::mutable_role_resource_war_data_list(int index) {
  return role_resource_war_data_list_.Mutable(index);
}
inline ::PB::RoleResourceWarData* ResourceWarData::add_role_resource_war_data_list() {
  return role_resource_war_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleResourceWarData >&
ResourceWarData::role_resource_war_data_list() const {
  return role_resource_war_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RoleResourceWarData >*
ResourceWarData::mutable_role_resource_war_data_list() {
  return &role_resource_war_data_list_;
}

// repeated .PB.ResourceWarEnemy enemy_list = 3;
inline int ResourceWarData::enemy_list_size() const {
  return enemy_list_.size();
}
inline void ResourceWarData::clear_enemy_list() {
  enemy_list_.Clear();
}
inline const ::PB::ResourceWarEnemy& ResourceWarData::enemy_list(int index) const {
  return enemy_list_.Get(index);
}
inline ::PB::ResourceWarEnemy* ResourceWarData::mutable_enemy_list(int index) {
  return enemy_list_.Mutable(index);
}
inline ::PB::ResourceWarEnemy* ResourceWarData::add_enemy_list() {
  return enemy_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarEnemy >&
ResourceWarData::enemy_list() const {
  return enemy_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarEnemy >*
ResourceWarData::mutable_enemy_list() {
  return &enemy_list_;
}

// repeated .PB.ResourceWarBattleRecord battle_record_list = 4;
inline int ResourceWarData::battle_record_list_size() const {
  return battle_record_list_.size();
}
inline void ResourceWarData::clear_battle_record_list() {
  battle_record_list_.Clear();
}
inline const ::PB::ResourceWarBattleRecord& ResourceWarData::battle_record_list(int index) const {
  return battle_record_list_.Get(index);
}
inline ::PB::ResourceWarBattleRecord* ResourceWarData::mutable_battle_record_list(int index) {
  return battle_record_list_.Mutable(index);
}
inline ::PB::ResourceWarBattleRecord* ResourceWarData::add_battle_record_list() {
  return battle_record_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarBattleRecord >&
ResourceWarData::battle_record_list() const {
  return battle_record_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::ResourceWarBattleRecord >*
ResourceWarData::mutable_battle_record_list() {
  return &battle_record_list_;
}

// -------------------------------------------------------------------

// StarDefenderInfo

// optional uint32 role_id = 1;
inline bool StarDefenderInfo::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarDefenderInfo::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarDefenderInfo::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarDefenderInfo::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 StarDefenderInfo::role_id() const {
  return role_id_;
}
inline void StarDefenderInfo::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 be_attack_times = 2;
inline bool StarDefenderInfo::has_be_attack_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarDefenderInfo::set_has_be_attack_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarDefenderInfo::clear_has_be_attack_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarDefenderInfo::clear_be_attack_times() {
  be_attack_times_ = 0u;
  clear_has_be_attack_times();
}
inline ::google::protobuf::uint32 StarDefenderInfo::be_attack_times() const {
  return be_attack_times_;
}
inline void StarDefenderInfo::set_be_attack_times(::google::protobuf::uint32 value) {
  set_has_be_attack_times();
  be_attack_times_ = value;
}

// -------------------------------------------------------------------

// StarTowerInfo

// optional uint32 tower_id = 1;
inline bool StarTowerInfo::has_tower_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarTowerInfo::set_has_tower_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarTowerInfo::clear_has_tower_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarTowerInfo::clear_tower_id() {
  tower_id_ = 0u;
  clear_has_tower_id();
}
inline ::google::protobuf::uint32 StarTowerInfo::tower_id() const {
  return tower_id_;
}
inline void StarTowerInfo::set_tower_id(::google::protobuf::uint32 value) {
  set_has_tower_id();
  tower_id_ = value;
}

// optional uint32 durability = 2;
inline bool StarTowerInfo::has_durability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarTowerInfo::set_has_durability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarTowerInfo::clear_has_durability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarTowerInfo::clear_durability() {
  durability_ = 0u;
  clear_has_durability();
}
inline ::google::protobuf::uint32 StarTowerInfo::durability() const {
  return durability_;
}
inline void StarTowerInfo::set_durability(::google::protobuf::uint32 value) {
  set_has_durability();
  durability_ = value;
}

// optional uint32 monster_be_attack_times = 3;
inline bool StarTowerInfo::has_monster_be_attack_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarTowerInfo::set_has_monster_be_attack_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarTowerInfo::clear_has_monster_be_attack_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarTowerInfo::clear_monster_be_attack_times() {
  monster_be_attack_times_ = 0u;
  clear_has_monster_be_attack_times();
}
inline ::google::protobuf::uint32 StarTowerInfo::monster_be_attack_times() const {
  return monster_be_attack_times_;
}
inline void StarTowerInfo::set_monster_be_attack_times(::google::protobuf::uint32 value) {
  set_has_monster_be_attack_times();
  monster_be_attack_times_ = value;
}

// repeated .PB.StarDefenderInfo defender_list = 4;
inline int StarTowerInfo::defender_list_size() const {
  return defender_list_.size();
}
inline void StarTowerInfo::clear_defender_list() {
  defender_list_.Clear();
}
inline const ::PB::StarDefenderInfo& StarTowerInfo::defender_list(int index) const {
  return defender_list_.Get(index);
}
inline ::PB::StarDefenderInfo* StarTowerInfo::mutable_defender_list(int index) {
  return defender_list_.Mutable(index);
}
inline ::PB::StarDefenderInfo* StarTowerInfo::add_defender_list() {
  return defender_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::StarDefenderInfo >&
StarTowerInfo::defender_list() const {
  return defender_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::StarDefenderInfo >*
StarTowerInfo::mutable_defender_list() {
  return &defender_list_;
}

// -------------------------------------------------------------------

// GuildWarScore

// optional uint32 guild_id = 1;
inline bool GuildWarScore::has_guild_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuildWarScore::set_has_guild_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuildWarScore::clear_has_guild_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuildWarScore::clear_guild_id() {
  guild_id_ = 0u;
  clear_has_guild_id();
}
inline ::google::protobuf::uint32 GuildWarScore::guild_id() const {
  return guild_id_;
}
inline void GuildWarScore::set_guild_id(::google::protobuf::uint32 value) {
  set_has_guild_id();
  guild_id_ = value;
}

// optional uint32 score = 2;
inline bool GuildWarScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuildWarScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuildWarScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuildWarScore::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 GuildWarScore::score() const {
  return score_;
}
inline void GuildWarScore::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// StarInfo

// optional uint32 region_id = 1;
inline bool StarInfo::has_region_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StarInfo::set_has_region_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StarInfo::clear_has_region_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StarInfo::clear_region_id() {
  region_id_ = 0u;
  clear_has_region_id();
}
inline ::google::protobuf::uint32 StarInfo::region_id() const {
  return region_id_;
}
inline void StarInfo::set_region_id(::google::protobuf::uint32 value) {
  set_has_region_id();
  region_id_ = value;
}

// optional uint32 info_id = 2;
inline bool StarInfo::has_info_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StarInfo::set_has_info_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StarInfo::clear_has_info_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StarInfo::clear_info_id() {
  info_id_ = 0u;
  clear_has_info_id();
}
inline ::google::protobuf::uint32 StarInfo::info_id() const {
  return info_id_;
}
inline void StarInfo::set_info_id(::google::protobuf::uint32 value) {
  set_has_info_id();
  info_id_ = value;
}

// optional uint32 belong_guild_id = 3;
inline bool StarInfo::has_belong_guild_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StarInfo::set_has_belong_guild_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StarInfo::clear_has_belong_guild_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StarInfo::clear_belong_guild_id() {
  belong_guild_id_ = 0u;
  clear_has_belong_guild_id();
}
inline ::google::protobuf::uint32 StarInfo::belong_guild_id() const {
  return belong_guild_id_;
}
inline void StarInfo::set_belong_guild_id(::google::protobuf::uint32 value) {
  set_has_belong_guild_id();
  belong_guild_id_ = value;
}

// optional uint32 attack_guild_id = 4;
inline bool StarInfo::has_attack_guild_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StarInfo::set_has_attack_guild_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StarInfo::clear_has_attack_guild_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StarInfo::clear_attack_guild_id() {
  attack_guild_id_ = 0u;
  clear_has_attack_guild_id();
}
inline ::google::protobuf::uint32 StarInfo::attack_guild_id() const {
  return attack_guild_id_;
}
inline void StarInfo::set_attack_guild_id(::google::protobuf::uint32 value) {
  set_has_attack_guild_id();
  attack_guild_id_ = value;
}

// repeated uint32 took_reward_record_list = 5;
inline int StarInfo::took_reward_record_list_size() const {
  return took_reward_record_list_.size();
}
inline void StarInfo::clear_took_reward_record_list() {
  took_reward_record_list_.Clear();
}
inline ::google::protobuf::uint32 StarInfo::took_reward_record_list(int index) const {
  return took_reward_record_list_.Get(index);
}
inline void StarInfo::set_took_reward_record_list(int index, ::google::protobuf::uint32 value) {
  took_reward_record_list_.Set(index, value);
}
inline void StarInfo::add_took_reward_record_list(::google::protobuf::uint32 value) {
  took_reward_record_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StarInfo::took_reward_record_list() const {
  return took_reward_record_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StarInfo::mutable_took_reward_record_list() {
  return &took_reward_record_list_;
}

// repeated uint32 declare_war_list = 6;
inline int StarInfo::declare_war_list_size() const {
  return declare_war_list_.size();
}
inline void StarInfo::clear_declare_war_list() {
  declare_war_list_.Clear();
}
inline ::google::protobuf::uint32 StarInfo::declare_war_list(int index) const {
  return declare_war_list_.Get(index);
}
inline void StarInfo::set_declare_war_list(int index, ::google::protobuf::uint32 value) {
  declare_war_list_.Set(index, value);
}
inline void StarInfo::add_declare_war_list(::google::protobuf::uint32 value) {
  declare_war_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
StarInfo::declare_war_list() const {
  return declare_war_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
StarInfo::mutable_declare_war_list() {
  return &declare_war_list_;
}

// repeated .PB.GuildWarScore score_list = 7;
inline int StarInfo::score_list_size() const {
  return score_list_.size();
}
inline void StarInfo::clear_score_list() {
  score_list_.Clear();
}
inline const ::PB::GuildWarScore& StarInfo::score_list(int index) const {
  return score_list_.Get(index);
}
inline ::PB::GuildWarScore* StarInfo::mutable_score_list(int index) {
  return score_list_.Mutable(index);
}
inline ::PB::GuildWarScore* StarInfo::add_score_list() {
  return score_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::GuildWarScore >&
StarInfo::score_list() const {
  return score_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::GuildWarScore >*
StarInfo::mutable_score_list() {
  return &score_list_;
}

// repeated .PB.StarTowerInfo tower_list = 8;
inline int StarInfo::tower_list_size() const {
  return tower_list_.size();
}
inline void StarInfo::clear_tower_list() {
  tower_list_.Clear();
}
inline const ::PB::StarTowerInfo& StarInfo::tower_list(int index) const {
  return tower_list_.Get(index);
}
inline ::PB::StarTowerInfo* StarInfo::mutable_tower_list(int index) {
  return tower_list_.Mutable(index);
}
inline ::PB::StarTowerInfo* StarInfo::add_tower_list() {
  return tower_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::StarTowerInfo >&
StarInfo::tower_list() const {
  return tower_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::StarTowerInfo >*
StarInfo::mutable_tower_list() {
  return &tower_list_;
}

// optional uint32 last_belong_guild_id = 9;
inline bool StarInfo::has_last_belong_guild_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StarInfo::set_has_last_belong_guild_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StarInfo::clear_has_last_belong_guild_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StarInfo::clear_last_belong_guild_id() {
  last_belong_guild_id_ = 0u;
  clear_has_last_belong_guild_id();
}
inline ::google::protobuf::uint32 StarInfo::last_belong_guild_id() const {
  return last_belong_guild_id_;
}
inline void StarInfo::set_last_belong_guild_id(::google::protobuf::uint32 value) {
  set_has_last_belong_guild_id();
  last_belong_guild_id_ = value;
}

// -------------------------------------------------------------------

// RoleGuildWarData

// optional uint32 role_id = 1;
inline bool RoleGuildWarData::has_role_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleGuildWarData::set_has_role_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleGuildWarData::clear_has_role_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleGuildWarData::clear_role_id() {
  role_id_ = 0u;
  clear_has_role_id();
}
inline ::google::protobuf::uint32 RoleGuildWarData::role_id() const {
  return role_id_;
}
inline void RoleGuildWarData::set_role_id(::google::protobuf::uint32 value) {
  set_has_role_id();
  role_id_ = value;
}

// optional uint32 buy_high_star_battle_times = 2;
inline bool RoleGuildWarData::has_buy_high_star_battle_times() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleGuildWarData::set_has_buy_high_star_battle_times() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleGuildWarData::clear_has_buy_high_star_battle_times() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleGuildWarData::clear_buy_high_star_battle_times() {
  buy_high_star_battle_times_ = 0u;
  clear_has_buy_high_star_battle_times();
}
inline ::google::protobuf::uint32 RoleGuildWarData::buy_high_star_battle_times() const {
  return buy_high_star_battle_times_;
}
inline void RoleGuildWarData::set_buy_high_star_battle_times(::google::protobuf::uint32 value) {
  set_has_buy_high_star_battle_times();
  buy_high_star_battle_times_ = value;
}

// optional uint32 used_low_star_battle_times = 3;
inline bool RoleGuildWarData::has_used_low_star_battle_times() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleGuildWarData::set_has_used_low_star_battle_times() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleGuildWarData::clear_has_used_low_star_battle_times() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleGuildWarData::clear_used_low_star_battle_times() {
  used_low_star_battle_times_ = 0u;
  clear_has_used_low_star_battle_times();
}
inline ::google::protobuf::uint32 RoleGuildWarData::used_low_star_battle_times() const {
  return used_low_star_battle_times_;
}
inline void RoleGuildWarData::set_used_low_star_battle_times(::google::protobuf::uint32 value) {
  set_has_used_low_star_battle_times();
  used_low_star_battle_times_ = value;
}

// optional uint32 used_high_star_battle_times = 4;
inline bool RoleGuildWarData::has_used_high_star_battle_times() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleGuildWarData::set_has_used_high_star_battle_times() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleGuildWarData::clear_has_used_high_star_battle_times() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleGuildWarData::clear_used_high_star_battle_times() {
  used_high_star_battle_times_ = 0u;
  clear_has_used_high_star_battle_times();
}
inline ::google::protobuf::uint32 RoleGuildWarData::used_high_star_battle_times() const {
  return used_high_star_battle_times_;
}
inline void RoleGuildWarData::set_used_high_star_battle_times(::google::protobuf::uint32 value) {
  set_has_used_high_star_battle_times();
  used_high_star_battle_times_ = value;
}

// -------------------------------------------------------------------

// GuildWarData

// repeated .PB.StarInfo star_list = 1;
inline int GuildWarData::star_list_size() const {
  return star_list_.size();
}
inline void GuildWarData::clear_star_list() {
  star_list_.Clear();
}
inline const ::PB::StarInfo& GuildWarData::star_list(int index) const {
  return star_list_.Get(index);
}
inline ::PB::StarInfo* GuildWarData::mutable_star_list(int index) {
  return star_list_.Mutable(index);
}
inline ::PB::StarInfo* GuildWarData::add_star_list() {
  return star_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::StarInfo >&
GuildWarData::star_list() const {
  return star_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::StarInfo >*
GuildWarData::mutable_star_list() {
  return &star_list_;
}

// repeated .PB.RoleGuildWarData role_guild_war_data_list = 2;
inline int GuildWarData::role_guild_war_data_list_size() const {
  return role_guild_war_data_list_.size();
}
inline void GuildWarData::clear_role_guild_war_data_list() {
  role_guild_war_data_list_.Clear();
}
inline const ::PB::RoleGuildWarData& GuildWarData::role_guild_war_data_list(int index) const {
  return role_guild_war_data_list_.Get(index);
}
inline ::PB::RoleGuildWarData* GuildWarData::mutable_role_guild_war_data_list(int index) {
  return role_guild_war_data_list_.Mutable(index);
}
inline ::PB::RoleGuildWarData* GuildWarData::add_role_guild_war_data_list() {
  return role_guild_war_data_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB::RoleGuildWarData >&
GuildWarData::role_guild_war_data_list() const {
  return role_guild_war_data_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB::RoleGuildWarData >*
GuildWarData::mutable_role_guild_war_data_list() {
  return &role_guild_war_data_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_5fdefine_2eproto__INCLUDED
